{"version":3,"sources":["webpack:///./node_modules/video.js/dist/video.es.js"],"names":["global_window__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","global_window__WEBPACK_IMPORTED_MODULE_0___default","n","global_document__WEBPACK_IMPORTED_MODULE_1__","global_document__WEBPACK_IMPORTED_MODULE_1___default","tsml__WEBPACK_IMPORTED_MODULE_2__","tsml__WEBPACK_IMPORTED_MODULE_2___default","safe_json_parse_tuple__WEBPACK_IMPORTED_MODULE_3__","safe_json_parse_tuple__WEBPACK_IMPORTED_MODULE_3___default","keycode__WEBPACK_IMPORTED_MODULE_4__","keycode__WEBPACK_IMPORTED_MODULE_4___default","xhr__WEBPACK_IMPORTED_MODULE_5__","xhr__WEBPACK_IMPORTED_MODULE_5___default","videojs_vtt_js__WEBPACK_IMPORTED_MODULE_6__","videojs_vtt_js__WEBPACK_IMPORTED_MODULE_6___default","url_toolkit__WEBPACK_IMPORTED_MODULE_7__","url_toolkit__WEBPACK_IMPORTED_MODULE_7___default","m3u8_parser__WEBPACK_IMPORTED_MODULE_8__","mpd_parser__WEBPACK_IMPORTED_MODULE_9__","mux_js_lib_mp4_probe__WEBPACK_IMPORTED_MODULE_10__","mux_js_lib_mp4_probe__WEBPACK_IMPORTED_MODULE_10___default","mux_js_lib_mp4__WEBPACK_IMPORTED_MODULE_11__","mux_js_lib_tools_ts_inspector_js__WEBPACK_IMPORTED_MODULE_12__","mux_js_lib_tools_ts_inspector_js__WEBPACK_IMPORTED_MODULE_12___default","aes_decrypter__WEBPACK_IMPORTED_MODULE_13__","version","_inheritsLoose","subClass","superClass","prototype","Object","create","constructor","__proto__","_setPrototypeOf","o","p","setPrototypeOf","isNativeReflectConstruct","Reflect","construct","sham","Proxy","Date","toString","call","e","_construct","Parent","args","Class","a","push","apply","Constructor","Function","bind","instance","arguments","_assertThisInitialized","self","ReferenceError","_taggedTemplateLiteralLoose","strings","raw","slice","history","LogByTypeFactory","name","log","type","level","lvl","levels","lvlRegExp","RegExp","unshift","toUpperCase","concat","console","fn","info","test","Array","isArray","createLogger","logByType","_len","length","_key","subname","all","off","debug","warn","error","DEFAULT","hasOwnProperty","Error","filter","fname","historyItem","clear","disable","enable","_len2","_key2","_len3","_key3","_len4","_key4","createLogger$1","keys","object","isObject","each","forEach","key","reduce","initial","accum","assign","target","sources","source","value","isPlain","computedStyle","el","prop","getComputedStyle","cs","_templateObject","data","isNonBlankString","str","throwIfWhitespace","classRegExp","className","isReal","document","isEl","nodeType","isInFrame","parent","x","createQuerier","method","selector","context","querySelector","ctx","createEl","tagName","properties","attributes","content","createElement","getOwnPropertyNames","propName","val","indexOf","setAttribute","textContent","attrName","appendContent","text","innerText","prependTo","child","firstChild","insertBefore","appendChild","hasClass","element","classToCheck","classList","contains","addClass","classToAdd","add","trim","removeClass","classToRemove","remove","split","c","join","toggleClass","classToToggle","predicate","has","setAttributes","attrValue","removeAttribute","getAttributes","tag","obj","knownBooleans","attrs","i","attrVal","getAttribute","attribute","blockTextSelection","body","focus","onselectstart","unblockTextSelection","getBoundingClientRect","parentNode","rect","result","k","undefined","height","parseFloat","width","findPosition","box","left","top","docEl","documentElement","clientLeft","scrollLeft","pageXOffset","clientTop","scrollTop","pageYOffset","Math","round","getPointerPosition","event","position","boxW","offsetWidth","boxH","offsetHeight","boxY","boxX","pageY","pageX","changedTouches","y","max","min","isTextNode","emptyEl","removeChild","normalizeContent","map","createTextNode","node","insertContent","isSingleLeftClick","button","buttons","$","$$","Dom","freeze","_guid","newGUID","elData","elIdAttr","getTime","getData","id","hasData","removeData","_cleanUpEvents","elem","handlers","removeEventListener","dispatcher","detachEvent","disabled","_handleMultipleEvents","types","callback","fixEvent","returnTrue","returnFalse","isPropagationStopped","old","preventDefault","srcElement","relatedTarget","fromElement","toElement","returnValue","defaultPrevented","stopPropagation","cancelBubble","stopImmediatePropagation","isImmediatePropagationStopped","clientX","doc","clientY","which","charCode","keyCode","_supportsPassive","opts","defineProperty","get","addEventListener","passiveEvents","on","guid","hash","handlersCopy","m","options","passive","attachEvent","removeType","t","splice","trigger","elemData","ownerDocument","bubbles","targetData","one","func","this","videojs","Events","_windowLoaded","autoSetup","vids","getElementsByTagName","audios","divs","mediaEls","mediaEl","autoSetupTimeout","player","wait","vjs","setTimeout","readyState","EVENT_MAP","createStyleElement","style","setTextContent","styleSheet","cssText","uid","bound","throttle","last","now","throttled","debounce","immediate","timeout","cancel","clearTimeout","debounced","_later","EventTarget","allowedEvents_","ael","dispatchEvent","queueTrigger","_this","Map","set","oldTimeout","delete","size","isEvented","eventBusEl_","every","addEventedCallback","eventedCallbacks","isValidEventType","validateTarget","nodeName","validateEventType","validateListener","listener","normalizeListenArgs","isTargetingSelf","shift","listen","EventedMixin","_normalizeListenArgs","removeListenerOnDispose","removeRemoverOnTargetDispose","_this2","_normalizeListenArgs2","wrapper","largs","targetOrType","typeOrListener","evented","_options","eventBusKey","StatefulMixin","state","setState","stateUpdates","changes","from","to","stateful","defaultState","handleStateChanged","toTitleCase","string","charAt","titleCaseEquals","str1","str2","mergeOptions","Component","ready","play","player_","parentComponent_","options_","id_","name_","el_","children_","childIndex_","childNameIndex_","initChildren","reportTouchActivity","enableTouchActivity","_proto","dispose","localize","tokens","defaultValue","code","language","languages","primaryCode","primaryLang","localizedString","replace","match","index","ret","contentEl","contentEl_","children","getChildById","getChild","addChild","component","componentName","componentClassName","componentClass","ComponentClass","getComponent","childNodes","refNode","childFound","compEl","workingChildren","parentOptions","handleAdd","playerOptions","newChild","Tech","some","wchild","isTech","buildCSSClass","sync","isReady_","readyQueue_","triggerReady","readyQueue","show","hide","lockShowing","unlockShowing","num","skipListeners","dimension","dimensions","widthOrHeight","pxIndex","parseInt","currentDimension","computedWidthOrHeight","getPropertyValue","rule","currentDimensions","currentWidth","currentHeight","blur","handleKeyPress","emitTapEvents","couldBeTap","touchStart","firstTouch","tapMovementThreshold","touchTimeThreshold","touches","xdiff","ydiff","touchDistance","sqrt","noTap","touchTime","reportUserActivity","touchHolding","report","clearInterval","setInterval","touchEnd","timeoutId","disposeFn","interval","_this3","intervalId","requestAnimationFrame","_this4","supportsRaf_","cancelAnimationFrame","registerComponent","ComponentToRegister","reason","isComp","isPrototypeOf","components_","Player","players","playerNames","pname","Boolean","USER_AGENT","navigator","userAgent","webkitVersionMap","exec","appleWebkitVersion","pop","IS_IPAD","IS_IPHONE","IS_IPOD","IS_IOS","IOS_VERSION","IS_ANDROID","ANDROID_VERSION","major","minor","IS_NATIVE_ANDROID","IS_FIREFOX","IS_EDGE","IS_CHROME","CHROME_VERSION","IE_VERSION","IS_SAFARI","IS_ANY_SAFARI","TOUCH_ENABLED","maxTouchPoints","DocumentTouch","browser","rangeCheck","fnName","maxIndex","getRange","valueIndex","ranges","rangeIndex","createTimeRangesObj","start","end","createTimeRanges","bufferedPercent","buffered","duration","bufferedDuration","browserApi","FullscreenApi","apiMap","specApi","prefixedAPI","_i","MediaError","message","defaultMessages","status","errorTypes","1","2","3","4","5","errNum","isPromise","then","silencePromise","trackToJson_","track","acc","cues","cue","startTime","endTime","textTracksToJson","tech","trackEls","trackObjs","tracks","trackEl","json","src","textTracks","jsonToTextTracks","addedTrack","addRemoteTextTrack","addCue","textTrackConverter","MODAL_CLASS_NAME","ModalDialog","_Component","opened_","hasBeenOpened_","hasBeenFilled_","closeable","uncloseable","role","descEl_","description","tabIndex","aria-describedby","aria-hidden","aria-label","label","previouslyActiveEl_","isEventKey","close","desc","open","fillAlways","fill","wasPlaying_","paused","pauseOnOpen","pause","hadControls_","controls","conditionalFocus_","opened","conditionalBlur_","temporary","closeable_","temp","controlText","fillWith","parentEl","nextSiblingEl","nextSibling","empty","closeButton","content_","activeEl","activeElement","playerEl","handleKeyDown","focusIndex","focusableEls","focusableEls_","shiftKey","allChildren","querySelectorAll","HTMLAnchorElement","HTMLAreaElement","hasAttribute","HTMLInputElement","HTMLSelectElement","HTMLTextAreaElement","HTMLButtonElement","HTMLIFrameElement","HTMLObjectElement","HTMLEmbedElement","TrackList","_EventTarget","tracks_","addTrack","removeTrack","rtrack","l","getTrackById","change","addtrack","removetrack","disableOthers","list","enabled","AudioTrackList","_TrackList","changing_","enabledChange_","disableOthers$1","selected","VideoTrackList","selectedChange_","TextTrackList","queueChange_","triggerSelectedlanguagechange","triggerSelectedlanguagechange_","nonLanguageTextTrackKind","kind","selectedlanguagechange_","HtmlTrackElementList","trackElements","trackElements_","addTrackElement_","trackElement","getTrackElementByTrack_","trackElement_","removeTrackElement_","TextTrackCueList","setCues_","length_","oldLength","cues_","defineProp","getCueById","VideoTrackKind","alternative","captions","main","sign","subtitles","commentary","AudioTrackKind","descriptions","main-desc","translation","TextTrackKind","chapters","metadata","TextTrackMode","hidden","showing","Track","trackProps","_loop","parseUrl","url","props","href","div","addToBody","host","protocol","innerHTML","details","location","getAbsoluteURL","getFileExtension","path","splitPathRe","pathParts","toLowerCase","isCrossOrigin","winLoc","urlInfo","srcProtocol","crossOrigin","Url","parseCues","srcContent","parser","WebVTT","Parser","vttjs","StringDecoder","errors","oncue","onparsingerror","onflush","parse","groupCollapsed","groupEnd","flush","loadTrack","uri","cors","err","response","responseBody","loaded_","tech_","loadHandler","errorHandler","TextTrack","_Track","settings","srclang","mode","default_","default","activeCues_","activeCues","changed","timeupdateHandler","defineProperties","newMode","ct","currentTime","active","originalCue","VTTCue","originalCue_","removeCue","_removeCue","cuechange","AudioTrack","newEnabled","VideoTrack","newSelected","NONE","LOADING","LOADED","ERROR","HTMLTrackElement","load","NORMAL","audio","ListClass","TrackClass","capitalName","video","getterName","privateName","REMOTE","remoteText","remoteTextEl","ALL","createTrackHelper","names","hasStarted_","featuresProgressEvents","manualProgressOn","featuresTimeupdateEvents","manualTimeUpdatesOn","nativeCaptions","nativeTextTracks","featuresNativeTextTracks","emulateTextTracks","autoRemoteTextTracks_","initTrackListeners","nativeControlsForTouch","triggerSourceset","onDurationChange","manualProgress","trackProgress","manualProgressOff","stopTrackingProgress","progressInterval","numBufferedPercent","bufferedPercent_","duration_","manualTimeUpdates","trackCurrentTime","stopTrackingCurrentTime","manualTimeUpdatesOff","currentTimeInterval","manuallyTriggered","clearTracks","removeRemoteTextTrack","cleanupAutoTextTracks","reset","error_","played","setCurrentTime","trackListChanges","addWebVttScript_","_this5","script","onload","onerror","_this6","remoteTracks","remoteTextTracks","handleAddTrack","handleRemoveTrack","updateDisplay","textTracksChanges","addTextTrack","createRemoteTextTrack","manualCleanup","_this7","htmlTrackElement","remoteTextTrackEls","getVideoPlaybackQuality","setPoster","playsinline","setPlaysinline","overrideNativeAudioTracks","overrideNativeVideoTracks","canPlayType","canPlaySource","srcObj","registerTech","techs_","defaultTechOrder_","getTech","featuresVolumeControl","featuresMuteControl","featuresFullscreenResize","featuresPlaybackRate","featuresSourceset","withSourceHandlers","_Tech","registerSourceHandler","handler","sourceHandlers","can","selectSourceHandler","canHandleSource","sh","deferrable","originalFn","sourceHandler_","setSource","nativeSourceHandler","disposeSourceHandler","currentSource_","handleSource","middlewares","middlewareInstances","TERMINATOR","use","middleware","next","setSourceHelper","setTech","mw","reduceRight","middlewareIterator","set$1","arg","mediate","callMethod","middlewareValue","terminated","executeRight","allowedGetters","seekable","allowedSetters","allowedMediators","mws","clearCacheForPlayer","getOrCreateFactory","mwFactory","_mws$i","mwf","mwi","lastRun","_middleware","mwrest","_src","MimetypesKind","opus","ogv","mp4","mov","m4v","mkv","mp3","aac","oga","m3u8","jpg","jpeg","gif","png","svg","webp","getMimetype","ext","mimetype","findMimetype","cache_","matchingSources","s","filterSource","newsrc","srcobj","fixSource","MediaLoader","j","techOrder","techName","isSupported","loadTech_","ClickableComponent","tabIndex_","createControlTextEl","controlTextEl_","aria-live","controlText_","localizedText","nonIconControl","enabled_","handleClick","handleFocus","handleBlur","PosterImage","_ClickableComponent","update","poster","setSrc","backgroundImage","darkGray","lightGray","fontMap","monospace","sansSerif","serif","monospaceSansSerif","monospaceSerif","proportionalSansSerif","proportionalSerif","casual","smallcaps","constructColor","color","opacity","hex","tryUpdateStyle","TextTrackDisplay","updateDisplayHandler","toggleDisplay","preselectTrack","firstDesc","firstCaptions","preferredTrack","modes","trackList","userPref","selectedLanguage","aria-atomic","clearDisplay","processCues","descriptionsTrack","captionsSubtitlesTrack","updateForTrack","textTrackSettings","overrides","getValues","cueDiv","displayState","textOpacity","backgroundColor","backgroundOpacity","windowColor","windowOpacity","edgeStyle","textShadow","fontPercent","fontSize","bottom","fontFamily","fontVariant","LoadingSpinner","isAudio","playerType","dir","Button","BigPlayButton","_Button","mouseused_","handleMouseDown","playPromise","cb","playToggle","playFocus","CloseButton","PlayToggle","replay","handlePlay","handlePause","handleEnded","handleSeeked","defaultImplementation","seconds","guide","floor","h","gm","gh","isNaN","Infinity","implementation","setFormatTime","customImplementation","resetFormatTime","formatTime","TimeDisplay","throttledUpdateContent","updateContent","labelText_","updateTextNode_","textNode_","formattedTime_","formatTime_","time","updateFormattedTime_","formattedTime","CurrentTimeDisplay","_TimeDisplay","scrubbing","getCache","DurationDisplay","TimeDivider","RemainingTimeDisplay","remainingTimeDisplay","remainingTime","LiveDisplay","updateShowing","SeekToLive","updateLiveEdgeStatus","liveTracker","textEl_","atLiveEdge","seekToLiveEdge","Slider","bar","barName","vertical","playerEvent","handleMouseMove","handleMouseUp","aria-valuenow","aria-valuemin","aria-valuemax","progress","getPercent","percentage","toFixed","calculateDistance","stepBack","stepForward","bool","vertical_","LoadProgressBar","partEls_","isLive","seekableEnd","bufferedEnd","controlTextPercentage","percentify","rounded","percent","part","TimeTooltip","seekBarRect","seekBarPoint","tooltipRect","playerRect","seekBarPointPx","spaceLeftOfPoint","spaceRightOfPoint","right","pullTooltipBy","updateTime","rafId_","liveWindow","secondsBehind","PlayProgressBar","timeTooltip","MouseTimeDisplay","STEP_SECONDS","PAGE_KEY_MULTIPLIER","UPDATE_REFRESH_INTERVAL","SeekBar","_Slider","setEventHandlers_","updateInterval","enableInterval_","disableInterval_","toggleVisibility_","update_","liveCurrentTime","offsetParent","getCurrentTime_","seekableStart","videoWasPlaying","newTime","distance","mouseTimeDisplay","handleAction","gotoFraction","codes","ProgressControl","throttledHandleMouseSeek","handleMouseSeek","seekBar","seekBarEl","FullscreenToggle","handleFullscreenChange","fullscreenEnabled","isFullscreen","exitFullscreen","requestFullscreen","checkVolumeSupport","VolumeLevel","VolumeBar","updateLastVolume_","updateARIAAttributes","checkMuted","volume","muted","ariaValue","volumeAsPercentage_","volumeBeforeDrag","lastVolume_","VolumeControl","volumeBar","throttledHandleMouseMove","orientationClass","checkMuteSupport","MuteToggle","vol","lastVolume","volumeToSet","updateIcon_","updateControlText_","soundOff","VolumePanel","inline","volumeControl","volumePanelState_","sliderActive_","sliderInactive_","muteToggle","Menu","menuButton_","menuButton","focusedChild_","boundHandleBlur_","boundHandleTapClick_","handleTapClick","addEventListenerForItem","removeEventListenerForItem","addItem","childComponent","contentElType","append","btn","buttonPressed_","unpressButton","childComponents","foundComponent","stepChild","item","haveTitle","MenuButton","buttonClass","menu","handleSubmenuKeyPress","createMenu","items","hideThreshold_","title","titleEl","titleComponent","createItems","buildWrapperCSSClass","menuButtonClass","pressButton","TrackButton","_MenuButton","updateHandler","MenuKeys","MenuItem","selectable","isSelected_","multiSelectable","_selected","TextTrackMenuItem","_MenuItem","changeHandler","handleTracksChange","selectedLanguageChangeHandler","handleSelectedLanguageChange","onchange","Event","createEvent","initEvent","referenceTrack","kinds","shouldBeSelected","OffTextTrackMenuItem","_TextTrackMenuItem","allHidden","TextTrackButton","_TrackButton","TrackMenuItem","label_","kinds_","kind_","ChaptersTrackMenuItem","ChaptersButton","_TextTrackButton","track_","setTrack","findChaptersTrack","updateHandler_","remoteTextTrackEl","_remoteTextTrackEl","getMenuCaption","mi","DescriptionsButton","SubtitlesButton","CaptionSettingsMenuItem","CaptionsButton","SubsCapsMenuItem","SubsCapsButton","language_","AudioTrackMenuItem","audioTracks","AudioTrackButton","PlaybackRateMenuItem","rate","playbackRate","PlaybackRateMenuButton","updateVisibility","updateLabel","labelEl_","rates","playbackRates","currentRate","newRate","playbackRateSupported","Spacer","CustomControlSpacer","_Spacer","ControlBar","ErrorDisplay","_ModalDialog","LOCAL_STORAGE_KEY","COLOR_BLACK","COLOR_BLUE","COLOR_CYAN","COLOR_GREEN","COLOR_MAGENTA","COLOR_RED","COLOR_WHITE","COLOR_YELLOW","OPACITY_OPAQUE","OPACITY_SEMI","OPACITY_TRANS","selectConfigs","v","Number","parseOptionValue","getSelectedOptionValue","selectedIndex","setSelectedOption","TextTrackSettings","endDialog","setDefaults","persistTextTrackSettings","saveSettings","config","restoreSettings","createElSelect_","legendId","selectLabelledbyIds","optionId","createElFgColor_","createElBgColor_","createElWinColor_","createElColors_","createElFont_","createElControls_","defaultsDescription","setValues","values","JSON","localStorage","getItem","setItem","stringify","removeItem","ttDisplay","controlBar","subsCapsBtn","subsCapsButton","ccBtn","captionsButton","ResizeManager","RESIZE_OBSERVER_AVAILABLE","ResizeObserver","loadListener_","resizeObserver_","debouncedHandler_","resizeHandler","observe","contentWindow","unloadListener_","unobserve","disconnect","resizeObserver","LiveTracker","reset_","handleDurationchange","handleVisibilityChange","stopTracking","startTracking","isBehind_","timeupdateSeen_","seekableIncrement","seekableIncrement_","liveEdgeWindow","trackLive_","pastSeekEnd_","newSeekEnd","lastSeekEnd_","abs","pastSeekEnd","behindLiveEdge","behindLiveEdge_","isTracking","trackingInterval_","handleTimeupdate","seekableEnds","sort","seekableStarts","sourcesetLoad","srcUrls","innerHTMLDescriptorPolyfill","cloneNode","dummy","docFrag","createDocumentFragment","Element","getDescriptor","priority","descriptor","getOwnPropertyDescriptor","enumerable","configurable","getInnerHTMLDescriptor","HTMLMediaElement","firstSourceWatch","resetSourceWatch_","innerDescriptor","appendWrapper","appendFn","retval","srcDescriptorPolyfill","getSrcDescriptor","setupSourceset","resetSourceset_","srcDescriptor","oldSetAttribute","oldLoad","currentSrc","_templateObject$1","Html5","crossoriginTracks","initNetworkState_","handleLateInit_","enableSourceset","setupSourcesetHandling_","hasChildNodes","nodes","nodesLength","removeNodes","proxyNativeTracks_","restoreMetadataTracksInIOSNativePlayer_","setControls","proxyWebkitFullscreen_","disposeMediaElement","metadataTracksPreFullscreenState","takeMetadataTrackSnapshot","storedMode","restoreTrackMode","storedTrack","overrideNative_","override","lowerCaseType","eventName","elTracks","proxyNativeTracksForType_","techTracks","listeners","currentTarget","removeOldTracks","removeTracks","found","playerElIngest","movingMediaElementInDOM","clone","tagAttributes","techId","class","playerId","preload","settingsAttrs","attr","networkState","loadstartFired","setLoadstartFired","triggerLoadstart","eventsToTrigger","checkProgress","NaN","endFn","beginFn","webkitPresentationMode","supportsFullScreen","webkitEnterFullScreen","enterFullScreen","HAVE_METADATA","exitFullScreen","webkitExitFullScreen","resetMediaElement","videoPlaybackQuality","webkitDroppedFrameCount","webkitDecodedFrameCount","droppedVideoFrames","totalVideoFrames","performance","creationTime","timing","navigationStart","TEST_VID","canControlVolume","canMuteVolume","canControlPlaybackRate","canOverrideAttributes","noop","supportsNativeTextTracks","supportsNativeVideoTracks","videoTracks","supportsNativeAudioTracks","featuresNativeVideoTracks","featuresNativeAudioTracks","mpegurlRE","_templateObject$2","patchCanPlayType","unpatchCanPlayType","r","TECH_EVENTS_RETRIGGER","TECH_EVENTS_QUEUE","canplay","canplaythrough","playing","seeked","BREAKPOINT_ORDER","BREAKPOINT_CLASSES","substring","DEFAULT_BREAKPOINTS","tiny","xsmall","small","medium","large","xlarge","huge","getTagSettings","closest","boundDocumentFullscreenChange_","documentFullscreenChange_","boundFullWindowOnEscKey_","fullWindowOnEscKey","boundHandleKeyPress_","isPosterFromTech_","queuedCallbacks_","userActive_","languagesToLower","name$$1","languages_","resetCache_","poster_","controls_","changingSrc_","playCallbacks_","playTerminatedQueue_","autoplay","plugins","scrubbing_","fluid_","updateStyleEl_","playerOptionsCopy","middleware_","flexNotSupported_","majorVersion","userActive","listenForUserActivity_","handleStageClick_","breakpoints","responsive","fullscreenchange","styleEl_","playerElIngest_","divEmbed","tabindex","VIDEOJS_NO_DYNAMIC_STYLE","defaultsStyleEl","head","fill_","fluid","aspectRatio","links","linkEl","_dimension","privDimension","parsedVal","ratio","aspectRatio_","idClass","videoWidth","videoHeight","ratioParts","ratioMultiplier","width_","height_","_width","_height","techEl","unloadTech_","titleTechName","camelTechName","techName_","techOptions","loop","vtt.js","canOverridePoster","techCanOverridePoster","TechClass","handleTechReady_","textTracksJson_","eventObj","seeking","handleTechLoadStart_","handleTechSourceset_","handleTechWaiting_","handleTechEnded_","handleTechSeeking_","handleTechPlay_","handleTechFirstPlay_","handleTechPause_","handleTechDurationChange_","handleTechFullscreenChange_","handleTechError_","handleTechPosterChange_","handleTechTextData_","handleTechRateChange_","usingNativeControls","techGet_","addTechControlsListeners_","safety","removeTechControlsListeners_","handleTechClick_","handleTechDoubleClick_","handleTechTouchStart_","handleTechTouchMove_","handleTechTouchEnd_","handleTechTap_","techCall_","hasStarted","manualAutoplay_","promise","previouslyMuted","restoreMuted","mutedPromise","catch","updateSourceCaches_","sourceElSources","sourceEls","matchingSourceEls","sourceObj","updateSourceCaches","playerSrc","currentSource","eventSrc","lastSource_","updateCache","techSrc","techGet","request","lastPlaybackRate","queued","timeWhenWaiting","timeUpdateListener","handleTechCanPlay_","handleTechCanPlayThrough_","handleTechPlaying_","handleTechSeeked_","starttime","inAllowedEls","userActions","doubleClick","userWasActive","toggleFullscreenClass_","fsApi","fullscreenElement","matches","fullscreen","inactivityTimeout","defaultPlaybackRate","media","_this8","PromiseClass","Promise","resolve","play_","_this9","isSrcReady","waitToPlay_","runPlayTerminatedQueue_","runPlayCallbacks_","queue","q","callbacks","isScrubbing","liveui","percentAsDecimal","_muted","defaultMuted","_defaultMuted","isFS","isFullscreen_","enterFullWindow","exitFullWindow","isFullWindow","docOrigOverflow","overflow","hotkeys","handleHotkeys","_hotkeys$fullscreenKe","fullscreenKey","keydownEvent","_hotkeys$muteKey","muteKey","_hotkeys$playPauseKey","playPauseKey","FSToggle","selectSource","foundSourceAndTech","_this10","techs","_ref","findFirstPassingTechSourcePair","outerArray","innerArray","tester","outerChoice","innerChoice","flip","b","finder","_ref2","sourceOrder","_this11","middlewareSource","src_","notSupportedMessage","_this12","sourceTech","_this13","doReset_","resetControlBarUI_","resetProgressBar_","resetPlaybackRate_","resetVolumeBar_","_this$controlBar","durationDisplay","currentSources","currentType","techAutoplay","newPoster","usingNativeControls_","errorDisplay","userActivity_","mouseInProgress","lastMoveX","lastMoveY","handleActivity","screenX","screenY","isAudio_","_obj","String","toJSON","createModal","_this14","modal","updateCurrentBreakpoint_","currentBreakpoint","candidateBreakpoint","maxWidth","breakpoints_","breakpoint_","removeCurrentBreakpoint_","currentBreakpointClass","_breakpoints","responsive_","current","loadMedia","_this15","_this$cache_$media","artwork","tt","getMedia","baseOptions","tagOptions","dataSetup","_safeParseTuple","childName","html5","flash","userLanguage","BASE_PLUGIN_NAME","PLUGIN_CACHE_KEY","pluginStorage","pluginExists","getPlugin","markPluginAsActive","triggerSetupEvent","before","createBasicPlugin","plugin","basicPluginWrapper","createPluginFactory","PluginSubClass","getEventHash","Plugin","VERSION","isBasic","registerPlugin","deregisterPlugin","getPlugins","getPluginVersion","usingPlugin","hasPlugin","_inherits$1","TypeError","writable","super_","extend","subClassMethods","methods","normalizeId","videojs$1","getPlayer","defaultView","hooks","hookFunction","PlayerComponent","hooks_","hook","hookOnce","original","removeHook","style$1","getPlayers","nId","_tag","_player","getAllPlayers","comp","writeable","addLanguage","_mergeOptions","createTimeRange","xhr","dom","resolveUrl","baseURL","relativeURL","buildAbsoluteURL","resolveManifestRedirect","handleManifestRedirect","req","responseURL","classCallCheck","createClass","protoProps","staticProps","get$1","property","receiver","getPrototypeOf","getter","inherits","possibleConstructorReturn","slicedToArray","sliceIterator","arr","_arr","_n","_d","_e","_s","Symbol","iterator","done","mergeOptions$1","EventTarget$1","log$1","forEachMediaGroup","master","mediaType","groupKey","mediaGroups","labelKey","mediaProperties","updateSegments","offset","resolveSegmentUris","segment","baseUri","resolvedUri","updateMaster","playlist","playlists","segments","endList","mediaSequence","mergedPlaylist","setupMediaPlaylists","resolveMediaGroupUris","refreshDelay","lastSegment","delay","targetDuration","PlaylistLoader","srcUrl","hls","_options$withCredenti","withCredentials","_options$handleManife","handleManifestRedirects","hls_","hlsOptions","customTagParsers","customTagMappers","playlistRequestError","haveMetadata","xhr$$1","startingState","responseText","customParser","addParser","mapper","addTagMapper","manifest","media_","mediaUpdateTimeout","stopRequest","oldRequest","onreadystatechange","abort","mediaChange","started","isFinalRendition","AUDIO","VIDEO","CLOSED-CAPTIONS","SUBTITLES","backwardDuration","endSequence","precise","forwardDuration","intervalDuration","expired","backward","forward","totalDuration","sumDurations","startIndex","endIndex","durations","safeLiveIndex","distanceFromEnd","safeDistance","playlistEnd","useSafeLiveEnd","isWholeNumber","roundSignificantDigit","increment","numDecimalDigits","scale","pow","ceilLeastSignificantDigit","floorLeastSignificantDigit","getMediaInfoForTime","numSegments","mediaIndex","isBlacklisted","excludeUntil","isIncompatible","isEnabled","blacklisted","isDisabled","isAes","isFmp4","estimateSegmentRequestTime","segmentDuration","bandwidth","bytesReceived","BANDWIDTH","isLowestEnabledRendition","currentBandwidth","MAX_VALUE","Playlist","videojsXHR","mergeOptions$1$1","xhrFactory","XhrFunction","beforeRequest","Hls","newOptions","reqResponse","responseTime","roundTripTime","requestTime","byteLength","headers","responseHeaders","timedout","aborted","statusCode","originalAbort","textRange","range","formatHexString","formatAsciiString","fromCharCode","createTransferableMessage","transferable","ArrayBuffer","isView","bytes","buffer","byteOffset","initSegmentId","initSegment","byterange","hexDump","step","ascii","tagDump","textRanges","utils","SEGMENT_END_FUDGE_PERCENT","playerTimeToProgramTime","playerTime","dateTimeObject","transmuxerPrependedSeconds","videoTimingInfo","transmuxedStart","transmuxedPresentationStart","startOfSegment","offsetFromSegmentStart","originalSegmentVideoDuration","transmuxedPresentationEnd","findSegmentForProgramTime","programTime","nextSegmentStart","lastSegmentStart","lastSegmentDuration","lastSegmentEnd","estimatedStart","findSegmentForPlayerTime","segmentEnd","getOffsetFromTimestamp","comparisonTimeStamp","segmentDateTime","programDateTime","segmentTimeEpoch","programTimeEpoch","verifyProgramDateTimeTags","getProgramTime","_ref$time","matchedSegment","seekTime","programTimeObject","mediaSeconds","toISOString","seekToProgramTime","_ref2$retryCount","retryCount","seekTo","_ref2$pauseAfterSeek","pauseAfterSeek","mediaOffset","seekToTime","seekedCallback","TIME_FUDGE_FACTOR","SAFE_TIME_DELTA","filterRanges","timeRanges","results","findRange","findNextRange","findGaps","printableRange","strArr","timeUntilRebuffer","timeRangesToArray","timeRangesList","createTextTracksIfNecessary","sourceBuffer","mediaSource","trackId","inbandTextTracks_","captionStreams","metadataTrack_","inBandMetadataTrackDispatchType","dispatchType","removeCuesFromTrack","deprecateOldCue","frame","privateData","durationOfVideo","dur","addTextTrackData","sourceHandler","captionArray","metadataArray","Cue","WebKitDataCue","caption","stream","timestampOffset","videoDuration","mediaSource_","cueTime","frames","cuesArray","cuesGroupedByStartTime","timeSlot","sortedStartTimes","idx","cueGroup","nextTime","win","window","TARGET","SCRIPT_TYPE","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","URL","webkitURL","msURL","Worker","shimWorker","filename","forceFallback","objURL","createSourceObject","wrapTerminate","selfShim","postMessage","onmessage","isThisThread","testWorker","testArray","Uint8Array","revokeObjectURL","terminate","createObjectURL","Blob","blob","getBlob","worker","term","TransmuxWorker","document$$1","dinf","esds","ftyp","mdat","mfhd","minf","moof","moov","mvex","mvhd","trak","tkhd","mdia","mdhd","hdlr","sdtp","stbl","stsd","traf","trex","trun","MAJOR_BRAND","MINOR_VERSION","AVC1_BRAND","VIDEO_HDLR","AUDIO_HDLR","HDLR_TYPES","VMHD","SMHD","DREF","STCO","STSC","STSZ","STTS","UINT32_MAX","avc1","avcC","btrt","dref","mp4a","smhd","stco","stsc","stsz","stts","styp","tfdt","tfhd","vmhd","charCodeAt","view","payload","DataView","setUint32","audioobjecttype","samplingfrequencyindex","channelcount","samplerate","sequenceNumber","trackFragments","boxes","flags","samples","dependsOn","isDependedOn","hasRedundancy","videoSample","audioSample","sps","pps","sequenceParameterSets","pictureParameterSets","profileIdc","profileCompatibility","levelIdc","samplesize","trackFragmentHeader","trackFragmentDecodeTime","trackFragmentRun","sampleDependencyTable","dataOffset","upperWordBaseMediaDecodeTime","lowerWordBaseMediaDecodeTime","baseMediaDecodeTime","audioTrun","videoTrun","trunHeader","durationPresent","sizePresent","flagsPresent","compositionTimeOffset","sample","isLeading","paddingValue","isNonSyncSample","degradationPriority","_findBox","parseType","timescale","getVideoTrackIds","mp4Generator","fileType","movie","toUnsigned","bin","toUnsigned$1","subresults","subarray","init","traks","fragment","trafs","baseTimes","baseTime","isFinite","videoTrackIds","hdlrs","tkhds","handlerType","getUint8","getUint32","probe","findBox","Stream","pipe","destination","flushSource","secondsToVideoTs","secondsToAudioTs","videoTsToSeconds","audioTsToSeconds","audioTsToVideoTs","videoTsToAudioTs","groupNalsIntoFrames","nalUnits","currentNal","currentFrame","nalUnitType","dts","pts","keyFrame","groupFramesIntoGops","currentGop","gops","nalCount","extendFirstKeyFrame","createDefaultSample","sampleForFrame","generateSampleTable","baseDataOffset","concatenateNalData","nalsByteLength","numberOfNals","totalByteLength","frameUtils","highPrefix","lowPrefix","zeroFill","count","makeTable","metaTable","coneOfSilence","96000","88200","64000","48000","44100","32000","24000","16000","12000","11025","8000","silence","ONE_SECOND_IN_TS","sampleRate","timestamp","clock","ONE_SECOND_IN_TS$1","sumFrameByteLengths","array","currentObj","sum","prefixWithSilence","audioAppendStartTs","videoBaseMediaDecodeTime","baseMediaDecodeTimeTs","silentFrame","frameDuration","audioGapDuration","audioFillFrameCount","audioFillDuration","ceil","trimAdtsFramesByEarliestDts","adtsFrames","earliestAllowedDts","minSegmentDts","minSegmentPts","generateSampleTable$1","concatenateFrameData","audioFrameUtils","ONE_SECOND_IN_TS$2","collectDtsInfo","timelineStartInfo","maxSegmentPts","maxSegmentDts","clearDtsInfo","calculateTrackBaseMediaDecodeTime","keepOriginalTimestamps","trackDecodeInfo","USER_DATA_REGISTERED_ITU_T_T35","RBSP_TRAILING_BITS","parseSei","payloadType","payloadSize","parseUserData","sei","parseCaptionPackets","userData","ccData","discardEmulationPreventionBytes","newLength","newData","emulationPreventionBytesPositions","sourceIndex","captionPacketParser","CaptionStream","captionPackets_","ccStreams_","Cea608Stream","cc","newCaptionPackets","escapedRBSP","latestDts_","ignoreNextEqualDts_","numSameDts_","presortIndex","packet","dispatchCea608Packet","activeCea608Channel_","ccStream","setsChannel1Active","setsChannel2Active","CHARACTER_TRANSLATION","42","92","94","95","96","123","124","125","126","127","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567","568","569","570","571","572","573","574","575","800","801","802","803","804","805","806","807","808","809","810","811","812","813","814","815","816","817","818","819","820","821","822","823","824","825","826","827","828","829","830","831","getCharFromCode","BOTTOM_ROW","ROWS","createDisplayBuffer","field","dataChannel","field_","dataChannel_","setConstants","swap","char0","char1","lastControlCode_","PADDING_","RESUME_CAPTION_LOADING_","mode_","END_OF_CAPTION_","clearFormatting","flushDisplayed","displayed_","nonDisplayed_","startPts_","ROLL_UP_2_ROWS_","rollUpRows_","setRollUp","ROLL_UP_3_ROWS_","ROLL_UP_4_ROWS_","CARRIAGE_RETURN_","shiftRowsUp_","BACKSPACE_","row_","ERASE_DISPLAYED_MEMORY_","ERASE_NON_DISPLAYED_MEMORY_","RESUME_DIRECT_CAPTIONING_","isSpecialCharacter","column_","isExtCharacter","isMidRowCode","addFormatting","isOffsetControlCode","isPAC","row","formatting_","isColorPAC","isNormalChar","startPts","endPts","topRow_","BASE_","EXT_","CONTROL_","OFFSET_","char","newBaseRow","format","reverse","popOn","baseRow","rollUp","paintOn","captionStream","streamTypes","H264_STREAM_TYPE","ADTS_STREAM_TYPE","METADATA_STREAM_TYPE","MAX_TS","RO_THRESH","handleRollover","reference","direction","TimestampRolloverStream","lastDTS","referenceDTS","type_","discontinuity","_MetadataStream","timestampRolloverStream","percentEncode","parseUtf8","decodeURIComponent","parseIso88591","unescape","parseSyncSafeInteger","tagParsers","TXXX","WXXX","PRIV","owner","tagSize","bufferSize","chunk","frameStart","frameSize","frameHeader","dataAlignmentIndicator","d","timeStamp","_TransportPacketStream","_TransportParseStream","_ElementaryStream","metadataStream","TimestampRolloverStream$1","MP2T_PACKET_LENGTH","SYNC_BYTE","bytesInBuffer","everything","parsePsi","parsePat","parsePmt","packetsWaitingForPmt","programMapTable","psi","payloadUnitStartIndicator","pat","section_number","last_section_number","pmtPid","pmt","sectionLength","tableEnd","programInfoLength","timed-metadata","streamType","pid","processPes_","STREAM_TYPES","h264","adts","timedMetadata","parsePes","pes","ptsDtsFlags","packetLength","flushStream","stream$$1","forceFlush","packetData","packetFlushable","codec","m2ts","PAT_PID","TransportPacketStream","TransportParseStream","ElementaryStream","MetadataStream","_AdtsStream","m2ts_1","ADTS_SAMPLING_FREQUENCIES","frameLength","protectionSkipBytes","frameEnd","oldBuffer","sampleCount","adtsFrameDuration","frameNum","ExpGolomb","workingData","workingBytesAvailable","workingWord","workingBitsAvailable","bitsAvailable","loadWord","workingBytes","availableBytes","skipBits","skipBytes","readBits","bits","valu","skipLeadingZeros","leadingZeroCount","skipUnsignedExpGolomb","skipExpGolomb","readUnsignedExpGolomb","clz","readExpGolomb","readBoolean","readUnsignedByte","_H264Stream","_NalByteStream","PROFILES_WITH_OPTIONAL_SPS_DATA","expGolomb","syncPoint","swapBuffer","100","110","122","244","44","83","86","118","128","138","139","134","currentPts","currentDts","readSequenceParameterSet","skipScalingList","nalByteStream","expGolombDecoder","deltaScale","lastScale","nextScale","chromaFormatIdc","picOrderCntType","numRefFramesInPicOrderCntCycle","picWidthInMbsMinus1","picHeightInMapUnitsMinus1","frameMbsOnlyFlag","scalingListCount","sarRatio","aspectRatioIdc","frameCropLeftOffset","frameCropRightOffset","frameCropTopOffset","frameCropBottomOffset","sarScale","_AacStream","H264Stream","NalByteStream","ADTS_SAMPLING_FREQUENCIES$1","isLikelyAacData","parseSyncSafeInteger$1","percentEncode$1","parseIso88591$1","parseId3TagSize","header","byteIndex","returnSize","footerPresent","parseAdtsSize","lowThree","middle","highTwo","parseType$1","parseSampleRate","parseAacTimestamp","setTimestamp","bytesLeft","tempLength","_VideoSegmentStream","_AudioSegmentStream","_Transmuxer","_CoalesceStream","isLikelyAacData$1","AUDIO_PROPERTIES","VIDEO_PROPERTIES","arrayEquals","generateVideoSegmentTimingInfo","startDts","endDts","prependedContentDuration","ptsOffsetFromDts","decodeDuration","presentationDuration","setEarliestDts","earliestDts","setVideoBaseMediaDecodeTime","setAudioAppendStart","gopsToAlignWith","minPTS","gopCache_","nalUnit","gopForFusion","firstGop","lastGop","resetStream_","getGopForFusion_","alignedGops","alignGopsAtEnd","alignGopsAtEnd_","alignGopsAtStart_","gop","dtsDistance","nearestGopObj","currentGopObj","halfSecond","allowableOverlap","nearestDistance","alignIndex","gopIndex","align","alignEndIndex","matchFound","trimIndex","total","alignGopsWith","newGopsToAlignWith","numberOfTracks","remux","remuxTracks","pendingTracks","videoTrack","pendingBoxes","pendingCaptions","pendingMetadata","pendingBytes","emittedTracks","output","audioTrack","id3","timelineStartPts","hasFlushed","transmuxPipeline_","setupAacPipeline","pipeline","aacStream","audioTimestampRolloverStream","timedMetadataTimestampRolloverStream","adtsStream","coalesceStream","headOfPipeline","audioSegmentStream","setupTsPipeline","packetStream","parseStream","elementaryStream","videoTimestampRolloverStream","h264Stream","videoSegmentStream","setBaseMediaDecodeTime","isAac","resetCaptions","inspectMp4","_textifyMp","transmuxer","Transmuxer","VideoSegmentStream","AudioSegmentStream","parseType$2","parseMp4Date","parseSampleFlags","nalParse","avcStream","avcView","parse$$1","dataReferenceIndex","getUint16","horizresolution","vertresolution","frameCount","depth","numOfPictureParameterSets","nalSize","configurationVersion","avcProfileIndication","avcLevelIndication","lengthSizeMinusOne","numOfSequenceParameterSets","bufferSizeDB","maxBitrate","avgBitrate","esId","streamPriority","decoderConfig","objectProfileIndication","decoderConfigDescriptor","audioObjectType","samplingFrequencyIndex","channelConfiguration","majorBrand","minorVersion","compatibleBrands","dataReferences","escape","nals","modificationTime","streamDescriptor","matrix","Uint32Array","nextTrackId","pdin","initialDelay","sidx","references","referenceId","earliestPresentationTime","firstOffset","referenceCount","referenceType","referencedSize","subsegmentDuration","startsWithSap","sapType","sapDeltaTime","balance","chunkOffsets","entryCount","sampleToChunks","firstChunk","samplesPerChunk","sampleDescriptionIndex","sampleDescriptions","sampleSize","entries","timeToSamples","sampleDelta","baseDataOffsetPresent","sampleDescriptionIndexPresent","defaultSampleDurationPresent","defaultSampleSizePresent","defaultSampleFlagsPresent","durationIsEmpty","defaultBaseIsMoof","defaultSampleDuration","defaultSampleSize","defaultSampleFlags","baseDataOffsetIsMoof","layer","alternateGroup","defaultSampleDescriptionIndex","sampleDependsOn","sampleIsDependedOn","sampleHasRedundancy","samplePaddingValue","sampleIsDifferenceSample","sampleDegradationPriority","dataOffsetPresent","firstSampleFlagsPresent","sampleDurationPresent","sampleSizePresent","sampleFlagsPresent","sampleCompositionTimeOffsetPresent","getInt32","url ","graphicsmode","opcolor","Uint16Array","ab","z","inspectedMp4","indent","prefix","byte","line","mp4Inspector","inspect","textify","parseTfdt","parseHdlr","parseTfhd","parseTrun","parseSidx","discardEmulationPreventionBytes$1","CaptionStream$1","mapToSample","approximateOffset","findSeiNals","seiNal","lastMatchedSample","matchingSample","parseSamples","truns","allSamples","trackRun","parseCaptionNals","videoTrackId","mdats","captionNals","mdatTrafPairs","matchingTraf","pair","seiNals","headerInfo","parseEmbeddedCaptions","CaptionParser$$1","captionStream$$1","segmentCache","parsedCaptions","isInitialized","isNewInit","timescales","parsedData","cachedSegment","pushNals","nal","clearParsedCaptions","resetCaptionStream","clearAllCaptions","captionParser","generator","CaptionParser","wireTransmuxerEvents","initArray","typedArray","action","gopInfo","videoSegmentTimingInfo","MessageHandlers","appendStart","TransmuxerWorker","messageHandlers","transmuxerWorker","defaultCodecs","videoCodec","videoObjectTypeIndicator","audioProfile","translateLegacyCodecs","codecs","orig","profile","avcLevel","profileHex","avcLevelHex","parseCodecs","codecCount","parsed","mapLegacyAvcCodecs","codecString","makeMimeTypeString","container","getContainerType","getCodecs","mediaAttributes","CODECS","audioProfileFromDefault","audioGroupId","audioGroup","audioType","mimeTypesForPlaylist","containerType","codecInfo","isMuxed","isMaat","groupId","codecStrings","justAudio","justVideo","bothVideoAudio","parseContentType","parameters","parameter","isAudioCodec","isVideoCodec","gopsSafeToAlignWith","mapping","currentTimePts","updateGopBuffer","removeGopBuffer","updatedBuffer","videoBuffer","audioBuffer","audioDisabled","arity","extents","videoBuffered","audioBuffered","makeWrappedSourceBuffer","mimeType","addSourceBuffer","updating","realBuffer_","VirtualSourceBuffer","_videojs$EventTarget","timestampOffset_","pendingBuffers_","bufferUpdating_","codecs_","audioCodec_","videoCodec_","audioDisabled_","appendAudioInitSegment_","gopBuffer_","timeMapping_","safeAppend_","transmuxer_","data_","done_","appendGopInfo_","videoSegmentTimingInfo_","videoBuffer_","audioBuffer_","appendWindowStart","processPendingSegments_","timingInfo","timingInfoInSeconds","decode","presentation","codecProperty","nativeMediaSource_","shouldTrigger","sortedSegments","segmentObj","createRealSourceBuffers_","triggerUpdateend","concatAndAppendSegments_","destinationBuffer","tempBuffer","appendBuffer","originalError","HtmlMediaSource","MediaSource","activeSourceBuffers_","sourceBuffers","updateActiveSourceBuffers_","disableCombined","disableAudioOnly","onPlayerMediachange_","onHlsReset_","onHlsSegmentTimeMapping_","url_","sourcebuffer","parsedType","urlCount","mediaSources","msObjectURL","swfId","supportsNativeMediaSources","isTypeSupported","URL$1","objectUrlPrefix","EventTarget$1$1","mergeOptions$2","updateMaster$1","oldMaster","newMaster","noChanges","minimumUpdatePeriod","playlistUpdate","group","_playlistUpdate","DashPlaylistLoader","srcUrlOrPlaylist","masterPlaylistLoader","refreshXml_","refreshMedia_","loadedPlaylists_","setupChildLoader","masterPlaylistLoader_","childPlaylist_","mediaRequest_","masterXml_","manifestUri","clientOffset","clientOffset_","phonyUri","_phonyUri","haveMaster_","date","masterLoaded_","syncClientServerClock_","onClientServerClockSync_","utcTiming","serverTime","parseMasterXml","hasPendingRequest","updatedMaster","logger","SourceUpdater","sourceBufferEmitter","callbacks_","pendingCallback_","processedAppend_","mimeType_","logger_","createSourceBuffer_","sourceBuffer_","start_","started_","onUpdateendCallback_","pendingCallback","runCallback_","queueCallback_","videoSegmentTimingInfoCallback","Config","GOAL_BUFFER_LENGTH","MAX_GOAL_BUFFER_LENGTH","GOAL_BUFFER_LENGTH_RATE","INITIAL_BANDWIDTH","BANDWIDTH_VARIANCE","BUFFER_LOW_WATER_LINE","MAX_BUFFER_LOW_WATER_LINE","BUFFER_LOW_WATER_LINE_RATE","REQUEST_ERRORS","FAILURE","TIMEOUT","ABORTED","byterangeStr","byterangeStart","byterangeEnd","segmentXhrHeaders","Range","abortAll","activeXhrs","getRequestStats","getProgressStats","progressEvent","stats","loaded","handleErrors","handleKeyResponse","finishProcessingFn","errorObj","handleInitSegmentResponse","handleSegmentResponse","encryptedBytes","fmp4Captions","decryptSegment","decrypter","doneFn","decryptionHandler","requestId","decrypted","encrypted","iv","waitForCompletion","didError","endOfAllRequests","handleProgress","progressFn","firstBytesReceivedAt","mediaSegmentRequest","xhrOptions","decryptionWorker","keyRequestOptions","responseType","keyRequestCallback","keyXhr","initSegmentOptions","initSegmentRequestCallback","initSegmentXhr","segmentRequestOptions","segmentRequestCallback","segmentXhr","safeGetComputedStyle","stableSort","sortFn","newArray","cmp","comparePlaylistBandwidth","leftBandwidth","rightBandwidth","comparePlaylistResolution","leftWidth","rightWidth","RESOLUTION","simpleSelector","playerBandwidth","playerWidth","playerHeight","limitRenditionByPlayerDimensions","sortedPlaylistReps","rep","enabledPlaylistReps","bandwidthPlaylistReps","highestRemainingBandwidthRep","bandwidthBestRep","_chosenRep","haveResolution","resolutionBestRepList","resolutionBestRep","resolutionPlusOneList","resolutionPlusOneSmallest","resolutionPlusOneRep","chosenRep","lastBandwidthSelector","systemBandwidth","minRebufferMaxBandwidthSelector","duration$$1","currentTimeline","syncController","compatiblePlaylists","enabledPlaylists","bandwidthPlaylists","rebufferingEstimates","getSyncPoint","numRequests","requestTimeEstimate","rebufferingImpact","noRebufferingPlaylists","estimate","lowestBitrateCompatibleVariantSelector","playlistsWithVideo","createCaptionsTrackIfNotExists","inbandTextTracks","addCaptionData","CHECK_BUFFER_DELAY","detectEndOfStream","segmentIndex","appendedLastSegment","finite","illegalMediaSwitch","loaderType","startingMedia","newSegmentMedia","containsAudio","containsVideo","safeBackBufferTrimTime","seekable$$1","removeToTime","segmentInfoString","segmentInfo","_segmentInfo$segment","_segmentInfo$playlist","seq","_segmentInfo$playlist2","timeline","SegmentLoader","throughput","roundTrip","resetStats_","hasPlayed_","hasPlayed","currentTime_","seekable_","seeking_","loaderType_","startingMedia_","segmentMetadataTrack_","segmentMetadataTrack","goalBufferLength_","goalBufferLength","sourceType_","sourceType","state_","checkBufferTimeout_","currentTimeline_","pendingSegment_","sourceUpdater_","xhrOptions_","activeInitSegmentId_","initSegments_","captionParser_","decrypter_","syncController_","syncPoint_","ended_","fetchAtBuffer_","newState","mediaBytesTransferred","mediaRequests","mediaRequestsAborted","mediaRequestsTimedout","mediaRequestsErrored","mediaTransferDuration","mediaSecondsLoaded","abort_","monitorBuffer_","abortRequests","_error","set$$1","storedMap","playlist_","setDateTimeMapping","couldBeginLoading_","init_","sourceBufferEmitter_","resetEverything","newPlaylist","oldPlaylist","syncInfo","oldId","mediaSequenceDiff","saveExpiredSegmentInfo","resyncLoader","_mimeType","resetLoader","monitorBufferTick_","fillBuffer_","checkBuffer_","buffered_","isEndOfStream_","endOfStream","loadSegment_","lastBufferedEnd","bufferedTime","getSyncSegmentCandidate_","generateSegmentInfo_","mediaSourceInfo","_mediaSourceInfo","segmentIndexArray","isSyncRequest","random","measuredBandwidth","requestTimeRemaining","timeUntilRebuffer$$1","switchCandidate","timeSavedBySwitching","minimumTimeSaving","simpleSegment","abortRequestEarly_","trimBackBuffer_","createSimplifiedSegmentObj_","handleProgress_","segmentRequestFinished_","processSegmentResponse_","handleSegment_","probeSegmentInfo","illegalMediaSwitchError","blacklistDuration","timelineMapping","mappingForTimeline","initId","handleVideoSegmentTimingInfo_","handleUpdateEnd_","isWalkingForward","recordThroughput_","addSegmentMetadataCue_","segmentProcessingTime","segmentProcessingThroughput","custom","dateTimeString","resolution","uint8ToUtf8","uintArray","VTT_LINE_TERMINATORS","VTTSegmentLoader","_SegmentLoader","subtitlesTrack_","combinedByteLength","combinedSegment","_track","skipEmptySegments_","timestampOffsetForTimeline","checkTimestampOffset","requested","parseVTTCues_","updateTimeMapping_","timelines","decoder","decodeBytesToString","TextDecoder","timestampmap","MPEGTS","LOCAL","ontimestampmap","mapData","segmentData","mappingObj","diff","firstStart","lastStart","findAdCue","mediaTime","adStartTime","adEndTime","updateAdCues","cueOut","adOffset","adTotal","_segment$cueOutCont$s","cueOutCont","_segment$cueOutCont$s2","tsprobe","syncPointStrategies","run","datetimeToDisplayTime","lastDistance","segmentTime","segmentStart","discontinuityStarts","discontinuitySequence","discontinuitySync","discontinuities","SyncController","inspectCache_","syncPoints","runStrategies_","selectSyncPoint_","strategy","bestSyncPoint","bestDistance","bestStrategy","newDistance","lastRemovedSegment","playlistTimestamp","probeMp4Segment_","probeTsSegment_","calculateSegmentTimeMapping_","saveDiscontinuitySyncInfo_","timeInfo","segmentStartTime","segmentEndTime","dtsTime","probedInfo","accuracy","mediaIndexDiff","Decrypter$1","unpad","padded","precompute","tables","encTable","decTable","sbox","sboxInv","xInv","th","x2","x4","x8","tEnc","tDec","aesTables","AES","_tables","tmp","encKey","decKey","keyLen","rcon","decrypt","encrypted0","encrypted1","encrypted2","encrypted3","out","a2","b2","c2","nInnerRounds","kIndex","table","table0","table1","table2","table3","_length","AsyncStream$$1","_Stream","jobs","timeout_","processJob_","job","ntoh","word","decrypt$$1","initVector","encrypted32","Int32Array","decipher","decrypted32","init0","init1","init2","init3","wordIx","Decrypter$$1","STEP","asyncStream_","decryptChunk_","DecrypterWorker","decrypterWorker","audioTrackKind_","characteristics","stopLoaders","segmentLoader","activePlaylistLoader","startLoaders","playlistLoader","onGroupChanged","_settings$segmentLoad","segmentLoaders","mainSegmentLoader","mediaTypes","activeTrack","activeGroup","previousActiveLoader","onTrackChanged","_settings$segmentLoad2","onError","blacklistCurrentPlaylist","defaultTrack","setupListeners","requestOptions","byGroupId","byResolvedUri","initialize","_settings$master","_settings$mediaTypes$","groups","groupPlaylists","variantLabel","matchingPlaylists","_settings$mediaTypes$2","forced","autoselect","_settings$mediaTypes$3","instreamId","variants","setupMediaGroups","onAudioTrackChanged","createMediaTypes","ABORT_EARLY_BLACKLIST_SECONDS","loaderStats","sumLoaderStat","stat","audioSegmentLoader_","mainSegmentLoader_","MasterPlaylistController","externHls","useCueTags","enableLowInitialPlaylist","seekTo_","useCueTags_","cueTagsTrack_","requestOptions_","mediaTypes_","handleSourceOpen_","segmentLoaderSettings","setupMasterPlaylistLoaderListeners_","subtitleSegmentLoader_","setupSegmentLoaderListeners_","requestTimeout","triggerPresenceUsage_","setupSourceBuffers_","setupFirstPlay","updatedPlaylist","excludeUnsupportedVariants_","selectedMedia","selectInitialPlaylist","selectPlaylist","initialMedia_","updateAdCues_","updateDuration","addSeekableRange","addSeekableRange_","onDurationchange","playlistOutdated","stuckAtPlaylistEnd_","defaultDemuxed","audioGroupKeys","mediaGroup","nextPlaylist","currentPlaylist","forwardBuffer","bufferLowWaterLine","onSyncInfoUpdate_","onEndOfStream","ended","isEndOfStream","getExpiredTime","absolutePlaylistEnd","mainSeekable","audioSeekable","oldEnd","oldStart","oldDuration","newDuration","setDuration","mimeTypes","configureLoaderMimeTypes_","excludeIncompatibleVariants_","variant","variantCodecs","enableFunction","loader","playlistUri","changePlaylistFn","incompatible","currentlyEnabled","Representation","hlsHandler","mpc","masterPlaylistController_","smoothQualityChange","changeType","qualityChangeFunction","renditionSelectionMixin","representations","timerCancelEvents","PlaybackWatcher","allowSeeksWithinUnsafeLiveWindow","consecutiveUpdates","lastRecordedTime","timer_","checkCurrentTimeTimeout_","canPlayHandler","monitorCurrentTime_","waitingHandler","techWaiting_","cancelTimerHandler","cancelTimer_","fixesBadSeeksHandler","fixesBadSeeks_","checkCurrentTime_","waiting_","isAfterSeekableRange","afterSeekableWindow_","beforeSeekableWindow_","currentRange","livePoint","nextRange","videoUnderflow_","difference","skipTheGap_","allowedEnd","gap","gapFromVideoUnderflow_","scheduledCurrentTime","gaps","defaultOptions","errorInterval","getSource","IWillNotUseThisInPlugins","initPlugin","lastCalled","localOptions","loadedMetadataHandler","cleanupEvents","reinitPlugin","reloadSourceOnError","version$1","vhs","source_","Hls$1","Decrypter","AsyncStream","STANDARD_PLAYLIST_SELECTOR","INITIAL_PLAYLIST_SELECTOR","LOCAL_STORAGE_KEY$1","simpleTypeFromSourceType","dashRE","handleHlsMediaChange","qualityLevels","selectedIndex_","handleHlsLoadedMetadata","addQualityLevel","emeKeySystems","keySystemOptions","videoPlaylist","audioPlaylist","keySystemContentTypes","keySystem","audioContentType","videoContentType","contentProtection","pssh","setupEmeOptions","eme","sourceOptions","keySystems","initializeMediaKeys","getVhsLocalStorage","storedObject","updateVhsLocalStorage","objectToStore","supportsNativeHls","canPlay","canItPlay","supportsNativeDash","supportsTypeNatively","Component$1","HlsHandler","dash","setOptions_","overrideNative","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","smoothQualityChange_","pauseLoading","useBandwidthFromLocalStorage","option","playbackWatcher_","invBandwidth","invThroughput","systemBitrate","mediaRequests_","mediaRequestsAborted_","mediaRequestsTimedout_","mediaRequestsErrored_","mediaTransferDuration_","mediaBytesTransferred_","mediaSecondsLoaded_","currentTech","playerDimensions","setupQualityLevels_","qualityLevels_","HlsSourceHandler","_videojs$mergeOptions","supportedType","canUseMsePlayback","__webpack_exports__"],"mappings":"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","file":"js/chunk-vendors~6d61af90.d866bb3d.js","sourcesContent":["/**\n * @license\n * Video.js 7.5.4 <http://videojs.com/>\n * Copyright Brightcove, Inc. <https://www.brightcove.com/>\n * Available under Apache License Version 2.0\n * <https://github.com/videojs/video.js/blob/master/LICENSE>\n *\n * Includes vtt.js <https://github.com/mozilla/vtt.js>\n * Available under Apache License Version 2.0\n * <https://github.com/mozilla/vtt.js/blob/master/LICENSE>\n */\n\nimport window$1 from 'global/window';\nimport document from 'global/document';\nimport tsml from 'tsml';\nimport safeParseTuple from 'safe-json-parse/tuple';\nimport keycode from 'keycode';\nimport xhr from 'xhr';\nimport vtt from 'videojs-vtt.js';\nimport URLToolkit from 'url-toolkit';\nimport { Parser } from 'm3u8-parser';\nimport { parse, parseUTCTiming } from 'mpd-parser';\nimport mp4probe from 'mux.js/lib/mp4/probe';\nimport { CaptionParser } from 'mux.js/lib/mp4';\nimport tsInspector from 'mux.js/lib/tools/ts-inspector.js';\nimport { Decrypter, AsyncStream, decrypt } from 'aes-decrypter';\n\nvar version = \"7.5.4\";\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}\n\n/**\n * @file create-logger.js\n * @module create-logger\n */\n\nvar history = [];\n/**\n * Log messages to the console and history based on the type of message\n *\n * @private\n * @param  {string} type\n *         The name of the console method to use.\n *\n * @param  {Array} args\n *         The arguments to be passed to the matching console method.\n */\n\nvar LogByTypeFactory = function LogByTypeFactory(name, log) {\n  return function (type, level, args) {\n    var lvl = log.levels[level];\n    var lvlRegExp = new RegExp(\"^(\" + lvl + \")$\");\n\n    if (type !== 'log') {\n      // Add the type to the front of the message when it's not \"log\".\n      args.unshift(type.toUpperCase() + ':');\n    } // Add console prefix after adding to history.\n\n\n    args.unshift(name + ':'); // Add a clone of the args at this point to history.\n\n    if (history) {\n      history.push([].concat(args));\n    } // If there's no console then don't try to output messages, but they will\n    // still be stored in history.\n\n\n    if (!window$1.console) {\n      return;\n    } // Was setting these once outside of this function, but containing them\n    // in the function makes it easier to test cases where console doesn't exist\n    // when the module is executed.\n\n\n    var fn = window$1.console[type];\n\n    if (!fn && type === 'debug') {\n      // Certain browsers don't have support for console.debug. For those, we\n      // should default to the closest comparable log.\n      fn = window$1.console.info || window$1.console.log;\n    } // Bail out if there's no console or if this type is not allowed by the\n    // current logging level.\n\n\n    if (!fn || !lvl || !lvlRegExp.test(type)) {\n      return;\n    }\n\n    fn[Array.isArray(args) ? 'apply' : 'call'](window$1.console, args);\n  };\n};\n\nfunction createLogger(name) {\n  // This is the private tracking variable for logging level.\n  var level = 'info'; // the curried logByType bound to the specific log and history\n\n  var logByType;\n  /**\n   * Logs plain debug messages. Similar to `console.log`.\n   *\n   * Due to [limitations](https://github.com/jsdoc3/jsdoc/issues/955#issuecomment-313829149)\n   * of our JSDoc template, we cannot properly document this as both a function\n   * and a namespace, so its function signature is documented here.\n   *\n   * #### Arguments\n   * ##### *args\n   * Mixed[]\n   *\n   * Any combination of values that could be passed to `console.log()`.\n   *\n   * #### Return Value\n   *\n   * `undefined`\n   *\n   * @namespace\n   * @param    {Mixed[]} args\n   *           One or more messages or objects that should be logged.\n   */\n\n  var log = function log() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    logByType('log', level, args);\n  }; // This is the logByType helper that the logging methods below use\n\n\n  logByType = LogByTypeFactory(name, log);\n  /**\n   * Create a new sublogger which chains the old name to the new name.\n   *\n   * For example, doing `videojs.log.createLogger('player')` and then using that logger will log the following:\n   * ```js\n   *  mylogger('foo');\n   *  // > VIDEOJS: player: foo\n   * ```\n   *\n   * @param {string} name\n   *        The name to add call the new logger\n   * @return {Object}\n   */\n\n  log.createLogger = function (subname) {\n    return createLogger(name + ': ' + subname);\n  };\n  /**\n   * Enumeration of available logging levels, where the keys are the level names\n   * and the values are `|`-separated strings containing logging methods allowed\n   * in that logging level. These strings are used to create a regular expression\n   * matching the function name being called.\n   *\n   * Levels provided by Video.js are:\n   *\n   * - `off`: Matches no calls. Any value that can be cast to `false` will have\n   *   this effect. The most restrictive.\n   * - `all`: Matches only Video.js-provided functions (`debug`, `log`,\n   *   `log.warn`, and `log.error`).\n   * - `debug`: Matches `log.debug`, `log`, `log.warn`, and `log.error` calls.\n   * - `info` (default): Matches `log`, `log.warn`, and `log.error` calls.\n   * - `warn`: Matches `log.warn` and `log.error` calls.\n   * - `error`: Matches only `log.error` calls.\n   *\n   * @type {Object}\n   */\n\n\n  log.levels = {\n    all: 'debug|log|warn|error',\n    off: '',\n    debug: 'debug|log|warn|error',\n    info: 'log|warn|error',\n    warn: 'warn|error',\n    error: 'error',\n    DEFAULT: level\n  };\n  /**\n   * Get or set the current logging level.\n   *\n   * If a string matching a key from {@link module:log.levels} is provided, acts\n   * as a setter.\n   *\n   * @param  {string} [lvl]\n   *         Pass a valid level to set a new logging level.\n   *\n   * @return {string}\n   *         The current logging level.\n   */\n\n  log.level = function (lvl) {\n    if (typeof lvl === 'string') {\n      if (!log.levels.hasOwnProperty(lvl)) {\n        throw new Error(\"\\\"\" + lvl + \"\\\" in not a valid log level\");\n      }\n\n      level = lvl;\n    }\n\n    return level;\n  };\n  /**\n   * Returns an array containing everything that has been logged to the history.\n   *\n   * This array is a shallow clone of the internal history record. However, its\n   * contents are _not_ cloned; so, mutating objects inside this array will\n   * mutate them in history.\n   *\n   * @return {Array}\n   */\n\n\n  log.history = function () {\n    return history ? [].concat(history) : [];\n  };\n  /**\n   * Allows you to filter the history by the given logger name\n   *\n   * @param {string} fname\n   *        The name to filter by\n   *\n   * @return {Array}\n   *         The filtered list to return\n   */\n\n\n  log.history.filter = function (fname) {\n    return (history || []).filter(function (historyItem) {\n      // if the first item in each historyItem includes `fname`, then it's a match\n      return new RegExp(\".*\" + fname + \".*\").test(historyItem[0]);\n    });\n  };\n  /**\n   * Clears the internal history tracking, but does not prevent further history\n   * tracking.\n   */\n\n\n  log.history.clear = function () {\n    if (history) {\n      history.length = 0;\n    }\n  };\n  /**\n   * Disable history tracking if it is currently enabled.\n   */\n\n\n  log.history.disable = function () {\n    if (history !== null) {\n      history.length = 0;\n      history = null;\n    }\n  };\n  /**\n   * Enable history tracking if it is currently disabled.\n   */\n\n\n  log.history.enable = function () {\n    if (history === null) {\n      history = [];\n    }\n  };\n  /**\n   * Logs error messages. Similar to `console.error`.\n   *\n   * @param {Mixed[]} args\n   *        One or more messages or objects that should be logged as an error\n   */\n\n\n  log.error = function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return logByType('error', level, args);\n  };\n  /**\n   * Logs warning messages. Similar to `console.warn`.\n   *\n   * @param {Mixed[]} args\n   *        One or more messages or objects that should be logged as a warning.\n   */\n\n\n  log.warn = function () {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    return logByType('warn', level, args);\n  };\n  /**\n   * Logs debug messages. Similar to `console.debug`, but may also act as a comparable\n   * log if `console.debug` is not available\n   *\n   * @param {Mixed[]} args\n   *        One or more messages or objects that should be logged as debug.\n   */\n\n\n  log.debug = function () {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    return logByType('debug', level, args);\n  };\n\n  return log;\n}\n\n/**\n * @file log.js\n * @module log\n */\nvar log = createLogger('VIDEOJS');\nvar createLogger$1 = log.createLogger;\n\n/**\n * @file obj.js\n * @module obj\n */\n\n/**\n * @callback obj:EachCallback\n *\n * @param {Mixed} value\n *        The current key for the object that is being iterated over.\n *\n * @param {string} key\n *        The current key-value for object that is being iterated over\n */\n\n/**\n * @callback obj:ReduceCallback\n *\n * @param {Mixed} accum\n *        The value that is accumulating over the reduce loop.\n *\n * @param {Mixed} value\n *        The current key for the object that is being iterated over.\n *\n * @param {string} key\n *        The current key-value for object that is being iterated over\n *\n * @return {Mixed}\n *         The new accumulated value.\n */\nvar toString = Object.prototype.toString;\n/**\n * Get the keys of an Object\n *\n * @param {Object}\n *        The Object to get the keys from\n *\n * @return {string[]}\n *         An array of the keys from the object. Returns an empty array if the\n *         object passed in was invalid or had no keys.\n *\n * @private\n */\n\nvar keys = function keys(object) {\n  return isObject(object) ? Object.keys(object) : [];\n};\n/**\n * Array-like iteration for objects.\n *\n * @param {Object} object\n *        The object to iterate over\n *\n * @param {obj:EachCallback} fn\n *        The callback function which is called for each key in the object.\n */\n\n\nfunction each(object, fn) {\n  keys(object).forEach(function (key) {\n    return fn(object[key], key);\n  });\n}\n/**\n * Array-like reduce for objects.\n *\n * @param {Object} object\n *        The Object that you want to reduce.\n *\n * @param {Function} fn\n *         A callback function which is called for each key in the object. It\n *         receives the accumulated value and the per-iteration value and key\n *         as arguments.\n *\n * @param {Mixed} [initial = 0]\n *        Starting value\n *\n * @return {Mixed}\n *         The final accumulated value.\n */\n\nfunction reduce(object, fn, initial) {\n  if (initial === void 0) {\n    initial = 0;\n  }\n\n  return keys(object).reduce(function (accum, key) {\n    return fn(accum, object[key], key);\n  }, initial);\n}\n/**\n * Object.assign-style object shallow merge/extend.\n *\n * @param  {Object} target\n * @param  {Object} ...sources\n * @return {Object}\n */\n\nfunction assign(target) {\n  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    sources[_key - 1] = arguments[_key];\n  }\n\n  if (Object.assign) {\n    return Object.assign.apply(Object, [target].concat(sources));\n  }\n\n  sources.forEach(function (source) {\n    if (!source) {\n      return;\n    }\n\n    each(source, function (value, key) {\n      target[key] = value;\n    });\n  });\n  return target;\n}\n/**\n * Returns whether a value is an object of any kind - including DOM nodes,\n * arrays, regular expressions, etc. Not functions, though.\n *\n * This avoids the gotcha where using `typeof` on a `null` value\n * results in `'object'`.\n *\n * @param  {Object} value\n * @return {boolean}\n */\n\nfunction isObject(value) {\n  return !!value && typeof value === 'object';\n}\n/**\n * Returns whether an object appears to be a \"plain\" object - that is, a\n * direct instance of `Object`.\n *\n * @param  {Object} value\n * @return {boolean}\n */\n\nfunction isPlain(value) {\n  return isObject(value) && toString.call(value) === '[object Object]' && value.constructor === Object;\n}\n\n/**\n * @file computed-style.js\n * @module computed-style\n */\n/**\n * A safe getComputedStyle.\n *\n * This is needed because in Firefox, if the player is loaded in an iframe with\n * `display:none`, then `getComputedStyle` returns `null`, so, we do a\n * null-check to make sure that the player doesn't break in these cases.\n *\n * @function\n * @param    {Element} el\n *           The element you want the computed style of\n *\n * @param    {string} prop\n *           The property name you want\n *\n * @see      https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n */\n\nfunction computedStyle(el, prop) {\n  if (!el || !prop) {\n    return '';\n  }\n\n  if (typeof window$1.getComputedStyle === 'function') {\n    var cs = window$1.getComputedStyle(el);\n    return cs ? cs[prop] : '';\n  }\n\n  return '';\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"Setting attributes in the second argument of createEl()\\n                has been deprecated. Use the third argument instead.\\n                createEl(type, properties, attributes). Attempting to set \", \" to \", \".\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n/**\n * Detect if a value is a string with any non-whitespace characters.\n *\n * @private\n * @param  {string} str\n *         The string to check\n *\n * @return {boolean}\n *         Will be `true` if the string is non-blank, `false` otherwise.\n *\n */\n\nfunction isNonBlankString(str) {\n  return typeof str === 'string' && /\\S/.test(str);\n}\n/**\n * Throws an error if the passed string has whitespace. This is used by\n * class methods to be relatively consistent with the classList API.\n *\n * @private\n * @param  {string} str\n *         The string to check for whitespace.\n *\n * @throws {Error}\n *         Throws an error if there is whitespace in the string.\n */\n\n\nfunction throwIfWhitespace(str) {\n  if (/\\s/.test(str)) {\n    throw new Error('class has illegal whitespace characters');\n  }\n}\n/**\n * Produce a regular expression for matching a className within an elements className.\n *\n * @private\n * @param  {string} className\n *         The className to generate the RegExp for.\n *\n * @return {RegExp}\n *         The RegExp that will check for a specific `className` in an elements\n *         className.\n */\n\n\nfunction classRegExp(className) {\n  return new RegExp('(^|\\\\s)' + className + '($|\\\\s)');\n}\n/**\n * Whether the current DOM interface appears to be real (i.e. not simulated).\n *\n * @return {boolean}\n *         Will be `true` if the DOM appears to be real, `false` otherwise.\n */\n\n\nfunction isReal() {\n  // Both document and window will never be undefined thanks to `global`.\n  return document === window$1.document;\n}\n/**\n * Determines, via duck typing, whether or not a value is a DOM element.\n *\n * @param  {Mixed} value\n *         The value to check.\n *\n * @return {boolean}\n *         Will be `true` if the value is a DOM element, `false` otherwise.\n */\n\nfunction isEl(value) {\n  return isObject(value) && value.nodeType === 1;\n}\n/**\n * Determines if the current DOM is embedded in an iframe.\n *\n * @return {boolean}\n *         Will be `true` if the DOM is embedded in an iframe, `false`\n *         otherwise.\n */\n\nfunction isInFrame() {\n  // We need a try/catch here because Safari will throw errors when attempting\n  // to get either `parent` or `self`\n  try {\n    return window$1.parent !== window$1.self;\n  } catch (x) {\n    return true;\n  }\n}\n/**\n * Creates functions to query the DOM using a given method.\n *\n * @private\n * @param   {string} method\n *          The method to create the query with.\n *\n * @return  {Function}\n *          The query method\n */\n\nfunction createQuerier(method) {\n  return function (selector, context) {\n    if (!isNonBlankString(selector)) {\n      return document[method](null);\n    }\n\n    if (isNonBlankString(context)) {\n      context = document.querySelector(context);\n    }\n\n    var ctx = isEl(context) ? context : document;\n    return ctx[method] && ctx[method](selector);\n  };\n}\n/**\n * Creates an element and applies properties, attributes, and inserts content.\n *\n * @param  {string} [tagName='div']\n *         Name of tag to be created.\n *\n * @param  {Object} [properties={}]\n *         Element properties to be applied.\n *\n * @param  {Object} [attributes={}]\n *         Element attributes to be applied.\n *\n * @param {module:dom~ContentDescriptor} content\n *        A content descriptor object.\n *\n * @return {Element}\n *         The element that was created.\n */\n\n\nfunction createEl(tagName, properties, attributes, content) {\n  if (tagName === void 0) {\n    tagName = 'div';\n  }\n\n  if (properties === void 0) {\n    properties = {};\n  }\n\n  if (attributes === void 0) {\n    attributes = {};\n  }\n\n  var el = document.createElement(tagName);\n  Object.getOwnPropertyNames(properties).forEach(function (propName) {\n    var val = properties[propName]; // See #2176\n    // We originally were accepting both properties and attributes in the\n    // same object, but that doesn't work so well.\n\n    if (propName.indexOf('aria-') !== -1 || propName === 'role' || propName === 'type') {\n      log.warn(tsml(_templateObject(), propName, val));\n      el.setAttribute(propName, val); // Handle textContent since it's not supported everywhere and we have a\n      // method for it.\n    } else if (propName === 'textContent') {\n      textContent(el, val);\n    } else {\n      el[propName] = val;\n    }\n  });\n  Object.getOwnPropertyNames(attributes).forEach(function (attrName) {\n    el.setAttribute(attrName, attributes[attrName]);\n  });\n\n  if (content) {\n    appendContent(el, content);\n  }\n\n  return el;\n}\n/**\n * Injects text into an element, replacing any existing contents entirely.\n *\n * @param  {Element} el\n *         The element to add text content into\n *\n * @param  {string} text\n *         The text content to add.\n *\n * @return {Element}\n *         The element with added text content.\n */\n\nfunction textContent(el, text) {\n  if (typeof el.textContent === 'undefined') {\n    el.innerText = text;\n  } else {\n    el.textContent = text;\n  }\n\n  return el;\n}\n/**\n * Insert an element as the first child node of another\n *\n * @param {Element} child\n *        Element to insert\n *\n * @param {Element} parent\n *        Element to insert child into\n */\n\nfunction prependTo(child, parent) {\n  if (parent.firstChild) {\n    parent.insertBefore(child, parent.firstChild);\n  } else {\n    parent.appendChild(child);\n  }\n}\n/**\n * Check if an element has a class name.\n *\n * @param  {Element} element\n *         Element to check\n *\n * @param  {string} classToCheck\n *         Class name to check for\n *\n * @return {boolean}\n *         Will be `true` if the element has a class, `false` otherwise.\n *\n * @throws {Error}\n *         Throws an error if `classToCheck` has white space.\n */\n\nfunction hasClass(element, classToCheck) {\n  throwIfWhitespace(classToCheck);\n\n  if (element.classList) {\n    return element.classList.contains(classToCheck);\n  }\n\n  return classRegExp(classToCheck).test(element.className);\n}\n/**\n * Add a class name to an element.\n *\n * @param  {Element} element\n *         Element to add class name to.\n *\n * @param  {string} classToAdd\n *         Class name to add.\n *\n * @return {Element}\n *         The DOM element with the added class name.\n */\n\nfunction addClass(element, classToAdd) {\n  if (element.classList) {\n    element.classList.add(classToAdd); // Don't need to `throwIfWhitespace` here because `hasElClass` will do it\n    // in the case of classList not being supported.\n  } else if (!hasClass(element, classToAdd)) {\n    element.className = (element.className + ' ' + classToAdd).trim();\n  }\n\n  return element;\n}\n/**\n * Remove a class name from an element.\n *\n * @param  {Element} element\n *         Element to remove a class name from.\n *\n * @param  {string} classToRemove\n *         Class name to remove\n *\n * @return {Element}\n *         The DOM element with class name removed.\n */\n\nfunction removeClass(element, classToRemove) {\n  if (element.classList) {\n    element.classList.remove(classToRemove);\n  } else {\n    throwIfWhitespace(classToRemove);\n    element.className = element.className.split(/\\s+/).filter(function (c) {\n      return c !== classToRemove;\n    }).join(' ');\n  }\n\n  return element;\n}\n/**\n * The callback definition for toggleClass.\n *\n * @callback module:dom~PredicateCallback\n * @param    {Element} element\n *           The DOM element of the Component.\n *\n * @param    {string} classToToggle\n *           The `className` that wants to be toggled\n *\n * @return   {boolean|undefined}\n *           If `true` is returned, the `classToToggle` will be added to the\n *           `element`. If `false`, the `classToToggle` will be removed from\n *           the `element`. If `undefined`, the callback will be ignored.\n */\n\n/**\n * Adds or removes a class name to/from an element depending on an optional\n * condition or the presence/absence of the class name.\n *\n * @param  {Element} element\n *         The element to toggle a class name on.\n *\n * @param  {string} classToToggle\n *         The class that should be toggled.\n *\n * @param  {boolean|module:dom~PredicateCallback} [predicate]\n *         See the return value for {@link module:dom~PredicateCallback}\n *\n * @return {Element}\n *         The element with a class that has been toggled.\n */\n\nfunction toggleClass(element, classToToggle, predicate) {\n  // This CANNOT use `classList` internally because IE11 does not support the\n  // second parameter to the `classList.toggle()` method! Which is fine because\n  // `classList` will be used by the add/remove functions.\n  var has = hasClass(element, classToToggle);\n\n  if (typeof predicate === 'function') {\n    predicate = predicate(element, classToToggle);\n  }\n\n  if (typeof predicate !== 'boolean') {\n    predicate = !has;\n  } // If the necessary class operation matches the current state of the\n  // element, no action is required.\n\n\n  if (predicate === has) {\n    return;\n  }\n\n  if (predicate) {\n    addClass(element, classToToggle);\n  } else {\n    removeClass(element, classToToggle);\n  }\n\n  return element;\n}\n/**\n * Apply attributes to an HTML element.\n *\n * @param {Element} el\n *        Element to add attributes to.\n *\n * @param {Object} [attributes]\n *        Attributes to be applied.\n */\n\nfunction setAttributes(el, attributes) {\n  Object.getOwnPropertyNames(attributes).forEach(function (attrName) {\n    var attrValue = attributes[attrName];\n\n    if (attrValue === null || typeof attrValue === 'undefined' || attrValue === false) {\n      el.removeAttribute(attrName);\n    } else {\n      el.setAttribute(attrName, attrValue === true ? '' : attrValue);\n    }\n  });\n}\n/**\n * Get an element's attribute values, as defined on the HTML tag.\n *\n * Attributes are not the same as properties. They're defined on the tag\n * or with setAttribute.\n *\n * @param  {Element} tag\n *         Element from which to get tag attributes.\n *\n * @return {Object}\n *         All attributes of the element. Boolean attributes will be `true` or\n *         `false`, others will be strings.\n */\n\nfunction getAttributes(tag) {\n  var obj = {}; // known boolean attributes\n  // we can check for matching boolean properties, but not all browsers\n  // and not all tags know about these attributes, so, we still want to check them manually\n\n  var knownBooleans = ',' + 'autoplay,controls,playsinline,loop,muted,default,defaultMuted' + ',';\n\n  if (tag && tag.attributes && tag.attributes.length > 0) {\n    var attrs = tag.attributes;\n\n    for (var i = attrs.length - 1; i >= 0; i--) {\n      var attrName = attrs[i].name;\n      var attrVal = attrs[i].value; // check for known booleans\n      // the matching element property will return a value for typeof\n\n      if (typeof tag[attrName] === 'boolean' || knownBooleans.indexOf(',' + attrName + ',') !== -1) {\n        // the value of an included boolean attribute is typically an empty\n        // string ('') which would equal false if we just check for a false value.\n        // we also don't want support bad code like autoplay='false'\n        attrVal = attrVal !== null ? true : false;\n      }\n\n      obj[attrName] = attrVal;\n    }\n  }\n\n  return obj;\n}\n/**\n * Get the value of an element's attribute.\n *\n * @param {Element} el\n *        A DOM element.\n *\n * @param {string} attribute\n *        Attribute to get the value of.\n *\n * @return {string}\n *         The value of the attribute.\n */\n\nfunction getAttribute(el, attribute) {\n  return el.getAttribute(attribute);\n}\n/**\n * Set the value of an element's attribute.\n *\n * @param {Element} el\n *        A DOM element.\n *\n * @param {string} attribute\n *        Attribute to set.\n *\n * @param {string} value\n *        Value to set the attribute to.\n */\n\nfunction setAttribute(el, attribute, value) {\n  el.setAttribute(attribute, value);\n}\n/**\n * Remove an element's attribute.\n *\n * @param {Element} el\n *        A DOM element.\n *\n * @param {string} attribute\n *        Attribute to remove.\n */\n\nfunction removeAttribute(el, attribute) {\n  el.removeAttribute(attribute);\n}\n/**\n * Attempt to block the ability to select text.\n */\n\nfunction blockTextSelection() {\n  document.body.focus();\n\n  document.onselectstart = function () {\n    return false;\n  };\n}\n/**\n * Turn off text selection blocking.\n */\n\nfunction unblockTextSelection() {\n  document.onselectstart = function () {\n    return true;\n  };\n}\n/**\n * Identical to the native `getBoundingClientRect` function, but ensures that\n * the method is supported at all (it is in all browsers we claim to support)\n * and that the element is in the DOM before continuing.\n *\n * This wrapper function also shims properties which are not provided by some\n * older browsers (namely, IE8).\n *\n * Additionally, some browsers do not support adding properties to a\n * `ClientRect`/`DOMRect` object; so, we shallow-copy it with the standard\n * properties (except `x` and `y` which are not widely supported). This helps\n * avoid implementations where keys are non-enumerable.\n *\n * @param  {Element} el\n *         Element whose `ClientRect` we want to calculate.\n *\n * @return {Object|undefined}\n *         Always returns a plain object - or `undefined` if it cannot.\n */\n\nfunction getBoundingClientRect(el) {\n  if (el && el.getBoundingClientRect && el.parentNode) {\n    var rect = el.getBoundingClientRect();\n    var result = {};\n    ['bottom', 'height', 'left', 'right', 'top', 'width'].forEach(function (k) {\n      if (rect[k] !== undefined) {\n        result[k] = rect[k];\n      }\n    });\n\n    if (!result.height) {\n      result.height = parseFloat(computedStyle(el, 'height'));\n    }\n\n    if (!result.width) {\n      result.width = parseFloat(computedStyle(el, 'width'));\n    }\n\n    return result;\n  }\n}\n/**\n * Represents the position of a DOM element on the page.\n *\n * @typedef  {Object} module:dom~Position\n *\n * @property {number} left\n *           Pixels to the left.\n *\n * @property {number} top\n *           Pixels from the top.\n */\n\n/**\n * Get the position of an element in the DOM.\n *\n * Uses `getBoundingClientRect` technique from John Resig.\n *\n * @see http://ejohn.org/blog/getboundingclientrect-is-awesome/\n *\n * @param  {Element} el\n *         Element from which to get offset.\n *\n * @return {module:dom~Position}\n *         The position of the element that was passed in.\n */\n\nfunction findPosition(el) {\n  var box;\n\n  if (el.getBoundingClientRect && el.parentNode) {\n    box = el.getBoundingClientRect();\n  }\n\n  if (!box) {\n    return {\n      left: 0,\n      top: 0\n    };\n  }\n\n  var docEl = document.documentElement;\n  var body = document.body;\n  var clientLeft = docEl.clientLeft || body.clientLeft || 0;\n  var scrollLeft = window$1.pageXOffset || body.scrollLeft;\n  var left = box.left + scrollLeft - clientLeft;\n  var clientTop = docEl.clientTop || body.clientTop || 0;\n  var scrollTop = window$1.pageYOffset || body.scrollTop;\n  var top = box.top + scrollTop - clientTop; // Android sometimes returns slightly off decimal values, so need to round\n\n  return {\n    left: Math.round(left),\n    top: Math.round(top)\n  };\n}\n/**\n * Represents x and y coordinates for a DOM element or mouse pointer.\n *\n * @typedef  {Object} module:dom~Coordinates\n *\n * @property {number} x\n *           x coordinate in pixels\n *\n * @property {number} y\n *           y coordinate in pixels\n */\n\n/**\n * Get the pointer position within an element.\n *\n * The base on the coordinates are the bottom left of the element.\n *\n * @param  {Element} el\n *         Element on which to get the pointer position on.\n *\n * @param  {EventTarget~Event} event\n *         Event object.\n *\n * @return {module:dom~Coordinates}\n *         A coordinates object corresponding to the mouse position.\n *\n */\n\nfunction getPointerPosition(el, event) {\n  var position = {};\n  var box = findPosition(el);\n  var boxW = el.offsetWidth;\n  var boxH = el.offsetHeight;\n  var boxY = box.top;\n  var boxX = box.left;\n  var pageY = event.pageY;\n  var pageX = event.pageX;\n\n  if (event.changedTouches) {\n    pageX = event.changedTouches[0].pageX;\n    pageY = event.changedTouches[0].pageY;\n  }\n\n  position.y = Math.max(0, Math.min(1, (boxY - pageY + boxH) / boxH));\n  position.x = Math.max(0, Math.min(1, (pageX - boxX) / boxW));\n  return position;\n}\n/**\n * Determines, via duck typing, whether or not a value is a text node.\n *\n * @param  {Mixed} value\n *         Check if this value is a text node.\n *\n * @return {boolean}\n *         Will be `true` if the value is a text node, `false` otherwise.\n */\n\nfunction isTextNode(value) {\n  return isObject(value) && value.nodeType === 3;\n}\n/**\n * Empties the contents of an element.\n *\n * @param  {Element} el\n *         The element to empty children from\n *\n * @return {Element}\n *         The element with no children\n */\n\nfunction emptyEl(el) {\n  while (el.firstChild) {\n    el.removeChild(el.firstChild);\n  }\n\n  return el;\n}\n/**\n * This is a mixed value that describes content to be injected into the DOM\n * via some method. It can be of the following types:\n *\n * Type       | Description\n * -----------|-------------\n * `string`   | The value will be normalized into a text node.\n * `Element`  | The value will be accepted as-is.\n * `TextNode` | The value will be accepted as-is.\n * `Array`    | A one-dimensional array of strings, elements, text nodes, or functions. These functions should return a string, element, or text node (any other return value, like an array, will be ignored).\n * `Function` | A function, which is expected to return a string, element, text node, or array - any of the other possible values described above. This means that a content descriptor could be a function that returns an array of functions, but those second-level functions must return strings, elements, or text nodes.\n *\n * @typedef {string|Element|TextNode|Array|Function} module:dom~ContentDescriptor\n */\n\n/**\n * Normalizes content for eventual insertion into the DOM.\n *\n * This allows a wide range of content definition methods, but helps protect\n * from falling into the trap of simply writing to `innerHTML`, which could\n * be an XSS concern.\n *\n * The content for an element can be passed in multiple types and\n * combinations, whose behavior is as follows:\n *\n * @param {module:dom~ContentDescriptor} content\n *        A content descriptor value.\n *\n * @return {Array}\n *         All of the content that was passed in, normalized to an array of\n *         elements or text nodes.\n */\n\nfunction normalizeContent(content) {\n  // First, invoke content if it is a function. If it produces an array,\n  // that needs to happen before normalization.\n  if (typeof content === 'function') {\n    content = content();\n  } // Next up, normalize to an array, so one or many items can be normalized,\n  // filtered, and returned.\n\n\n  return (Array.isArray(content) ? content : [content]).map(function (value) {\n    // First, invoke value if it is a function to produce a new value,\n    // which will be subsequently normalized to a Node of some kind.\n    if (typeof value === 'function') {\n      value = value();\n    }\n\n    if (isEl(value) || isTextNode(value)) {\n      return value;\n    }\n\n    if (typeof value === 'string' && /\\S/.test(value)) {\n      return document.createTextNode(value);\n    }\n  }).filter(function (value) {\n    return value;\n  });\n}\n/**\n * Normalizes and appends content to an element.\n *\n * @param  {Element} el\n *         Element to append normalized content to.\n *\n * @param {module:dom~ContentDescriptor} content\n *        A content descriptor value.\n *\n * @return {Element}\n *         The element with appended normalized content.\n */\n\nfunction appendContent(el, content) {\n  normalizeContent(content).forEach(function (node) {\n    return el.appendChild(node);\n  });\n  return el;\n}\n/**\n * Normalizes and inserts content into an element; this is identical to\n * `appendContent()`, except it empties the element first.\n *\n * @param {Element} el\n *        Element to insert normalized content into.\n *\n * @param {module:dom~ContentDescriptor} content\n *        A content descriptor value.\n *\n * @return {Element}\n *         The element with inserted normalized content.\n */\n\nfunction insertContent(el, content) {\n  return appendContent(emptyEl(el), content);\n}\n/**\n * Check if an event was a single left click.\n *\n * @param  {EventTarget~Event} event\n *         Event object.\n *\n * @return {boolean}\n *         Will be `true` if a single left click, `false` otherwise.\n */\n\nfunction isSingleLeftClick(event) {\n  // Note: if you create something draggable, be sure to\n  // call it on both `mousedown` and `mousemove` event,\n  // otherwise `mousedown` should be enough for a button\n  if (event.button === undefined && event.buttons === undefined) {\n    // Why do we need `buttons` ?\n    // Because, middle mouse sometimes have this:\n    // e.button === 0 and e.buttons === 4\n    // Furthermore, we want to prevent combination click, something like\n    // HOLD middlemouse then left click, that would be\n    // e.button === 0, e.buttons === 5\n    // just `button` is not gonna work\n    // Alright, then what this block does ?\n    // this is for chrome `simulate mobile devices`\n    // I want to support this as well\n    return true;\n  }\n\n  if (event.button === 0 && event.buttons === undefined) {\n    // Touch screen, sometimes on some specific device, `buttons`\n    // doesn't have anything (safari on ios, blackberry...)\n    return true;\n  }\n\n  if (event.button !== 0 || event.buttons !== 1) {\n    // This is the reason we have those if else block above\n    // if any special case we can catch and let it slide\n    // we do it above, when get to here, this definitely\n    // is-not-left-click\n    return false;\n  }\n\n  return true;\n}\n/**\n * Finds a single DOM element matching `selector` within the optional\n * `context` of another DOM element (defaulting to `document`).\n *\n * @param  {string} selector\n *         A valid CSS selector, which will be passed to `querySelector`.\n *\n * @param  {Element|String} [context=document]\n *         A DOM element within which to query. Can also be a selector\n *         string in which case the first matching element will be used\n *         as context. If missing (or no element matches selector), falls\n *         back to `document`.\n *\n * @return {Element|null}\n *         The element that was found or null.\n */\n\nvar $ = createQuerier('querySelector');\n/**\n * Finds a all DOM elements matching `selector` within the optional\n * `context` of another DOM element (defaulting to `document`).\n *\n * @param  {string} selector\n *         A valid CSS selector, which will be passed to `querySelectorAll`.\n *\n * @param  {Element|String} [context=document]\n *         A DOM element within which to query. Can also be a selector\n *         string in which case the first matching element will be used\n *         as context. If missing (or no element matches selector), falls\n *         back to `document`.\n *\n * @return {NodeList}\n *         A element list of elements that were found. Will be empty if none\n *         were found.\n *\n */\n\nvar $$ = createQuerier('querySelectorAll');\n\nvar Dom = /*#__PURE__*/Object.freeze({\n  isReal: isReal,\n  isEl: isEl,\n  isInFrame: isInFrame,\n  createEl: createEl,\n  textContent: textContent,\n  prependTo: prependTo,\n  hasClass: hasClass,\n  addClass: addClass,\n  removeClass: removeClass,\n  toggleClass: toggleClass,\n  setAttributes: setAttributes,\n  getAttributes: getAttributes,\n  getAttribute: getAttribute,\n  setAttribute: setAttribute,\n  removeAttribute: removeAttribute,\n  blockTextSelection: blockTextSelection,\n  unblockTextSelection: unblockTextSelection,\n  getBoundingClientRect: getBoundingClientRect,\n  findPosition: findPosition,\n  getPointerPosition: getPointerPosition,\n  isTextNode: isTextNode,\n  emptyEl: emptyEl,\n  normalizeContent: normalizeContent,\n  appendContent: appendContent,\n  insertContent: insertContent,\n  isSingleLeftClick: isSingleLeftClick,\n  $: $,\n  $$: $$\n});\n\n/**\n * @file guid.js\n * @module guid\n */\n\n/**\n * Unique ID for an element or function\n * @type {Number}\n */\nvar _guid = 1;\n/**\n * Get a unique auto-incrementing ID by number that has not been returned before.\n *\n * @return {number}\n *         A new unique ID.\n */\n\nfunction newGUID() {\n  return _guid++;\n}\n\n/**\n * @file dom-data.js\n * @module dom-data\n */\n/**\n * Element Data Store.\n *\n * Allows for binding data to an element without putting it directly on the\n * element. Ex. Event listeners are stored here.\n * (also from jsninja.com, slightly modified and updated for closure compiler)\n *\n * @type {Object}\n * @private\n */\n\nvar elData = {};\n/*\n * Unique attribute name to store an element's guid in\n *\n * @type {String}\n * @constant\n * @private\n */\n\nvar elIdAttr = 'vdata' + new Date().getTime();\n/**\n * Returns the cache object where data for an element is stored\n *\n * @param {Element} el\n *        Element to store data for.\n *\n * @return {Object}\n *         The cache object for that el that was passed in.\n */\n\nfunction getData(el) {\n  var id = el[elIdAttr];\n\n  if (!id) {\n    id = el[elIdAttr] = newGUID();\n  }\n\n  if (!elData[id]) {\n    elData[id] = {};\n  }\n\n  return elData[id];\n}\n/**\n * Returns whether or not an element has cached data\n *\n * @param {Element} el\n *        Check if this element has cached data.\n *\n * @return {boolean}\n *         - True if the DOM element has cached data.\n *         - False otherwise.\n */\n\nfunction hasData(el) {\n  var id = el[elIdAttr];\n\n  if (!id) {\n    return false;\n  }\n\n  return !!Object.getOwnPropertyNames(elData[id]).length;\n}\n/**\n * Delete data for the element from the cache and the guid attr from getElementById\n *\n * @param {Element} el\n *        Remove cached data for this element.\n */\n\nfunction removeData(el) {\n  var id = el[elIdAttr];\n\n  if (!id) {\n    return;\n  } // Remove all stored data\n\n\n  delete elData[id]; // Remove the elIdAttr property from the DOM node\n\n  try {\n    delete el[elIdAttr];\n  } catch (e) {\n    if (el.removeAttribute) {\n      el.removeAttribute(elIdAttr);\n    } else {\n      // IE doesn't appear to support removeAttribute on the document element\n      el[elIdAttr] = null;\n    }\n  }\n}\n\n/**\n * @file events.js. An Event System (John Resig - Secrets of a JS Ninja http://jsninja.com/)\n * (Original book version wasn't completely usable, so fixed some things and made Closure Compiler compatible)\n * This should work very similarly to jQuery's events, however it's based off the book version which isn't as\n * robust as jquery's, so there's probably some differences.\n *\n * @file events.js\n * @module events\n */\n/**\n * Clean up the listener cache and dispatchers\n *\n * @param {Element|Object} elem\n *        Element to clean up\n *\n * @param {string} type\n *        Type of event to clean up\n */\n\nfunction _cleanUpEvents(elem, type) {\n  var data = getData(elem); // Remove the events of a particular type if there are none left\n\n  if (data.handlers[type].length === 0) {\n    delete data.handlers[type]; // data.handlers[type] = null;\n    // Setting to null was causing an error with data.handlers\n    // Remove the meta-handler from the element\n\n    if (elem.removeEventListener) {\n      elem.removeEventListener(type, data.dispatcher, false);\n    } else if (elem.detachEvent) {\n      elem.detachEvent('on' + type, data.dispatcher);\n    }\n  } // Remove the events object if there are no types left\n\n\n  if (Object.getOwnPropertyNames(data.handlers).length <= 0) {\n    delete data.handlers;\n    delete data.dispatcher;\n    delete data.disabled;\n  } // Finally remove the element data if there is no data left\n\n\n  if (Object.getOwnPropertyNames(data).length === 0) {\n    removeData(elem);\n  }\n}\n/**\n * Loops through an array of event types and calls the requested method for each type.\n *\n * @param {Function} fn\n *        The event method we want to use.\n *\n * @param {Element|Object} elem\n *        Element or object to bind listeners to\n *\n * @param {string} type\n *        Type of event to bind to.\n *\n * @param {EventTarget~EventListener} callback\n *        Event listener.\n */\n\n\nfunction _handleMultipleEvents(fn, elem, types, callback) {\n  types.forEach(function (type) {\n    // Call the event method for each one of the types\n    fn(elem, type, callback);\n  });\n}\n/**\n * Fix a native event to have standard property values\n *\n * @param {Object} event\n *        Event object to fix.\n *\n * @return {Object}\n *         Fixed event object.\n */\n\n\nfunction fixEvent(event) {\n  function returnTrue() {\n    return true;\n  }\n\n  function returnFalse() {\n    return false;\n  } // Test if fixing up is needed\n  // Used to check if !event.stopPropagation instead of isPropagationStopped\n  // But native events return true for stopPropagation, but don't have\n  // other expected methods like isPropagationStopped. Seems to be a problem\n  // with the Javascript Ninja code. So we're just overriding all events now.\n\n\n  if (!event || !event.isPropagationStopped) {\n    var old = event || window$1.event;\n    event = {}; // Clone the old object so that we can modify the values event = {};\n    // IE8 Doesn't like when you mess with native event properties\n    // Firefox returns false for event.hasOwnProperty('type') and other props\n    //  which makes copying more difficult.\n    // TODO: Probably best to create a whitelist of event props\n\n    for (var key in old) {\n      // Safari 6.0.3 warns you if you try to copy deprecated layerX/Y\n      // Chrome warns you if you try to copy deprecated keyboardEvent.keyLocation\n      // and webkitMovementX/Y\n      if (key !== 'layerX' && key !== 'layerY' && key !== 'keyLocation' && key !== 'webkitMovementX' && key !== 'webkitMovementY') {\n        // Chrome 32+ warns if you try to copy deprecated returnValue, but\n        // we still want to if preventDefault isn't supported (IE8).\n        if (!(key === 'returnValue' && old.preventDefault)) {\n          event[key] = old[key];\n        }\n      }\n    } // The event occurred on this element\n\n\n    if (!event.target) {\n      event.target = event.srcElement || document;\n    } // Handle which other element the event is related to\n\n\n    if (!event.relatedTarget) {\n      event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;\n    } // Stop the default browser action\n\n\n    event.preventDefault = function () {\n      if (old.preventDefault) {\n        old.preventDefault();\n      }\n\n      event.returnValue = false;\n      old.returnValue = false;\n      event.defaultPrevented = true;\n    };\n\n    event.defaultPrevented = false; // Stop the event from bubbling\n\n    event.stopPropagation = function () {\n      if (old.stopPropagation) {\n        old.stopPropagation();\n      }\n\n      event.cancelBubble = true;\n      old.cancelBubble = true;\n      event.isPropagationStopped = returnTrue;\n    };\n\n    event.isPropagationStopped = returnFalse; // Stop the event from bubbling and executing other handlers\n\n    event.stopImmediatePropagation = function () {\n      if (old.stopImmediatePropagation) {\n        old.stopImmediatePropagation();\n      }\n\n      event.isImmediatePropagationStopped = returnTrue;\n      event.stopPropagation();\n    };\n\n    event.isImmediatePropagationStopped = returnFalse; // Handle mouse position\n\n    if (event.clientX !== null && event.clientX !== undefined) {\n      var doc = document.documentElement;\n      var body = document.body;\n      event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);\n      event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);\n    } // Handle key presses\n\n\n    event.which = event.charCode || event.keyCode; // Fix button for mouse clicks:\n    // 0 == left; 1 == middle; 2 == right\n\n    if (event.button !== null && event.button !== undefined) {\n      // The following is disabled because it does not pass videojs-standard\n      // and... yikes.\n\n      /* eslint-disable */\n      event.button = event.button & 1 ? 0 : event.button & 4 ? 1 : event.button & 2 ? 2 : 0;\n      /* eslint-enable */\n    }\n  } // Returns fixed-up instance\n\n\n  return event;\n}\n/**\n * Whether passive event listeners are supported\n */\n\nvar _supportsPassive = false;\n\n(function () {\n  try {\n    var opts = Object.defineProperty({}, 'passive', {\n      get: function get() {\n        _supportsPassive = true;\n      }\n    });\n    window$1.addEventListener('test', null, opts);\n    window$1.removeEventListener('test', null, opts);\n  } catch (e) {// disregard\n  }\n})();\n/**\n * Touch events Chrome expects to be passive\n */\n\n\nvar passiveEvents = ['touchstart', 'touchmove'];\n/**\n * Add an event listener to element\n * It stores the handler function in a separate cache object\n * and adds a generic handler to the element's event,\n * along with a unique id (guid) to the element.\n *\n * @param {Element|Object} elem\n *        Element or object to bind listeners to\n *\n * @param {string|string[]} type\n *        Type of event to bind to.\n *\n * @param {EventTarget~EventListener} fn\n *        Event listener.\n */\n\nfunction on(elem, type, fn) {\n  if (Array.isArray(type)) {\n    return _handleMultipleEvents(on, elem, type, fn);\n  }\n\n  var data = getData(elem); // We need a place to store all our handler data\n\n  if (!data.handlers) {\n    data.handlers = {};\n  }\n\n  if (!data.handlers[type]) {\n    data.handlers[type] = [];\n  }\n\n  if (!fn.guid) {\n    fn.guid = newGUID();\n  }\n\n  data.handlers[type].push(fn);\n\n  if (!data.dispatcher) {\n    data.disabled = false;\n\n    data.dispatcher = function (event, hash) {\n      if (data.disabled) {\n        return;\n      }\n\n      event = fixEvent(event);\n      var handlers = data.handlers[event.type];\n\n      if (handlers) {\n        // Copy handlers so if handlers are added/removed during the process it doesn't throw everything off.\n        var handlersCopy = handlers.slice(0);\n\n        for (var m = 0, n = handlersCopy.length; m < n; m++) {\n          if (event.isImmediatePropagationStopped()) {\n            break;\n          } else {\n            try {\n              handlersCopy[m].call(elem, event, hash);\n            } catch (e) {\n              log.error(e);\n            }\n          }\n        }\n      }\n    };\n  }\n\n  if (data.handlers[type].length === 1) {\n    if (elem.addEventListener) {\n      var options = false;\n\n      if (_supportsPassive && passiveEvents.indexOf(type) > -1) {\n        options = {\n          passive: true\n        };\n      }\n\n      elem.addEventListener(type, data.dispatcher, options);\n    } else if (elem.attachEvent) {\n      elem.attachEvent('on' + type, data.dispatcher);\n    }\n  }\n}\n/**\n * Removes event listeners from an element\n *\n * @param {Element|Object} elem\n *        Object to remove listeners from.\n *\n * @param {string|string[]} [type]\n *        Type of listener to remove. Don't include to remove all events from element.\n *\n * @param {EventTarget~EventListener} [fn]\n *        Specific listener to remove. Don't include to remove listeners for an event\n *        type.\n */\n\nfunction off(elem, type, fn) {\n  // Don't want to add a cache object through getElData if not needed\n  if (!hasData(elem)) {\n    return;\n  }\n\n  var data = getData(elem); // If no events exist, nothing to unbind\n\n  if (!data.handlers) {\n    return;\n  }\n\n  if (Array.isArray(type)) {\n    return _handleMultipleEvents(off, elem, type, fn);\n  } // Utility function\n\n\n  var removeType = function removeType(el, t) {\n    data.handlers[t] = [];\n\n    _cleanUpEvents(el, t);\n  }; // Are we removing all bound events?\n\n\n  if (type === undefined) {\n    for (var t in data.handlers) {\n      if (Object.prototype.hasOwnProperty.call(data.handlers || {}, t)) {\n        removeType(elem, t);\n      }\n    }\n\n    return;\n  }\n\n  var handlers = data.handlers[type]; // If no handlers exist, nothing to unbind\n\n  if (!handlers) {\n    return;\n  } // If no listener was provided, remove all listeners for type\n\n\n  if (!fn) {\n    removeType(elem, type);\n    return;\n  } // We're only removing a single handler\n\n\n  if (fn.guid) {\n    for (var n = 0; n < handlers.length; n++) {\n      if (handlers[n].guid === fn.guid) {\n        handlers.splice(n--, 1);\n      }\n    }\n  }\n\n  _cleanUpEvents(elem, type);\n}\n/**\n * Trigger an event for an element\n *\n * @param {Element|Object} elem\n *        Element to trigger an event on\n *\n * @param {EventTarget~Event|string} event\n *        A string (the type) or an event object with a type attribute\n *\n * @param {Object} [hash]\n *        data hash to pass along with the event\n *\n * @return {boolean|undefined}\n *         Returns the opposite of `defaultPrevented` if default was\n *         prevented. Otherwise, returns `undefined`\n */\n\nfunction trigger(elem, event, hash) {\n  // Fetches element data and a reference to the parent (for bubbling).\n  // Don't want to add a data object to cache for every parent,\n  // so checking hasElData first.\n  var elemData = hasData(elem) ? getData(elem) : {};\n  var parent = elem.parentNode || elem.ownerDocument; // type = event.type || event,\n  // handler;\n  // If an event name was passed as a string, creates an event out of it\n\n  if (typeof event === 'string') {\n    event = {\n      type: event,\n      target: elem\n    };\n  } else if (!event.target) {\n    event.target = elem;\n  } // Normalizes the event properties.\n\n\n  event = fixEvent(event); // If the passed element has a dispatcher, executes the established handlers.\n\n  if (elemData.dispatcher) {\n    elemData.dispatcher.call(elem, event, hash);\n  } // Unless explicitly stopped or the event does not bubble (e.g. media events)\n  // recursively calls this function to bubble the event up the DOM.\n\n\n  if (parent && !event.isPropagationStopped() && event.bubbles === true) {\n    trigger.call(null, parent, event, hash); // If at the top of the DOM, triggers the default action unless disabled.\n  } else if (!parent && !event.defaultPrevented && event.target && event.target[event.type]) {\n    var targetData = getData(event.target); // Checks if the target has a default action for this event.\n\n    if (event.target[event.type]) {\n      // Temporarily disables event dispatching on the target as we have already executed the handler.\n      targetData.disabled = true; // Executes the default action.\n\n      if (typeof event.target[event.type] === 'function') {\n        event.target[event.type]();\n      } // Re-enables event dispatching.\n\n\n      targetData.disabled = false;\n    }\n  } // Inform the triggerer if the default was prevented by returning false\n\n\n  return !event.defaultPrevented;\n}\n/**\n * Trigger a listener only once for an event.\n *\n * @param {Element|Object} elem\n *        Element or object to bind to.\n *\n * @param {string|string[]} type\n *        Name/type of event\n *\n * @param {Event~EventListener} fn\n *        Event listener function\n */\n\nfunction one(elem, type, fn) {\n  if (Array.isArray(type)) {\n    return _handleMultipleEvents(one, elem, type, fn);\n  }\n\n  var func = function func() {\n    off(elem, type, func);\n    fn.apply(this, arguments);\n  }; // copy the guid to the new function so it can removed using the original function's ID\n\n\n  func.guid = fn.guid = fn.guid || newGUID();\n  on(elem, type, func);\n}\n\nvar Events = /*#__PURE__*/Object.freeze({\n  fixEvent: fixEvent,\n  on: on,\n  off: off,\n  trigger: trigger,\n  one: one\n});\n\n/**\n * @file setup.js - Functions for setting up a player without\n * user interaction based on the data-setup `attribute` of the video tag.\n *\n * @module setup\n */\nvar _windowLoaded = false;\nvar videojs;\n/**\n * Set up any tags that have a data-setup `attribute` when the player is started.\n */\n\nvar autoSetup = function autoSetup() {\n  // Protect against breakage in non-browser environments and check global autoSetup option.\n  if (!isReal() || videojs.options.autoSetup === false) {\n    return;\n  }\n\n  var vids = Array.prototype.slice.call(document.getElementsByTagName('video'));\n  var audios = Array.prototype.slice.call(document.getElementsByTagName('audio'));\n  var divs = Array.prototype.slice.call(document.getElementsByTagName('video-js'));\n  var mediaEls = vids.concat(audios, divs); // Check if any media elements exist\n\n  if (mediaEls && mediaEls.length > 0) {\n    for (var i = 0, e = mediaEls.length; i < e; i++) {\n      var mediaEl = mediaEls[i]; // Check if element exists, has getAttribute func.\n\n      if (mediaEl && mediaEl.getAttribute) {\n        // Make sure this player hasn't already been set up.\n        if (mediaEl.player === undefined) {\n          var options = mediaEl.getAttribute('data-setup'); // Check if data-setup attr exists.\n          // We only auto-setup if they've added the data-setup attr.\n\n          if (options !== null) {\n            // Create new video.js instance.\n            videojs(mediaEl);\n          }\n        } // If getAttribute isn't defined, we need to wait for the DOM.\n\n      } else {\n        autoSetupTimeout(1);\n        break;\n      }\n    } // No videos were found, so keep looping unless page is finished loading.\n\n  } else if (!_windowLoaded) {\n    autoSetupTimeout(1);\n  }\n};\n/**\n * Wait until the page is loaded before running autoSetup. This will be called in\n * autoSetup if `hasLoaded` returns false.\n *\n * @param {number} wait\n *        How long to wait in ms\n *\n * @param {module:videojs} [vjs]\n *        The videojs library function\n */\n\n\nfunction autoSetupTimeout(wait, vjs) {\n  if (vjs) {\n    videojs = vjs;\n  }\n\n  window$1.setTimeout(autoSetup, wait);\n}\n\nif (isReal() && document.readyState === 'complete') {\n  _windowLoaded = true;\n} else {\n  /**\n   * Listen for the load event on window, and set _windowLoaded to true.\n   *\n   * @listens load\n   */\n  one(window$1, 'load', function () {\n    _windowLoaded = true;\n  });\n}\n\n/**\n * @file stylesheet.js\n * @module stylesheet\n */\n/**\n * Create a DOM syle element given a className for it.\n *\n * @param {string} className\n *        The className to add to the created style element.\n *\n * @return {Element}\n *         The element that was created.\n */\n\nvar createStyleElement = function createStyleElement(className) {\n  var style = document.createElement('style');\n  style.className = className;\n  return style;\n};\n/**\n * Add text to a DOM element.\n *\n * @param {Element} el\n *        The Element to add text content to.\n *\n * @param {string} content\n *        The text to add to the element.\n */\n\nvar setTextContent = function setTextContent(el, content) {\n  if (el.styleSheet) {\n    el.styleSheet.cssText = content;\n  } else {\n    el.textContent = content;\n  }\n};\n\n/**\n * @file fn.js\n * @module fn\n */\n/**\n * Bind (a.k.a proxy or context). A simple method for changing the context of\n * a function.\n *\n * It also stores a unique id on the function so it can be easily removed from\n * events.\n *\n * @function\n * @param    {Mixed} context\n *           The object to bind as scope.\n *\n * @param    {Function} fn\n *           The function to be bound to a scope.\n *\n * @param    {number} [uid]\n *           An optional unique ID for the function to be set\n *\n * @return   {Function}\n *           The new function that will be bound into the context given\n */\n\nvar bind = function bind(context, fn, uid) {\n  // Make sure the function has a unique ID\n  if (!fn.guid) {\n    fn.guid = newGUID();\n  } // Create the new function that changes the context\n\n\n  var bound = function bound() {\n    return fn.apply(context, arguments);\n  }; // Allow for the ability to individualize this function\n  // Needed in the case where multiple objects might share the same prototype\n  // IF both items add an event listener with the same function, then you try to remove just one\n  // it will remove both because they both have the same guid.\n  // when using this, you need to use the bind method when you remove the listener as well.\n  // currently used in text tracks\n\n\n  bound.guid = uid ? uid + '_' + fn.guid : fn.guid;\n  return bound;\n};\n/**\n * Wraps the given function, `fn`, with a new function that only invokes `fn`\n * at most once per every `wait` milliseconds.\n *\n * @function\n * @param    {Function} fn\n *           The function to be throttled.\n *\n * @param    {number}   wait\n *           The number of milliseconds by which to throttle.\n *\n * @return   {Function}\n */\n\nvar throttle = function throttle(fn, wait) {\n  var last = Date.now();\n\n  var throttled = function throttled() {\n    var now = Date.now();\n\n    if (now - last >= wait) {\n      fn.apply(void 0, arguments);\n      last = now;\n    }\n  };\n\n  return throttled;\n};\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked.\n *\n * Inspired by lodash and underscore implementations.\n *\n * @function\n * @param    {Function} func\n *           The function to wrap with debounce behavior.\n *\n * @param    {number} wait\n *           The number of milliseconds to wait after the last invocation.\n *\n * @param    {boolean} [immediate]\n *           Whether or not to invoke the function immediately upon creation.\n *\n * @param    {Object} [context=window]\n *           The \"context\" in which the debounced function should debounce. For\n *           example, if this function should be tied to a Video.js player,\n *           the player can be passed here. Alternatively, defaults to the\n *           global `window` object.\n *\n * @return   {Function}\n *           A debounced function.\n */\n\nvar debounce = function debounce(func, wait, immediate, context) {\n  if (context === void 0) {\n    context = window$1;\n  }\n\n  var timeout;\n\n  var cancel = function cancel() {\n    context.clearTimeout(timeout);\n    timeout = null;\n  };\n  /* eslint-disable consistent-this */\n\n\n  var debounced = function debounced() {\n    var self = this;\n    var args = arguments;\n\n    var _later = function later() {\n      timeout = null;\n      _later = null;\n\n      if (!immediate) {\n        func.apply(self, args);\n      }\n    };\n\n    if (!timeout && immediate) {\n      func.apply(self, args);\n    }\n\n    context.clearTimeout(timeout);\n    timeout = context.setTimeout(_later, wait);\n  };\n  /* eslint-enable consistent-this */\n\n\n  debounced.cancel = cancel;\n  return debounced;\n};\n\n/**\n * @file src/js/event-target.js\n */\n/**\n * `EventTarget` is a class that can have the same API as the DOM `EventTarget`. It\n * adds shorthand functions that wrap around lengthy functions. For example:\n * the `on` function is a wrapper around `addEventListener`.\n *\n * @see [EventTarget Spec]{@link https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget}\n * @class EventTarget\n */\n\nvar EventTarget = function EventTarget() {};\n/**\n * A Custom DOM event.\n *\n * @typedef {Object} EventTarget~Event\n * @see [Properties]{@link https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent}\n */\n\n/**\n * All event listeners should follow the following format.\n *\n * @callback EventTarget~EventListener\n * @this {EventTarget}\n *\n * @param {EventTarget~Event} event\n *        the event that triggered this function\n *\n * @param {Object} [hash]\n *        hash of data sent during the event\n */\n\n/**\n * An object containing event names as keys and booleans as values.\n *\n * > NOTE: If an event name is set to a true value here {@link EventTarget#trigger}\n *         will have extra functionality. See that function for more information.\n *\n * @property EventTarget.prototype.allowedEvents_\n * @private\n */\n\n\nEventTarget.prototype.allowedEvents_ = {};\n/**\n * Adds an `event listener` to an instance of an `EventTarget`. An `event listener` is a\n * function that will get called when an event with a certain name gets triggered.\n *\n * @param {string|string[]} type\n *        An event name or an array of event names.\n *\n * @param {EventTarget~EventListener} fn\n *        The function to call with `EventTarget`s\n */\n\nEventTarget.prototype.on = function (type, fn) {\n  // Remove the addEventListener alias before calling Events.on\n  // so we don't get into an infinite type loop\n  var ael = this.addEventListener;\n\n  this.addEventListener = function () {};\n\n  on(this, type, fn);\n  this.addEventListener = ael;\n};\n/**\n * An alias of {@link EventTarget#on}. Allows `EventTarget` to mimic\n * the standard DOM API.\n *\n * @function\n * @see {@link EventTarget#on}\n */\n\n\nEventTarget.prototype.addEventListener = EventTarget.prototype.on;\n/**\n * Removes an `event listener` for a specific event from an instance of `EventTarget`.\n * This makes it so that the `event listener` will no longer get called when the\n * named event happens.\n *\n * @param {string|string[]} type\n *        An event name or an array of event names.\n *\n * @param {EventTarget~EventListener} fn\n *        The function to remove.\n */\n\nEventTarget.prototype.off = function (type, fn) {\n  off(this, type, fn);\n};\n/**\n * An alias of {@link EventTarget#off}. Allows `EventTarget` to mimic\n * the standard DOM API.\n *\n * @function\n * @see {@link EventTarget#off}\n */\n\n\nEventTarget.prototype.removeEventListener = EventTarget.prototype.off;\n/**\n * This function will add an `event listener` that gets triggered only once. After the\n * first trigger it will get removed. This is like adding an `event listener`\n * with {@link EventTarget#on} that calls {@link EventTarget#off} on itself.\n *\n * @param {string|string[]} type\n *        An event name or an array of event names.\n *\n * @param {EventTarget~EventListener} fn\n *        The function to be called once for each event name.\n */\n\nEventTarget.prototype.one = function (type, fn) {\n  // Remove the addEventListener alialing Events.on\n  // so we don't get into an infinite type loop\n  var ael = this.addEventListener;\n\n  this.addEventListener = function () {};\n\n  one(this, type, fn);\n  this.addEventListener = ael;\n};\n/**\n * This function causes an event to happen. This will then cause any `event listeners`\n * that are waiting for that event, to get called. If there are no `event listeners`\n * for an event then nothing will happen.\n *\n * If the name of the `Event` that is being triggered is in `EventTarget.allowedEvents_`.\n * Trigger will also call the `on` + `uppercaseEventName` function.\n *\n * Example:\n * 'click' is in `EventTarget.allowedEvents_`, so, trigger will attempt to call\n * `onClick` if it exists.\n *\n * @param {string|EventTarget~Event|Object} event\n *        The name of the event, an `Event`, or an object with a key of type set to\n *        an event name.\n */\n\n\nEventTarget.prototype.trigger = function (event) {\n  var type = event.type || event; // deprecation\n  // In a future version we should default target to `this`\n  // similar to how we default the target to `elem` in\n  // `Events.trigger`. Right now the default `target` will be\n  // `document` due to the `Event.fixEvent` call.\n\n  if (typeof event === 'string') {\n    event = {\n      type: type\n    };\n  }\n\n  event = fixEvent(event);\n\n  if (this.allowedEvents_[type] && this['on' + type]) {\n    this['on' + type](event);\n  }\n\n  trigger(this, event);\n};\n/**\n * An alias of {@link EventTarget#trigger}. Allows `EventTarget` to mimic\n * the standard DOM API.\n *\n * @function\n * @see {@link EventTarget#trigger}\n */\n\n\nEventTarget.prototype.dispatchEvent = EventTarget.prototype.trigger;\nvar EVENT_MAP;\n\nEventTarget.prototype.queueTrigger = function (event) {\n  var _this = this;\n\n  // only set up EVENT_MAP if it'll be used\n  if (!EVENT_MAP) {\n    EVENT_MAP = new Map();\n  }\n\n  var type = event.type || event;\n  var map = EVENT_MAP.get(this);\n\n  if (!map) {\n    map = new Map();\n    EVENT_MAP.set(this, map);\n  }\n\n  var oldTimeout = map.get(type);\n  map.delete(type);\n  window$1.clearTimeout(oldTimeout);\n  var timeout = window$1.setTimeout(function () {\n    // if we cleared out all timeouts for the current target, delete its map\n    if (map.size === 0) {\n      map = null;\n      EVENT_MAP.delete(_this);\n    }\n\n    _this.trigger(event);\n  }, 0);\n  map.set(type, timeout);\n};\n\n/**\n * @file mixins/evented.js\n * @module evented\n */\n/**\n * Returns whether or not an object has had the evented mixin applied.\n *\n * @param  {Object} object\n *         An object to test.\n *\n * @return {boolean}\n *         Whether or not the object appears to be evented.\n */\n\nvar isEvented = function isEvented(object) {\n  return object instanceof EventTarget || !!object.eventBusEl_ && ['on', 'one', 'off', 'trigger'].every(function (k) {\n    return typeof object[k] === 'function';\n  });\n};\n/**\n * Adds a callback to run after the evented mixin applied.\n *\n * @param  {Object} object\n *         An object to Add\n * @param  {Function} callback\n *         The callback to run.\n */\n\n\nvar addEventedCallback = function addEventedCallback(target, callback) {\n  if (isEvented(target)) {\n    callback();\n  } else {\n    if (!target.eventedCallbacks) {\n      target.eventedCallbacks = [];\n    }\n\n    target.eventedCallbacks.push(callback);\n  }\n};\n/**\n * Whether a value is a valid event type - non-empty string or array.\n *\n * @private\n * @param  {string|Array} type\n *         The type value to test.\n *\n * @return {boolean}\n *         Whether or not the type is a valid event type.\n */\n\n\nvar isValidEventType = function isValidEventType(type) {\n  return (// The regex here verifies that the `type` contains at least one non-\n    // whitespace character.\n    typeof type === 'string' && /\\S/.test(type) || Array.isArray(type) && !!type.length\n  );\n};\n/**\n * Validates a value to determine if it is a valid event target. Throws if not.\n *\n * @private\n * @throws {Error}\n *         If the target does not appear to be a valid event target.\n *\n * @param  {Object} target\n *         The object to test.\n */\n\n\nvar validateTarget = function validateTarget(target) {\n  if (!target.nodeName && !isEvented(target)) {\n    throw new Error('Invalid target; must be a DOM node or evented object.');\n  }\n};\n/**\n * Validates a value to determine if it is a valid event target. Throws if not.\n *\n * @private\n * @throws {Error}\n *         If the type does not appear to be a valid event type.\n *\n * @param  {string|Array} type\n *         The type to test.\n */\n\n\nvar validateEventType = function validateEventType(type) {\n  if (!isValidEventType(type)) {\n    throw new Error('Invalid event type; must be a non-empty string or array.');\n  }\n};\n/**\n * Validates a value to determine if it is a valid listener. Throws if not.\n *\n * @private\n * @throws {Error}\n *         If the listener is not a function.\n *\n * @param  {Function} listener\n *         The listener to test.\n */\n\n\nvar validateListener = function validateListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new Error('Invalid listener; must be a function.');\n  }\n};\n/**\n * Takes an array of arguments given to `on()` or `one()`, validates them, and\n * normalizes them into an object.\n *\n * @private\n * @param  {Object} self\n *         The evented object on which `on()` or `one()` was called. This\n *         object will be bound as the `this` value for the listener.\n *\n * @param  {Array} args\n *         An array of arguments passed to `on()` or `one()`.\n *\n * @return {Object}\n *         An object containing useful values for `on()` or `one()` calls.\n */\n\n\nvar normalizeListenArgs = function normalizeListenArgs(self, args) {\n  // If the number of arguments is less than 3, the target is always the\n  // evented object itself.\n  var isTargetingSelf = args.length < 3 || args[0] === self || args[0] === self.eventBusEl_;\n  var target;\n  var type;\n  var listener;\n\n  if (isTargetingSelf) {\n    target = self.eventBusEl_; // Deal with cases where we got 3 arguments, but we are still listening to\n    // the evented object itself.\n\n    if (args.length >= 3) {\n      args.shift();\n    }\n\n    type = args[0];\n    listener = args[1];\n  } else {\n    target = args[0];\n    type = args[1];\n    listener = args[2];\n  }\n\n  validateTarget(target);\n  validateEventType(type);\n  validateListener(listener);\n  listener = bind(self, listener);\n  return {\n    isTargetingSelf: isTargetingSelf,\n    target: target,\n    type: type,\n    listener: listener\n  };\n};\n/**\n * Adds the listener to the event type(s) on the target, normalizing for\n * the type of target.\n *\n * @private\n * @param  {Element|Object} target\n *         A DOM node or evented object.\n *\n * @param  {string} method\n *         The event binding method to use (\"on\" or \"one\").\n *\n * @param  {string|Array} type\n *         One or more event type(s).\n *\n * @param  {Function} listener\n *         A listener function.\n */\n\n\nvar listen = function listen(target, method, type, listener) {\n  validateTarget(target);\n\n  if (target.nodeName) {\n    Events[method](target, type, listener);\n  } else {\n    target[method](type, listener);\n  }\n};\n/**\n * Contains methods that provide event capabilities to an object which is passed\n * to {@link module:evented|evented}.\n *\n * @mixin EventedMixin\n */\n\n\nvar EventedMixin = {\n  /**\n   * Add a listener to an event (or events) on this object or another evented\n   * object.\n   *\n   * @param  {string|Array|Element|Object} targetOrType\n   *         If this is a string or array, it represents the event type(s)\n   *         that will trigger the listener.\n   *\n   *         Another evented object can be passed here instead, which will\n   *         cause the listener to listen for events on _that_ object.\n   *\n   *         In either case, the listener's `this` value will be bound to\n   *         this object.\n   *\n   * @param  {string|Array|Function} typeOrListener\n   *         If the first argument was a string or array, this should be the\n   *         listener function. Otherwise, this is a string or array of event\n   *         type(s).\n   *\n   * @param  {Function} [listener]\n   *         If the first argument was another evented object, this will be\n   *         the listener function.\n   */\n  on: function on$$1() {\n    var _this = this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var _normalizeListenArgs = normalizeListenArgs(this, args),\n        isTargetingSelf = _normalizeListenArgs.isTargetingSelf,\n        target = _normalizeListenArgs.target,\n        type = _normalizeListenArgs.type,\n        listener = _normalizeListenArgs.listener;\n\n    listen(target, 'on', type, listener); // If this object is listening to another evented object.\n\n    if (!isTargetingSelf) {\n      // If this object is disposed, remove the listener.\n      var removeListenerOnDispose = function removeListenerOnDispose() {\n        return _this.off(target, type, listener);\n      }; // Use the same function ID as the listener so we can remove it later it\n      // using the ID of the original listener.\n\n\n      removeListenerOnDispose.guid = listener.guid; // Add a listener to the target's dispose event as well. This ensures\n      // that if the target is disposed BEFORE this object, we remove the\n      // removal listener that was just added. Otherwise, we create a memory leak.\n\n      var removeRemoverOnTargetDispose = function removeRemoverOnTargetDispose() {\n        return _this.off('dispose', removeListenerOnDispose);\n      }; // Use the same function ID as the listener so we can remove it later\n      // it using the ID of the original listener.\n\n\n      removeRemoverOnTargetDispose.guid = listener.guid;\n      listen(this, 'on', 'dispose', removeListenerOnDispose);\n      listen(target, 'on', 'dispose', removeRemoverOnTargetDispose);\n    }\n  },\n\n  /**\n   * Add a listener to an event (or events) on this object or another evented\n   * object. The listener will only be called once and then removed.\n   *\n   * @param  {string|Array|Element|Object} targetOrType\n   *         If this is a string or array, it represents the event type(s)\n   *         that will trigger the listener.\n   *\n   *         Another evented object can be passed here instead, which will\n   *         cause the listener to listen for events on _that_ object.\n   *\n   *         In either case, the listener's `this` value will be bound to\n   *         this object.\n   *\n   * @param  {string|Array|Function} typeOrListener\n   *         If the first argument was a string or array, this should be the\n   *         listener function. Otherwise, this is a string or array of event\n   *         type(s).\n   *\n   * @param  {Function} [listener]\n   *         If the first argument was another evented object, this will be\n   *         the listener function.\n   */\n  one: function one$$1() {\n    var _this2 = this;\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    var _normalizeListenArgs2 = normalizeListenArgs(this, args),\n        isTargetingSelf = _normalizeListenArgs2.isTargetingSelf,\n        target = _normalizeListenArgs2.target,\n        type = _normalizeListenArgs2.type,\n        listener = _normalizeListenArgs2.listener; // Targeting this evented object.\n\n\n    if (isTargetingSelf) {\n      listen(target, 'one', type, listener); // Targeting another evented object.\n    } else {\n      var wrapper = function wrapper() {\n        _this2.off(target, type, wrapper);\n\n        for (var _len3 = arguments.length, largs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          largs[_key3] = arguments[_key3];\n        }\n\n        listener.apply(null, largs);\n      }; // Use the same function ID as the listener so we can remove it later\n      // it using the ID of the original listener.\n\n\n      wrapper.guid = listener.guid;\n      listen(target, 'one', type, wrapper);\n    }\n  },\n\n  /**\n   * Removes listener(s) from event(s) on an evented object.\n   *\n   * @param  {string|Array|Element|Object} [targetOrType]\n   *         If this is a string or array, it represents the event type(s).\n   *\n   *         Another evented object can be passed here instead, in which case\n   *         ALL 3 arguments are _required_.\n   *\n   * @param  {string|Array|Function} [typeOrListener]\n   *         If the first argument was a string or array, this may be the\n   *         listener function. Otherwise, this is a string or array of event\n   *         type(s).\n   *\n   * @param  {Function} [listener]\n   *         If the first argument was another evented object, this will be\n   *         the listener function; otherwise, _all_ listeners bound to the\n   *         event type(s) will be removed.\n   */\n  off: function off$$1(targetOrType, typeOrListener, listener) {\n    // Targeting this evented object.\n    if (!targetOrType || isValidEventType(targetOrType)) {\n      off(this.eventBusEl_, targetOrType, typeOrListener); // Targeting another evented object.\n    } else {\n      var target = targetOrType;\n      var type = typeOrListener; // Fail fast and in a meaningful way!\n\n      validateTarget(target);\n      validateEventType(type);\n      validateListener(listener); // Ensure there's at least a guid, even if the function hasn't been used\n\n      listener = bind(this, listener); // Remove the dispose listener on this evented object, which was given\n      // the same guid as the event listener in on().\n\n      this.off('dispose', listener);\n\n      if (target.nodeName) {\n        off(target, type, listener);\n        off(target, 'dispose', listener);\n      } else if (isEvented(target)) {\n        target.off(type, listener);\n        target.off('dispose', listener);\n      }\n    }\n  },\n\n  /**\n   * Fire an event on this evented object, causing its listeners to be called.\n   *\n   * @param   {string|Object} event\n   *          An event type or an object with a type property.\n   *\n   * @param   {Object} [hash]\n   *          An additional object to pass along to listeners.\n   *\n   * @return {boolean}\n   *          Whether or not the default behavior was prevented.\n   */\n  trigger: function trigger$$1(event, hash) {\n    return trigger(this.eventBusEl_, event, hash);\n  }\n};\n/**\n * Applies {@link module:evented~EventedMixin|EventedMixin} to a target object.\n *\n * @param  {Object} target\n *         The object to which to add event methods.\n *\n * @param  {Object} [options={}]\n *         Options for customizing the mixin behavior.\n *\n * @param  {string} [options.eventBusKey]\n *         By default, adds a `eventBusEl_` DOM element to the target object,\n *         which is used as an event bus. If the target object already has a\n *         DOM element that should be used, pass its key here.\n *\n * @return {Object}\n *         The target object.\n */\n\nfunction evented(target, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      eventBusKey = _options.eventBusKey; // Set or create the eventBusEl_.\n\n  if (eventBusKey) {\n    if (!target[eventBusKey].nodeName) {\n      throw new Error(\"The eventBusKey \\\"\" + eventBusKey + \"\\\" does not refer to an element.\");\n    }\n\n    target.eventBusEl_ = target[eventBusKey];\n  } else {\n    target.eventBusEl_ = createEl('span', {\n      className: 'vjs-event-bus'\n    });\n  }\n\n  assign(target, EventedMixin);\n\n  if (target.eventedCallbacks) {\n    target.eventedCallbacks.forEach(function (callback) {\n      callback();\n    });\n  } // When any evented object is disposed, it removes all its listeners.\n\n\n  target.on('dispose', function () {\n    target.off();\n    window$1.setTimeout(function () {\n      target.eventBusEl_ = null;\n    }, 0);\n  });\n  return target;\n}\n\n/**\n * @file mixins/stateful.js\n * @module stateful\n */\n/**\n * Contains methods that provide statefulness to an object which is passed\n * to {@link module:stateful}.\n *\n * @mixin StatefulMixin\n */\n\nvar StatefulMixin = {\n  /**\n   * A hash containing arbitrary keys and values representing the state of\n   * the object.\n   *\n   * @type {Object}\n   */\n  state: {},\n\n  /**\n   * Set the state of an object by mutating its\n   * {@link module:stateful~StatefulMixin.state|state} object in place.\n   *\n   * @fires   module:stateful~StatefulMixin#statechanged\n   * @param   {Object|Function} stateUpdates\n   *          A new set of properties to shallow-merge into the plugin state.\n   *          Can be a plain object or a function returning a plain object.\n   *\n   * @return {Object|undefined}\n   *          An object containing changes that occurred. If no changes\n   *          occurred, returns `undefined`.\n   */\n  setState: function setState(stateUpdates) {\n    var _this = this;\n\n    // Support providing the `stateUpdates` state as a function.\n    if (typeof stateUpdates === 'function') {\n      stateUpdates = stateUpdates();\n    }\n\n    var changes;\n    each(stateUpdates, function (value, key) {\n      // Record the change if the value is different from what's in the\n      // current state.\n      if (_this.state[key] !== value) {\n        changes = changes || {};\n        changes[key] = {\n          from: _this.state[key],\n          to: value\n        };\n      }\n\n      _this.state[key] = value;\n    }); // Only trigger \"statechange\" if there were changes AND we have a trigger\n    // function. This allows us to not require that the target object be an\n    // evented object.\n\n    if (changes && isEvented(this)) {\n      /**\n       * An event triggered on an object that is both\n       * {@link module:stateful|stateful} and {@link module:evented|evented}\n       * indicating that its state has changed.\n       *\n       * @event    module:stateful~StatefulMixin#statechanged\n       * @type     {Object}\n       * @property {Object} changes\n       *           A hash containing the properties that were changed and\n       *           the values they were changed `from` and `to`.\n       */\n      this.trigger({\n        changes: changes,\n        type: 'statechanged'\n      });\n    }\n\n    return changes;\n  }\n};\n/**\n * Applies {@link module:stateful~StatefulMixin|StatefulMixin} to a target\n * object.\n *\n * If the target object is {@link module:evented|evented} and has a\n * `handleStateChanged` method, that method will be automatically bound to the\n * `statechanged` event on itself.\n *\n * @param   {Object} target\n *          The object to be made stateful.\n *\n * @param   {Object} [defaultState]\n *          A default set of properties to populate the newly-stateful object's\n *          `state` property.\n *\n * @return {Object}\n *          Returns the `target`.\n */\n\nfunction stateful(target, defaultState) {\n  assign(target, StatefulMixin); // This happens after the mixing-in because we need to replace the `state`\n  // added in that step.\n\n  target.state = assign({}, target.state, defaultState); // Auto-bind the `handleStateChanged` method of the target object if it exists.\n\n  if (typeof target.handleStateChanged === 'function' && isEvented(target)) {\n    target.on('statechanged', target.handleStateChanged);\n  }\n\n  return target;\n}\n\n/**\n * @file to-title-case.js\n * @module to-title-case\n */\n\n/**\n * Uppercase the first letter of a string.\n *\n * @param {string} string\n *        String to be uppercased\n *\n * @return {string}\n *         The string with an uppercased first letter\n */\nfunction toTitleCase(string) {\n  if (typeof string !== 'string') {\n    return string;\n  }\n\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n/**\n * Compares the TitleCase versions of the two strings for equality.\n *\n * @param {string} str1\n *        The first string to compare\n *\n * @param {string} str2\n *        The second string to compare\n *\n * @return {boolean}\n *         Whether the TitleCase versions of the strings are equal\n */\n\nfunction titleCaseEquals(str1, str2) {\n  return toTitleCase(str1) === toTitleCase(str2);\n}\n\n/**\n * @file merge-options.js\n * @module merge-options\n */\n/**\n * Merge two objects recursively.\n *\n * Performs a deep merge like\n * {@link https://lodash.com/docs/4.17.10#merge|lodash.merge}, but only merges\n * plain objects (not arrays, elements, or anything else).\n *\n * Non-plain object values will be copied directly from the right-most\n * argument.\n *\n * @static\n * @param   {Object[]} sources\n *          One or more objects to merge into a new object.\n *\n * @return {Object}\n *          A new object that is the merged result of all sources.\n */\n\nfunction mergeOptions() {\n  var result = {};\n\n  for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n    sources[_key] = arguments[_key];\n  }\n\n  sources.forEach(function (source) {\n    if (!source) {\n      return;\n    }\n\n    each(source, function (value, key) {\n      if (!isPlain(value)) {\n        result[key] = value;\n        return;\n      }\n\n      if (!isPlain(result[key])) {\n        result[key] = {};\n      }\n\n      result[key] = mergeOptions(result[key], value);\n    });\n  });\n  return result;\n}\n\n/**\n * Player Component - Base class for all UI objects\n *\n * @file component.js\n */\n/**\n * Base class for all UI Components.\n * Components are UI objects which represent both a javascript object and an element\n * in the DOM. They can be children of other components, and can have\n * children themselves.\n *\n * Components can also use methods from {@link EventTarget}\n */\n\nvar Component =\n/*#__PURE__*/\nfunction () {\n  /**\n   * A callback that is called when a component is ready. Does not have any\n   * paramters and any callback value will be ignored.\n   *\n   * @callback Component~ReadyCallback\n   * @this Component\n   */\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Object[]} [options.children]\n   *        An array of children objects to intialize this component with. Children objects have\n   *        a name property that will be used if more than one component of the same type needs to be\n   *        added.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        Function that gets called when the `Component` is ready.\n   */\n  function Component(player, options, ready) {\n    // The component might be the player itself and we can't pass `this` to super\n    if (!player && this.play) {\n      this.player_ = player = this; // eslint-disable-line\n    } else {\n      this.player_ = player;\n    } // Hold the reference to the parent component via `addChild` method\n\n\n    this.parentComponent_ = null; // Make a copy of prototype.options_ to protect against overriding defaults\n\n    this.options_ = mergeOptions({}, this.options_); // Updated options with supplied options\n\n    options = this.options_ = mergeOptions(this.options_, options); // Get ID from options or options element if one is supplied\n\n    this.id_ = options.id || options.el && options.el.id; // If there was no ID from the options, generate one\n\n    if (!this.id_) {\n      // Don't require the player ID function in the case of mock players\n      var id = player && player.id && player.id() || 'no_player';\n      this.id_ = id + \"_component_\" + newGUID();\n    }\n\n    this.name_ = options.name || null; // Create element if one wasn't provided in options\n\n    if (options.el) {\n      this.el_ = options.el;\n    } else if (options.createEl !== false) {\n      this.el_ = this.createEl();\n    } // if evented is anything except false, we want to mixin in evented\n\n\n    if (options.evented !== false) {\n      // Make this an evented object and use `el_`, if available, as its event bus\n      evented(this, {\n        eventBusKey: this.el_ ? 'el_' : null\n      });\n    }\n\n    stateful(this, this.constructor.defaultState);\n    this.children_ = [];\n    this.childIndex_ = {};\n    this.childNameIndex_ = {}; // Add any child components in options\n\n    if (options.initChildren !== false) {\n      this.initChildren();\n    }\n\n    this.ready(ready); // Don't want to trigger ready here or it will before init is actually\n    // finished for all children that run this constructor\n\n    if (options.reportTouchActivity !== false) {\n      this.enableTouchActivity();\n    }\n  }\n  /**\n   * Dispose of the `Component` and all child components.\n   *\n   * @fires Component#dispose\n   */\n\n\n  var _proto = Component.prototype;\n\n  _proto.dispose = function dispose() {\n    /**\n     * Triggered when a `Component` is disposed.\n     *\n     * @event Component#dispose\n     * @type {EventTarget~Event}\n     *\n     * @property {boolean} [bubbles=false]\n     *           set to false so that the close event does not\n     *           bubble up\n     */\n    this.trigger({\n      type: 'dispose',\n      bubbles: false\n    }); // Dispose all children.\n\n    if (this.children_) {\n      for (var i = this.children_.length - 1; i >= 0; i--) {\n        if (this.children_[i].dispose) {\n          this.children_[i].dispose();\n        }\n      }\n    } // Delete child references\n\n\n    this.children_ = null;\n    this.childIndex_ = null;\n    this.childNameIndex_ = null;\n    this.parentComponent_ = null;\n\n    if (this.el_) {\n      // Remove element from DOM\n      if (this.el_.parentNode) {\n        this.el_.parentNode.removeChild(this.el_);\n      }\n\n      removeData(this.el_);\n      this.el_ = null;\n    } // remove reference to the player after disposing of the element\n\n\n    this.player_ = null;\n  }\n  /**\n   * Return the {@link Player} that the `Component` has attached to.\n   *\n   * @return {Player}\n   *         The player that this `Component` has attached to.\n   */\n  ;\n\n  _proto.player = function player() {\n    return this.player_;\n  }\n  /**\n   * Deep merge of options objects with new options.\n   * > Note: When both `obj` and `options` contain properties whose values are objects.\n   *         The two properties get merged using {@link module:mergeOptions}\n   *\n   * @param {Object} obj\n   *        The object that contains new options.\n   *\n   * @return {Object}\n   *         A new object of `this.options_` and `obj` merged together.\n   *\n   * @deprecated since version 5\n   */\n  ;\n\n  _proto.options = function options(obj) {\n    log.warn('this.options() has been deprecated and will be moved to the constructor in 6.0');\n\n    if (!obj) {\n      return this.options_;\n    }\n\n    this.options_ = mergeOptions(this.options_, obj);\n    return this.options_;\n  }\n  /**\n   * Get the `Component`s DOM element\n   *\n   * @return {Element}\n   *         The DOM element for this `Component`.\n   */\n  ;\n\n  _proto.el = function el() {\n    return this.el_;\n  }\n  /**\n   * Create the `Component`s DOM element.\n   *\n   * @param {string} [tagName]\n   *        Element's DOM node type. e.g. 'div'\n   *\n   * @param {Object} [properties]\n   *        An object of properties that should be set.\n   *\n   * @param {Object} [attributes]\n   *        An object of attributes that should be set.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  ;\n\n  _proto.createEl = function createEl$$1(tagName, properties, attributes) {\n    return createEl(tagName, properties, attributes);\n  }\n  /**\n   * Localize a string given the string in english.\n   *\n   * If tokens are provided, it'll try and run a simple token replacement on the provided string.\n   * The tokens it looks for look like `{1}` with the index being 1-indexed into the tokens array.\n   *\n   * If a `defaultValue` is provided, it'll use that over `string`,\n   * if a value isn't found in provided language files.\n   * This is useful if you want to have a descriptive key for token replacement\n   * but have a succinct localized string and not require `en.json` to be included.\n   *\n   * Currently, it is used for the progress bar timing.\n   * ```js\n   * {\n   *   \"progress bar timing: currentTime={1} duration={2}\": \"{1} of {2}\"\n   * }\n   * ```\n   * It is then used like so:\n   * ```js\n   * this.localize('progress bar timing: currentTime={1} duration{2}',\n   *               [this.player_.currentTime(), this.player_.duration()],\n   *               '{1} of {2}');\n   * ```\n   *\n   * Which outputs something like: `01:23 of 24:56`.\n   *\n   *\n   * @param {string} string\n   *        The string to localize and the key to lookup in the language files.\n   * @param {string[]} [tokens]\n   *        If the current item has token replacements, provide the tokens here.\n   * @param {string} [defaultValue]\n   *        Defaults to `string`. Can be a default value to use for token replacement\n   *        if the lookup key is needed to be separate.\n   *\n   * @return {string}\n   *         The localized string or if no localization exists the english string.\n   */\n  ;\n\n  _proto.localize = function localize(string, tokens, defaultValue) {\n    if (defaultValue === void 0) {\n      defaultValue = string;\n    }\n\n    var code = this.player_.language && this.player_.language();\n    var languages = this.player_.languages && this.player_.languages();\n    var language = languages && languages[code];\n    var primaryCode = code && code.split('-')[0];\n    var primaryLang = languages && languages[primaryCode];\n    var localizedString = defaultValue;\n\n    if (language && language[string]) {\n      localizedString = language[string];\n    } else if (primaryLang && primaryLang[string]) {\n      localizedString = primaryLang[string];\n    }\n\n    if (tokens) {\n      localizedString = localizedString.replace(/\\{(\\d+)\\}/g, function (match, index) {\n        var value = tokens[index - 1];\n        var ret = value;\n\n        if (typeof value === 'undefined') {\n          ret = match;\n        }\n\n        return ret;\n      });\n    }\n\n    return localizedString;\n  }\n  /**\n   * Return the `Component`s DOM element. This is where children get inserted.\n   * This will usually be the the same as the element returned in {@link Component#el}.\n   *\n   * @return {Element}\n   *         The content element for this `Component`.\n   */\n  ;\n\n  _proto.contentEl = function contentEl() {\n    return this.contentEl_ || this.el_;\n  }\n  /**\n   * Get this `Component`s ID\n   *\n   * @return {string}\n   *         The id of this `Component`\n   */\n  ;\n\n  _proto.id = function id() {\n    return this.id_;\n  }\n  /**\n   * Get the `Component`s name. The name gets used to reference the `Component`\n   * and is set during registration.\n   *\n   * @return {string}\n   *         The name of this `Component`.\n   */\n  ;\n\n  _proto.name = function name() {\n    return this.name_;\n  }\n  /**\n   * Get an array of all child components\n   *\n   * @return {Array}\n   *         The children\n   */\n  ;\n\n  _proto.children = function children() {\n    return this.children_;\n  }\n  /**\n   * Returns the child `Component` with the given `id`.\n   *\n   * @param {string} id\n   *        The id of the child `Component` to get.\n   *\n   * @return {Component|undefined}\n   *         The child `Component` with the given `id` or undefined.\n   */\n  ;\n\n  _proto.getChildById = function getChildById(id) {\n    return this.childIndex_[id];\n  }\n  /**\n   * Returns the child `Component` with the given `name`.\n   *\n   * @param {string} name\n   *        The name of the child `Component` to get.\n   *\n   * @return {Component|undefined}\n   *         The child `Component` with the given `name` or undefined.\n   */\n  ;\n\n  _proto.getChild = function getChild(name) {\n    if (!name) {\n      return;\n    }\n\n    name = toTitleCase(name);\n    return this.childNameIndex_[name];\n  }\n  /**\n   * Add a child `Component` inside the current `Component`.\n   *\n   *\n   * @param {string|Component} child\n   *        The name or instance of a child to add.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of options that will get passed to children of\n   *        the child.\n   *\n   * @param {number} [index=this.children_.length]\n   *        The index to attempt to add a child into.\n   *\n   * @return {Component}\n   *         The `Component` that gets added as a child. When using a string the\n   *         `Component` will get created by this process.\n   */\n  ;\n\n  _proto.addChild = function addChild(child, options, index) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (index === void 0) {\n      index = this.children_.length;\n    }\n\n    var component;\n    var componentName; // If child is a string, create component with options\n\n    if (typeof child === 'string') {\n      componentName = toTitleCase(child);\n      var componentClassName = options.componentClass || componentName; // Set name through options\n\n      options.name = componentName; // Create a new object & element for this controls set\n      // If there's no .player_, this is a player\n\n      var ComponentClass = Component.getComponent(componentClassName);\n\n      if (!ComponentClass) {\n        throw new Error(\"Component \" + componentClassName + \" does not exist\");\n      } // data stored directly on the videojs object may be\n      // misidentified as a component to retain\n      // backwards-compatibility with 4.x. check to make sure the\n      // component class can be instantiated.\n\n\n      if (typeof ComponentClass !== 'function') {\n        return null;\n      }\n\n      component = new ComponentClass(this.player_ || this, options); // child is a component instance\n    } else {\n      component = child;\n    }\n\n    if (component.parentComponent_) {\n      component.parentComponent_.removeChild(component);\n    }\n\n    this.children_.splice(index, 0, component);\n    component.parentComponent_ = this;\n\n    if (typeof component.id === 'function') {\n      this.childIndex_[component.id()] = component;\n    } // If a name wasn't used to create the component, check if we can use the\n    // name function of the component\n\n\n    componentName = componentName || component.name && toTitleCase(component.name());\n\n    if (componentName) {\n      this.childNameIndex_[componentName] = component;\n    } // Add the UI object's element to the container div (box)\n    // Having an element is not required\n\n\n    if (typeof component.el === 'function' && component.el()) {\n      var childNodes = this.contentEl().children;\n      var refNode = childNodes[index] || null;\n      this.contentEl().insertBefore(component.el(), refNode);\n    } // Return so it can stored on parent object if desired.\n\n\n    return component;\n  }\n  /**\n   * Remove a child `Component` from this `Component`s list of children. Also removes\n   * the child `Component`s element from this `Component`s element.\n   *\n   * @param {Component} component\n   *        The child `Component` to remove.\n   */\n  ;\n\n  _proto.removeChild = function removeChild(component) {\n    if (typeof component === 'string') {\n      component = this.getChild(component);\n    }\n\n    if (!component || !this.children_) {\n      return;\n    }\n\n    var childFound = false;\n\n    for (var i = this.children_.length - 1; i >= 0; i--) {\n      if (this.children_[i] === component) {\n        childFound = true;\n        this.children_.splice(i, 1);\n        break;\n      }\n    }\n\n    if (!childFound) {\n      return;\n    }\n\n    component.parentComponent_ = null;\n    this.childIndex_[component.id()] = null;\n    this.childNameIndex_[component.name()] = null;\n    var compEl = component.el();\n\n    if (compEl && compEl.parentNode === this.contentEl()) {\n      this.contentEl().removeChild(component.el());\n    }\n  }\n  /**\n   * Add and initialize default child `Component`s based upon options.\n   */\n  ;\n\n  _proto.initChildren = function initChildren() {\n    var _this = this;\n\n    var children = this.options_.children;\n\n    if (children) {\n      // `this` is `parent`\n      var parentOptions = this.options_;\n\n      var handleAdd = function handleAdd(child) {\n        var name = child.name;\n        var opts = child.opts; // Allow options for children to be set at the parent options\n        // e.g. videojs(id, { controlBar: false });\n        // instead of videojs(id, { children: { controlBar: false });\n\n        if (parentOptions[name] !== undefined) {\n          opts = parentOptions[name];\n        } // Allow for disabling default components\n        // e.g. options['children']['posterImage'] = false\n\n\n        if (opts === false) {\n          return;\n        } // Allow options to be passed as a simple boolean if no configuration\n        // is necessary.\n\n\n        if (opts === true) {\n          opts = {};\n        } // We also want to pass the original player options\n        // to each component as well so they don't need to\n        // reach back into the player for options later.\n\n\n        opts.playerOptions = _this.options_.playerOptions; // Create and add the child component.\n        // Add a direct reference to the child by name on the parent instance.\n        // If two of the same component are used, different names should be supplied\n        // for each\n\n        var newChild = _this.addChild(name, opts);\n\n        if (newChild) {\n          _this[name] = newChild;\n        }\n      }; // Allow for an array of children details to passed in the options\n\n\n      var workingChildren;\n      var Tech = Component.getComponent('Tech');\n\n      if (Array.isArray(children)) {\n        workingChildren = children;\n      } else {\n        workingChildren = Object.keys(children);\n      }\n\n      workingChildren // children that are in this.options_ but also in workingChildren  would\n      // give us extra children we do not want. So, we want to filter them out.\n      .concat(Object.keys(this.options_).filter(function (child) {\n        return !workingChildren.some(function (wchild) {\n          if (typeof wchild === 'string') {\n            return child === wchild;\n          }\n\n          return child === wchild.name;\n        });\n      })).map(function (child) {\n        var name;\n        var opts;\n\n        if (typeof child === 'string') {\n          name = child;\n          opts = children[name] || _this.options_[name] || {};\n        } else {\n          name = child.name;\n          opts = child;\n        }\n\n        return {\n          name: name,\n          opts: opts\n        };\n      }).filter(function (child) {\n        // we have to make sure that child.name isn't in the techOrder since\n        // techs are registerd as Components but can't aren't compatible\n        // See https://github.com/videojs/video.js/issues/2772\n        var c = Component.getComponent(child.opts.componentClass || toTitleCase(child.name));\n        return c && !Tech.isTech(c);\n      }).forEach(handleAdd);\n    }\n  }\n  /**\n   * Builds the default DOM class name. Should be overriden by sub-components.\n   *\n   * @return {string}\n   *         The DOM class name for this object.\n   *\n   * @abstract\n   */\n  ;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    // Child classes can include a function that does:\n    // return 'CLASS NAME' + this._super();\n    return '';\n  }\n  /**\n   * Bind a listener to the component's ready state.\n   * Different from event listeners in that if the ready event has already happened\n   * it will trigger the function immediately.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n  ;\n\n  _proto.ready = function ready(fn, sync) {\n    if (sync === void 0) {\n      sync = false;\n    }\n\n    if (!fn) {\n      return;\n    }\n\n    if (!this.isReady_) {\n      this.readyQueue_ = this.readyQueue_ || [];\n      this.readyQueue_.push(fn);\n      return;\n    }\n\n    if (sync) {\n      fn.call(this);\n    } else {\n      // Call the function asynchronously by default for consistency\n      this.setTimeout(fn, 1);\n    }\n  }\n  /**\n   * Trigger all the ready listeners for this `Component`.\n   *\n   * @fires Component#ready\n   */\n  ;\n\n  _proto.triggerReady = function triggerReady() {\n    this.isReady_ = true; // Ensure ready is triggered asynchronously\n\n    this.setTimeout(function () {\n      var readyQueue = this.readyQueue_; // Reset Ready Queue\n\n      this.readyQueue_ = [];\n\n      if (readyQueue && readyQueue.length > 0) {\n        readyQueue.forEach(function (fn) {\n          fn.call(this);\n        }, this);\n      } // Allow for using event listeners also\n\n      /**\n       * Triggered when a `Component` is ready.\n       *\n       * @event Component#ready\n       * @type {EventTarget~Event}\n       */\n\n\n      this.trigger('ready');\n    }, 1);\n  }\n  /**\n   * Find a single DOM element matching a `selector`. This can be within the `Component`s\n   * `contentEl()` or another custom context.\n   *\n   * @param {string} selector\n   *        A valid CSS selector, which will be passed to `querySelector`.\n   *\n   * @param {Element|string} [context=this.contentEl()]\n   *        A DOM element within which to query. Can also be a selector string in\n   *        which case the first matching element will get used as context. If\n   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns\n   *        nothing it falls back to `document`.\n   *\n   * @return {Element|null}\n   *         the dom element that was found, or null\n   *\n   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)\n   */\n  ;\n\n  _proto.$ = function $$$1(selector, context) {\n    return $(selector, context || this.contentEl());\n  }\n  /**\n   * Finds all DOM element matching a `selector`. This can be within the `Component`s\n   * `contentEl()` or another custom context.\n   *\n   * @param {string} selector\n   *        A valid CSS selector, which will be passed to `querySelectorAll`.\n   *\n   * @param {Element|string} [context=this.contentEl()]\n   *        A DOM element within which to query. Can also be a selector string in\n   *        which case the first matching element will get used as context. If\n   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns\n   *        nothing it falls back to `document`.\n   *\n   * @return {NodeList}\n   *         a list of dom elements that were found\n   *\n   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)\n   */\n  ;\n\n  _proto.$$ = function $$$$1(selector, context) {\n    return $$(selector, context || this.contentEl());\n  }\n  /**\n   * Check if a component's element has a CSS class name.\n   *\n   * @param {string} classToCheck\n   *        CSS class name to check.\n   *\n   * @return {boolean}\n   *         - True if the `Component` has the class.\n   *         - False if the `Component` does not have the class`\n   */\n  ;\n\n  _proto.hasClass = function hasClass$$1(classToCheck) {\n    return hasClass(this.el_, classToCheck);\n  }\n  /**\n   * Add a CSS class name to the `Component`s element.\n   *\n   * @param {string} classToAdd\n   *        CSS class name to add\n   */\n  ;\n\n  _proto.addClass = function addClass$$1(classToAdd) {\n    addClass(this.el_, classToAdd);\n  }\n  /**\n   * Remove a CSS class name from the `Component`s element.\n   *\n   * @param {string} classToRemove\n   *        CSS class name to remove\n   */\n  ;\n\n  _proto.removeClass = function removeClass$$1(classToRemove) {\n    removeClass(this.el_, classToRemove);\n  }\n  /**\n   * Add or remove a CSS class name from the component's element.\n   * - `classToToggle` gets added when {@link Component#hasClass} would return false.\n   * - `classToToggle` gets removed when {@link Component#hasClass} would return true.\n   *\n   * @param  {string} classToToggle\n   *         The class to add or remove based on (@link Component#hasClass}\n   *\n   * @param  {boolean|Dom~predicate} [predicate]\n   *         An {@link Dom~predicate} function or a boolean\n   */\n  ;\n\n  _proto.toggleClass = function toggleClass$$1(classToToggle, predicate) {\n    toggleClass(this.el_, classToToggle, predicate);\n  }\n  /**\n   * Show the `Component`s element if it is hidden by removing the\n   * 'vjs-hidden' class name from it.\n   */\n  ;\n\n  _proto.show = function show() {\n    this.removeClass('vjs-hidden');\n  }\n  /**\n   * Hide the `Component`s element if it is currently showing by adding the\n   * 'vjs-hidden` class name to it.\n   */\n  ;\n\n  _proto.hide = function hide() {\n    this.addClass('vjs-hidden');\n  }\n  /**\n   * Lock a `Component`s element in its visible state by adding the 'vjs-lock-showing'\n   * class name to it. Used during fadeIn/fadeOut.\n   *\n   * @private\n   */\n  ;\n\n  _proto.lockShowing = function lockShowing() {\n    this.addClass('vjs-lock-showing');\n  }\n  /**\n   * Unlock a `Component`s element from its visible state by removing the 'vjs-lock-showing'\n   * class name from it. Used during fadeIn/fadeOut.\n   *\n   * @private\n   */\n  ;\n\n  _proto.unlockShowing = function unlockShowing() {\n    this.removeClass('vjs-lock-showing');\n  }\n  /**\n   * Get the value of an attribute on the `Component`s element.\n   *\n   * @param {string} attribute\n   *        Name of the attribute to get the value from.\n   *\n   * @return {string|null}\n   *         - The value of the attribute that was asked for.\n   *         - Can be an empty string on some browsers if the attribute does not exist\n   *           or has no value\n   *         - Most browsers will return null if the attibute does not exist or has\n   *           no value.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute}\n   */\n  ;\n\n  _proto.getAttribute = function getAttribute$$1(attribute) {\n    return getAttribute(this.el_, attribute);\n  }\n  /**\n   * Set the value of an attribute on the `Component`'s element\n   *\n   * @param {string} attribute\n   *        Name of the attribute to set.\n   *\n   * @param {string} value\n   *        Value to set the attribute to.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute}\n   */\n  ;\n\n  _proto.setAttribute = function setAttribute$$1(attribute, value) {\n    setAttribute(this.el_, attribute, value);\n  }\n  /**\n   * Remove an attribute from the `Component`s element.\n   *\n   * @param {string} attribute\n   *        Name of the attribute to remove.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute}\n   */\n  ;\n\n  _proto.removeAttribute = function removeAttribute$$1(attribute) {\n    removeAttribute(this.el_, attribute);\n  }\n  /**\n   * Get or set the width of the component based upon the CSS styles.\n   * See {@link Component#dimension} for more detailed information.\n   *\n   * @param {number|string} [num]\n   *        The width that you want to set postfixed with '%', 'px' or nothing.\n   *\n   * @param {boolean} [skipListeners]\n   *        Skip the componentresize event trigger\n   *\n   * @return {number|string}\n   *         The width when getting, zero if there is no width. Can be a string\n   *           postpixed with '%' or 'px'.\n   */\n  ;\n\n  _proto.width = function width(num, skipListeners) {\n    return this.dimension('width', num, skipListeners);\n  }\n  /**\n   * Get or set the height of the component based upon the CSS styles.\n   * See {@link Component#dimension} for more detailed information.\n   *\n   * @param {number|string} [num]\n   *        The height that you want to set postfixed with '%', 'px' or nothing.\n   *\n   * @param {boolean} [skipListeners]\n   *        Skip the componentresize event trigger\n   *\n   * @return {number|string}\n   *         The width when getting, zero if there is no width. Can be a string\n   *         postpixed with '%' or 'px'.\n   */\n  ;\n\n  _proto.height = function height(num, skipListeners) {\n    return this.dimension('height', num, skipListeners);\n  }\n  /**\n   * Set both the width and height of the `Component` element at the same time.\n   *\n   * @param  {number|string} width\n   *         Width to set the `Component`s element to.\n   *\n   * @param  {number|string} height\n   *         Height to set the `Component`s element to.\n   */\n  ;\n\n  _proto.dimensions = function dimensions(width, height) {\n    // Skip componentresize listeners on width for optimization\n    this.width(width, true);\n    this.height(height);\n  }\n  /**\n   * Get or set width or height of the `Component` element. This is the shared code\n   * for the {@link Component#width} and {@link Component#height}.\n   *\n   * Things to know:\n   * - If the width or height in an number this will return the number postfixed with 'px'.\n   * - If the width/height is a percent this will return the percent postfixed with '%'\n   * - Hidden elements have a width of 0 with `window.getComputedStyle`. This function\n   *   defaults to the `Component`s `style.width` and falls back to `window.getComputedStyle`.\n   *   See [this]{@link http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/}\n   *   for more information\n   * - If you want the computed style of the component, use {@link Component#currentWidth}\n   *   and {@link {Component#currentHeight}\n   *\n   * @fires Component#componentresize\n   *\n   * @param {string} widthOrHeight\n   8        'width' or 'height'\n   *\n   * @param  {number|string} [num]\n   8         New dimension\n   *\n   * @param  {boolean} [skipListeners]\n   *         Skip componentresize event trigger\n   *\n   * @return {number}\n   *         The dimension when getting or 0 if unset\n   */\n  ;\n\n  _proto.dimension = function dimension(widthOrHeight, num, skipListeners) {\n    if (num !== undefined) {\n      // Set to zero if null or literally NaN (NaN !== NaN)\n      if (num === null || num !== num) {\n        num = 0;\n      } // Check if using css width/height (% or px) and adjust\n\n\n      if (('' + num).indexOf('%') !== -1 || ('' + num).indexOf('px') !== -1) {\n        this.el_.style[widthOrHeight] = num;\n      } else if (num === 'auto') {\n        this.el_.style[widthOrHeight] = '';\n      } else {\n        this.el_.style[widthOrHeight] = num + 'px';\n      } // skipListeners allows us to avoid triggering the resize event when setting both width and height\n\n\n      if (!skipListeners) {\n        /**\n         * Triggered when a component is resized.\n         *\n         * @event Component#componentresize\n         * @type {EventTarget~Event}\n         */\n        this.trigger('componentresize');\n      }\n\n      return;\n    } // Not setting a value, so getting it\n    // Make sure element exists\n\n\n    if (!this.el_) {\n      return 0;\n    } // Get dimension value from style\n\n\n    var val = this.el_.style[widthOrHeight];\n    var pxIndex = val.indexOf('px');\n\n    if (pxIndex !== -1) {\n      // Return the pixel value with no 'px'\n      return parseInt(val.slice(0, pxIndex), 10);\n    } // No px so using % or no style was set, so falling back to offsetWidth/height\n    // If component has display:none, offset will return 0\n    // TODO: handle display:none and no dimension style using px\n\n\n    return parseInt(this.el_['offset' + toTitleCase(widthOrHeight)], 10);\n  }\n  /**\n   * Get the computed width or the height of the component's element.\n   *\n   * Uses `window.getComputedStyle`.\n   *\n   * @param {string} widthOrHeight\n   *        A string containing 'width' or 'height'. Whichever one you want to get.\n   *\n   * @return {number}\n   *         The dimension that gets asked for or 0 if nothing was set\n   *         for that dimension.\n   */\n  ;\n\n  _proto.currentDimension = function currentDimension(widthOrHeight) {\n    var computedWidthOrHeight = 0;\n\n    if (widthOrHeight !== 'width' && widthOrHeight !== 'height') {\n      throw new Error('currentDimension only accepts width or height value');\n    }\n\n    if (typeof window$1.getComputedStyle === 'function') {\n      var computedStyle = window$1.getComputedStyle(this.el_);\n      computedWidthOrHeight = computedStyle.getPropertyValue(widthOrHeight) || computedStyle[widthOrHeight];\n    } // remove 'px' from variable and parse as integer\n\n\n    computedWidthOrHeight = parseFloat(computedWidthOrHeight); // if the computed value is still 0, it's possible that the browser is lying\n    // and we want to check the offset values.\n    // This code also runs wherever getComputedStyle doesn't exist.\n\n    if (computedWidthOrHeight === 0) {\n      var rule = \"offset\" + toTitleCase(widthOrHeight);\n      computedWidthOrHeight = this.el_[rule];\n    }\n\n    return computedWidthOrHeight;\n  }\n  /**\n   * An object that contains width and height values of the `Component`s\n   * computed style. Uses `window.getComputedStyle`.\n   *\n   * @typedef {Object} Component~DimensionObject\n   *\n   * @property {number} width\n   *           The width of the `Component`s computed style.\n   *\n   * @property {number} height\n   *           The height of the `Component`s computed style.\n   */\n\n  /**\n   * Get an object that contains computed width and height values of the\n   * component's element.\n   *\n   * Uses `window.getComputedStyle`.\n   *\n   * @return {Component~DimensionObject}\n   *         The computed dimensions of the component's element.\n   */\n  ;\n\n  _proto.currentDimensions = function currentDimensions() {\n    return {\n      width: this.currentDimension('width'),\n      height: this.currentDimension('height')\n    };\n  }\n  /**\n   * Get the computed width of the component's element.\n   *\n   * Uses `window.getComputedStyle`.\n   *\n   * @return {number}\n   *         The computed width of the component's element.\n   */\n  ;\n\n  _proto.currentWidth = function currentWidth() {\n    return this.currentDimension('width');\n  }\n  /**\n   * Get the computed height of the component's element.\n   *\n   * Uses `window.getComputedStyle`.\n   *\n   * @return {number}\n   *         The computed height of the component's element.\n   */\n  ;\n\n  _proto.currentHeight = function currentHeight() {\n    return this.currentDimension('height');\n  }\n  /**\n   * Set the focus to this component\n   */\n  ;\n\n  _proto.focus = function focus() {\n    this.el_.focus();\n  }\n  /**\n   * Remove the focus from this component\n   */\n  ;\n\n  _proto.blur = function blur() {\n    this.el_.blur();\n  }\n  /**\n   * When this Component receives a keydown event which it does not process,\n   *  it passes the event to the Player for handling.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown` event that caused this function to be called.\n   */\n  ;\n\n  _proto.handleKeyPress = function handleKeyPress(event) {\n    if (this.player_) {\n      this.player_.handleKeyPress(event);\n    }\n  }\n  /**\n   * Emit a 'tap' events when touch event support gets detected. This gets used to\n   * support toggling the controls through a tap on the video. They get enabled\n   * because every sub-component would have extra overhead otherwise.\n   *\n   * @private\n   * @fires Component#tap\n   * @listens Component#touchstart\n   * @listens Component#touchmove\n   * @listens Component#touchleave\n   * @listens Component#touchcancel\n   * @listens Component#touchend\n    */\n  ;\n\n  _proto.emitTapEvents = function emitTapEvents() {\n    // Track the start time so we can determine how long the touch lasted\n    var touchStart = 0;\n    var firstTouch = null; // Maximum movement allowed during a touch event to still be considered a tap\n    // Other popular libs use anywhere from 2 (hammer.js) to 15,\n    // so 10 seems like a nice, round number.\n\n    var tapMovementThreshold = 10; // The maximum length a touch can be while still being considered a tap\n\n    var touchTimeThreshold = 200;\n    var couldBeTap;\n    this.on('touchstart', function (event) {\n      // If more than one finger, don't consider treating this as a click\n      if (event.touches.length === 1) {\n        // Copy pageX/pageY from the object\n        firstTouch = {\n          pageX: event.touches[0].pageX,\n          pageY: event.touches[0].pageY\n        }; // Record start time so we can detect a tap vs. \"touch and hold\"\n\n        touchStart = new Date().getTime(); // Reset couldBeTap tracking\n\n        couldBeTap = true;\n      }\n    });\n    this.on('touchmove', function (event) {\n      // If more than one finger, don't consider treating this as a click\n      if (event.touches.length > 1) {\n        couldBeTap = false;\n      } else if (firstTouch) {\n        // Some devices will throw touchmoves for all but the slightest of taps.\n        // So, if we moved only a small distance, this could still be a tap\n        var xdiff = event.touches[0].pageX - firstTouch.pageX;\n        var ydiff = event.touches[0].pageY - firstTouch.pageY;\n        var touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);\n\n        if (touchDistance > tapMovementThreshold) {\n          couldBeTap = false;\n        }\n      }\n    });\n\n    var noTap = function noTap() {\n      couldBeTap = false;\n    }; // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s\n\n\n    this.on('touchleave', noTap);\n    this.on('touchcancel', noTap); // When the touch ends, measure how long it took and trigger the appropriate\n    // event\n\n    this.on('touchend', function (event) {\n      firstTouch = null; // Proceed only if the touchmove/leave/cancel event didn't happen\n\n      if (couldBeTap === true) {\n        // Measure how long the touch lasted\n        var touchTime = new Date().getTime() - touchStart; // Make sure the touch was less than the threshold to be considered a tap\n\n        if (touchTime < touchTimeThreshold) {\n          // Don't let browser turn this into a click\n          event.preventDefault();\n          /**\n           * Triggered when a `Component` is tapped.\n           *\n           * @event Component#tap\n           * @type {EventTarget~Event}\n           */\n\n          this.trigger('tap'); // It may be good to copy the touchend event object and change the\n          // type to tap, if the other event properties aren't exact after\n          // Events.fixEvent runs (e.g. event.target)\n        }\n      }\n    });\n  }\n  /**\n   * This function reports user activity whenever touch events happen. This can get\n   * turned off by any sub-components that wants touch events to act another way.\n   *\n   * Report user touch activity when touch events occur. User activity gets used to\n   * determine when controls should show/hide. It is simple when it comes to mouse\n   * events, because any mouse event should show the controls. So we capture mouse\n   * events that bubble up to the player and report activity when that happens.\n   * With touch events it isn't as easy as `touchstart` and `touchend` toggle player\n   * controls. So touch events can't help us at the player level either.\n   *\n   * User activity gets checked asynchronously. So what could happen is a tap event\n   * on the video turns the controls off. Then the `touchend` event bubbles up to\n   * the player. Which, if it reported user activity, would turn the controls right\n   * back on. We also don't want to completely block touch events from bubbling up.\n   * Furthermore a `touchmove` event and anything other than a tap, should not turn\n   * controls back on.\n   *\n   * @listens Component#touchstart\n   * @listens Component#touchmove\n   * @listens Component#touchend\n   * @listens Component#touchcancel\n   */\n  ;\n\n  _proto.enableTouchActivity = function enableTouchActivity() {\n    // Don't continue if the root player doesn't support reporting user activity\n    if (!this.player() || !this.player().reportUserActivity) {\n      return;\n    } // listener for reporting that the user is active\n\n\n    var report = bind(this.player(), this.player().reportUserActivity);\n    var touchHolding;\n    this.on('touchstart', function () {\n      report(); // For as long as the they are touching the device or have their mouse down,\n      // we consider them active even if they're not moving their finger or mouse.\n      // So we want to continue to update that they are active\n\n      this.clearInterval(touchHolding); // report at the same interval as activityCheck\n\n      touchHolding = this.setInterval(report, 250);\n    });\n\n    var touchEnd = function touchEnd(event) {\n      report(); // stop the interval that maintains activity if the touch is holding\n\n      this.clearInterval(touchHolding);\n    };\n\n    this.on('touchmove', report);\n    this.on('touchend', touchEnd);\n    this.on('touchcancel', touchEnd);\n  }\n  /**\n   * A callback that has no parameters and is bound into `Component`s context.\n   *\n   * @callback Component~GenericCallback\n   * @this Component\n   */\n\n  /**\n   * Creates a function that runs after an `x` millisecond timeout. This function is a\n   * wrapper around `window.setTimeout`. There are a few reasons to use this one\n   * instead though:\n   * 1. It gets cleared via  {@link Component#clearTimeout} when\n   *    {@link Component#dispose} gets called.\n   * 2. The function callback will gets turned into a {@link Component~GenericCallback}\n   *\n   * > Note: You can't use `window.clearTimeout` on the id returned by this function. This\n   *         will cause its dispose listener not to get cleaned up! Please use\n   *         {@link Component#clearTimeout} or {@link Component#dispose} instead.\n   *\n   * @param {Component~GenericCallback} fn\n   *        The function that will be run after `timeout`.\n   *\n   * @param {number} timeout\n   *        Timeout in milliseconds to delay before executing the specified function.\n   *\n   * @return {number}\n   *         Returns a timeout ID that gets used to identify the timeout. It can also\n   *         get used in {@link Component#clearTimeout} to clear the timeout that\n   *         was set.\n   *\n   * @listens Component#dispose\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout}\n   */\n  ;\n\n  _proto.setTimeout = function setTimeout(fn, timeout) {\n    var _this2 = this;\n\n    // declare as variables so they are properly available in timeout function\n    // eslint-disable-next-line\n    var timeoutId, disposeFn;\n    fn = bind(this, fn);\n    timeoutId = window$1.setTimeout(function () {\n      _this2.off('dispose', disposeFn);\n\n      fn();\n    }, timeout);\n\n    disposeFn = function disposeFn() {\n      return _this2.clearTimeout(timeoutId);\n    };\n\n    disposeFn.guid = \"vjs-timeout-\" + timeoutId;\n    this.on('dispose', disposeFn);\n    return timeoutId;\n  }\n  /**\n   * Clears a timeout that gets created via `window.setTimeout` or\n   * {@link Component#setTimeout}. If you set a timeout via {@link Component#setTimeout}\n   * use this function instead of `window.clearTimout`. If you don't your dispose\n   * listener will not get cleaned up until {@link Component#dispose}!\n   *\n   * @param {number} timeoutId\n   *        The id of the timeout to clear. The return value of\n   *        {@link Component#setTimeout} or `window.setTimeout`.\n   *\n   * @return {number}\n   *         Returns the timeout id that was cleared.\n   *\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout}\n   */\n  ;\n\n  _proto.clearTimeout = function clearTimeout(timeoutId) {\n    window$1.clearTimeout(timeoutId);\n\n    var disposeFn = function disposeFn() {};\n\n    disposeFn.guid = \"vjs-timeout-\" + timeoutId;\n    this.off('dispose', disposeFn);\n    return timeoutId;\n  }\n  /**\n   * Creates a function that gets run every `x` milliseconds. This function is a wrapper\n   * around `window.setInterval`. There are a few reasons to use this one instead though.\n   * 1. It gets cleared via  {@link Component#clearInterval} when\n   *    {@link Component#dispose} gets called.\n   * 2. The function callback will be a {@link Component~GenericCallback}\n   *\n   * @param {Component~GenericCallback} fn\n   *        The function to run every `x` seconds.\n   *\n   * @param {number} interval\n   *        Execute the specified function every `x` milliseconds.\n   *\n   * @return {number}\n   *         Returns an id that can be used to identify the interval. It can also be be used in\n   *         {@link Component#clearInterval} to clear the interval.\n   *\n   * @listens Component#dispose\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval}\n   */\n  ;\n\n  _proto.setInterval = function setInterval(fn, interval) {\n    var _this3 = this;\n\n    fn = bind(this, fn);\n    var intervalId = window$1.setInterval(fn, interval);\n\n    var disposeFn = function disposeFn() {\n      return _this3.clearInterval(intervalId);\n    };\n\n    disposeFn.guid = \"vjs-interval-\" + intervalId;\n    this.on('dispose', disposeFn);\n    return intervalId;\n  }\n  /**\n   * Clears an interval that gets created via `window.setInterval` or\n   * {@link Component#setInterval}. If you set an inteval via {@link Component#setInterval}\n   * use this function instead of `window.clearInterval`. If you don't your dispose\n   * listener will not get cleaned up until {@link Component#dispose}!\n   *\n   * @param {number} intervalId\n   *        The id of the interval to clear. The return value of\n   *        {@link Component#setInterval} or `window.setInterval`.\n   *\n   * @return {number}\n   *         Returns the interval id that was cleared.\n   *\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval}\n   */\n  ;\n\n  _proto.clearInterval = function clearInterval(intervalId) {\n    window$1.clearInterval(intervalId);\n\n    var disposeFn = function disposeFn() {};\n\n    disposeFn.guid = \"vjs-interval-\" + intervalId;\n    this.off('dispose', disposeFn);\n    return intervalId;\n  }\n  /**\n   * Queues up a callback to be passed to requestAnimationFrame (rAF), but\n   * with a few extra bonuses:\n   *\n   * - Supports browsers that do not support rAF by falling back to\n   *   {@link Component#setTimeout}.\n   *\n   * - The callback is turned into a {@link Component~GenericCallback} (i.e.\n   *   bound to the component).\n   *\n   * - Automatic cancellation of the rAF callback is handled if the component\n   *   is disposed before it is called.\n   *\n   * @param  {Component~GenericCallback} fn\n   *         A function that will be bound to this component and executed just\n   *         before the browser's next repaint.\n   *\n   * @return {number}\n   *         Returns an rAF ID that gets used to identify the timeout. It can\n   *         also be used in {@link Component#cancelAnimationFrame} to cancel\n   *         the animation frame callback.\n   *\n   * @listens Component#dispose\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame}\n   */\n  ;\n\n  _proto.requestAnimationFrame = function requestAnimationFrame(fn) {\n    var _this4 = this;\n\n    // declare as variables so they are properly available in rAF function\n    // eslint-disable-next-line\n    var id, disposeFn;\n\n    if (this.supportsRaf_) {\n      fn = bind(this, fn);\n      id = window$1.requestAnimationFrame(function () {\n        _this4.off('dispose', disposeFn);\n\n        fn();\n      });\n\n      disposeFn = function disposeFn() {\n        return _this4.cancelAnimationFrame(id);\n      };\n\n      disposeFn.guid = \"vjs-raf-\" + id;\n      this.on('dispose', disposeFn);\n      return id;\n    } // Fall back to using a timer.\n\n\n    return this.setTimeout(fn, 1000 / 60);\n  }\n  /**\n   * Cancels a queued callback passed to {@link Component#requestAnimationFrame}\n   * (rAF).\n   *\n   * If you queue an rAF callback via {@link Component#requestAnimationFrame},\n   * use this function instead of `window.cancelAnimationFrame`. If you don't,\n   * your dispose listener will not get cleaned up until {@link Component#dispose}!\n   *\n   * @param {number} id\n   *        The rAF ID to clear. The return value of {@link Component#requestAnimationFrame}.\n   *\n   * @return {number}\n   *         Returns the rAF ID that was cleared.\n   *\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/cancelAnimationFrame}\n   */\n  ;\n\n  _proto.cancelAnimationFrame = function cancelAnimationFrame(id) {\n    if (this.supportsRaf_) {\n      window$1.cancelAnimationFrame(id);\n\n      var disposeFn = function disposeFn() {};\n\n      disposeFn.guid = \"vjs-raf-\" + id;\n      this.off('dispose', disposeFn);\n      return id;\n    } // Fall back to using a timer.\n\n\n    return this.clearTimeout(id);\n  }\n  /**\n   * Register a `Component` with `videojs` given the name and the component.\n   *\n   * > NOTE: {@link Tech}s should not be registered as a `Component`. {@link Tech}s\n   *         should be registered using {@link Tech.registerTech} or\n   *         {@link videojs:videojs.registerTech}.\n   *\n   * > NOTE: This function can also be seen on videojs as\n   *         {@link videojs:videojs.registerComponent}.\n   *\n   * @param {string} name\n   *        The name of the `Component` to register.\n   *\n   * @param {Component} ComponentToRegister\n   *        The `Component` class to register.\n   *\n   * @return {Component}\n   *         The `Component` that was registered.\n   */\n  ;\n\n  Component.registerComponent = function registerComponent(name, ComponentToRegister) {\n    if (typeof name !== 'string' || !name) {\n      throw new Error(\"Illegal component name, \\\"\" + name + \"\\\"; must be a non-empty string.\");\n    }\n\n    var Tech = Component.getComponent('Tech'); // We need to make sure this check is only done if Tech has been registered.\n\n    var isTech = Tech && Tech.isTech(ComponentToRegister);\n    var isComp = Component === ComponentToRegister || Component.prototype.isPrototypeOf(ComponentToRegister.prototype);\n\n    if (isTech || !isComp) {\n      var reason;\n\n      if (isTech) {\n        reason = 'techs must be registered using Tech.registerTech()';\n      } else {\n        reason = 'must be a Component subclass';\n      }\n\n      throw new Error(\"Illegal component, \\\"\" + name + \"\\\"; \" + reason + \".\");\n    }\n\n    name = toTitleCase(name);\n\n    if (!Component.components_) {\n      Component.components_ = {};\n    }\n\n    var Player = Component.getComponent('Player');\n\n    if (name === 'Player' && Player && Player.players) {\n      var players = Player.players;\n      var playerNames = Object.keys(players); // If we have players that were disposed, then their name will still be\n      // in Players.players. So, we must loop through and verify that the value\n      // for each item is not null. This allows registration of the Player component\n      // after all players have been disposed or before any were created.\n\n      if (players && playerNames.length > 0 && playerNames.map(function (pname) {\n        return players[pname];\n      }).every(Boolean)) {\n        throw new Error('Can not register Player component after player has been created.');\n      }\n    }\n\n    Component.components_[name] = ComponentToRegister;\n    return ComponentToRegister;\n  }\n  /**\n   * Get a `Component` based on the name it was registered with.\n   *\n   * @param {string} name\n   *        The Name of the component to get.\n   *\n   * @return {Component}\n   *         The `Component` that got registered under the given name.\n   *\n   * @deprecated In `videojs` 6 this will not return `Component`s that were not\n   *             registered using {@link Component.registerComponent}. Currently we\n   *             check the global `videojs` object for a `Component` name and\n   *             return that if it exists.\n   */\n  ;\n\n  Component.getComponent = function getComponent(name) {\n    if (!name) {\n      return;\n    }\n\n    name = toTitleCase(name);\n\n    if (Component.components_ && Component.components_[name]) {\n      return Component.components_[name];\n    }\n  };\n\n  return Component;\n}();\n/**\n * Whether or not this component supports `requestAnimationFrame`.\n *\n * This is exposed primarily for testing purposes.\n *\n * @private\n * @type {Boolean}\n */\n\n\nComponent.prototype.supportsRaf_ = typeof window$1.requestAnimationFrame === 'function' && typeof window$1.cancelAnimationFrame === 'function';\nComponent.registerComponent('Component', Component);\n\n/**\n * @file browser.js\n * @module browser\n */\nvar USER_AGENT = window$1.navigator && window$1.navigator.userAgent || '';\nvar webkitVersionMap = /AppleWebKit\\/([\\d.]+)/i.exec(USER_AGENT);\nvar appleWebkitVersion = webkitVersionMap ? parseFloat(webkitVersionMap.pop()) : null;\n/**\n * Whether or not this device is an iPad.\n *\n * @static\n * @const\n * @type {Boolean}\n */\n\nvar IS_IPAD = /iPad/i.test(USER_AGENT);\n/**\n * Whether or not this device is an iPhone.\n *\n * @static\n * @const\n * @type {Boolean}\n */\n// The Facebook app's UIWebView identifies as both an iPhone and iPad, so\n// to identify iPhones, we need to exclude iPads.\n// http://artsy.github.io/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing/\n\nvar IS_IPHONE = /iPhone/i.test(USER_AGENT) && !IS_IPAD;\n/**\n * Whether or not this device is an iPod.\n *\n * @static\n * @const\n * @type {Boolean}\n */\n\nvar IS_IPOD = /iPod/i.test(USER_AGENT);\n/**\n * Whether or not this is an iOS device.\n *\n * @static\n * @const\n * @type {Boolean}\n */\n\nvar IS_IOS = IS_IPHONE || IS_IPAD || IS_IPOD;\n/**\n * The detected iOS version - or `null`.\n *\n * @static\n * @const\n * @type {string|null}\n */\n\nvar IOS_VERSION = function () {\n  var match = USER_AGENT.match(/OS (\\d+)_/i);\n\n  if (match && match[1]) {\n    return match[1];\n  }\n\n  return null;\n}();\n/**\n * Whether or not this is an Android device.\n *\n * @static\n * @const\n * @type {Boolean}\n */\n\nvar IS_ANDROID = /Android/i.test(USER_AGENT);\n/**\n * The detected Android version - or `null`.\n *\n * @static\n * @const\n * @type {number|string|null}\n */\n\nvar ANDROID_VERSION = function () {\n  // This matches Android Major.Minor.Patch versions\n  // ANDROID_VERSION is Major.Minor as a Number, if Minor isn't available, then only Major is returned\n  var match = USER_AGENT.match(/Android (\\d+)(?:\\.(\\d+))?(?:\\.(\\d+))*/i);\n\n  if (!match) {\n    return null;\n  }\n\n  var major = match[1] && parseFloat(match[1]);\n  var minor = match[2] && parseFloat(match[2]);\n\n  if (major && minor) {\n    return parseFloat(match[1] + '.' + match[2]);\n  } else if (major) {\n    return major;\n  }\n\n  return null;\n}();\n/**\n * Whether or not this is a native Android browser.\n *\n * @static\n * @const\n * @type {Boolean}\n */\n\nvar IS_NATIVE_ANDROID = IS_ANDROID && ANDROID_VERSION < 5 && appleWebkitVersion < 537;\n/**\n * Whether or not this is Mozilla Firefox.\n *\n * @static\n * @const\n * @type {Boolean}\n */\n\nvar IS_FIREFOX = /Firefox/i.test(USER_AGENT);\n/**\n * Whether or not this is Microsoft Edge.\n *\n * @static\n * @const\n * @type {Boolean}\n */\n\nvar IS_EDGE = /Edge/i.test(USER_AGENT);\n/**\n * Whether or not this is Google Chrome.\n *\n * This will also be `true` for Chrome on iOS, which will have different support\n * as it is actually Safari under the hood.\n *\n * @static\n * @const\n * @type {Boolean}\n */\n\nvar IS_CHROME = !IS_EDGE && (/Chrome/i.test(USER_AGENT) || /CriOS/i.test(USER_AGENT));\n/**\n * The detected Google Chrome version - or `null`.\n *\n * @static\n * @const\n * @type {number|null}\n */\n\nvar CHROME_VERSION = function () {\n  var match = USER_AGENT.match(/(Chrome|CriOS)\\/(\\d+)/);\n\n  if (match && match[2]) {\n    return parseFloat(match[2]);\n  }\n\n  return null;\n}();\n/**\n * The detected Internet Explorer version - or `null`.\n *\n * @static\n * @const\n * @type {number|null}\n */\n\nvar IE_VERSION = function () {\n  var result = /MSIE\\s(\\d+)\\.\\d/.exec(USER_AGENT);\n  var version = result && parseFloat(result[1]);\n\n  if (!version && /Trident\\/7.0/i.test(USER_AGENT) && /rv:11.0/.test(USER_AGENT)) {\n    // IE 11 has a different user agent string than other IE versions\n    version = 11.0;\n  }\n\n  return version;\n}();\n/**\n * Whether or not this is desktop Safari.\n *\n * @static\n * @const\n * @type {Boolean}\n */\n\nvar IS_SAFARI = /Safari/i.test(USER_AGENT) && !IS_CHROME && !IS_ANDROID && !IS_EDGE;\n/**\n * Whether or not this is any flavor of Safari - including iOS.\n *\n * @static\n * @const\n * @type {Boolean}\n */\n\nvar IS_ANY_SAFARI = (IS_SAFARI || IS_IOS) && !IS_CHROME;\n/**\n * Whether or not this device is touch-enabled.\n *\n * @static\n * @const\n * @type {Boolean}\n */\n\nvar TOUCH_ENABLED = isReal() && ('ontouchstart' in window$1 || window$1.navigator.maxTouchPoints || window$1.DocumentTouch && window$1.document instanceof window$1.DocumentTouch);\n\nvar browser = /*#__PURE__*/Object.freeze({\n  IS_IPAD: IS_IPAD,\n  IS_IPHONE: IS_IPHONE,\n  IS_IPOD: IS_IPOD,\n  IS_IOS: IS_IOS,\n  IOS_VERSION: IOS_VERSION,\n  IS_ANDROID: IS_ANDROID,\n  ANDROID_VERSION: ANDROID_VERSION,\n  IS_NATIVE_ANDROID: IS_NATIVE_ANDROID,\n  IS_FIREFOX: IS_FIREFOX,\n  IS_EDGE: IS_EDGE,\n  IS_CHROME: IS_CHROME,\n  CHROME_VERSION: CHROME_VERSION,\n  IE_VERSION: IE_VERSION,\n  IS_SAFARI: IS_SAFARI,\n  IS_ANY_SAFARI: IS_ANY_SAFARI,\n  TOUCH_ENABLED: TOUCH_ENABLED\n});\n\n/**\n * @file time-ranges.js\n * @module time-ranges\n */\n\n/**\n * Returns the time for the specified index at the start or end\n * of a TimeRange object.\n *\n * @typedef    {Function} TimeRangeIndex\n *\n * @param      {number} [index=0]\n *             The range number to return the time for.\n *\n * @return     {number}\n *             The time offset at the specified index.\n *\n * @deprecated The index argument must be provided.\n *             In the future, leaving it out will throw an error.\n */\n\n/**\n * An object that contains ranges of time.\n *\n * @typedef  {Object} TimeRange\n *\n * @property {number} length\n *           The number of time ranges represented by this object.\n *\n * @property {module:time-ranges~TimeRangeIndex} start\n *           Returns the time offset at which a specified time range begins.\n *\n * @property {module:time-ranges~TimeRangeIndex} end\n *           Returns the time offset at which a specified time range ends.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges\n */\n\n/**\n * Check if any of the time ranges are over the maximum index.\n *\n * @private\n * @param   {string} fnName\n *          The function name to use for logging\n *\n * @param   {number} index\n *          The index to check\n *\n * @param   {number} maxIndex\n *          The maximum possible index\n *\n * @throws  {Error} if the timeRanges provided are over the maxIndex\n */\nfunction rangeCheck(fnName, index, maxIndex) {\n  if (typeof index !== 'number' || index < 0 || index > maxIndex) {\n    throw new Error(\"Failed to execute '\" + fnName + \"' on 'TimeRanges': The index provided (\" + index + \") is non-numeric or out of bounds (0-\" + maxIndex + \").\");\n  }\n}\n/**\n * Get the time for the specified index at the start or end\n * of a TimeRange object.\n *\n * @private\n * @param      {string} fnName\n *             The function name to use for logging\n *\n * @param      {string} valueIndex\n *             The property that should be used to get the time. should be\n *             'start' or 'end'\n *\n * @param      {Array} ranges\n *             An array of time ranges\n *\n * @param      {Array} [rangeIndex=0]\n *             The index to start the search at\n *\n * @return     {number}\n *             The time that offset at the specified index.\n *\n * @deprecated rangeIndex must be set to a value, in the future this will throw an error.\n * @throws     {Error} if rangeIndex is more than the length of ranges\n */\n\n\nfunction getRange(fnName, valueIndex, ranges, rangeIndex) {\n  rangeCheck(fnName, rangeIndex, ranges.length - 1);\n  return ranges[rangeIndex][valueIndex];\n}\n/**\n * Create a time range object given ranges of time.\n *\n * @private\n * @param   {Array} [ranges]\n *          An array of time ranges.\n */\n\n\nfunction createTimeRangesObj(ranges) {\n  if (ranges === undefined || ranges.length === 0) {\n    return {\n      length: 0,\n      start: function start() {\n        throw new Error('This TimeRanges object is empty');\n      },\n      end: function end() {\n        throw new Error('This TimeRanges object is empty');\n      }\n    };\n  }\n\n  return {\n    length: ranges.length,\n    start: getRange.bind(null, 'start', 0, ranges),\n    end: getRange.bind(null, 'end', 1, ranges)\n  };\n}\n/**\n * Create a `TimeRange` object which mimics an\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges|HTML5 TimeRanges instance}.\n *\n * @param {number|Array[]} start\n *        The start of a single range (a number) or an array of ranges (an\n *        array of arrays of two numbers each).\n *\n * @param {number} end\n *        The end of a single range. Cannot be used with the array form of\n *        the `start` argument.\n */\n\n\nfunction createTimeRanges(start, end) {\n  if (Array.isArray(start)) {\n    return createTimeRangesObj(start);\n  } else if (start === undefined || end === undefined) {\n    return createTimeRangesObj();\n  }\n\n  return createTimeRangesObj([[start, end]]);\n}\n\n/**\n * @file buffer.js\n * @module buffer\n */\n/**\n * Compute the percentage of the media that has been buffered.\n *\n * @param {TimeRange} buffered\n *        The current `TimeRange` object representing buffered time ranges\n *\n * @param {number} duration\n *        Total duration of the media\n *\n * @return {number}\n *         Percent buffered of the total duration in decimal form.\n */\n\nfunction bufferedPercent(buffered, duration) {\n  var bufferedDuration = 0;\n  var start;\n  var end;\n\n  if (!duration) {\n    return 0;\n  }\n\n  if (!buffered || !buffered.length) {\n    buffered = createTimeRanges(0, 0);\n  }\n\n  for (var i = 0; i < buffered.length; i++) {\n    start = buffered.start(i);\n    end = buffered.end(i); // buffered end can be bigger than duration by a very small fraction\n\n    if (end > duration) {\n      end = duration;\n    }\n\n    bufferedDuration += end - start;\n  }\n\n  return bufferedDuration / duration;\n}\n\n/**\n * @file fullscreen-api.js\n * @module fullscreen-api\n * @private\n */\n/**\n * Store the browser-specific methods for the fullscreen API.\n *\n * @type {Object}\n * @see [Specification]{@link https://fullscreen.spec.whatwg.org}\n * @see [Map Approach From Screenfull.js]{@link https://github.com/sindresorhus/screenfull.js}\n */\n\nvar FullscreenApi = {}; // browser API methods\n\nvar apiMap = [['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror', 'fullscreen'], // WebKit\n['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror', '-webkit-full-screen'], // Mozilla\n['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror', '-moz-full-screen'], // Microsoft\n['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError', '-ms-fullscreen']];\nvar specApi = apiMap[0];\nvar browserApi;\nvar prefixedAPI = false; // determine the supported set of functions\n\nfor (var i = 0; i < apiMap.length; i++) {\n  // check for exitFullscreen function\n  if (apiMap[i][1] in document) {\n    browserApi = apiMap[i];\n    break;\n  }\n} // map the browser API names to the spec API names\n\n\nif (browserApi) {\n  for (var _i = 0; _i < browserApi.length; _i++) {\n    FullscreenApi[specApi[_i]] = browserApi[_i];\n  }\n\n  prefixedAPI = browserApi[0] === specApi[0];\n}\n\n/**\n * @file media-error.js\n */\n/**\n * A Custom `MediaError` class which mimics the standard HTML5 `MediaError` class.\n *\n * @param {number|string|Object|MediaError} value\n *        This can be of multiple types:\n *        - number: should be a standard error code\n *        - string: an error message (the code will be 0)\n *        - Object: arbitrary properties\n *        - `MediaError` (native): used to populate a video.js `MediaError` object\n *        - `MediaError` (video.js): will return itself if it's already a\n *          video.js `MediaError` object.\n *\n * @see [MediaError Spec]{@link https://dev.w3.org/html5/spec-author-view/video.html#mediaerror}\n * @see [Encrypted MediaError Spec]{@link https://www.w3.org/TR/2013/WD-encrypted-media-20130510/#error-codes}\n *\n * @class MediaError\n */\n\nfunction MediaError(value) {\n  // Allow redundant calls to this constructor to avoid having `instanceof`\n  // checks peppered around the code.\n  if (value instanceof MediaError) {\n    return value;\n  }\n\n  if (typeof value === 'number') {\n    this.code = value;\n  } else if (typeof value === 'string') {\n    // default code is zero, so this is a custom error\n    this.message = value;\n  } else if (isObject(value)) {\n    // We assign the `code` property manually because native `MediaError` objects\n    // do not expose it as an own/enumerable property of the object.\n    if (typeof value.code === 'number') {\n      this.code = value.code;\n    }\n\n    assign(this, value);\n  }\n\n  if (!this.message) {\n    this.message = MediaError.defaultMessages[this.code] || '';\n  }\n}\n/**\n * The error code that refers two one of the defined `MediaError` types\n *\n * @type {Number}\n */\n\n\nMediaError.prototype.code = 0;\n/**\n * An optional message that to show with the error. Message is not part of the HTML5\n * video spec but allows for more informative custom errors.\n *\n * @type {String}\n */\n\nMediaError.prototype.message = '';\n/**\n * An optional status code that can be set by plugins to allow even more detail about\n * the error. For example a plugin might provide a specific HTTP status code and an\n * error message for that code. Then when the plugin gets that error this class will\n * know how to display an error message for it. This allows a custom message to show\n * up on the `Player` error overlay.\n *\n * @type {Array}\n */\n\nMediaError.prototype.status = null;\n/**\n * Errors indexed by the W3C standard. The order **CANNOT CHANGE**! See the\n * specification listed under {@link MediaError} for more information.\n *\n * @enum {array}\n * @readonly\n * @property {string} 0 - MEDIA_ERR_CUSTOM\n * @property {string} 1 - MEDIA_ERR_ABORTED\n * @property {string} 2 - MEDIA_ERR_NETWORK\n * @property {string} 3 - MEDIA_ERR_DECODE\n * @property {string} 4 - MEDIA_ERR_SRC_NOT_SUPPORTED\n * @property {string} 5 - MEDIA_ERR_ENCRYPTED\n */\n\nMediaError.errorTypes = ['MEDIA_ERR_CUSTOM', 'MEDIA_ERR_ABORTED', 'MEDIA_ERR_NETWORK', 'MEDIA_ERR_DECODE', 'MEDIA_ERR_SRC_NOT_SUPPORTED', 'MEDIA_ERR_ENCRYPTED'];\n/**\n * The default `MediaError` messages based on the {@link MediaError.errorTypes}.\n *\n * @type {Array}\n * @constant\n */\n\nMediaError.defaultMessages = {\n  1: 'You aborted the media playback',\n  2: 'A network error caused the media download to fail part-way.',\n  3: 'The media playback was aborted due to a corruption problem or because the media used features your browser did not support.',\n  4: 'The media could not be loaded, either because the server or network failed or because the format is not supported.',\n  5: 'The media is encrypted and we do not have the keys to decrypt it.'\n}; // Add types as properties on MediaError\n// e.g. MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;\n\nfor (var errNum = 0; errNum < MediaError.errorTypes.length; errNum++) {\n  MediaError[MediaError.errorTypes[errNum]] = errNum; // values should be accessible on both the class and instance\n\n  MediaError.prototype[MediaError.errorTypes[errNum]] = errNum;\n} // jsdocs for instance/static members added above\n\n/**\n * Returns whether an object is `Promise`-like (i.e. has a `then` method).\n *\n * @param  {Object}  value\n *         An object that may or may not be `Promise`-like.\n *\n * @return {boolean}\n *         Whether or not the object is `Promise`-like.\n */\nfunction isPromise(value) {\n  return value !== undefined && value !== null && typeof value.then === 'function';\n}\n/**\n * Silence a Promise-like object.\n *\n * This is useful for avoiding non-harmful, but potentially confusing \"uncaught\n * play promise\" rejection error messages.\n *\n * @param  {Object} value\n *         An object that may or may not be `Promise`-like.\n */\n\nfunction silencePromise(value) {\n  if (isPromise(value)) {\n    value.then(null, function (e) {});\n  }\n}\n\n/**\n * @file text-track-list-converter.js Utilities for capturing text track state and\n * re-creating tracks based on a capture.\n *\n * @module text-track-list-converter\n */\n\n/**\n * Examine a single {@link TextTrack} and return a JSON-compatible javascript object that\n * represents the {@link TextTrack}'s state.\n *\n * @param {TextTrack} track\n *        The text track to query.\n *\n * @return {Object}\n *         A serializable javascript representation of the TextTrack.\n * @private\n */\nvar trackToJson_ = function trackToJson_(track) {\n  var ret = ['kind', 'label', 'language', 'id', 'inBandMetadataTrackDispatchType', 'mode', 'src'].reduce(function (acc, prop, i) {\n    if (track[prop]) {\n      acc[prop] = track[prop];\n    }\n\n    return acc;\n  }, {\n    cues: track.cues && Array.prototype.map.call(track.cues, function (cue) {\n      return {\n        startTime: cue.startTime,\n        endTime: cue.endTime,\n        text: cue.text,\n        id: cue.id\n      };\n    })\n  });\n  return ret;\n};\n/**\n * Examine a {@link Tech} and return a JSON-compatible javascript array that represents the\n * state of all {@link TextTrack}s currently configured. The return array is compatible with\n * {@link text-track-list-converter:jsonToTextTracks}.\n *\n * @param {Tech} tech\n *        The tech object to query\n *\n * @return {Array}\n *         A serializable javascript representation of the {@link Tech}s\n *         {@link TextTrackList}.\n */\n\n\nvar textTracksToJson = function textTracksToJson(tech) {\n  var trackEls = tech.$$('track');\n  var trackObjs = Array.prototype.map.call(trackEls, function (t) {\n    return t.track;\n  });\n  var tracks = Array.prototype.map.call(trackEls, function (trackEl) {\n    var json = trackToJson_(trackEl.track);\n\n    if (trackEl.src) {\n      json.src = trackEl.src;\n    }\n\n    return json;\n  });\n  return tracks.concat(Array.prototype.filter.call(tech.textTracks(), function (track) {\n    return trackObjs.indexOf(track) === -1;\n  }).map(trackToJson_));\n};\n/**\n * Create a set of remote {@link TextTrack}s on a {@link Tech} based on an array of javascript\n * object {@link TextTrack} representations.\n *\n * @param {Array} json\n *        An array of `TextTrack` representation objects, like those that would be\n *        produced by `textTracksToJson`.\n *\n * @param {Tech} tech\n *        The `Tech` to create the `TextTrack`s on.\n */\n\n\nvar jsonToTextTracks = function jsonToTextTracks(json, tech) {\n  json.forEach(function (track) {\n    var addedTrack = tech.addRemoteTextTrack(track).track;\n\n    if (!track.src && track.cues) {\n      track.cues.forEach(function (cue) {\n        return addedTrack.addCue(cue);\n      });\n    }\n  });\n  return tech.textTracks();\n};\n\nvar textTrackConverter = {\n  textTracksToJson: textTracksToJson,\n  jsonToTextTracks: jsonToTextTracks,\n  trackToJson_: trackToJson_\n};\n\nvar MODAL_CLASS_NAME = 'vjs-modal-dialog';\n/**\n * The `ModalDialog` displays over the video and its controls, which blocks\n * interaction with the player until it is closed.\n *\n * Modal dialogs include a \"Close\" button and will close when that button\n * is activated - or when ESC is pressed anywhere.\n *\n * @extends Component\n */\n\nvar ModalDialog =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(ModalDialog, _Component);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Mixed} [options.content=undefined]\n   *        Provide customized content for this modal.\n   *\n   * @param {string} [options.description]\n   *        A text description for the modal, primarily for accessibility.\n   *\n   * @param {boolean} [options.fillAlways=false]\n   *        Normally, modals are automatically filled only the first time\n   *        they open. This tells the modal to refresh its content\n   *        every time it opens.\n   *\n   * @param {string} [options.label]\n   *        A text label for the modal, primarily for accessibility.\n   *\n   * @param {boolean} [options.pauseOnOpen=true]\n   *        If `true`, playback will will be paused if playing when\n   *        the modal opens, and resumed when it closes.\n   *\n   * @param {boolean} [options.temporary=true]\n   *        If `true`, the modal can only be opened once; it will be\n   *        disposed as soon as it's closed.\n   *\n   * @param {boolean} [options.uncloseable=false]\n   *        If `true`, the user will not be able to close the modal\n   *        through the UI in the normal ways. Programmatic closing is\n   *        still possible.\n   */\n  function ModalDialog(player, options) {\n    var _this;\n\n    _this = _Component.call(this, player, options) || this;\n    _this.opened_ = _this.hasBeenOpened_ = _this.hasBeenFilled_ = false;\n\n    _this.closeable(!_this.options_.uncloseable);\n\n    _this.content(_this.options_.content); // Make sure the contentEl is defined AFTER any children are initialized\n    // because we only want the contents of the modal in the contentEl\n    // (not the UI elements like the close button).\n\n\n    _this.contentEl_ = createEl('div', {\n      className: MODAL_CLASS_NAME + \"-content\"\n    }, {\n      role: 'document'\n    });\n    _this.descEl_ = createEl('p', {\n      className: MODAL_CLASS_NAME + \"-description vjs-control-text\",\n      id: _this.el().getAttribute('aria-describedby')\n    });\n    textContent(_this.descEl_, _this.description());\n\n    _this.el_.appendChild(_this.descEl_);\n\n    _this.el_.appendChild(_this.contentEl_);\n\n    return _this;\n  }\n  /**\n   * Create the `ModalDialog`'s DOM element\n   *\n   * @return {Element}\n   *         The DOM element that gets created.\n   */\n\n\n  var _proto = ModalDialog.prototype;\n\n  _proto.createEl = function createEl$$1() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: this.buildCSSClass(),\n      tabIndex: -1\n    }, {\n      'aria-describedby': this.id() + \"_description\",\n      'aria-hidden': 'true',\n      'aria-label': this.label(),\n      'role': 'dialog'\n    });\n  };\n\n  _proto.dispose = function dispose() {\n    this.contentEl_ = null;\n    this.descEl_ = null;\n    this.previouslyActiveEl_ = null;\n\n    _Component.prototype.dispose.call(this);\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  ;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return MODAL_CLASS_NAME + \" vjs-hidden \" + _Component.prototype.buildCSSClass.call(this);\n  }\n  /**\n   * Handles `keydown` events on the document, looking for ESC, which closes\n   * the modal.\n   *\n   * @param {EventTarget~Event} event\n   *        The keypress that triggered this event.\n   *\n   * @listens keydown\n   */\n  ;\n\n  _proto.handleKeyPress = function handleKeyPress(event) {\n    if (keycode.isEventKey(event, 'Escape') && this.closeable()) {\n      this.close();\n    }\n  }\n  /**\n   * Returns the label string for this modal. Primarily used for accessibility.\n   *\n   * @return {string}\n   *         the localized or raw label of this modal.\n   */\n  ;\n\n  _proto.label = function label() {\n    return this.localize(this.options_.label || 'Modal Window');\n  }\n  /**\n   * Returns the description string for this modal. Primarily used for\n   * accessibility.\n   *\n   * @return {string}\n   *         The localized or raw description of this modal.\n   */\n  ;\n\n  _proto.description = function description() {\n    var desc = this.options_.description || this.localize('This is a modal window.'); // Append a universal closeability message if the modal is closeable.\n\n    if (this.closeable()) {\n      desc += ' ' + this.localize('This modal can be closed by pressing the Escape key or activating the close button.');\n    }\n\n    return desc;\n  }\n  /**\n   * Opens the modal.\n   *\n   * @fires ModalDialog#beforemodalopen\n   * @fires ModalDialog#modalopen\n   */\n  ;\n\n  _proto.open = function open() {\n    if (!this.opened_) {\n      var player = this.player();\n      /**\n        * Fired just before a `ModalDialog` is opened.\n        *\n        * @event ModalDialog#beforemodalopen\n        * @type {EventTarget~Event}\n        */\n\n      this.trigger('beforemodalopen');\n      this.opened_ = true; // Fill content if the modal has never opened before and\n      // never been filled.\n\n      if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) {\n        this.fill();\n      } // If the player was playing, pause it and take note of its previously\n      // playing state.\n\n\n      this.wasPlaying_ = !player.paused();\n\n      if (this.options_.pauseOnOpen && this.wasPlaying_) {\n        player.pause();\n      }\n\n      if (this.closeable()) {\n        this.on(this.el_.ownerDocument, 'keydown', bind(this, this.handleKeyPress));\n      } // Hide controls and note if they were enabled.\n\n\n      this.hadControls_ = player.controls();\n      player.controls(false);\n      this.show();\n      this.conditionalFocus_();\n      this.el().setAttribute('aria-hidden', 'false');\n      /**\n        * Fired just after a `ModalDialog` is opened.\n        *\n        * @event ModalDialog#modalopen\n        * @type {EventTarget~Event}\n        */\n\n      this.trigger('modalopen');\n      this.hasBeenOpened_ = true;\n    }\n  }\n  /**\n   * If the `ModalDialog` is currently open or closed.\n   *\n   * @param  {boolean} [value]\n   *         If given, it will open (`true`) or close (`false`) the modal.\n   *\n   * @return {boolean}\n   *         the current open state of the modaldialog\n   */\n  ;\n\n  _proto.opened = function opened(value) {\n    if (typeof value === 'boolean') {\n      this[value ? 'open' : 'close']();\n    }\n\n    return this.opened_;\n  }\n  /**\n   * Closes the modal, does nothing if the `ModalDialog` is\n   * not open.\n   *\n   * @fires ModalDialog#beforemodalclose\n   * @fires ModalDialog#modalclose\n   */\n  ;\n\n  _proto.close = function close() {\n    if (!this.opened_) {\n      return;\n    }\n\n    var player = this.player();\n    /**\n      * Fired just before a `ModalDialog` is closed.\n      *\n      * @event ModalDialog#beforemodalclose\n      * @type {EventTarget~Event}\n      */\n\n    this.trigger('beforemodalclose');\n    this.opened_ = false;\n\n    if (this.wasPlaying_ && this.options_.pauseOnOpen) {\n      player.play();\n    }\n\n    if (this.closeable()) {\n      this.off(this.el_.ownerDocument, 'keydown', bind(this, this.handleKeyPress));\n    }\n\n    if (this.hadControls_) {\n      player.controls(true);\n    }\n\n    this.hide();\n    this.el().setAttribute('aria-hidden', 'true');\n    /**\n      * Fired just after a `ModalDialog` is closed.\n      *\n      * @event ModalDialog#modalclose\n      * @type {EventTarget~Event}\n      */\n\n    this.trigger('modalclose');\n    this.conditionalBlur_();\n\n    if (this.options_.temporary) {\n      this.dispose();\n    }\n  }\n  /**\n   * Check to see if the `ModalDialog` is closeable via the UI.\n   *\n   * @param  {boolean} [value]\n   *         If given as a boolean, it will set the `closeable` option.\n   *\n   * @return {boolean}\n   *         Returns the final value of the closable option.\n   */\n  ;\n\n  _proto.closeable = function closeable(value) {\n    if (typeof value === 'boolean') {\n      var closeable = this.closeable_ = !!value;\n      var close = this.getChild('closeButton'); // If this is being made closeable and has no close button, add one.\n\n      if (closeable && !close) {\n        // The close button should be a child of the modal - not its\n        // content element, so temporarily change the content element.\n        var temp = this.contentEl_;\n        this.contentEl_ = this.el_;\n        close = this.addChild('closeButton', {\n          controlText: 'Close Modal Dialog'\n        });\n        this.contentEl_ = temp;\n        this.on(close, 'close', this.close);\n      } // If this is being made uncloseable and has a close button, remove it.\n\n\n      if (!closeable && close) {\n        this.off(close, 'close', this.close);\n        this.removeChild(close);\n        close.dispose();\n      }\n    }\n\n    return this.closeable_;\n  }\n  /**\n   * Fill the modal's content element with the modal's \"content\" option.\n   * The content element will be emptied before this change takes place.\n   */\n  ;\n\n  _proto.fill = function fill() {\n    this.fillWith(this.content());\n  }\n  /**\n   * Fill the modal's content element with arbitrary content.\n   * The content element will be emptied before this change takes place.\n   *\n   * @fires ModalDialog#beforemodalfill\n   * @fires ModalDialog#modalfill\n   *\n   * @param {Mixed} [content]\n   *        The same rules apply to this as apply to the `content` option.\n   */\n  ;\n\n  _proto.fillWith = function fillWith(content) {\n    var contentEl = this.contentEl();\n    var parentEl = contentEl.parentNode;\n    var nextSiblingEl = contentEl.nextSibling;\n    /**\n      * Fired just before a `ModalDialog` is filled with content.\n      *\n      * @event ModalDialog#beforemodalfill\n      * @type {EventTarget~Event}\n      */\n\n    this.trigger('beforemodalfill');\n    this.hasBeenFilled_ = true; // Detach the content element from the DOM before performing\n    // manipulation to avoid modifying the live DOM multiple times.\n\n    parentEl.removeChild(contentEl);\n    this.empty();\n    insertContent(contentEl, content);\n    /**\n     * Fired just after a `ModalDialog` is filled with content.\n     *\n     * @event ModalDialog#modalfill\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('modalfill'); // Re-inject the re-filled content element.\n\n    if (nextSiblingEl) {\n      parentEl.insertBefore(contentEl, nextSiblingEl);\n    } else {\n      parentEl.appendChild(contentEl);\n    } // make sure that the close button is last in the dialog DOM\n\n\n    var closeButton = this.getChild('closeButton');\n\n    if (closeButton) {\n      parentEl.appendChild(closeButton.el_);\n    }\n  }\n  /**\n   * Empties the content element. This happens anytime the modal is filled.\n   *\n   * @fires ModalDialog#beforemodalempty\n   * @fires ModalDialog#modalempty\n   */\n  ;\n\n  _proto.empty = function empty() {\n    /**\n    * Fired just before a `ModalDialog` is emptied.\n    *\n    * @event ModalDialog#beforemodalempty\n    * @type {EventTarget~Event}\n    */\n    this.trigger('beforemodalempty');\n    emptyEl(this.contentEl());\n    /**\n    * Fired just after a `ModalDialog` is emptied.\n    *\n    * @event ModalDialog#modalempty\n    * @type {EventTarget~Event}\n    */\n\n    this.trigger('modalempty');\n  }\n  /**\n   * Gets or sets the modal content, which gets normalized before being\n   * rendered into the DOM.\n   *\n   * This does not update the DOM or fill the modal, but it is called during\n   * that process.\n   *\n   * @param  {Mixed} [value]\n   *         If defined, sets the internal content value to be used on the\n   *         next call(s) to `fill`. This value is normalized before being\n   *         inserted. To \"clear\" the internal content value, pass `null`.\n   *\n   * @return {Mixed}\n   *         The current content of the modal dialog\n   */\n  ;\n\n  _proto.content = function content(value) {\n    if (typeof value !== 'undefined') {\n      this.content_ = value;\n    }\n\n    return this.content_;\n  }\n  /**\n   * conditionally focus the modal dialog if focus was previously on the player.\n   *\n   * @private\n   */\n  ;\n\n  _proto.conditionalFocus_ = function conditionalFocus_() {\n    var activeEl = document.activeElement;\n    var playerEl = this.player_.el_;\n    this.previouslyActiveEl_ = null;\n\n    if (playerEl.contains(activeEl) || playerEl === activeEl) {\n      this.previouslyActiveEl_ = activeEl;\n      this.focus();\n      this.on(document, 'keydown', this.handleKeyDown);\n    }\n  }\n  /**\n   * conditionally blur the element and refocus the last focused element\n   *\n   * @private\n   */\n  ;\n\n  _proto.conditionalBlur_ = function conditionalBlur_() {\n    if (this.previouslyActiveEl_) {\n      this.previouslyActiveEl_.focus();\n      this.previouslyActiveEl_ = null;\n    }\n\n    this.off(document, 'keydown', this.handleKeyDown);\n  }\n  /**\n   * Keydown handler. Attached when modal is focused.\n   *\n   * @listens keydown\n   */\n  ;\n\n  _proto.handleKeyDown = function handleKeyDown(event) {\n    // exit early if it isn't a tab key\n    if (!keycode.isEventKey(event, 'Tab')) {\n      return;\n    }\n\n    var focusableEls = this.focusableEls_();\n    var activeEl = this.el_.querySelector(':focus');\n    var focusIndex;\n\n    for (var i = 0; i < focusableEls.length; i++) {\n      if (activeEl === focusableEls[i]) {\n        focusIndex = i;\n        break;\n      }\n    }\n\n    if (document.activeElement === this.el_) {\n      focusIndex = 0;\n    }\n\n    if (event.shiftKey && focusIndex === 0) {\n      focusableEls[focusableEls.length - 1].focus();\n      event.preventDefault();\n    } else if (!event.shiftKey && focusIndex === focusableEls.length - 1) {\n      focusableEls[0].focus();\n      event.preventDefault();\n    }\n  }\n  /**\n   * get all focusable elements\n   *\n   * @private\n   */\n  ;\n\n  _proto.focusableEls_ = function focusableEls_() {\n    var allChildren = this.el_.querySelectorAll('*');\n    return Array.prototype.filter.call(allChildren, function (child) {\n      return (child instanceof window$1.HTMLAnchorElement || child instanceof window$1.HTMLAreaElement) && child.hasAttribute('href') || (child instanceof window$1.HTMLInputElement || child instanceof window$1.HTMLSelectElement || child instanceof window$1.HTMLTextAreaElement || child instanceof window$1.HTMLButtonElement) && !child.hasAttribute('disabled') || child instanceof window$1.HTMLIFrameElement || child instanceof window$1.HTMLObjectElement || child instanceof window$1.HTMLEmbedElement || child.hasAttribute('tabindex') && child.getAttribute('tabindex') !== -1 || child.hasAttribute('contenteditable');\n    });\n  };\n\n  return ModalDialog;\n}(Component);\n/**\n * Default options for `ModalDialog` default options.\n *\n * @type {Object}\n * @private\n */\n\n\nModalDialog.prototype.options_ = {\n  pauseOnOpen: true,\n  temporary: true\n};\nComponent.registerComponent('ModalDialog', ModalDialog);\n\n/**\n * Common functionaliy between {@link TextTrackList}, {@link AudioTrackList}, and\n * {@link VideoTrackList}\n *\n * @extends EventTarget\n */\n\nvar TrackList =\n/*#__PURE__*/\nfunction (_EventTarget) {\n  _inheritsLoose(TrackList, _EventTarget);\n\n  /**\n   * Create an instance of this class\n   *\n   * @param {Track[]} tracks\n   *        A list of tracks to initialize the list with.\n   *\n   * @abstract\n   */\n  function TrackList(tracks) {\n    var _this;\n\n    if (tracks === void 0) {\n      tracks = [];\n    }\n\n    _this = _EventTarget.call(this) || this;\n    _this.tracks_ = [];\n    /**\n     * @memberof TrackList\n     * @member {number} length\n     *         The current number of `Track`s in the this Trackist.\n     * @instance\n     */\n\n    Object.defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), 'length', {\n      get: function get() {\n        return this.tracks_.length;\n      }\n    });\n\n    for (var i = 0; i < tracks.length; i++) {\n      _this.addTrack(tracks[i]);\n    }\n\n    return _this;\n  }\n  /**\n   * Add a {@link Track} to the `TrackList`\n   *\n   * @param {Track} track\n   *        The audio, video, or text track to add to the list.\n   *\n   * @fires TrackList#addtrack\n   */\n\n\n  var _proto = TrackList.prototype;\n\n  _proto.addTrack = function addTrack(track) {\n    var index = this.tracks_.length;\n\n    if (!('' + index in this)) {\n      Object.defineProperty(this, index, {\n        get: function get() {\n          return this.tracks_[index];\n        }\n      });\n    } // Do not add duplicate tracks\n\n\n    if (this.tracks_.indexOf(track) === -1) {\n      this.tracks_.push(track);\n      /**\n       * Triggered when a track is added to a track list.\n       *\n       * @event TrackList#addtrack\n       * @type {EventTarget~Event}\n       * @property {Track} track\n       *           A reference to track that was added.\n       */\n\n      this.trigger({\n        track: track,\n        type: 'addtrack',\n        target: this\n      });\n    }\n  }\n  /**\n   * Remove a {@link Track} from the `TrackList`\n   *\n   * @param {Track} rtrack\n   *        The audio, video, or text track to remove from the list.\n   *\n   * @fires TrackList#removetrack\n   */\n  ;\n\n  _proto.removeTrack = function removeTrack(rtrack) {\n    var track;\n\n    for (var i = 0, l = this.length; i < l; i++) {\n      if (this[i] === rtrack) {\n        track = this[i];\n\n        if (track.off) {\n          track.off();\n        }\n\n        this.tracks_.splice(i, 1);\n        break;\n      }\n    }\n\n    if (!track) {\n      return;\n    }\n    /**\n     * Triggered when a track is removed from track list.\n     *\n     * @event TrackList#removetrack\n     * @type {EventTarget~Event}\n     * @property {Track} track\n     *           A reference to track that was removed.\n     */\n\n\n    this.trigger({\n      track: track,\n      type: 'removetrack',\n      target: this\n    });\n  }\n  /**\n   * Get a Track from the TrackList by a tracks id\n   *\n   * @param {string} id - the id of the track to get\n   * @method getTrackById\n   * @return {Track}\n   * @private\n   */\n  ;\n\n  _proto.getTrackById = function getTrackById(id) {\n    var result = null;\n\n    for (var i = 0, l = this.length; i < l; i++) {\n      var track = this[i];\n\n      if (track.id === id) {\n        result = track;\n        break;\n      }\n    }\n\n    return result;\n  };\n\n  return TrackList;\n}(EventTarget);\n/**\n * Triggered when a different track is selected/enabled.\n *\n * @event TrackList#change\n * @type {EventTarget~Event}\n */\n\n/**\n * Events that can be called with on + eventName. See {@link EventHandler}.\n *\n * @property {Object} TrackList#allowedEvents_\n * @private\n */\n\n\nTrackList.prototype.allowedEvents_ = {\n  change: 'change',\n  addtrack: 'addtrack',\n  removetrack: 'removetrack'\n}; // emulate attribute EventHandler support to allow for feature detection\n\nfor (var event in TrackList.prototype.allowedEvents_) {\n  TrackList.prototype['on' + event] = null;\n}\n\n/**\n * Anywhere we call this function we diverge from the spec\n * as we only support one enabled audiotrack at a time\n *\n * @param {AudioTrackList} list\n *        list to work on\n *\n * @param {AudioTrack} track\n *        The track to skip\n *\n * @private\n */\n\nvar disableOthers = function disableOthers(list, track) {\n  for (var i = 0; i < list.length; i++) {\n    if (!Object.keys(list[i]).length || track.id === list[i].id) {\n      continue;\n    } // another audio track is enabled, disable it\n\n\n    list[i].enabled = false;\n  }\n};\n/**\n * The current list of {@link AudioTrack} for a media file.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist}\n * @extends TrackList\n */\n\n\nvar AudioTrackList =\n/*#__PURE__*/\nfunction (_TrackList) {\n  _inheritsLoose(AudioTrackList, _TrackList);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {AudioTrack[]} [tracks=[]]\n   *        A list of `AudioTrack` to instantiate the list with.\n   */\n  function AudioTrackList(tracks) {\n    var _this;\n\n    if (tracks === void 0) {\n      tracks = [];\n    }\n\n    // make sure only 1 track is enabled\n    // sorted from last index to first index\n    for (var i = tracks.length - 1; i >= 0; i--) {\n      if (tracks[i].enabled) {\n        disableOthers(tracks, tracks[i]);\n        break;\n      }\n    }\n\n    _this = _TrackList.call(this, tracks) || this;\n    _this.changing_ = false;\n    return _this;\n  }\n  /**\n   * Add an {@link AudioTrack} to the `AudioTrackList`.\n   *\n   * @param {AudioTrack} track\n   *        The AudioTrack to add to the list\n   *\n   * @fires TrackList#addtrack\n   */\n\n\n  var _proto = AudioTrackList.prototype;\n\n  _proto.addTrack = function addTrack(track) {\n    var _this2 = this;\n\n    if (track.enabled) {\n      disableOthers(this, track);\n    }\n\n    _TrackList.prototype.addTrack.call(this, track); // native tracks don't have this\n\n\n    if (!track.addEventListener) {\n      return;\n    }\n\n    track.enabledChange_ = function () {\n      // when we are disabling other tracks (since we don't support\n      // more than one track at a time) we will set changing_\n      // to true so that we don't trigger additional change events\n      if (_this2.changing_) {\n        return;\n      }\n\n      _this2.changing_ = true;\n      disableOthers(_this2, track);\n      _this2.changing_ = false;\n\n      _this2.trigger('change');\n    };\n    /**\n     * @listens AudioTrack#enabledchange\n     * @fires TrackList#change\n     */\n\n\n    track.addEventListener('enabledchange', track.enabledChange_);\n  };\n\n  _proto.removeTrack = function removeTrack(rtrack) {\n    _TrackList.prototype.removeTrack.call(this, rtrack);\n\n    if (rtrack.removeEventListener && rtrack.enabledChange_) {\n      rtrack.removeEventListener('enabledchange', rtrack.enabledChange_);\n      rtrack.enabledChange_ = null;\n    }\n  };\n\n  return AudioTrackList;\n}(TrackList);\n\n/**\n * Un-select all other {@link VideoTrack}s that are selected.\n *\n * @param {VideoTrackList} list\n *        list to work on\n *\n * @param {VideoTrack} track\n *        The track to skip\n *\n * @private\n */\n\nvar disableOthers$1 = function disableOthers(list, track) {\n  for (var i = 0; i < list.length; i++) {\n    if (!Object.keys(list[i]).length || track.id === list[i].id) {\n      continue;\n    } // another video track is enabled, disable it\n\n\n    list[i].selected = false;\n  }\n};\n/**\n * The current list of {@link VideoTrack} for a video.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist}\n * @extends TrackList\n */\n\n\nvar VideoTrackList =\n/*#__PURE__*/\nfunction (_TrackList) {\n  _inheritsLoose(VideoTrackList, _TrackList);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {VideoTrack[]} [tracks=[]]\n   *        A list of `VideoTrack` to instantiate the list with.\n   */\n  function VideoTrackList(tracks) {\n    var _this;\n\n    if (tracks === void 0) {\n      tracks = [];\n    }\n\n    // make sure only 1 track is enabled\n    // sorted from last index to first index\n    for (var i = tracks.length - 1; i >= 0; i--) {\n      if (tracks[i].selected) {\n        disableOthers$1(tracks, tracks[i]);\n        break;\n      }\n    }\n\n    _this = _TrackList.call(this, tracks) || this;\n    _this.changing_ = false;\n    /**\n     * @member {number} VideoTrackList#selectedIndex\n     *         The current index of the selected {@link VideoTrack`}.\n     */\n\n    Object.defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), 'selectedIndex', {\n      get: function get() {\n        for (var _i = 0; _i < this.length; _i++) {\n          if (this[_i].selected) {\n            return _i;\n          }\n        }\n\n        return -1;\n      },\n      set: function set() {}\n    });\n    return _this;\n  }\n  /**\n   * Add a {@link VideoTrack} to the `VideoTrackList`.\n   *\n   * @param {VideoTrack} track\n   *        The VideoTrack to add to the list\n   *\n   * @fires TrackList#addtrack\n   */\n\n\n  var _proto = VideoTrackList.prototype;\n\n  _proto.addTrack = function addTrack(track) {\n    var _this2 = this;\n\n    if (track.selected) {\n      disableOthers$1(this, track);\n    }\n\n    _TrackList.prototype.addTrack.call(this, track); // native tracks don't have this\n\n\n    if (!track.addEventListener) {\n      return;\n    }\n\n    track.selectedChange_ = function () {\n      if (_this2.changing_) {\n        return;\n      }\n\n      _this2.changing_ = true;\n      disableOthers$1(_this2, track);\n      _this2.changing_ = false;\n\n      _this2.trigger('change');\n    };\n    /**\n     * @listens VideoTrack#selectedchange\n     * @fires TrackList#change\n     */\n\n\n    track.addEventListener('selectedchange', track.selectedChange_);\n  };\n\n  _proto.removeTrack = function removeTrack(rtrack) {\n    _TrackList.prototype.removeTrack.call(this, rtrack);\n\n    if (rtrack.removeEventListener && rtrack.selectedChange_) {\n      rtrack.removeEventListener('selectedchange', rtrack.selectedChange_);\n      rtrack.selectedChange_ = null;\n    }\n  };\n\n  return VideoTrackList;\n}(TrackList);\n\n/**\n * The current list of {@link TextTrack} for a media file.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttracklist}\n * @extends TrackList\n */\n\nvar TextTrackList =\n/*#__PURE__*/\nfunction (_TrackList) {\n  _inheritsLoose(TextTrackList, _TrackList);\n\n  function TextTrackList() {\n    return _TrackList.apply(this, arguments) || this;\n  }\n\n  var _proto = TextTrackList.prototype;\n\n  /**\n   * Add a {@link TextTrack} to the `TextTrackList`\n   *\n   * @param {TextTrack} track\n   *        The text track to add to the list.\n   *\n   * @fires TrackList#addtrack\n   */\n  _proto.addTrack = function addTrack(track) {\n    var _this = this;\n\n    _TrackList.prototype.addTrack.call(this, track);\n\n    if (!this.queueChange_) {\n      this.queueChange_ = function () {\n        return _this.queueTrigger('change');\n      };\n    }\n\n    if (!this.triggerSelectedlanguagechange) {\n      this.triggerSelectedlanguagechange_ = function () {\n        return _this.trigger('selectedlanguagechange');\n      };\n    }\n    /**\n     * @listens TextTrack#modechange\n     * @fires TrackList#change\n     */\n\n\n    track.addEventListener('modechange', this.queueChange_);\n    var nonLanguageTextTrackKind = ['metadata', 'chapters'];\n\n    if (nonLanguageTextTrackKind.indexOf(track.kind) === -1) {\n      track.addEventListener('modechange', this.triggerSelectedlanguagechange_);\n    }\n  };\n\n  _proto.removeTrack = function removeTrack(rtrack) {\n    _TrackList.prototype.removeTrack.call(this, rtrack); // manually remove the event handlers we added\n\n\n    if (rtrack.removeEventListener) {\n      if (this.queueChange_) {\n        rtrack.removeEventListener('modechange', this.queueChange_);\n      }\n\n      if (this.selectedlanguagechange_) {\n        rtrack.removeEventListener('modechange', this.triggerSelectedlanguagechange_);\n      }\n    }\n  };\n\n  return TextTrackList;\n}(TrackList);\n\n/**\n * @file html-track-element-list.js\n */\n\n/**\n * The current list of {@link HtmlTrackElement}s.\n */\nvar HtmlTrackElementList =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Create an instance of this class.\n   *\n   * @param {HtmlTrackElement[]} [tracks=[]]\n   *        A list of `HtmlTrackElement` to instantiate the list with.\n   */\n  function HtmlTrackElementList(trackElements) {\n    if (trackElements === void 0) {\n      trackElements = [];\n    }\n\n    this.trackElements_ = [];\n    /**\n     * @memberof HtmlTrackElementList\n     * @member {number} length\n     *         The current number of `Track`s in the this Trackist.\n     * @instance\n     */\n\n    Object.defineProperty(this, 'length', {\n      get: function get() {\n        return this.trackElements_.length;\n      }\n    });\n\n    for (var i = 0, length = trackElements.length; i < length; i++) {\n      this.addTrackElement_(trackElements[i]);\n    }\n  }\n  /**\n   * Add an {@link HtmlTrackElement} to the `HtmlTrackElementList`\n   *\n   * @param {HtmlTrackElement} trackElement\n   *        The track element to add to the list.\n   *\n   * @private\n   */\n\n\n  var _proto = HtmlTrackElementList.prototype;\n\n  _proto.addTrackElement_ = function addTrackElement_(trackElement) {\n    var index = this.trackElements_.length;\n\n    if (!('' + index in this)) {\n      Object.defineProperty(this, index, {\n        get: function get() {\n          return this.trackElements_[index];\n        }\n      });\n    } // Do not add duplicate elements\n\n\n    if (this.trackElements_.indexOf(trackElement) === -1) {\n      this.trackElements_.push(trackElement);\n    }\n  }\n  /**\n   * Get an {@link HtmlTrackElement} from the `HtmlTrackElementList` given an\n   * {@link TextTrack}.\n   *\n   * @param {TextTrack} track\n   *        The track associated with a track element.\n   *\n   * @return {HtmlTrackElement|undefined}\n   *         The track element that was found or undefined.\n   *\n   * @private\n   */\n  ;\n\n  _proto.getTrackElementByTrack_ = function getTrackElementByTrack_(track) {\n    var trackElement_;\n\n    for (var i = 0, length = this.trackElements_.length; i < length; i++) {\n      if (track === this.trackElements_[i].track) {\n        trackElement_ = this.trackElements_[i];\n        break;\n      }\n    }\n\n    return trackElement_;\n  }\n  /**\n   * Remove a {@link HtmlTrackElement} from the `HtmlTrackElementList`\n   *\n   * @param {HtmlTrackElement} trackElement\n   *        The track element to remove from the list.\n   *\n   * @private\n   */\n  ;\n\n  _proto.removeTrackElement_ = function removeTrackElement_(trackElement) {\n    for (var i = 0, length = this.trackElements_.length; i < length; i++) {\n      if (trackElement === this.trackElements_[i]) {\n        if (this.trackElements_[i].track && typeof this.trackElements_[i].track.off === 'function') {\n          this.trackElements_[i].track.off();\n        }\n\n        if (typeof this.trackElements_[i].off === 'function') {\n          this.trackElements_[i].off();\n        }\n\n        this.trackElements_.splice(i, 1);\n        break;\n      }\n    }\n  };\n\n  return HtmlTrackElementList;\n}();\n\n/**\n * @file text-track-cue-list.js\n */\n\n/**\n * @typedef {Object} TextTrackCueList~TextTrackCue\n *\n * @property {string} id\n *           The unique id for this text track cue\n *\n * @property {number} startTime\n *           The start time for this text track cue\n *\n * @property {number} endTime\n *           The end time for this text track cue\n *\n * @property {boolean} pauseOnExit\n *           Pause when the end time is reached if true.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcue}\n */\n\n/**\n * A List of TextTrackCues.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcuelist}\n */\nvar TextTrackCueList =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Create an instance of this class..\n   *\n   * @param {Array} cues\n   *        A list of cues to be initialized with\n   */\n  function TextTrackCueList(cues) {\n    TextTrackCueList.prototype.setCues_.call(this, cues);\n    /**\n     * @memberof TextTrackCueList\n     * @member {number} length\n     *         The current number of `TextTrackCue`s in the TextTrackCueList.\n     * @instance\n     */\n\n    Object.defineProperty(this, 'length', {\n      get: function get() {\n        return this.length_;\n      }\n    });\n  }\n  /**\n   * A setter for cues in this list. Creates getters\n   * an an index for the cues.\n   *\n   * @param {Array} cues\n   *        An array of cues to set\n   *\n   * @private\n   */\n\n\n  var _proto = TextTrackCueList.prototype;\n\n  _proto.setCues_ = function setCues_(cues) {\n    var oldLength = this.length || 0;\n    var i = 0;\n    var l = cues.length;\n    this.cues_ = cues;\n    this.length_ = cues.length;\n\n    var defineProp = function defineProp(index) {\n      if (!('' + index in this)) {\n        Object.defineProperty(this, '' + index, {\n          get: function get() {\n            return this.cues_[index];\n          }\n        });\n      }\n    };\n\n    if (oldLength < l) {\n      i = oldLength;\n\n      for (; i < l; i++) {\n        defineProp.call(this, i);\n      }\n    }\n  }\n  /**\n   * Get a `TextTrackCue` that is currently in the `TextTrackCueList` by id.\n   *\n   * @param {string} id\n   *        The id of the cue that should be searched for.\n   *\n   * @return {TextTrackCueList~TextTrackCue|null}\n   *         A single cue or null if none was found.\n   */\n  ;\n\n  _proto.getCueById = function getCueById(id) {\n    var result = null;\n\n    for (var i = 0, l = this.length; i < l; i++) {\n      var cue = this[i];\n\n      if (cue.id === id) {\n        result = cue;\n        break;\n      }\n    }\n\n    return result;\n  };\n\n  return TextTrackCueList;\n}();\n\n/**\n * @file track-kinds.js\n */\n\n/**\n * All possible `VideoTrackKind`s\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-videotrack-kind\n * @typedef VideoTrack~Kind\n * @enum\n */\nvar VideoTrackKind = {\n  alternative: 'alternative',\n  captions: 'captions',\n  main: 'main',\n  sign: 'sign',\n  subtitles: 'subtitles',\n  commentary: 'commentary'\n};\n/**\n * All possible `AudioTrackKind`s\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-audiotrack-kind\n * @typedef AudioTrack~Kind\n * @enum\n */\n\nvar AudioTrackKind = {\n  'alternative': 'alternative',\n  'descriptions': 'descriptions',\n  'main': 'main',\n  'main-desc': 'main-desc',\n  'translation': 'translation',\n  'commentary': 'commentary'\n};\n/**\n * All possible `TextTrackKind`s\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-texttrack-kind\n * @typedef TextTrack~Kind\n * @enum\n */\n\nvar TextTrackKind = {\n  subtitles: 'subtitles',\n  captions: 'captions',\n  descriptions: 'descriptions',\n  chapters: 'chapters',\n  metadata: 'metadata'\n};\n/**\n * All possible `TextTrackMode`s\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackmode\n * @typedef TextTrack~Mode\n * @enum\n */\n\nvar TextTrackMode = {\n  disabled: 'disabled',\n  hidden: 'hidden',\n  showing: 'showing'\n};\n\n/**\n * A Track class that contains all of the common functionality for {@link AudioTrack},\n * {@link VideoTrack}, and {@link TextTrack}.\n *\n * > Note: This class should not be used directly\n *\n * @see {@link https://html.spec.whatwg.org/multipage/embedded-content.html}\n * @extends EventTarget\n * @abstract\n */\n\nvar Track =\n/*#__PURE__*/\nfunction (_EventTarget) {\n  _inheritsLoose(Track, _EventTarget);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} [options={}]\n   *        Object of option names and values\n   *\n   * @param {string} [options.kind='']\n   *        A valid kind for the track type you are creating.\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this AudioTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @abstract\n   */\n  function Track(options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    _this = _EventTarget.call(this) || this;\n    var trackProps = {\n      id: options.id || 'vjs_track_' + newGUID(),\n      kind: options.kind || '',\n      label: options.label || '',\n      language: options.language || ''\n    };\n    /**\n     * @memberof Track\n     * @member {string} id\n     *         The id of this track. Cannot be changed after creation.\n     * @instance\n     *\n     * @readonly\n     */\n\n    /**\n     * @memberof Track\n     * @member {string} kind\n     *         The kind of track that this is. Cannot be changed after creation.\n     * @instance\n     *\n     * @readonly\n     */\n\n    /**\n     * @memberof Track\n     * @member {string} label\n     *         The label of this track. Cannot be changed after creation.\n     * @instance\n     *\n     * @readonly\n     */\n\n    /**\n     * @memberof Track\n     * @member {string} language\n     *         The two letter language code for this track. Cannot be changed after\n     *         creation.\n     * @instance\n     *\n     * @readonly\n     */\n\n    var _loop = function _loop(key) {\n      Object.defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), key, {\n        get: function get() {\n          return trackProps[key];\n        },\n        set: function set() {}\n      });\n    };\n\n    for (var key in trackProps) {\n      _loop(key);\n    }\n\n    return _this;\n  }\n\n  return Track;\n}(EventTarget);\n\n/**\n * @file url.js\n * @module url\n */\n/**\n * @typedef {Object} url:URLObject\n *\n * @property {string} protocol\n *           The protocol of the url that was parsed.\n *\n * @property {string} hostname\n *           The hostname of the url that was parsed.\n *\n * @property {string} port\n *           The port of the url that was parsed.\n *\n * @property {string} pathname\n *           The pathname of the url that was parsed.\n *\n * @property {string} search\n *           The search query of the url that was parsed.\n *\n * @property {string} hash\n *           The hash of the url that was parsed.\n *\n * @property {string} host\n *           The host of the url that was parsed.\n */\n\n/**\n * Resolve and parse the elements of a URL.\n *\n * @function\n * @param    {String} url\n *           The url to parse\n *\n * @return   {url:URLObject}\n *           An object of url details\n */\n\nvar parseUrl = function parseUrl(url) {\n  var props = ['protocol', 'hostname', 'port', 'pathname', 'search', 'hash', 'host']; // add the url to an anchor and let the browser parse the URL\n\n  var a = document.createElement('a');\n  a.href = url; // IE8 (and 9?) Fix\n  // ie8 doesn't parse the URL correctly until the anchor is actually\n  // added to the body, and an innerHTML is needed to trigger the parsing\n\n  var addToBody = a.host === '' && a.protocol !== 'file:';\n  var div;\n\n  if (addToBody) {\n    div = document.createElement('div');\n    div.innerHTML = \"<a href=\\\"\" + url + \"\\\"></a>\";\n    a = div.firstChild; // prevent the div from affecting layout\n\n    div.setAttribute('style', 'display:none; position:absolute;');\n    document.body.appendChild(div);\n  } // Copy the specific URL properties to a new object\n  // This is also needed for IE8 because the anchor loses its\n  // properties when it's removed from the dom\n\n\n  var details = {};\n\n  for (var i = 0; i < props.length; i++) {\n    details[props[i]] = a[props[i]];\n  } // IE9 adds the port to the host property unlike everyone else. If\n  // a port identifier is added for standard ports, strip it.\n\n\n  if (details.protocol === 'http:') {\n    details.host = details.host.replace(/:80$/, '');\n  }\n\n  if (details.protocol === 'https:') {\n    details.host = details.host.replace(/:443$/, '');\n  }\n\n  if (!details.protocol) {\n    details.protocol = window$1.location.protocol;\n  }\n\n  if (addToBody) {\n    document.body.removeChild(div);\n  }\n\n  return details;\n};\n/**\n * Get absolute version of relative URL. Used to tell Flash the correct URL.\n *\n * @function\n * @param    {string} url\n *           URL to make absolute\n *\n * @return   {string}\n *           Absolute URL\n *\n * @see      http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue\n */\n\nvar getAbsoluteURL = function getAbsoluteURL(url) {\n  // Check if absolute URL\n  if (!url.match(/^https?:\\/\\//)) {\n    // Convert to absolute URL. Flash hosted off-site needs an absolute URL.\n    var div = document.createElement('div');\n    div.innerHTML = \"<a href=\\\"\" + url + \"\\\">x</a>\";\n    url = div.firstChild.href;\n  }\n\n  return url;\n};\n/**\n * Returns the extension of the passed file name. It will return an empty string\n * if passed an invalid path.\n *\n * @function\n * @param    {string} path\n *           The fileName path like '/path/to/file.mp4'\n *\n * @return  {string}\n *           The extension in lower case or an empty string if no\n *           extension could be found.\n */\n\nvar getFileExtension = function getFileExtension(path) {\n  if (typeof path === 'string') {\n    var splitPathRe = /^(\\/?)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?)(\\.([^\\.\\/\\?]+)))(?:[\\/]*|[\\?].*)$/i;\n    var pathParts = splitPathRe.exec(path);\n\n    if (pathParts) {\n      return pathParts.pop().toLowerCase();\n    }\n  }\n\n  return '';\n};\n/**\n * Returns whether the url passed is a cross domain request or not.\n *\n * @function\n * @param    {string} url\n *           The url to check.\n *\n * @return   {boolean}\n *           Whether it is a cross domain request or not.\n */\n\nvar isCrossOrigin = function isCrossOrigin(url) {\n  var winLoc = window$1.location;\n  var urlInfo = parseUrl(url); // IE8 protocol relative urls will return ':' for protocol\n\n  var srcProtocol = urlInfo.protocol === ':' ? winLoc.protocol : urlInfo.protocol; // Check if url is for another domain/origin\n  // IE8 doesn't know location.origin, so we won't rely on it here\n\n  var crossOrigin = srcProtocol + urlInfo.host !== winLoc.protocol + winLoc.host;\n  return crossOrigin;\n};\n\nvar Url = /*#__PURE__*/Object.freeze({\n  parseUrl: parseUrl,\n  getAbsoluteURL: getAbsoluteURL,\n  getFileExtension: getFileExtension,\n  isCrossOrigin: isCrossOrigin\n});\n\n/**\n * Takes a webvtt file contents and parses it into cues\n *\n * @param {string} srcContent\n *        webVTT file contents\n *\n * @param {TextTrack} track\n *        TextTrack to add cues to. Cues come from the srcContent.\n *\n * @private\n */\n\nvar parseCues = function parseCues(srcContent, track) {\n  var parser = new window$1.WebVTT.Parser(window$1, window$1.vttjs, window$1.WebVTT.StringDecoder());\n  var errors = [];\n\n  parser.oncue = function (cue) {\n    track.addCue(cue);\n  };\n\n  parser.onparsingerror = function (error) {\n    errors.push(error);\n  };\n\n  parser.onflush = function () {\n    track.trigger({\n      type: 'loadeddata',\n      target: track\n    });\n  };\n\n  parser.parse(srcContent);\n\n  if (errors.length > 0) {\n    if (window$1.console && window$1.console.groupCollapsed) {\n      window$1.console.groupCollapsed(\"Text Track parsing errors for \" + track.src);\n    }\n\n    errors.forEach(function (error) {\n      return log.error(error);\n    });\n\n    if (window$1.console && window$1.console.groupEnd) {\n      window$1.console.groupEnd();\n    }\n  }\n\n  parser.flush();\n};\n/**\n * Load a `TextTrack` from a specified url.\n *\n * @param {string} src\n *        Url to load track from.\n *\n * @param {TextTrack} track\n *        Track to add cues to. Comes from the content at the end of `url`.\n *\n * @private\n */\n\n\nvar loadTrack = function loadTrack(src, track) {\n  var opts = {\n    uri: src\n  };\n  var crossOrigin = isCrossOrigin(src);\n\n  if (crossOrigin) {\n    opts.cors = crossOrigin;\n  }\n\n  xhr(opts, bind(this, function (err, response, responseBody) {\n    if (err) {\n      return log.error(err, response);\n    }\n\n    track.loaded_ = true; // Make sure that vttjs has loaded, otherwise, wait till it finished loading\n    // NOTE: this is only used for the alt/video.novtt.js build\n\n    if (typeof window$1.WebVTT !== 'function') {\n      if (track.tech_) {\n        // to prevent use before define eslint error, we define loadHandler\n        // as a let here\n        var loadHandler;\n\n        var errorHandler = function errorHandler() {\n          log.error(\"vttjs failed to load, stopping trying to process \" + track.src);\n          track.tech_.off('vttjsloaded', loadHandler);\n        };\n\n        loadHandler = function loadHandler() {\n          track.tech_.off('vttjserror', errorHandler);\n          return parseCues(responseBody, track);\n        };\n\n        track.tech_.one('vttjsloaded', loadHandler);\n        track.tech_.one('vttjserror', errorHandler);\n      }\n    } else {\n      parseCues(responseBody, track);\n    }\n  }));\n};\n/**\n * A representation of a single `TextTrack`.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrack}\n * @extends Track\n */\n\n\nvar TextTrack =\n/*#__PURE__*/\nfunction (_Track) {\n  _inheritsLoose(TextTrack, _Track);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} options={}\n   *        Object of option names and values\n   *\n   * @param {Tech} options.tech\n   *        A reference to the tech that owns this TextTrack.\n   *\n   * @param {TextTrack~Kind} [options.kind='subtitles']\n   *        A valid text track kind.\n   *\n   * @param {TextTrack~Mode} [options.mode='disabled']\n   *        A valid text track mode.\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this TextTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @param {string} [options.srclang='']\n   *        A valid two character language code. An alternative, but deprioritized\n   *        version of `options.language`\n   *\n   * @param {string} [options.src]\n   *        A url to TextTrack cues.\n   *\n   * @param {boolean} [options.default]\n   *        If this track should default to on or off.\n   */\n  function TextTrack(options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (!options.tech) {\n      throw new Error('A tech was not provided.');\n    }\n\n    var settings = mergeOptions(options, {\n      kind: TextTrackKind[options.kind] || 'subtitles',\n      language: options.language || options.srclang || ''\n    });\n    var mode = TextTrackMode[settings.mode] || 'disabled';\n    var default_ = settings.default;\n\n    if (settings.kind === 'metadata' || settings.kind === 'chapters') {\n      mode = 'hidden';\n    }\n\n    _this = _Track.call(this, settings) || this;\n    _this.tech_ = settings.tech;\n    _this.cues_ = [];\n    _this.activeCues_ = [];\n    var cues = new TextTrackCueList(_this.cues_);\n    var activeCues = new TextTrackCueList(_this.activeCues_);\n    var changed = false;\n    var timeupdateHandler = bind(_assertThisInitialized(_assertThisInitialized(_this)), function () {\n      // Accessing this.activeCues for the side-effects of updating itself\n      // due to its nature as a getter function. Do not remove or cues will\n      // stop updating!\n      // Use the setter to prevent deletion from uglify (pure_getters rule)\n      this.activeCues = this.activeCues;\n\n      if (changed) {\n        this.trigger('cuechange');\n        changed = false;\n      }\n    });\n\n    if (mode !== 'disabled') {\n      _this.tech_.ready(function () {\n        _this.tech_.on('timeupdate', timeupdateHandler);\n      }, true);\n    }\n\n    Object.defineProperties(_assertThisInitialized(_assertThisInitialized(_this)), {\n      /**\n       * @memberof TextTrack\n       * @member {boolean} default\n       *         If this track was set to be on or off by default. Cannot be changed after\n       *         creation.\n       * @instance\n       *\n       * @readonly\n       */\n      default: {\n        get: function get() {\n          return default_;\n        },\n        set: function set() {}\n      },\n\n      /**\n       * @memberof TextTrack\n       * @member {string} mode\n       *         Set the mode of this TextTrack to a valid {@link TextTrack~Mode}. Will\n       *         not be set if setting to an invalid mode.\n       * @instance\n       *\n       * @fires TextTrack#modechange\n       */\n      mode: {\n        get: function get() {\n          return mode;\n        },\n        set: function set(newMode) {\n          var _this2 = this;\n\n          if (!TextTrackMode[newMode]) {\n            return;\n          }\n\n          mode = newMode;\n\n          if (mode !== 'disabled') {\n            this.tech_.ready(function () {\n              _this2.tech_.on('timeupdate', timeupdateHandler);\n            }, true);\n          } else {\n            this.tech_.off('timeupdate', timeupdateHandler);\n          }\n          /**\n           * An event that fires when mode changes on this track. This allows\n           * the TextTrackList that holds this track to act accordingly.\n           *\n           * > Note: This is not part of the spec!\n           *\n           * @event TextTrack#modechange\n           * @type {EventTarget~Event}\n           */\n\n\n          this.trigger('modechange');\n        }\n      },\n\n      /**\n       * @memberof TextTrack\n       * @member {TextTrackCueList} cues\n       *         The text track cue list for this TextTrack.\n       * @instance\n       */\n      cues: {\n        get: function get() {\n          if (!this.loaded_) {\n            return null;\n          }\n\n          return cues;\n        },\n        set: function set() {}\n      },\n\n      /**\n       * @memberof TextTrack\n       * @member {TextTrackCueList} activeCues\n       *         The list text track cues that are currently active for this TextTrack.\n       * @instance\n       */\n      activeCues: {\n        get: function get() {\n          if (!this.loaded_) {\n            return null;\n          } // nothing to do\n\n\n          if (this.cues.length === 0) {\n            return activeCues;\n          }\n\n          var ct = this.tech_.currentTime();\n          var active = [];\n\n          for (var i = 0, l = this.cues.length; i < l; i++) {\n            var cue = this.cues[i];\n\n            if (cue.startTime <= ct && cue.endTime >= ct) {\n              active.push(cue);\n            } else if (cue.startTime === cue.endTime && cue.startTime <= ct && cue.startTime + 0.5 >= ct) {\n              active.push(cue);\n            }\n          }\n\n          changed = false;\n\n          if (active.length !== this.activeCues_.length) {\n            changed = true;\n          } else {\n            for (var _i = 0; _i < active.length; _i++) {\n              if (this.activeCues_.indexOf(active[_i]) === -1) {\n                changed = true;\n              }\n            }\n          }\n\n          this.activeCues_ = active;\n          activeCues.setCues_(this.activeCues_);\n          return activeCues;\n        },\n        // /!\\ Keep this setter empty (see the timeupdate handler above)\n        set: function set() {}\n      }\n    });\n\n    if (settings.src) {\n      _this.src = settings.src;\n      loadTrack(settings.src, _assertThisInitialized(_assertThisInitialized(_this)));\n    } else {\n      _this.loaded_ = true;\n    }\n\n    return _this;\n  }\n  /**\n   * Add a cue to the internal list of cues.\n   *\n   * @param {TextTrack~Cue} cue\n   *        The cue to add to our internal list\n   */\n\n\n  var _proto = TextTrack.prototype;\n\n  _proto.addCue = function addCue(originalCue) {\n    var cue = originalCue;\n\n    if (window$1.vttjs && !(originalCue instanceof window$1.vttjs.VTTCue)) {\n      cue = new window$1.vttjs.VTTCue(originalCue.startTime, originalCue.endTime, originalCue.text);\n\n      for (var prop in originalCue) {\n        if (!(prop in cue)) {\n          cue[prop] = originalCue[prop];\n        }\n      } // make sure that `id` is copied over\n\n\n      cue.id = originalCue.id;\n      cue.originalCue_ = originalCue;\n    }\n\n    var tracks = this.tech_.textTracks();\n\n    for (var i = 0; i < tracks.length; i++) {\n      if (tracks[i] !== this) {\n        tracks[i].removeCue(cue);\n      }\n    }\n\n    this.cues_.push(cue);\n    this.cues.setCues_(this.cues_);\n  }\n  /**\n   * Remove a cue from our internal list\n   *\n   * @param {TextTrack~Cue} removeCue\n   *        The cue to remove from our internal list\n   */\n  ;\n\n  _proto.removeCue = function removeCue(_removeCue) {\n    var i = this.cues_.length;\n\n    while (i--) {\n      var cue = this.cues_[i];\n\n      if (cue === _removeCue || cue.originalCue_ && cue.originalCue_ === _removeCue) {\n        this.cues_.splice(i, 1);\n        this.cues.setCues_(this.cues_);\n        break;\n      }\n    }\n  };\n\n  return TextTrack;\n}(Track);\n/**\n * cuechange - One or more cues in the track have become active or stopped being active.\n */\n\n\nTextTrack.prototype.allowedEvents_ = {\n  cuechange: 'cuechange'\n};\n\n/**\n * A representation of a single `AudioTrack`. If it is part of an {@link AudioTrackList}\n * only one `AudioTrack` in the list will be enabled at a time.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotrack}\n * @extends Track\n */\n\nvar AudioTrack =\n/*#__PURE__*/\nfunction (_Track) {\n  _inheritsLoose(AudioTrack, _Track);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} [options={}]\n   *        Object of option names and values\n   *\n   * @param {AudioTrack~Kind} [options.kind='']\n   *        A valid audio track kind\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this AudioTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @param {boolean} [options.enabled]\n   *        If this track is the one that is currently playing. If this track is part of\n   *        an {@link AudioTrackList}, only one {@link AudioTrack} will be enabled.\n   */\n  function AudioTrack(options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var settings = mergeOptions(options, {\n      kind: AudioTrackKind[options.kind] || ''\n    });\n    _this = _Track.call(this, settings) || this;\n    var enabled = false;\n    /**\n     * @memberof AudioTrack\n     * @member {boolean} enabled\n     *         If this `AudioTrack` is enabled or not. When setting this will\n     *         fire {@link AudioTrack#enabledchange} if the state of enabled is changed.\n     * @instance\n     *\n     * @fires VideoTrack#selectedchange\n     */\n\n    Object.defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), 'enabled', {\n      get: function get() {\n        return enabled;\n      },\n      set: function set(newEnabled) {\n        // an invalid or unchanged value\n        if (typeof newEnabled !== 'boolean' || newEnabled === enabled) {\n          return;\n        }\n\n        enabled = newEnabled;\n        /**\n         * An event that fires when enabled changes on this track. This allows\n         * the AudioTrackList that holds this track to act accordingly.\n         *\n         * > Note: This is not part of the spec! Native tracks will do\n         *         this internally without an event.\n         *\n         * @event AudioTrack#enabledchange\n         * @type {EventTarget~Event}\n         */\n\n        this.trigger('enabledchange');\n      }\n    }); // if the user sets this track to selected then\n    // set selected to that true value otherwise\n    // we keep it false\n\n    if (settings.enabled) {\n      _this.enabled = settings.enabled;\n    }\n\n    _this.loaded_ = true;\n    return _this;\n  }\n\n  return AudioTrack;\n}(Track);\n\n/**\n * A representation of a single `VideoTrack`.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotrack}\n * @extends Track\n */\n\nvar VideoTrack =\n/*#__PURE__*/\nfunction (_Track) {\n  _inheritsLoose(VideoTrack, _Track);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} [options={}]\n   *        Object of option names and values\n   *\n   * @param {string} [options.kind='']\n   *        A valid {@link VideoTrack~Kind}\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this AudioTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @param {boolean} [options.selected]\n   *        If this track is the one that is currently playing.\n   */\n  function VideoTrack(options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var settings = mergeOptions(options, {\n      kind: VideoTrackKind[options.kind] || ''\n    });\n    _this = _Track.call(this, settings) || this;\n    var selected = false;\n    /**\n     * @memberof VideoTrack\n     * @member {boolean} selected\n     *         If this `VideoTrack` is selected or not. When setting this will\n     *         fire {@link VideoTrack#selectedchange} if the state of selected changed.\n     * @instance\n     *\n     * @fires VideoTrack#selectedchange\n     */\n\n    Object.defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), 'selected', {\n      get: function get() {\n        return selected;\n      },\n      set: function set(newSelected) {\n        // an invalid or unchanged value\n        if (typeof newSelected !== 'boolean' || newSelected === selected) {\n          return;\n        }\n\n        selected = newSelected;\n        /**\n         * An event that fires when selected changes on this track. This allows\n         * the VideoTrackList that holds this track to act accordingly.\n         *\n         * > Note: This is not part of the spec! Native tracks will do\n         *         this internally without an event.\n         *\n         * @event VideoTrack#selectedchange\n         * @type {EventTarget~Event}\n         */\n\n        this.trigger('selectedchange');\n      }\n    }); // if the user sets this track to selected then\n    // set selected to that true value otherwise\n    // we keep it false\n\n    if (settings.selected) {\n      _this.selected = settings.selected;\n    }\n\n    return _this;\n  }\n\n  return VideoTrack;\n}(Track);\n\n/**\n * @memberof HTMLTrackElement\n * @typedef {HTMLTrackElement~ReadyState}\n * @enum {number}\n */\n\nvar NONE = 0;\nvar LOADING = 1;\nvar LOADED = 2;\nvar ERROR = 3;\n/**\n * A single track represented in the DOM.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#htmltrackelement}\n * @extends EventTarget\n */\n\nvar HTMLTrackElement =\n/*#__PURE__*/\nfunction (_EventTarget) {\n  _inheritsLoose(HTMLTrackElement, _EventTarget);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} options={}\n   *        Object of option names and values\n   *\n   * @param {Tech} options.tech\n   *        A reference to the tech that owns this HTMLTrackElement.\n   *\n   * @param {TextTrack~Kind} [options.kind='subtitles']\n   *        A valid text track kind.\n   *\n   * @param {TextTrack~Mode} [options.mode='disabled']\n   *        A valid text track mode.\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this TextTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @param {string} [options.srclang='']\n   *        A valid two character language code. An alternative, but deprioritized\n   *        vesion of `options.language`\n   *\n   * @param {string} [options.src]\n   *        A url to TextTrack cues.\n   *\n   * @param {boolean} [options.default]\n   *        If this track should default to on or off.\n   */\n  function HTMLTrackElement(options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    _this = _EventTarget.call(this) || this;\n    var readyState;\n    var track = new TextTrack(options);\n    _this.kind = track.kind;\n    _this.src = track.src;\n    _this.srclang = track.language;\n    _this.label = track.label;\n    _this.default = track.default;\n    Object.defineProperties(_assertThisInitialized(_assertThisInitialized(_this)), {\n      /**\n       * @memberof HTMLTrackElement\n       * @member {HTMLTrackElement~ReadyState} readyState\n       *         The current ready state of the track element.\n       * @instance\n       */\n      readyState: {\n        get: function get() {\n          return readyState;\n        }\n      },\n\n      /**\n       * @memberof HTMLTrackElement\n       * @member {TextTrack} track\n       *         The underlying TextTrack object.\n       * @instance\n       *\n       */\n      track: {\n        get: function get() {\n          return track;\n        }\n      }\n    });\n    readyState = NONE;\n    /**\n     * @listens TextTrack#loadeddata\n     * @fires HTMLTrackElement#load\n     */\n\n    track.addEventListener('loadeddata', function () {\n      readyState = LOADED;\n\n      _this.trigger({\n        type: 'load',\n        target: _assertThisInitialized(_assertThisInitialized(_this))\n      });\n    });\n    return _this;\n  }\n\n  return HTMLTrackElement;\n}(EventTarget);\n\nHTMLTrackElement.prototype.allowedEvents_ = {\n  load: 'load'\n};\nHTMLTrackElement.NONE = NONE;\nHTMLTrackElement.LOADING = LOADING;\nHTMLTrackElement.LOADED = LOADED;\nHTMLTrackElement.ERROR = ERROR;\n\n/*\n * This file contains all track properties that are used in\n * player.js, tech.js, html5.js and possibly other techs in the future.\n */\n\nvar NORMAL = {\n  audio: {\n    ListClass: AudioTrackList,\n    TrackClass: AudioTrack,\n    capitalName: 'Audio'\n  },\n  video: {\n    ListClass: VideoTrackList,\n    TrackClass: VideoTrack,\n    capitalName: 'Video'\n  },\n  text: {\n    ListClass: TextTrackList,\n    TrackClass: TextTrack,\n    capitalName: 'Text'\n  }\n};\nObject.keys(NORMAL).forEach(function (type) {\n  NORMAL[type].getterName = type + \"Tracks\";\n  NORMAL[type].privateName = type + \"Tracks_\";\n});\nvar REMOTE = {\n  remoteText: {\n    ListClass: TextTrackList,\n    TrackClass: TextTrack,\n    capitalName: 'RemoteText',\n    getterName: 'remoteTextTracks',\n    privateName: 'remoteTextTracks_'\n  },\n  remoteTextEl: {\n    ListClass: HtmlTrackElementList,\n    TrackClass: HTMLTrackElement,\n    capitalName: 'RemoteTextTrackEls',\n    getterName: 'remoteTextTrackEls',\n    privateName: 'remoteTextTrackEls_'\n  }\n};\nvar ALL = mergeOptions(NORMAL, REMOTE);\nREMOTE.names = Object.keys(REMOTE);\nNORMAL.names = Object.keys(NORMAL);\nALL.names = [].concat(REMOTE.names).concat(NORMAL.names);\n\n/**\n * An Object containing a structure like: `{src: 'url', type: 'mimetype'}` or string\n * that just contains the src url alone.\n * * `var SourceObject = {src: 'http://ex.com/video.mp4', type: 'video/mp4'};`\n   * `var SourceString = 'http://example.com/some-video.mp4';`\n *\n * @typedef {Object|string} Tech~SourceObject\n *\n * @property {string} src\n *           The url to the source\n *\n * @property {string} type\n *           The mime type of the source\n */\n\n/**\n * A function used by {@link Tech} to create a new {@link TextTrack}.\n *\n * @private\n *\n * @param {Tech} self\n *        An instance of the Tech class.\n *\n * @param {string} kind\n *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\n *\n * @param {string} [label]\n *        Label to identify the text track\n *\n * @param {string} [language]\n *        Two letter language abbreviation\n *\n * @param {Object} [options={}]\n *        An object with additional text track options\n *\n * @return {TextTrack}\n *          The text track that was created.\n */\n\nfunction createTrackHelper(self, kind, label, language, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var tracks = self.textTracks();\n  options.kind = kind;\n\n  if (label) {\n    options.label = label;\n  }\n\n  if (language) {\n    options.language = language;\n  }\n\n  options.tech = self;\n  var track = new ALL.text.TrackClass(options);\n  tracks.addTrack(track);\n  return track;\n}\n/**\n * This is the base class for media playback technology controllers, such as\n * {@link Flash} and {@link HTML5}\n *\n * @extends Component\n */\n\n\nvar Tech =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Tech, _Component);\n\n  /**\n  * Create an instance of this Tech.\n  *\n  * @param {Object} [options]\n  *        The key/value store of player options.\n  *\n  * @param {Component~ReadyCallback} ready\n  *        Callback function to call when the `HTML5` Tech is ready.\n  */\n  function Tech(options, ready) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (ready === void 0) {\n      ready = function ready() {};\n    }\n\n    // we don't want the tech to report user activity automatically.\n    // This is done manually in addControlsListeners\n    options.reportTouchActivity = false;\n    _this = _Component.call(this, null, options, ready) || this; // keep track of whether the current source has played at all to\n    // implement a very limited played()\n\n    _this.hasStarted_ = false;\n\n    _this.on('playing', function () {\n      this.hasStarted_ = true;\n    });\n\n    _this.on('loadstart', function () {\n      this.hasStarted_ = false;\n    });\n\n    ALL.names.forEach(function (name) {\n      var props = ALL[name];\n\n      if (options && options[props.getterName]) {\n        _this[props.privateName] = options[props.getterName];\n      }\n    }); // Manually track progress in cases where the browser/flash player doesn't report it.\n\n    if (!_this.featuresProgressEvents) {\n      _this.manualProgressOn();\n    } // Manually track timeupdates in cases where the browser/flash player doesn't report it.\n\n\n    if (!_this.featuresTimeupdateEvents) {\n      _this.manualTimeUpdatesOn();\n    }\n\n    ['Text', 'Audio', 'Video'].forEach(function (track) {\n      if (options[\"native\" + track + \"Tracks\"] === false) {\n        _this[\"featuresNative\" + track + \"Tracks\"] = false;\n      }\n    });\n\n    if (options.nativeCaptions === false || options.nativeTextTracks === false) {\n      _this.featuresNativeTextTracks = false;\n    } else if (options.nativeCaptions === true || options.nativeTextTracks === true) {\n      _this.featuresNativeTextTracks = true;\n    }\n\n    if (!_this.featuresNativeTextTracks) {\n      _this.emulateTextTracks();\n    }\n\n    _this.autoRemoteTextTracks_ = new ALL.text.ListClass();\n\n    _this.initTrackListeners(); // Turn on component tap events only if not using native controls\n\n\n    if (!options.nativeControlsForTouch) {\n      _this.emitTapEvents();\n    }\n\n    if (_this.constructor) {\n      _this.name_ = _this.constructor.name || 'Unknown Tech';\n    }\n\n    return _this;\n  }\n  /**\n   * A special function to trigger source set in a way that will allow player\n   * to re-trigger if the player or tech are not ready yet.\n   *\n   * @fires Tech#sourceset\n   * @param {string} src The source string at the time of the source changing.\n   */\n\n\n  var _proto = Tech.prototype;\n\n  _proto.triggerSourceset = function triggerSourceset(src) {\n    var _this2 = this;\n\n    if (!this.isReady_) {\n      // on initial ready we have to trigger source set\n      // 1ms after ready so that player can watch for it.\n      this.one('ready', function () {\n        return _this2.setTimeout(function () {\n          return _this2.triggerSourceset(src);\n        }, 1);\n      });\n    }\n    /**\n     * Fired when the source is set on the tech causing the media element\n     * to reload.\n     *\n     * @see {@link Player#event:sourceset}\n     * @event Tech#sourceset\n     * @type {EventTarget~Event}\n     */\n\n\n    this.trigger({\n      src: src,\n      type: 'sourceset'\n    });\n  }\n  /* Fallbacks for unsupported event types\n  ================================================================================ */\n\n  /**\n   * Polyfill the `progress` event for browsers that don't support it natively.\n   *\n   * @see {@link Tech#trackProgress}\n   */\n  ;\n\n  _proto.manualProgressOn = function manualProgressOn() {\n    this.on('durationchange', this.onDurationChange);\n    this.manualProgress = true; // Trigger progress watching when a source begins loading\n\n    this.one('ready', this.trackProgress);\n  }\n  /**\n   * Turn off the polyfill for `progress` events that was created in\n   * {@link Tech#manualProgressOn}\n   */\n  ;\n\n  _proto.manualProgressOff = function manualProgressOff() {\n    this.manualProgress = false;\n    this.stopTrackingProgress();\n    this.off('durationchange', this.onDurationChange);\n  }\n  /**\n   * This is used to trigger a `progress` event when the buffered percent changes. It\n   * sets an interval function that will be called every 500 milliseconds to check if the\n   * buffer end percent has changed.\n   *\n   * > This function is called by {@link Tech#manualProgressOn}\n   *\n   * @param {EventTarget~Event} event\n   *        The `ready` event that caused this to run.\n   *\n   * @listens Tech#ready\n   * @fires Tech#progress\n   */\n  ;\n\n  _proto.trackProgress = function trackProgress(event) {\n    this.stopTrackingProgress();\n    this.progressInterval = this.setInterval(bind(this, function () {\n      // Don't trigger unless buffered amount is greater than last time\n      var numBufferedPercent = this.bufferedPercent();\n\n      if (this.bufferedPercent_ !== numBufferedPercent) {\n        /**\n         * See {@link Player#progress}\n         *\n         * @event Tech#progress\n         * @type {EventTarget~Event}\n         */\n        this.trigger('progress');\n      }\n\n      this.bufferedPercent_ = numBufferedPercent;\n\n      if (numBufferedPercent === 1) {\n        this.stopTrackingProgress();\n      }\n    }), 500);\n  }\n  /**\n   * Update our internal duration on a `durationchange` event by calling\n   * {@link Tech#duration}.\n   *\n   * @param {EventTarget~Event} event\n   *        The `durationchange` event that caused this to run.\n   *\n   * @listens Tech#durationchange\n   */\n  ;\n\n  _proto.onDurationChange = function onDurationChange(event) {\n    this.duration_ = this.duration();\n  }\n  /**\n   * Get and create a `TimeRange` object for buffering.\n   *\n   * @return {TimeRange}\n   *         The time range object that was created.\n   */\n  ;\n\n  _proto.buffered = function buffered() {\n    return createTimeRanges(0, 0);\n  }\n  /**\n   * Get the percentage of the current video that is currently buffered.\n   *\n   * @return {number}\n   *         A number from 0 to 1 that represents the decimal percentage of the\n   *         video that is buffered.\n   *\n   */\n  ;\n\n  _proto.bufferedPercent = function bufferedPercent$$1() {\n    return bufferedPercent(this.buffered(), this.duration_);\n  }\n  /**\n   * Turn off the polyfill for `progress` events that was created in\n   * {@link Tech#manualProgressOn}\n   * Stop manually tracking progress events by clearing the interval that was set in\n   * {@link Tech#trackProgress}.\n   */\n  ;\n\n  _proto.stopTrackingProgress = function stopTrackingProgress() {\n    this.clearInterval(this.progressInterval);\n  }\n  /**\n   * Polyfill the `timeupdate` event for browsers that don't support it.\n   *\n   * @see {@link Tech#trackCurrentTime}\n   */\n  ;\n\n  _proto.manualTimeUpdatesOn = function manualTimeUpdatesOn() {\n    this.manualTimeUpdates = true;\n    this.on('play', this.trackCurrentTime);\n    this.on('pause', this.stopTrackingCurrentTime);\n  }\n  /**\n   * Turn off the polyfill for `timeupdate` events that was created in\n   * {@link Tech#manualTimeUpdatesOn}\n   */\n  ;\n\n  _proto.manualTimeUpdatesOff = function manualTimeUpdatesOff() {\n    this.manualTimeUpdates = false;\n    this.stopTrackingCurrentTime();\n    this.off('play', this.trackCurrentTime);\n    this.off('pause', this.stopTrackingCurrentTime);\n  }\n  /**\n   * Sets up an interval function to track current time and trigger `timeupdate` every\n   * 250 milliseconds.\n   *\n   * @listens Tech#play\n   * @triggers Tech#timeupdate\n   */\n  ;\n\n  _proto.trackCurrentTime = function trackCurrentTime() {\n    if (this.currentTimeInterval) {\n      this.stopTrackingCurrentTime();\n    }\n\n    this.currentTimeInterval = this.setInterval(function () {\n      /**\n       * Triggered at an interval of 250ms to indicated that time is passing in the video.\n       *\n       * @event Tech#timeupdate\n       * @type {EventTarget~Event}\n       */\n      this.trigger({\n        type: 'timeupdate',\n        target: this,\n        manuallyTriggered: true\n      }); // 42 = 24 fps // 250 is what Webkit uses // FF uses 15\n    }, 250);\n  }\n  /**\n   * Stop the interval function created in {@link Tech#trackCurrentTime} so that the\n   * `timeupdate` event is no longer triggered.\n   *\n   * @listens {Tech#pause}\n   */\n  ;\n\n  _proto.stopTrackingCurrentTime = function stopTrackingCurrentTime() {\n    this.clearInterval(this.currentTimeInterval); // #1002 - if the video ends right before the next timeupdate would happen,\n    // the progress bar won't make it all the way to the end\n\n    this.trigger({\n      type: 'timeupdate',\n      target: this,\n      manuallyTriggered: true\n    });\n  }\n  /**\n   * Turn off all event polyfills, clear the `Tech`s {@link AudioTrackList},\n   * {@link VideoTrackList}, and {@link TextTrackList}, and dispose of this Tech.\n   *\n   * @fires Component#dispose\n   */\n  ;\n\n  _proto.dispose = function dispose() {\n    // clear out all tracks because we can't reuse them between techs\n    this.clearTracks(NORMAL.names); // Turn off any manual progress or timeupdate tracking\n\n    if (this.manualProgress) {\n      this.manualProgressOff();\n    }\n\n    if (this.manualTimeUpdates) {\n      this.manualTimeUpdatesOff();\n    }\n\n    _Component.prototype.dispose.call(this);\n  }\n  /**\n   * Clear out a single `TrackList` or an array of `TrackLists` given their names.\n   *\n   * > Note: Techs without source handlers should call this between sources for `video`\n   *         & `audio` tracks. You don't want to use them between tracks!\n   *\n   * @param {string[]|string} types\n   *        TrackList names to clear, valid names are `video`, `audio`, and\n   *        `text`.\n   */\n  ;\n\n  _proto.clearTracks = function clearTracks(types) {\n    var _this3 = this;\n\n    types = [].concat(types); // clear out all tracks because we can't reuse them between techs\n\n    types.forEach(function (type) {\n      var list = _this3[type + \"Tracks\"]() || [];\n      var i = list.length;\n\n      while (i--) {\n        var track = list[i];\n\n        if (type === 'text') {\n          _this3.removeRemoteTextTrack(track);\n        }\n\n        list.removeTrack(track);\n      }\n    });\n  }\n  /**\n   * Remove any TextTracks added via addRemoteTextTrack that are\n   * flagged for automatic garbage collection\n   */\n  ;\n\n  _proto.cleanupAutoTextTracks = function cleanupAutoTextTracks() {\n    var list = this.autoRemoteTextTracks_ || [];\n    var i = list.length;\n\n    while (i--) {\n      var track = list[i];\n      this.removeRemoteTextTrack(track);\n    }\n  }\n  /**\n   * Reset the tech, which will removes all sources and reset the internal readyState.\n   *\n   * @abstract\n   */\n  ;\n\n  _proto.reset = function reset() {}\n  /**\n   * Get or set an error on the Tech.\n   *\n   * @param {MediaError} [err]\n   *        Error to set on the Tech\n   *\n   * @return {MediaError|null}\n   *         The current error object on the tech, or null if there isn't one.\n   */\n  ;\n\n  _proto.error = function error(err) {\n    if (err !== undefined) {\n      this.error_ = new MediaError(err);\n      this.trigger('error');\n    }\n\n    return this.error_;\n  }\n  /**\n   * Returns the `TimeRange`s that have been played through for the current source.\n   *\n   * > NOTE: This implementation is incomplete. It does not track the played `TimeRange`.\n   *         It only checks whether the source has played at all or not.\n   *\n   * @return {TimeRange}\n   *         - A single time range if this video has played\n   *         - An empty set of ranges if not.\n   */\n  ;\n\n  _proto.played = function played() {\n    if (this.hasStarted_) {\n      return createTimeRanges(0, 0);\n    }\n\n    return createTimeRanges();\n  }\n  /**\n   * Causes a manual time update to occur if {@link Tech#manualTimeUpdatesOn} was\n   * previously called.\n   *\n   * @fires Tech#timeupdate\n   */\n  ;\n\n  _proto.setCurrentTime = function setCurrentTime() {\n    // improve the accuracy of manual timeupdates\n    if (this.manualTimeUpdates) {\n      /**\n       * A manual `timeupdate` event.\n       *\n       * @event Tech#timeupdate\n       * @type {EventTarget~Event}\n       */\n      this.trigger({\n        type: 'timeupdate',\n        target: this,\n        manuallyTriggered: true\n      });\n    }\n  }\n  /**\n   * Turn on listeners for {@link VideoTrackList}, {@link {AudioTrackList}, and\n   * {@link TextTrackList} events.\n   *\n   * This adds {@link EventTarget~EventListeners} for `addtrack`, and  `removetrack`.\n   *\n   * @fires Tech#audiotrackchange\n   * @fires Tech#videotrackchange\n   * @fires Tech#texttrackchange\n   */\n  ;\n\n  _proto.initTrackListeners = function initTrackListeners() {\n    var _this4 = this;\n\n    /**\n      * Triggered when tracks are added or removed on the Tech {@link AudioTrackList}\n      *\n      * @event Tech#audiotrackchange\n      * @type {EventTarget~Event}\n      */\n\n    /**\n      * Triggered when tracks are added or removed on the Tech {@link VideoTrackList}\n      *\n      * @event Tech#videotrackchange\n      * @type {EventTarget~Event}\n      */\n\n    /**\n      * Triggered when tracks are added or removed on the Tech {@link TextTrackList}\n      *\n      * @event Tech#texttrackchange\n      * @type {EventTarget~Event}\n      */\n    NORMAL.names.forEach(function (name) {\n      var props = NORMAL[name];\n\n      var trackListChanges = function trackListChanges() {\n        _this4.trigger(name + \"trackchange\");\n      };\n\n      var tracks = _this4[props.getterName]();\n\n      tracks.addEventListener('removetrack', trackListChanges);\n      tracks.addEventListener('addtrack', trackListChanges);\n\n      _this4.on('dispose', function () {\n        tracks.removeEventListener('removetrack', trackListChanges);\n        tracks.removeEventListener('addtrack', trackListChanges);\n      });\n    });\n  }\n  /**\n   * Emulate TextTracks using vtt.js if necessary\n   *\n   * @fires Tech#vttjsloaded\n   * @fires Tech#vttjserror\n   */\n  ;\n\n  _proto.addWebVttScript_ = function addWebVttScript_() {\n    var _this5 = this;\n\n    if (window$1.WebVTT) {\n      return;\n    } // Initially, Tech.el_ is a child of a dummy-div wait until the Component system\n    // signals that the Tech is ready at which point Tech.el_ is part of the DOM\n    // before inserting the WebVTT script\n\n\n    if (document.body.contains(this.el())) {\n      // load via require if available and vtt.js script location was not passed in\n      // as an option. novtt builds will turn the above require call into an empty object\n      // which will cause this if check to always fail.\n      if (!this.options_['vtt.js'] && isPlain(vtt) && Object.keys(vtt).length > 0) {\n        this.trigger('vttjsloaded');\n        return;\n      } // load vtt.js via the script location option or the cdn of no location was\n      // passed in\n\n\n      var script = document.createElement('script');\n      script.src = this.options_['vtt.js'] || 'https://vjs.zencdn.net/vttjs/0.14.1/vtt.min.js';\n\n      script.onload = function () {\n        /**\n         * Fired when vtt.js is loaded.\n         *\n         * @event Tech#vttjsloaded\n         * @type {EventTarget~Event}\n         */\n        _this5.trigger('vttjsloaded');\n      };\n\n      script.onerror = function () {\n        /**\n         * Fired when vtt.js was not loaded due to an error\n         *\n         * @event Tech#vttjsloaded\n         * @type {EventTarget~Event}\n         */\n        _this5.trigger('vttjserror');\n      };\n\n      this.on('dispose', function () {\n        script.onload = null;\n        script.onerror = null;\n      }); // but have not loaded yet and we set it to true before the inject so that\n      // we don't overwrite the injected window.WebVTT if it loads right away\n\n      window$1.WebVTT = true;\n      this.el().parentNode.appendChild(script);\n    } else {\n      this.ready(this.addWebVttScript_);\n    }\n  }\n  /**\n   * Emulate texttracks\n   *\n   */\n  ;\n\n  _proto.emulateTextTracks = function emulateTextTracks() {\n    var _this6 = this;\n\n    var tracks = this.textTracks();\n    var remoteTracks = this.remoteTextTracks();\n\n    var handleAddTrack = function handleAddTrack(e) {\n      return tracks.addTrack(e.track);\n    };\n\n    var handleRemoveTrack = function handleRemoveTrack(e) {\n      return tracks.removeTrack(e.track);\n    };\n\n    remoteTracks.on('addtrack', handleAddTrack);\n    remoteTracks.on('removetrack', handleRemoveTrack);\n    this.addWebVttScript_();\n\n    var updateDisplay = function updateDisplay() {\n      return _this6.trigger('texttrackchange');\n    };\n\n    var textTracksChanges = function textTracksChanges() {\n      updateDisplay();\n\n      for (var i = 0; i < tracks.length; i++) {\n        var track = tracks[i];\n        track.removeEventListener('cuechange', updateDisplay);\n\n        if (track.mode === 'showing') {\n          track.addEventListener('cuechange', updateDisplay);\n        }\n      }\n    };\n\n    textTracksChanges();\n    tracks.addEventListener('change', textTracksChanges);\n    tracks.addEventListener('addtrack', textTracksChanges);\n    tracks.addEventListener('removetrack', textTracksChanges);\n    this.on('dispose', function () {\n      remoteTracks.off('addtrack', handleAddTrack);\n      remoteTracks.off('removetrack', handleRemoveTrack);\n      tracks.removeEventListener('change', textTracksChanges);\n      tracks.removeEventListener('addtrack', textTracksChanges);\n      tracks.removeEventListener('removetrack', textTracksChanges);\n\n      for (var i = 0; i < tracks.length; i++) {\n        var track = tracks[i];\n        track.removeEventListener('cuechange', updateDisplay);\n      }\n    });\n  }\n  /**\n   * Create and returns a remote {@link TextTrack} object.\n   *\n   * @param {string} kind\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\n   *\n   * @param {string} [label]\n   *        Label to identify the text track\n   *\n   * @param {string} [language]\n   *        Two letter language abbreviation\n   *\n   * @return {TextTrack}\n   *         The TextTrack that gets created.\n   */\n  ;\n\n  _proto.addTextTrack = function addTextTrack(kind, label, language) {\n    if (!kind) {\n      throw new Error('TextTrack kind is required but was not provided');\n    }\n\n    return createTrackHelper(this, kind, label, language);\n  }\n  /**\n   * Create an emulated TextTrack for use by addRemoteTextTrack\n   *\n   * This is intended to be overridden by classes that inherit from\n   * Tech in order to create native or custom TextTracks.\n   *\n   * @param {Object} options\n   *        The object should contain the options to initialize the TextTrack with.\n   *\n   * @param {string} [options.kind]\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).\n   *\n   * @param {string} [options.label].\n   *        Label to identify the text track\n   *\n   * @param {string} [options.language]\n   *        Two letter language abbreviation.\n   *\n   * @return {HTMLTrackElement}\n   *         The track element that gets created.\n   */\n  ;\n\n  _proto.createRemoteTextTrack = function createRemoteTextTrack(options) {\n    var track = mergeOptions(options, {\n      tech: this\n    });\n    return new REMOTE.remoteTextEl.TrackClass(track);\n  }\n  /**\n   * Creates a remote text track object and returns an html track element.\n   *\n   * > Note: This can be an emulated {@link HTMLTrackElement} or a native one.\n   *\n   * @param {Object} options\n   *        See {@link Tech#createRemoteTextTrack} for more detailed properties.\n   *\n   * @param {boolean} [manualCleanup=true]\n   *        - When false: the TextTrack will be automatically removed from the video\n   *          element whenever the source changes\n   *        - When True: The TextTrack will have to be cleaned up manually\n   *\n   * @return {HTMLTrackElement}\n   *         An Html Track Element.\n   *\n   * @deprecated The default functionality for this function will be equivalent\n   *             to \"manualCleanup=false\" in the future. The manualCleanup parameter will\n   *             also be removed.\n   */\n  ;\n\n  _proto.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {\n    var _this7 = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var htmlTrackElement = this.createRemoteTextTrack(options);\n\n    if (manualCleanup !== true && manualCleanup !== false) {\n      // deprecation warning\n      log.warn('Calling addRemoteTextTrack without explicitly setting the \"manualCleanup\" parameter to `true` is deprecated and default to `false` in future version of video.js');\n      manualCleanup = true;\n    } // store HTMLTrackElement and TextTrack to remote list\n\n\n    this.remoteTextTrackEls().addTrackElement_(htmlTrackElement);\n    this.remoteTextTracks().addTrack(htmlTrackElement.track);\n\n    if (manualCleanup !== true) {\n      // create the TextTrackList if it doesn't exist\n      this.ready(function () {\n        return _this7.autoRemoteTextTracks_.addTrack(htmlTrackElement.track);\n      });\n    }\n\n    return htmlTrackElement;\n  }\n  /**\n   * Remove a remote text track from the remote `TextTrackList`.\n   *\n   * @param {TextTrack} track\n   *        `TextTrack` to remove from the `TextTrackList`\n   */\n  ;\n\n  _proto.removeRemoteTextTrack = function removeRemoteTextTrack(track) {\n    var trackElement = this.remoteTextTrackEls().getTrackElementByTrack_(track); // remove HTMLTrackElement and TextTrack from remote list\n\n    this.remoteTextTrackEls().removeTrackElement_(trackElement);\n    this.remoteTextTracks().removeTrack(track);\n    this.autoRemoteTextTracks_.removeTrack(track);\n  }\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object}\n   *         An object with supported media playback quality metrics\n   *\n   * @abstract\n   */\n  ;\n\n  _proto.getVideoPlaybackQuality = function getVideoPlaybackQuality() {\n    return {};\n  }\n  /**\n   * A method to set a poster from a `Tech`.\n   *\n   * @abstract\n   */\n  ;\n\n  _proto.setPoster = function setPoster() {}\n  /**\n   * A method to check for the presence of the 'playsinline' <video> attribute.\n   *\n   * @abstract\n   */\n  ;\n\n  _proto.playsinline = function playsinline() {}\n  /**\n   * A method to set or unset the 'playsinline' <video> attribute.\n   *\n   * @abstract\n   */\n  ;\n\n  _proto.setPlaysinline = function setPlaysinline() {}\n  /**\n   * Attempt to force override of native audio tracks.\n   *\n   * @param {boolean} override - If set to true native audio will be overridden,\n   * otherwise native audio will potentially be used.\n   *\n   * @abstract\n   */\n  ;\n\n  _proto.overrideNativeAudioTracks = function overrideNativeAudioTracks() {}\n  /**\n   * Attempt to force override of native video tracks.\n   *\n   * @param {boolean} override - If set to true native video will be overridden,\n   * otherwise native video will potentially be used.\n   *\n   * @abstract\n   */\n  ;\n\n  _proto.overrideNativeVideoTracks = function overrideNativeVideoTracks() {}\n  /*\n   * Check if the tech can support the given mime-type.\n   *\n   * The base tech does not support any type, but source handlers might\n   * overwrite this.\n   *\n   * @param  {string} type\n   *         The mimetype to check for support\n   *\n   * @return {string}\n   *         'probably', 'maybe', or empty string\n   *\n   * @see [Spec]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType}\n   *\n   * @abstract\n   */\n  ;\n\n  _proto.canPlayType = function canPlayType() {\n    return '';\n  }\n  /**\n   * Check if the type is supported by this tech.\n   *\n   * The base tech does not support any type, but source handlers might\n   * overwrite this.\n   *\n   * @param {string} type\n   *        The media type to check\n   * @return {string} Returns the native video element's response\n   */\n  ;\n\n  Tech.canPlayType = function canPlayType() {\n    return '';\n  }\n  /**\n   * Check if the tech can support the given source\n   *\n   * @param {Object} srcObj\n   *        The source object\n   * @param {Object} options\n   *        The options passed to the tech\n   * @return {string} 'probably', 'maybe', or '' (empty string)\n   */\n  ;\n\n  Tech.canPlaySource = function canPlaySource(srcObj, options) {\n    return Tech.canPlayType(srcObj.type);\n  }\n  /*\n   * Return whether the argument is a Tech or not.\n   * Can be passed either a Class like `Html5` or a instance like `player.tech_`\n   *\n   * @param {Object} component\n   *        The item to check\n   *\n   * @return {boolean}\n   *         Whether it is a tech or not\n   *         - True if it is a tech\n   *         - False if it is not\n   */\n  ;\n\n  Tech.isTech = function isTech(component) {\n    return component.prototype instanceof Tech || component instanceof Tech || component === Tech;\n  }\n  /**\n   * Registers a `Tech` into a shared list for videojs.\n   *\n   * @param {string} name\n   *        Name of the `Tech` to register.\n   *\n   * @param {Object} tech\n   *        The `Tech` class to register.\n   */\n  ;\n\n  Tech.registerTech = function registerTech(name, tech) {\n    if (!Tech.techs_) {\n      Tech.techs_ = {};\n    }\n\n    if (!Tech.isTech(tech)) {\n      throw new Error(\"Tech \" + name + \" must be a Tech\");\n    }\n\n    if (!Tech.canPlayType) {\n      throw new Error('Techs must have a static canPlayType method on them');\n    }\n\n    if (!Tech.canPlaySource) {\n      throw new Error('Techs must have a static canPlaySource method on them');\n    }\n\n    name = toTitleCase(name);\n    Tech.techs_[name] = tech;\n\n    if (name !== 'Tech') {\n      // camel case the techName for use in techOrder\n      Tech.defaultTechOrder_.push(name);\n    }\n\n    return tech;\n  }\n  /**\n   * Get a `Tech` from the shared list by name.\n   *\n   * @param {string} name\n   *        `camelCase` or `TitleCase` name of the Tech to get\n   *\n   * @return {Tech|undefined}\n   *         The `Tech` or undefined if there was no tech with the name requested.\n   */\n  ;\n\n  Tech.getTech = function getTech(name) {\n    if (!name) {\n      return;\n    }\n\n    name = toTitleCase(name);\n\n    if (Tech.techs_ && Tech.techs_[name]) {\n      return Tech.techs_[name];\n    }\n\n    if (window$1 && window$1.videojs && window$1.videojs[name]) {\n      log.warn(\"The \" + name + \" tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)\");\n      return window$1.videojs[name];\n    }\n  };\n\n  return Tech;\n}(Component);\n/**\n * Get the {@link VideoTrackList}\n *\n * @returns {VideoTrackList}\n * @method Tech.prototype.videoTracks\n */\n\n/**\n * Get the {@link AudioTrackList}\n *\n * @returns {AudioTrackList}\n * @method Tech.prototype.audioTracks\n */\n\n/**\n * Get the {@link TextTrackList}\n *\n * @returns {TextTrackList}\n * @method Tech.prototype.textTracks\n */\n\n/**\n * Get the remote element {@link TextTrackList}\n *\n * @returns {TextTrackList}\n * @method Tech.prototype.remoteTextTracks\n */\n\n/**\n * Get the remote element {@link HtmlTrackElementList}\n *\n * @returns {HtmlTrackElementList}\n * @method Tech.prototype.remoteTextTrackEls\n */\n\n\nALL.names.forEach(function (name) {\n  var props = ALL[name];\n\n  Tech.prototype[props.getterName] = function () {\n    this[props.privateName] = this[props.privateName] || new props.ListClass();\n    return this[props.privateName];\n  };\n});\n/**\n * List of associated text tracks\n *\n * @type {TextTrackList}\n * @private\n * @property Tech#textTracks_\n */\n\n/**\n * List of associated audio tracks.\n *\n * @type {AudioTrackList}\n * @private\n * @property Tech#audioTracks_\n */\n\n/**\n * List of associated video tracks.\n *\n * @type {VideoTrackList}\n * @private\n * @property Tech#videoTracks_\n */\n\n/**\n * Boolean indicating whether the `Tech` supports volume control.\n *\n * @type {boolean}\n * @default\n */\n\nTech.prototype.featuresVolumeControl = true;\n/**\n * Boolean indicating whether the `Tech` supports muting volume.\n *\n * @type {bolean}\n * @default\n */\n\nTech.prototype.featuresMuteControl = true;\n/**\n * Boolean indicating whether the `Tech` supports fullscreen resize control.\n * Resizing plugins using request fullscreen reloads the plugin\n *\n * @type {boolean}\n * @default\n */\n\nTech.prototype.featuresFullscreenResize = false;\n/**\n * Boolean indicating whether the `Tech` supports changing the speed at which the video\n * plays. Examples:\n *   - Set player to play 2x (twice) as fast\n *   - Set player to play 0.5x (half) as fast\n *\n * @type {boolean}\n * @default\n */\n\nTech.prototype.featuresPlaybackRate = false;\n/**\n * Boolean indicating whether the `Tech` supports the `progress` event. This is currently\n * not triggered by video-js-swf. This will be used to determine if\n * {@link Tech#manualProgressOn} should be called.\n *\n * @type {boolean}\n * @default\n */\n\nTech.prototype.featuresProgressEvents = false;\n/**\n * Boolean indicating whether the `Tech` supports the `sourceset` event.\n *\n * A tech should set this to `true` and then use {@link Tech#triggerSourceset}\n * to trigger a {@link Tech#event:sourceset} at the earliest time after getting\n * a new source.\n *\n * @type {boolean}\n * @default\n */\n\nTech.prototype.featuresSourceset = false;\n/**\n * Boolean indicating whether the `Tech` supports the `timeupdate` event. This is currently\n * not triggered by video-js-swf. This will be used to determine if\n * {@link Tech#manualTimeUpdates} should be called.\n *\n * @type {boolean}\n * @default\n */\n\nTech.prototype.featuresTimeupdateEvents = false;\n/**\n * Boolean indicating whether the `Tech` supports the native `TextTrack`s.\n * This will help us integrate with native `TextTrack`s if the browser supports them.\n *\n * @type {boolean}\n * @default\n */\n\nTech.prototype.featuresNativeTextTracks = false;\n/**\n * A functional mixin for techs that want to use the Source Handler pattern.\n * Source handlers are scripts for handling specific formats.\n * The source handler pattern is used for adaptive formats (HLS, DASH) that\n * manually load video data and feed it into a Source Buffer (Media Source Extensions)\n * Example: `Tech.withSourceHandlers.call(MyTech);`\n *\n * @param {Tech} _Tech\n *        The tech to add source handler functions to.\n *\n * @mixes Tech~SourceHandlerAdditions\n */\n\nTech.withSourceHandlers = function (_Tech) {\n  /**\n   * Register a source handler\n   *\n   * @param {Function} handler\n   *        The source handler class\n   *\n   * @param {number} [index]\n   *        Register it at the following index\n   */\n  _Tech.registerSourceHandler = function (handler, index) {\n    var handlers = _Tech.sourceHandlers;\n\n    if (!handlers) {\n      handlers = _Tech.sourceHandlers = [];\n    }\n\n    if (index === undefined) {\n      // add to the end of the list\n      index = handlers.length;\n    }\n\n    handlers.splice(index, 0, handler);\n  };\n  /**\n   * Check if the tech can support the given type. Also checks the\n   * Techs sourceHandlers.\n   *\n   * @param {string} type\n   *         The mimetype to check.\n   *\n   * @return {string}\n   *         'probably', 'maybe', or '' (empty string)\n   */\n\n\n  _Tech.canPlayType = function (type) {\n    var handlers = _Tech.sourceHandlers || [];\n    var can;\n\n    for (var i = 0; i < handlers.length; i++) {\n      can = handlers[i].canPlayType(type);\n\n      if (can) {\n        return can;\n      }\n    }\n\n    return '';\n  };\n  /**\n   * Returns the first source handler that supports the source.\n   *\n   * TODO: Answer question: should 'probably' be prioritized over 'maybe'\n   *\n   * @param {Tech~SourceObject} source\n   *        The source object\n   *\n   * @param {Object} options\n   *        The options passed to the tech\n   *\n   * @return {SourceHandler|null}\n   *          The first source handler that supports the source or null if\n   *          no SourceHandler supports the source\n   */\n\n\n  _Tech.selectSourceHandler = function (source, options) {\n    var handlers = _Tech.sourceHandlers || [];\n    var can;\n\n    for (var i = 0; i < handlers.length; i++) {\n      can = handlers[i].canHandleSource(source, options);\n\n      if (can) {\n        return handlers[i];\n      }\n    }\n\n    return null;\n  };\n  /**\n   * Check if the tech can support the given source.\n   *\n   * @param {Tech~SourceObject} srcObj\n   *        The source object\n   *\n   * @param {Object} options\n   *        The options passed to the tech\n   *\n   * @return {string}\n   *         'probably', 'maybe', or '' (empty string)\n   */\n\n\n  _Tech.canPlaySource = function (srcObj, options) {\n    var sh = _Tech.selectSourceHandler(srcObj, options);\n\n    if (sh) {\n      return sh.canHandleSource(srcObj, options);\n    }\n\n    return '';\n  };\n  /**\n   * When using a source handler, prefer its implementation of\n   * any function normally provided by the tech.\n   */\n\n\n  var deferrable = ['seekable', 'seeking', 'duration'];\n  /**\n   * A wrapper around {@link Tech#seekable} that will call a `SourceHandler`s seekable\n   * function if it exists, with a fallback to the Techs seekable function.\n   *\n   * @method _Tech.seekable\n   */\n\n  /**\n   * A wrapper around {@link Tech#duration} that will call a `SourceHandler`s duration\n   * function if it exists, otherwise it will fallback to the techs duration function.\n   *\n   * @method _Tech.duration\n   */\n\n  deferrable.forEach(function (fnName) {\n    var originalFn = this[fnName];\n\n    if (typeof originalFn !== 'function') {\n      return;\n    }\n\n    this[fnName] = function () {\n      if (this.sourceHandler_ && this.sourceHandler_[fnName]) {\n        return this.sourceHandler_[fnName].apply(this.sourceHandler_, arguments);\n      }\n\n      return originalFn.apply(this, arguments);\n    };\n  }, _Tech.prototype);\n  /**\n   * Create a function for setting the source using a source object\n   * and source handlers.\n   * Should never be called unless a source handler was found.\n   *\n   * @param {Tech~SourceObject} source\n   *        A source object with src and type keys\n   */\n\n  _Tech.prototype.setSource = function (source) {\n    var sh = _Tech.selectSourceHandler(source, this.options_);\n\n    if (!sh) {\n      // Fall back to a native source hander when unsupported sources are\n      // deliberately set\n      if (_Tech.nativeSourceHandler) {\n        sh = _Tech.nativeSourceHandler;\n      } else {\n        log.error('No source handler found for the current source.');\n      }\n    } // Dispose any existing source handler\n\n\n    this.disposeSourceHandler();\n    this.off('dispose', this.disposeSourceHandler);\n\n    if (sh !== _Tech.nativeSourceHandler) {\n      this.currentSource_ = source;\n    }\n\n    this.sourceHandler_ = sh.handleSource(source, this, this.options_);\n    this.one('dispose', this.disposeSourceHandler);\n  };\n  /**\n   * Clean up any existing SourceHandlers and listeners when the Tech is disposed.\n   *\n   * @listens Tech#dispose\n   */\n\n\n  _Tech.prototype.disposeSourceHandler = function () {\n    // if we have a source and get another one\n    // then we are loading something new\n    // than clear all of our current tracks\n    if (this.currentSource_) {\n      this.clearTracks(['audio', 'video']);\n      this.currentSource_ = null;\n    } // always clean up auto-text tracks\n\n\n    this.cleanupAutoTextTracks();\n\n    if (this.sourceHandler_) {\n      if (this.sourceHandler_.dispose) {\n        this.sourceHandler_.dispose();\n      }\n\n      this.sourceHandler_ = null;\n    }\n  };\n}; // The base Tech class needs to be registered as a Component. It is the only\n// Tech that can be registered as a Component.\n\n\nComponent.registerComponent('Tech', Tech);\nTech.registerTech('Tech', Tech);\n/**\n * A list of techs that should be added to techOrder on Players\n *\n * @private\n */\n\nTech.defaultTechOrder_ = [];\n\n/**\n * @file middleware.js\n * @module middleware\n */\nvar middlewares = {};\nvar middlewareInstances = {};\nvar TERMINATOR = {};\n/**\n * A middleware object is a plain JavaScript object that has methods that\n * match the {@link Tech} methods found in the lists of allowed\n * {@link module:middleware.allowedGetters|getters},\n * {@link module:middleware.allowedSetters|setters}, and\n * {@link module:middleware.allowedMediators|mediators}.\n *\n * @typedef {Object} MiddlewareObject\n */\n\n/**\n * A middleware factory function that should return a\n * {@link module:middleware~MiddlewareObject|MiddlewareObject}.\n *\n * This factory will be called for each player when needed, with the player\n * passed in as an argument.\n *\n * @callback MiddlewareFactory\n * @param {Player} player\n *        A Video.js player.\n */\n\n/**\n * Define a middleware that the player should use by way of a factory function\n * that returns a middleware object.\n *\n * @param  {string} type\n *         The MIME type to match or `\"*\"` for all MIME types.\n *\n * @param  {MiddlewareFactory} middleware\n *         A middleware factory function that will be executed for\n *         matching types.\n */\n\nfunction use(type, middleware) {\n  middlewares[type] = middlewares[type] || [];\n  middlewares[type].push(middleware);\n}\n/**\n * Asynchronously sets a source using middleware by recursing through any\n * matching middlewares and calling `setSource` on each, passing along the\n * previous returned value each time.\n *\n * @param  {Player} player\n *         A {@link Player} instance.\n *\n * @param  {Tech~SourceObject} src\n *         A source object.\n *\n * @param  {Function}\n *         The next middleware to run.\n */\n\nfunction setSource(player, src, next) {\n  player.setTimeout(function () {\n    return setSourceHelper(src, middlewares[src.type], next, player);\n  }, 1);\n}\n/**\n * When the tech is set, passes the tech to each middleware's `setTech` method.\n *\n * @param {Object[]} middleware\n *        An array of middleware instances.\n *\n * @param {Tech} tech\n *        A Video.js tech.\n */\n\nfunction setTech(middleware, tech) {\n  middleware.forEach(function (mw) {\n    return mw.setTech && mw.setTech(tech);\n  });\n}\n/**\n * Calls a getter on the tech first, through each middleware\n * from right to left to the player.\n *\n * @param  {Object[]} middleware\n *         An array of middleware instances.\n *\n * @param  {Tech} tech\n *         The current tech.\n *\n * @param  {string} method\n *         A method name.\n *\n * @return {Mixed}\n *         The final value from the tech after middleware has intercepted it.\n */\n\nfunction get(middleware, tech, method) {\n  return middleware.reduceRight(middlewareIterator(method), tech[method]());\n}\n/**\n * Takes the argument given to the player and calls the setter method on each\n * middleware from left to right to the tech.\n *\n * @param  {Object[]} middleware\n *         An array of middleware instances.\n *\n * @param  {Tech} tech\n *         The current tech.\n *\n * @param  {string} method\n *         A method name.\n *\n * @param  {Mixed} arg\n *         The value to set on the tech.\n *\n * @return {Mixed}\n *         The return value of the `method` of the `tech`.\n */\n\nfunction set$1(middleware, tech, method, arg) {\n  return tech[method](middleware.reduce(middlewareIterator(method), arg));\n}\n/**\n * Takes the argument given to the player and calls the `call` version of the\n * method on each middleware from left to right.\n *\n * Then, call the passed in method on the tech and return the result unchanged\n * back to the player, through middleware, this time from right to left.\n *\n * @param  {Object[]} middleware\n *         An array of middleware instances.\n *\n * @param  {Tech} tech\n *         The current tech.\n *\n * @param  {string} method\n *         A method name.\n *\n * @param  {Mixed} arg\n *         The value to set on the tech.\n *\n * @return {Mixed}\n *         The return value of the `method` of the `tech`, regardless of the\n *         return values of middlewares.\n */\n\nfunction mediate(middleware, tech, method, arg) {\n  if (arg === void 0) {\n    arg = null;\n  }\n\n  var callMethod = 'call' + toTitleCase(method);\n  var middlewareValue = middleware.reduce(middlewareIterator(callMethod), arg);\n  var terminated = middlewareValue === TERMINATOR; // deprecated. The `null` return value should instead return TERMINATOR to\n  // prevent confusion if a techs method actually returns null.\n\n  var returnValue = terminated ? null : tech[method](middlewareValue);\n  executeRight(middleware, method, returnValue, terminated);\n  return returnValue;\n}\n/**\n * Enumeration of allowed getters where the keys are method names.\n *\n * @type {Object}\n */\n\nvar allowedGetters = {\n  buffered: 1,\n  currentTime: 1,\n  duration: 1,\n  seekable: 1,\n  played: 1,\n  paused: 1\n};\n/**\n * Enumeration of allowed setters where the keys are method names.\n *\n * @type {Object}\n */\n\nvar allowedSetters = {\n  setCurrentTime: 1\n};\n/**\n * Enumeration of allowed mediators where the keys are method names.\n *\n * @type {Object}\n */\n\nvar allowedMediators = {\n  play: 1,\n  pause: 1\n};\n\nfunction middlewareIterator(method) {\n  return function (value, mw) {\n    // if the previous middleware terminated, pass along the termination\n    if (value === TERMINATOR) {\n      return TERMINATOR;\n    }\n\n    if (mw[method]) {\n      return mw[method](value);\n    }\n\n    return value;\n  };\n}\n\nfunction executeRight(mws, method, value, terminated) {\n  for (var i = mws.length - 1; i >= 0; i--) {\n    var mw = mws[i];\n\n    if (mw[method]) {\n      mw[method](terminated, value);\n    }\n  }\n}\n/**\n * Clear the middleware cache for a player.\n *\n * @param  {Player} player\n *         A {@link Player} instance.\n */\n\n\nfunction clearCacheForPlayer(player) {\n  middlewareInstances[player.id()] = null;\n}\n/**\n * {\n *  [playerId]: [[mwFactory, mwInstance], ...]\n * }\n *\n * @private\n */\n\nfunction getOrCreateFactory(player, mwFactory) {\n  var mws = middlewareInstances[player.id()];\n  var mw = null;\n\n  if (mws === undefined || mws === null) {\n    mw = mwFactory(player);\n    middlewareInstances[player.id()] = [[mwFactory, mw]];\n    return mw;\n  }\n\n  for (var i = 0; i < mws.length; i++) {\n    var _mws$i = mws[i],\n        mwf = _mws$i[0],\n        mwi = _mws$i[1];\n\n    if (mwf !== mwFactory) {\n      continue;\n    }\n\n    mw = mwi;\n  }\n\n  if (mw === null) {\n    mw = mwFactory(player);\n    mws.push([mwFactory, mw]);\n  }\n\n  return mw;\n}\n\nfunction setSourceHelper(src, middleware, next, player, acc, lastRun) {\n  if (src === void 0) {\n    src = {};\n  }\n\n  if (middleware === void 0) {\n    middleware = [];\n  }\n\n  if (acc === void 0) {\n    acc = [];\n  }\n\n  if (lastRun === void 0) {\n    lastRun = false;\n  }\n\n  var _middleware = middleware,\n      mwFactory = _middleware[0],\n      mwrest = _middleware.slice(1); // if mwFactory is a string, then we're at a fork in the road\n\n\n  if (typeof mwFactory === 'string') {\n    setSourceHelper(src, middlewares[mwFactory], next, player, acc, lastRun); // if we have an mwFactory, call it with the player to get the mw,\n    // then call the mw's setSource method\n  } else if (mwFactory) {\n    var mw = getOrCreateFactory(player, mwFactory); // if setSource isn't present, implicitly select this middleware\n\n    if (!mw.setSource) {\n      acc.push(mw);\n      return setSourceHelper(src, mwrest, next, player, acc, lastRun);\n    }\n\n    mw.setSource(assign({}, src), function (err, _src) {\n      // something happened, try the next middleware on the current level\n      // make sure to use the old src\n      if (err) {\n        return setSourceHelper(src, mwrest, next, player, acc, lastRun);\n      } // we've succeeded, now we need to go deeper\n\n\n      acc.push(mw); // if it's the same type, continue down the current chain\n      // otherwise, we want to go down the new chain\n\n      setSourceHelper(_src, src.type === _src.type ? mwrest : middlewares[_src.type], next, player, acc, lastRun);\n    });\n  } else if (mwrest.length) {\n    setSourceHelper(src, mwrest, next, player, acc, lastRun);\n  } else if (lastRun) {\n    next(src, acc);\n  } else {\n    setSourceHelper(src, middlewares['*'], next, player, acc, true);\n  }\n}\n\n/**\n * Mimetypes\n *\n * @see http://hul.harvard.edu/ois/////systems/wax/wax-public-help/mimetypes.htm\n * @typedef Mimetypes~Kind\n * @enum\n */\n\nvar MimetypesKind = {\n  opus: 'video/ogg',\n  ogv: 'video/ogg',\n  mp4: 'video/mp4',\n  mov: 'video/mp4',\n  m4v: 'video/mp4',\n  mkv: 'video/x-matroska',\n  mp3: 'audio/mpeg',\n  aac: 'audio/aac',\n  oga: 'audio/ogg',\n  m3u8: 'application/x-mpegURL',\n  jpg: 'image/jpeg',\n  jpeg: 'image/jpeg',\n  gif: 'image/gif',\n  png: 'image/png',\n  svg: 'image/svg+xml',\n  webp: 'image/webp'\n};\n/**\n * Get the mimetype of a given src url if possible\n *\n * @param {string} src\n *        The url to the src\n *\n * @return {string}\n *         return the mimetype if it was known or empty string otherwise\n */\n\nvar getMimetype = function getMimetype(src) {\n  if (src === void 0) {\n    src = '';\n  }\n\n  var ext = getFileExtension(src);\n  var mimetype = MimetypesKind[ext.toLowerCase()];\n  return mimetype || '';\n};\n/**\n * Find the mime type of a given source string if possible. Uses the player\n * source cache.\n *\n * @param {Player} player\n *        The player object\n *\n * @param {string} src\n *        The source string\n *\n * @return {string}\n *         The type that was found\n */\n\nvar findMimetype = function findMimetype(player, src) {\n  if (!src) {\n    return '';\n  } // 1. check for the type in the `source` cache\n\n\n  if (player.cache_.source.src === src && player.cache_.source.type) {\n    return player.cache_.source.type;\n  } // 2. see if we have this source in our `currentSources` cache\n\n\n  var matchingSources = player.cache_.sources.filter(function (s) {\n    return s.src === src;\n  });\n\n  if (matchingSources.length) {\n    return matchingSources[0].type;\n  } // 3. look for the src url in source elements and use the type there\n\n\n  var sources = player.$$('source');\n\n  for (var i = 0; i < sources.length; i++) {\n    var s = sources[i];\n\n    if (s.type && s.src && s.src === src) {\n      return s.type;\n    }\n  } // 4. finally fallback to our list of mime types based on src url extension\n\n\n  return getMimetype(src);\n};\n\n/**\n * @module filter-source\n */\n/**\n * Filter out single bad source objects or multiple source objects in an\n * array. Also flattens nested source object arrays into a 1 dimensional\n * array of source objects.\n *\n * @param {Tech~SourceObject|Tech~SourceObject[]} src\n *        The src object to filter\n *\n * @return {Tech~SourceObject[]}\n *         An array of sourceobjects containing only valid sources\n *\n * @private\n */\n\nvar filterSource = function filterSource(src) {\n  // traverse array\n  if (Array.isArray(src)) {\n    var newsrc = [];\n    src.forEach(function (srcobj) {\n      srcobj = filterSource(srcobj);\n\n      if (Array.isArray(srcobj)) {\n        newsrc = newsrc.concat(srcobj);\n      } else if (isObject(srcobj)) {\n        newsrc.push(srcobj);\n      }\n    });\n    src = newsrc;\n  } else if (typeof src === 'string' && src.trim()) {\n    // convert string into object\n    src = [fixSource({\n      src: src\n    })];\n  } else if (isObject(src) && typeof src.src === 'string' && src.src && src.src.trim()) {\n    // src is already valid\n    src = [fixSource(src)];\n  } else {\n    // invalid source, turn it into an empty array\n    src = [];\n  }\n\n  return src;\n};\n/**\n * Checks src mimetype, adding it when possible\n *\n * @param {Tech~SourceObject} src\n *        The src object to check\n * @return {Tech~SourceObject}\n *        src Object with known type\n */\n\n\nfunction fixSource(src) {\n  var mimetype = getMimetype(src.src);\n\n  if (!src.type && mimetype) {\n    src.type = mimetype;\n  }\n\n  return src;\n}\n\n/**\n * The `MediaLoader` is the `Component` that decides which playback technology to load\n * when a player is initialized.\n *\n * @extends Component\n */\n\nvar MediaLoader =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(MediaLoader, _Component);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should attach to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function that is run when this component is ready.\n   */\n  function MediaLoader(player, options, ready) {\n    var _this;\n\n    // MediaLoader has no element\n    var options_ = mergeOptions({\n      createEl: false\n    }, options);\n    _this = _Component.call(this, player, options_, ready) || this; // If there are no sources when the player is initialized,\n    // load the first supported playback technology.\n\n    if (!options.playerOptions.sources || options.playerOptions.sources.length === 0) {\n      for (var i = 0, j = options.playerOptions.techOrder; i < j.length; i++) {\n        var techName = toTitleCase(j[i]);\n        var tech = Tech.getTech(techName); // Support old behavior of techs being registered as components.\n        // Remove once that deprecated behavior is removed.\n\n        if (!techName) {\n          tech = Component.getComponent(techName);\n        } // Check if the browser supports this technology\n\n\n        if (tech && tech.isSupported()) {\n          player.loadTech_(techName);\n          break;\n        }\n      }\n    } else {\n      // Loop through playback technologies (HTML5, Flash) and check for support.\n      // Then load the best source.\n      // A few assumptions here:\n      //   All playback technologies respect preload false.\n      player.src(options.playerOptions.sources);\n    }\n\n    return _this;\n  }\n\n  return MediaLoader;\n}(Component);\n\nComponent.registerComponent('MediaLoader', MediaLoader);\n\n/**\n * Clickable Component which is clickable or keyboard actionable,\n * but is not a native HTML button.\n *\n * @extends Component\n */\n\nvar ClickableComponent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(ClickableComponent, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param  {Player} player\n   *         The `Player` that this class should be attached to.\n   *\n   * @param  {Object} [options]\n   *         The key/value store of player options.\n   */\n  function ClickableComponent(player, options) {\n    var _this;\n\n    _this = _Component.call(this, player, options) || this;\n\n    _this.emitTapEvents();\n\n    _this.enable();\n\n    return _this;\n  }\n  /**\n   * Create the `Component`s DOM element.\n   *\n   * @param {string} [tag=div]\n   *        The element's node type.\n   *\n   * @param {Object} [props={}]\n   *        An object of properties that should be set on the element.\n   *\n   * @param {Object} [attributes={}]\n   *        An object of attributes that should be set on the element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  var _proto = ClickableComponent.prototype;\n\n  _proto.createEl = function createEl$$1(tag, props, attributes) {\n    if (tag === void 0) {\n      tag = 'div';\n    }\n\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (attributes === void 0) {\n      attributes = {};\n    }\n\n    props = assign({\n      innerHTML: '<span aria-hidden=\"true\" class=\"vjs-icon-placeholder\"></span>',\n      className: this.buildCSSClass(),\n      tabIndex: 0\n    }, props);\n\n    if (tag === 'button') {\n      log.error(\"Creating a ClickableComponent with an HTML element of \" + tag + \" is not supported; use a Button instead.\");\n    } // Add ARIA attributes for clickable element which is not a native HTML button\n\n\n    attributes = assign({\n      role: 'button'\n    }, attributes);\n    this.tabIndex_ = props.tabIndex;\n\n    var el = _Component.prototype.createEl.call(this, tag, props, attributes);\n\n    this.createControlTextEl(el);\n    return el;\n  };\n\n  _proto.dispose = function dispose() {\n    // remove controlTextEl_ on dispose\n    this.controlTextEl_ = null;\n\n    _Component.prototype.dispose.call(this);\n  }\n  /**\n   * Create a control text element on this `Component`\n   *\n   * @param {Element} [el]\n   *        Parent element for the control text.\n   *\n   * @return {Element}\n   *         The control text element that gets created.\n   */\n  ;\n\n  _proto.createControlTextEl = function createControlTextEl(el) {\n    this.controlTextEl_ = createEl('span', {\n      className: 'vjs-control-text'\n    }, {\n      // let the screen reader user know that the text of the element may change\n      'aria-live': 'polite'\n    });\n\n    if (el) {\n      el.appendChild(this.controlTextEl_);\n    }\n\n    this.controlText(this.controlText_, el);\n    return this.controlTextEl_;\n  }\n  /**\n   * Get or set the localize text to use for the controls on the `Component`.\n   *\n   * @param {string} [text]\n   *        Control text for element.\n   *\n   * @param {Element} [el=this.el()]\n   *        Element to set the title on.\n   *\n   * @return {string}\n   *         - The control text when getting\n   */\n  ;\n\n  _proto.controlText = function controlText(text, el) {\n    if (el === void 0) {\n      el = this.el();\n    }\n\n    if (text === undefined) {\n      return this.controlText_ || 'Need Text';\n    }\n\n    var localizedText = this.localize(text);\n    this.controlText_ = text;\n    textContent(this.controlTextEl_, localizedText);\n\n    if (!this.nonIconControl) {\n      // Set title attribute if only an icon is shown\n      el.setAttribute('title', localizedText);\n    }\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  ;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-control vjs-button \" + _Component.prototype.buildCSSClass.call(this);\n  }\n  /**\n   * Enable this `Component`s element.\n   */\n  ;\n\n  _proto.enable = function enable() {\n    if (!this.enabled_) {\n      this.enabled_ = true;\n      this.removeClass('vjs-disabled');\n      this.el_.setAttribute('aria-disabled', 'false');\n\n      if (typeof this.tabIndex_ !== 'undefined') {\n        this.el_.setAttribute('tabIndex', this.tabIndex_);\n      }\n\n      this.on(['tap', 'click'], this.handleClick);\n      this.on('focus', this.handleFocus);\n      this.on('blur', this.handleBlur);\n    }\n  }\n  /**\n   * Disable this `Component`s element.\n   */\n  ;\n\n  _proto.disable = function disable() {\n    this.enabled_ = false;\n    this.addClass('vjs-disabled');\n    this.el_.setAttribute('aria-disabled', 'true');\n\n    if (typeof this.tabIndex_ !== 'undefined') {\n      this.el_.removeAttribute('tabIndex');\n    }\n\n    this.off(['tap', 'click'], this.handleClick);\n    this.off('focus', this.handleFocus);\n    this.off('blur', this.handleBlur);\n  }\n  /**\n   * This gets called when a `ClickableComponent` gets:\n   * - Clicked (via the `click` event, listening starts in the constructor)\n   * - Tapped (via the `tap` event, listening starts in the constructor)\n   * - The following things happen in order:\n   *   1. {@link ClickableComponent#handleFocus} is called via a `focus` event on the\n   *      `ClickableComponent`.\n   *   2. {@link ClickableComponent#handleFocus} adds a listener for `keydown` on using\n   *      {@link ClickableComponent#handleKeyPress}.\n   *   3. `ClickableComponent` has not had a `blur` event (`blur` means that focus was lost). The user presses\n   *      the space or enter key.\n   *   4. {@link ClickableComponent#handleKeyPress} calls this function with the `keydown`\n   *      event as a parameter.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   * @abstract\n   */\n  ;\n\n  _proto.handleClick = function handleClick(event) {}\n  /**\n   * This gets called when a `ClickableComponent` gains focus via a `focus` event.\n   * Turns on listening for `keydown` events. When they happen it\n   * calls `this.handleKeyPress`.\n   *\n   * @param {EventTarget~Event} event\n   *        The `focus` event that caused this function to be called.\n   *\n   * @listens focus\n   */\n  ;\n\n  _proto.handleFocus = function handleFocus(event) {\n    on(document, 'keydown', bind(this, this.handleKeyPress));\n  }\n  /**\n   * Called when this ClickableComponent has focus and a key gets pressed down. By\n   * default it will call `this.handleClick` when the key is space or enter.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n  ;\n\n  _proto.handleKeyPress = function handleKeyPress(event) {\n    // Support Space or Enter key operation to fire a click event\n    if (keycode.isEventKey(event, 'Space') || keycode.isEventKey(event, 'Enter')) {\n      event.preventDefault();\n      this.trigger('click');\n    } else {\n      // Pass keypress handling up for unsupported keys\n      _Component.prototype.handleKeyPress.call(this, event);\n    }\n  }\n  /**\n   * Called when a `ClickableComponent` loses focus. Turns off the listener for\n   * `keydown` events. Which Stops `this.handleKeyPress` from getting called.\n   *\n   * @param {EventTarget~Event} event\n   *        The `blur` event that caused this function to be called.\n   *\n   * @listens blur\n   */\n  ;\n\n  _proto.handleBlur = function handleBlur(event) {\n    off(document, 'keydown', bind(this, this.handleKeyPress));\n  };\n\n  return ClickableComponent;\n}(Component);\n\nComponent.registerComponent('ClickableComponent', ClickableComponent);\n\n/**\n * A `ClickableComponent` that handles showing the poster image for the player.\n *\n * @extends ClickableComponent\n */\n\nvar PosterImage =\n/*#__PURE__*/\nfunction (_ClickableComponent) {\n  _inheritsLoose(PosterImage, _ClickableComponent);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should attach to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function PosterImage(player, options) {\n    var _this;\n\n    _this = _ClickableComponent.call(this, player, options) || this;\n\n    _this.update();\n\n    player.on('posterchange', bind(_assertThisInitialized(_assertThisInitialized(_this)), _this.update));\n    return _this;\n  }\n  /**\n   * Clean up and dispose of the `PosterImage`.\n   */\n\n\n  var _proto = PosterImage.prototype;\n\n  _proto.dispose = function dispose() {\n    this.player().off('posterchange', this.update);\n\n    _ClickableComponent.prototype.dispose.call(this);\n  }\n  /**\n   * Create the `PosterImage`s DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  ;\n\n  _proto.createEl = function createEl$$1() {\n    var el = createEl('div', {\n      className: 'vjs-poster',\n      // Don't want poster to be tabbable.\n      tabIndex: -1\n    });\n    return el;\n  }\n  /**\n   * An {@link EventTarget~EventListener} for {@link Player#posterchange} events.\n   *\n   * @listens Player#posterchange\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `Player#posterchange` event that triggered this function.\n   */\n  ;\n\n  _proto.update = function update(event) {\n    var url = this.player().poster();\n    this.setSrc(url); // If there's no poster source we should display:none on this component\n    // so it's not still clickable or right-clickable\n\n    if (url) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n  /**\n   * Set the source of the `PosterImage` depending on the display method.\n   *\n   * @param {string} url\n   *        The URL to the source for the `PosterImage`.\n   */\n  ;\n\n  _proto.setSrc = function setSrc(url) {\n    var backgroundImage = ''; // Any falsy value should stay as an empty string, otherwise\n    // this will throw an extra error\n\n    if (url) {\n      backgroundImage = \"url(\\\"\" + url + \"\\\")\";\n    }\n\n    this.el_.style.backgroundImage = backgroundImage;\n  }\n  /**\n   * An {@link EventTarget~EventListener} for clicks on the `PosterImage`. See\n   * {@link ClickableComponent#handleClick} for instances where this will be triggered.\n   *\n   * @listens tap\n   * @listens click\n   * @listens keydown\n   *\n   * @param {EventTarget~Event} event\n   +        The `click`, `tap` or `keydown` event that caused this function to be called.\n   */\n  ;\n\n  _proto.handleClick = function handleClick(event) {\n    // We don't want a click to trigger playback when controls are disabled\n    if (!this.player_.controls()) {\n      return;\n    }\n\n    if (this.player_.paused()) {\n      silencePromise(this.player_.play());\n    } else {\n      this.player_.pause();\n    } // call handleFocus manually to get hotkeys working\n\n\n    this.player_.handleFocus({});\n  };\n\n  return PosterImage;\n}(ClickableComponent);\n\nComponent.registerComponent('PosterImage', PosterImage);\n\nvar darkGray = '#222';\nvar lightGray = '#ccc';\nvar fontMap = {\n  monospace: 'monospace',\n  sansSerif: 'sans-serif',\n  serif: 'serif',\n  monospaceSansSerif: '\"Andale Mono\", \"Lucida Console\", monospace',\n  monospaceSerif: '\"Courier New\", monospace',\n  proportionalSansSerif: 'sans-serif',\n  proportionalSerif: 'serif',\n  casual: '\"Comic Sans MS\", Impact, fantasy',\n  script: '\"Monotype Corsiva\", cursive',\n  smallcaps: '\"Andale Mono\", \"Lucida Console\", monospace, sans-serif'\n};\n/**\n * Construct an rgba color from a given hex color code.\n *\n * @param {number} color\n *        Hex number for color, like #f0e or #f604e2.\n *\n * @param {number} opacity\n *        Value for opacity, 0.0 - 1.0.\n *\n * @return {string}\n *         The rgba color that was created, like 'rgba(255, 0, 0, 0.3)'.\n */\n\nfunction constructColor(color, opacity) {\n  var hex;\n\n  if (color.length === 4) {\n    // color looks like \"#f0e\"\n    hex = color[1] + color[1] + color[2] + color[2] + color[3] + color[3];\n  } else if (color.length === 7) {\n    // color looks like \"#f604e2\"\n    hex = color.slice(1);\n  } else {\n    throw new Error('Invalid color code provided, ' + color + '; must be formatted as e.g. #f0e or #f604e2.');\n  }\n\n  return 'rgba(' + parseInt(hex.slice(0, 2), 16) + ',' + parseInt(hex.slice(2, 4), 16) + ',' + parseInt(hex.slice(4, 6), 16) + ',' + opacity + ')';\n}\n/**\n * Try to update the style of a DOM element. Some style changes will throw an error,\n * particularly in IE8. Those should be noops.\n *\n * @param {Element} el\n *        The DOM element to be styled.\n *\n * @param {string} style\n *        The CSS property on the element that should be styled.\n *\n * @param {string} rule\n *        The style rule that should be applied to the property.\n *\n * @private\n */\n\nfunction tryUpdateStyle(el, style, rule) {\n  try {\n    el.style[style] = rule;\n  } catch (e) {\n    // Satisfies linter.\n    return;\n  }\n}\n/**\n * The component for displaying text track cues.\n *\n * @extends Component\n */\n\n\nvar TextTrackDisplay =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(TextTrackDisplay, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function to call when `TextTrackDisplay` is ready.\n   */\n  function TextTrackDisplay(player, options, ready) {\n    var _this;\n\n    _this = _Component.call(this, player, options, ready) || this;\n    var updateDisplayHandler = bind(_assertThisInitialized(_assertThisInitialized(_this)), _this.updateDisplay);\n    player.on('loadstart', bind(_assertThisInitialized(_assertThisInitialized(_this)), _this.toggleDisplay));\n    player.on('texttrackchange', updateDisplayHandler);\n    player.on('loadedmetadata', bind(_assertThisInitialized(_assertThisInitialized(_this)), _this.preselectTrack)); // This used to be called during player init, but was causing an error\n    // if a track should show by default and the display hadn't loaded yet.\n    // Should probably be moved to an external track loader when we support\n    // tracks that don't need a display.\n\n    player.ready(bind(_assertThisInitialized(_assertThisInitialized(_this)), function () {\n      if (player.tech_ && player.tech_.featuresNativeTextTracks) {\n        this.hide();\n        return;\n      }\n\n      player.on('fullscreenchange', updateDisplayHandler);\n      player.on('playerresize', updateDisplayHandler);\n      window$1.addEventListener('orientationchange', updateDisplayHandler);\n      player.on('dispose', function () {\n        return window$1.removeEventListener('orientationchange', updateDisplayHandler);\n      });\n      var tracks = this.options_.playerOptions.tracks || [];\n\n      for (var i = 0; i < tracks.length; i++) {\n        this.player_.addRemoteTextTrack(tracks[i], true);\n      }\n\n      this.preselectTrack();\n    }));\n    return _this;\n  }\n  /**\n  * Preselect a track following this precedence:\n  * - matches the previously selected {@link TextTrack}'s language and kind\n  * - matches the previously selected {@link TextTrack}'s language only\n  * - is the first default captions track\n  * - is the first default descriptions track\n  *\n  * @listens Player#loadstart\n  */\n\n\n  var _proto = TextTrackDisplay.prototype;\n\n  _proto.preselectTrack = function preselectTrack() {\n    var modes = {\n      captions: 1,\n      subtitles: 1\n    };\n    var trackList = this.player_.textTracks();\n    var userPref = this.player_.cache_.selectedLanguage;\n    var firstDesc;\n    var firstCaptions;\n    var preferredTrack;\n\n    for (var i = 0; i < trackList.length; i++) {\n      var track = trackList[i];\n\n      if (userPref && userPref.enabled && userPref.language && userPref.language === track.language && track.kind in modes) {\n        // Always choose the track that matches both language and kind\n        if (track.kind === userPref.kind) {\n          preferredTrack = track; // or choose the first track that matches language\n        } else if (!preferredTrack) {\n          preferredTrack = track;\n        } // clear everything if offTextTrackMenuItem was clicked\n\n      } else if (userPref && !userPref.enabled) {\n        preferredTrack = null;\n        firstDesc = null;\n        firstCaptions = null;\n      } else if (track.default) {\n        if (track.kind === 'descriptions' && !firstDesc) {\n          firstDesc = track;\n        } else if (track.kind in modes && !firstCaptions) {\n          firstCaptions = track;\n        }\n      }\n    } // The preferredTrack matches the user preference and takes\n    // precedence over all the other tracks.\n    // So, display the preferredTrack before the first default track\n    // and the subtitles/captions track before the descriptions track\n\n\n    if (preferredTrack) {\n      preferredTrack.mode = 'showing';\n    } else if (firstCaptions) {\n      firstCaptions.mode = 'showing';\n    } else if (firstDesc) {\n      firstDesc.mode = 'showing';\n    }\n  }\n  /**\n   * Turn display of {@link TextTrack}'s from the current state into the other state.\n   * There are only two states:\n   * - 'shown'\n   * - 'hidden'\n   *\n   * @listens Player#loadstart\n   */\n  ;\n\n  _proto.toggleDisplay = function toggleDisplay() {\n    if (this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  }\n  /**\n   * Create the {@link Component}'s DOM element.\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  ;\n\n  _proto.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-text-track-display'\n    }, {\n      'aria-live': 'off',\n      'aria-atomic': 'true'\n    });\n  }\n  /**\n   * Clear all displayed {@link TextTrack}s.\n   */\n  ;\n\n  _proto.clearDisplay = function clearDisplay() {\n    if (typeof window$1.WebVTT === 'function') {\n      window$1.WebVTT.processCues(window$1, [], this.el_);\n    }\n  }\n  /**\n   * Update the displayed TextTrack when a either a {@link Player#texttrackchange} or\n   * a {@link Player#fullscreenchange} is fired.\n   *\n   * @listens Player#texttrackchange\n   * @listens Player#fullscreenchange\n   */\n  ;\n\n  _proto.updateDisplay = function updateDisplay() {\n    var tracks = this.player_.textTracks();\n    this.clearDisplay(); // Track display prioritization model: if multiple tracks are 'showing',\n    //  display the first 'subtitles' or 'captions' track which is 'showing',\n    //  otherwise display the first 'descriptions' track which is 'showing'\n\n    var descriptionsTrack = null;\n    var captionsSubtitlesTrack = null;\n    var i = tracks.length;\n\n    while (i--) {\n      var track = tracks[i];\n\n      if (track.mode === 'showing') {\n        if (track.kind === 'descriptions') {\n          descriptionsTrack = track;\n        } else {\n          captionsSubtitlesTrack = track;\n        }\n      }\n    }\n\n    if (captionsSubtitlesTrack) {\n      if (this.getAttribute('aria-live') !== 'off') {\n        this.setAttribute('aria-live', 'off');\n      }\n\n      this.updateForTrack(captionsSubtitlesTrack);\n    } else if (descriptionsTrack) {\n      if (this.getAttribute('aria-live') !== 'assertive') {\n        this.setAttribute('aria-live', 'assertive');\n      }\n\n      this.updateForTrack(descriptionsTrack);\n    }\n  }\n  /**\n   * Add an {@link TextTrack} to to the {@link Tech}s {@link TextTrackList}.\n   *\n   * @param {TextTrack} track\n   *        Text track object to be added to the list.\n   */\n  ;\n\n  _proto.updateForTrack = function updateForTrack(track) {\n    if (typeof window$1.WebVTT !== 'function' || !track.activeCues) {\n      return;\n    }\n\n    var cues = [];\n\n    for (var _i = 0; _i < track.activeCues.length; _i++) {\n      cues.push(track.activeCues[_i]);\n    }\n\n    window$1.WebVTT.processCues(window$1, cues, this.el_);\n\n    if (!this.player_.textTrackSettings) {\n      return;\n    }\n\n    var overrides = this.player_.textTrackSettings.getValues();\n    var i = cues.length;\n\n    while (i--) {\n      var cue = cues[i];\n\n      if (!cue) {\n        continue;\n      }\n\n      var cueDiv = cue.displayState;\n\n      if (overrides.color) {\n        cueDiv.firstChild.style.color = overrides.color;\n      }\n\n      if (overrides.textOpacity) {\n        tryUpdateStyle(cueDiv.firstChild, 'color', constructColor(overrides.color || '#fff', overrides.textOpacity));\n      }\n\n      if (overrides.backgroundColor) {\n        cueDiv.firstChild.style.backgroundColor = overrides.backgroundColor;\n      }\n\n      if (overrides.backgroundOpacity) {\n        tryUpdateStyle(cueDiv.firstChild, 'backgroundColor', constructColor(overrides.backgroundColor || '#000', overrides.backgroundOpacity));\n      }\n\n      if (overrides.windowColor) {\n        if (overrides.windowOpacity) {\n          tryUpdateStyle(cueDiv, 'backgroundColor', constructColor(overrides.windowColor, overrides.windowOpacity));\n        } else {\n          cueDiv.style.backgroundColor = overrides.windowColor;\n        }\n      }\n\n      if (overrides.edgeStyle) {\n        if (overrides.edgeStyle === 'dropshadow') {\n          cueDiv.firstChild.style.textShadow = \"2px 2px 3px \" + darkGray + \", 2px 2px 4px \" + darkGray + \", 2px 2px 5px \" + darkGray;\n        } else if (overrides.edgeStyle === 'raised') {\n          cueDiv.firstChild.style.textShadow = \"1px 1px \" + darkGray + \", 2px 2px \" + darkGray + \", 3px 3px \" + darkGray;\n        } else if (overrides.edgeStyle === 'depressed') {\n          cueDiv.firstChild.style.textShadow = \"1px 1px \" + lightGray + \", 0 1px \" + lightGray + \", -1px -1px \" + darkGray + \", 0 -1px \" + darkGray;\n        } else if (overrides.edgeStyle === 'uniform') {\n          cueDiv.firstChild.style.textShadow = \"0 0 4px \" + darkGray + \", 0 0 4px \" + darkGray + \", 0 0 4px \" + darkGray + \", 0 0 4px \" + darkGray;\n        }\n      }\n\n      if (overrides.fontPercent && overrides.fontPercent !== 1) {\n        var fontSize = window$1.parseFloat(cueDiv.style.fontSize);\n        cueDiv.style.fontSize = fontSize * overrides.fontPercent + 'px';\n        cueDiv.style.height = 'auto';\n        cueDiv.style.top = 'auto';\n        cueDiv.style.bottom = '2px';\n      }\n\n      if (overrides.fontFamily && overrides.fontFamily !== 'default') {\n        if (overrides.fontFamily === 'small-caps') {\n          cueDiv.firstChild.style.fontVariant = 'small-caps';\n        } else {\n          cueDiv.firstChild.style.fontFamily = fontMap[overrides.fontFamily];\n        }\n      }\n    }\n  };\n\n  return TextTrackDisplay;\n}(Component);\n\nComponent.registerComponent('TextTrackDisplay', TextTrackDisplay);\n\n/**\n * A loading spinner for use during waiting/loading events.\n *\n * @extends Component\n */\n\nvar LoadingSpinner =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(LoadingSpinner, _Component);\n\n  function LoadingSpinner() {\n    return _Component.apply(this, arguments) || this;\n  }\n\n  var _proto = LoadingSpinner.prototype;\n\n  /**\n   * Create the `LoadingSpinner`s DOM element.\n   *\n   * @return {Element}\n   *         The dom element that gets created.\n   */\n  _proto.createEl = function createEl$$1() {\n    var isAudio = this.player_.isAudio();\n    var playerType = this.localize(isAudio ? 'Audio Player' : 'Video Player');\n    var controlText = createEl('span', {\n      className: 'vjs-control-text',\n      innerHTML: this.localize('{1} is loading.', [playerType])\n    });\n\n    var el = _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-loading-spinner',\n      dir: 'ltr'\n    });\n\n    el.appendChild(controlText);\n    return el;\n  };\n\n  return LoadingSpinner;\n}(Component);\n\nComponent.registerComponent('LoadingSpinner', LoadingSpinner);\n\n/**\n * Base class for all buttons.\n *\n * @extends ClickableComponent\n */\n\nvar Button =\n/*#__PURE__*/\nfunction (_ClickableComponent) {\n  _inheritsLoose(Button, _ClickableComponent);\n\n  function Button() {\n    return _ClickableComponent.apply(this, arguments) || this;\n  }\n\n  var _proto = Button.prototype;\n\n  /**\n   * Create the `Button`s DOM element.\n   *\n   * @param {string} [tag=\"button\"]\n   *        The element's node type. This argument is IGNORED: no matter what\n   *        is passed, it will always create a `button` element.\n   *\n   * @param {Object} [props={}]\n   *        An object of properties that should be set on the element.\n   *\n   * @param {Object} [attributes={}]\n   *        An object of attributes that should be set on the element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  _proto.createEl = function createEl(tag, props, attributes) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (attributes === void 0) {\n      attributes = {};\n    }\n\n    tag = 'button';\n    props = assign({\n      innerHTML: '<span aria-hidden=\"true\" class=\"vjs-icon-placeholder\"></span>',\n      className: this.buildCSSClass()\n    }, props); // Add attributes for button element\n\n    attributes = assign({\n      // Necessary since the default button type is \"submit\"\n      type: 'button'\n    }, attributes);\n    var el = Component.prototype.createEl.call(this, tag, props, attributes);\n    this.createControlTextEl(el);\n    return el;\n  }\n  /**\n   * Add a child `Component` inside of this `Button`.\n   *\n   * @param {string|Component} child\n   *        The name or instance of a child to add.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of options that will get passed to children of\n   *        the child.\n   *\n   * @return {Component}\n   *         The `Component` that gets added as a child. When using a string the\n   *         `Component` will get created by this process.\n   *\n   * @deprecated since version 5\n   */\n  ;\n\n  _proto.addChild = function addChild(child, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var className = this.constructor.name;\n    log.warn(\"Adding an actionable (user controllable) child to a Button (\" + className + \") is not supported; use a ClickableComponent instead.\"); // Avoid the error message generated by ClickableComponent's addChild method\n\n    return Component.prototype.addChild.call(this, child, options);\n  }\n  /**\n   * Enable the `Button` element so that it can be activated or clicked. Use this with\n   * {@link Button#disable}.\n   */\n  ;\n\n  _proto.enable = function enable() {\n    _ClickableComponent.prototype.enable.call(this);\n\n    this.el_.removeAttribute('disabled');\n  }\n  /**\n   * Disable the `Button` element so that it cannot be activated or clicked. Use this with\n   * {@link Button#enable}.\n   */\n  ;\n\n  _proto.disable = function disable() {\n    _ClickableComponent.prototype.disable.call(this);\n\n    this.el_.setAttribute('disabled', 'disabled');\n  }\n  /**\n   * This gets called when a `Button` has focus and `keydown` is triggered via a key\n   * press.\n   *\n   * @param {EventTarget~Event} event\n   *        The event that caused this function to get called.\n   *\n   * @listens keydown\n   */\n  ;\n\n  _proto.handleKeyPress = function handleKeyPress(event) {\n    // Ignore Space or Enter key operation, which is handled by the browser for a button.\n    if (!(keycode.isEventKey(event, 'Space') || keycode.isEventKey(event, 'Enter'))) {\n      // Pass keypress handling up for unsupported keys\n      _ClickableComponent.prototype.handleKeyPress.call(this, event);\n    }\n  };\n\n  return Button;\n}(ClickableComponent);\n\nComponent.registerComponent('Button', Button);\n\n/**\n * The initial play button that shows before the video has played. The hiding of the\n * `BigPlayButton` get done via CSS and `Player` states.\n *\n * @extends Button\n */\n\nvar BigPlayButton =\n/*#__PURE__*/\nfunction (_Button) {\n  _inheritsLoose(BigPlayButton, _Button);\n\n  function BigPlayButton(player, options) {\n    var _this;\n\n    _this = _Button.call(this, player, options) || this;\n    _this.mouseused_ = false;\n\n    _this.on('mousedown', _this.handleMouseDown);\n\n    return _this;\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object. Always returns 'vjs-big-play-button'.\n   */\n\n\n  var _proto = BigPlayButton.prototype;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return 'vjs-big-play-button';\n  }\n  /**\n   * This gets called when a `BigPlayButton` \"clicked\". See {@link ClickableComponent}\n   * for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  ;\n\n  _proto.handleClick = function handleClick(event) {\n    var playPromise = this.player_.play(); // exit early if clicked via the mouse\n\n    if (this.mouseused_ && event.clientX && event.clientY) {\n      silencePromise(playPromise); // call handleFocus manually to get hotkeys working\n\n      this.player_.handleFocus({});\n      return;\n    }\n\n    var cb = this.player_.getChild('controlBar');\n    var playToggle = cb && cb.getChild('playToggle');\n\n    if (!playToggle) {\n      this.player_.focus();\n      return;\n    }\n\n    var playFocus = function playFocus() {\n      return playToggle.focus();\n    };\n\n    if (isPromise(playPromise)) {\n      playPromise.then(playFocus, function () {});\n    } else {\n      this.setTimeout(playFocus, 1);\n    }\n  };\n\n  _proto.handleKeyPress = function handleKeyPress(event) {\n    this.mouseused_ = false;\n\n    _Button.prototype.handleKeyPress.call(this, event);\n  };\n\n  _proto.handleMouseDown = function handleMouseDown(event) {\n    this.mouseused_ = true;\n  };\n\n  return BigPlayButton;\n}(Button);\n/**\n * The text that should display over the `BigPlayButton`s controls. Added to for localization.\n *\n * @type {string}\n * @private\n */\n\n\nBigPlayButton.prototype.controlText_ = 'Play Video';\nComponent.registerComponent('BigPlayButton', BigPlayButton);\n\n/**\n * The `CloseButton` is a `{@link Button}` that fires a `close` event when\n * it gets clicked.\n *\n * @extends Button\n */\n\nvar CloseButton =\n/*#__PURE__*/\nfunction (_Button) {\n  _inheritsLoose(CloseButton, _Button);\n\n  /**\n  * Creates an instance of the this class.\n  *\n  * @param  {Player} player\n  *         The `Player` that this class should be attached to.\n  *\n  * @param  {Object} [options]\n  *         The key/value store of player options.\n  */\n  function CloseButton(player, options) {\n    var _this;\n\n    _this = _Button.call(this, player, options) || this;\n\n    _this.controlText(options && options.controlText || _this.localize('Close'));\n\n    return _this;\n  }\n  /**\n  * Builds the default DOM `className`.\n  *\n  * @return {string}\n  *         The DOM `className` for this object.\n  */\n\n\n  var _proto = CloseButton.prototype;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-close-button \" + _Button.prototype.buildCSSClass.call(this);\n  }\n  /**\n   * This gets called when a `CloseButton` has focus and `keydown` is triggered via a key\n   * press.\n   *\n   * @param {EventTarget~Event} event\n   *        The event that caused this function to get called.\n   *\n   * @listens keydown\n   */\n  ;\n\n  _proto.handleKeyPress = function handleKeyPress(event) {} // Override the default `Button` behavior, and don't pass the keypress event\n  //  up to the player because this button is part of a `ModalDialog`, which\n  //  doesn't pass keypresses to the player either.\n\n  /**\n   * This gets called when a `CloseButton` gets clicked. See\n   * {@link ClickableComponent#handleClick} for more information on when this will be\n   * triggered\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   * @fires CloseButton#close\n   */\n  ;\n\n  _proto.handleClick = function handleClick(event) {\n    /**\n     * Triggered when the a `CloseButton` is clicked.\n     *\n     * @event CloseButton#close\n     * @type {EventTarget~Event}\n     *\n     * @property {boolean} [bubbles=false]\n     *           set to false so that the close event does not\n     *           bubble up to parents if there is no listener\n     */\n    this.trigger({\n      type: 'close',\n      bubbles: false\n    });\n  };\n\n  return CloseButton;\n}(Button);\n\nComponent.registerComponent('CloseButton', CloseButton);\n\n/**\n * Button to toggle between play and pause.\n *\n * @extends Button\n */\n\nvar PlayToggle =\n/*#__PURE__*/\nfunction (_Button) {\n  _inheritsLoose(PlayToggle, _Button);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  function PlayToggle(player, options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    _this = _Button.call(this, player, options) || this; // show or hide replay icon\n\n    options.replay = options.replay === undefined || options.replay;\n\n    _this.on(player, 'play', _this.handlePlay);\n\n    _this.on(player, 'pause', _this.handlePause);\n\n    if (options.replay) {\n      _this.on(player, 'ended', _this.handleEnded);\n    }\n\n    return _this;\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  var _proto = PlayToggle.prototype;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-play-control \" + _Button.prototype.buildCSSClass.call(this);\n  }\n  /**\n   * This gets called when an `PlayToggle` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  ;\n\n  _proto.handleClick = function handleClick(event) {\n    if (this.player_.paused()) {\n      this.player_.play();\n    } else {\n      this.player_.pause();\n    }\n  }\n  /**\n   * This gets called once after the video has ended and the user seeks so that\n   * we can change the replay button back to a play button.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#seeked\n   */\n  ;\n\n  _proto.handleSeeked = function handleSeeked(event) {\n    this.removeClass('vjs-ended');\n\n    if (this.player_.paused()) {\n      this.handlePause(event);\n    } else {\n      this.handlePlay(event);\n    }\n  }\n  /**\n   * Add the vjs-playing class to the element so it can change appearance.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#play\n   */\n  ;\n\n  _proto.handlePlay = function handlePlay(event) {\n    this.removeClass('vjs-ended');\n    this.removeClass('vjs-paused');\n    this.addClass('vjs-playing'); // change the button text to \"Pause\"\n\n    this.controlText('Pause');\n  }\n  /**\n   * Add the vjs-paused class to the element so it can change appearance.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#pause\n   */\n  ;\n\n  _proto.handlePause = function handlePause(event) {\n    this.removeClass('vjs-playing');\n    this.addClass('vjs-paused'); // change the button text to \"Play\"\n\n    this.controlText('Play');\n  }\n  /**\n   * Add the vjs-ended class to the element so it can change appearance\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#ended\n   */\n  ;\n\n  _proto.handleEnded = function handleEnded(event) {\n    this.removeClass('vjs-playing');\n    this.addClass('vjs-ended'); // change the button text to \"Replay\"\n\n    this.controlText('Replay'); // on the next seek remove the replay button\n\n    this.one(this.player_, 'seeked', this.handleSeeked);\n  };\n\n  return PlayToggle;\n}(Button);\n/**\n * The text that should display over the `PlayToggle`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nPlayToggle.prototype.controlText_ = 'Play';\nComponent.registerComponent('PlayToggle', PlayToggle);\n\n/**\n * @file format-time.js\n * @module format-time\n */\n\n/**\n * Format seconds as a time string, H:MM:SS or M:SS. Supplying a guide (in\n * seconds) will force a number of leading zeros to cover the length of the\n * guide.\n *\n * @private\n * @param  {number} seconds\n *         Number of seconds to be turned into a string\n *\n * @param  {number} guide\n *         Number (in seconds) to model the string after\n *\n * @return {string}\n *         Time formatted as H:MM:SS or M:SS\n */\nvar defaultImplementation = function defaultImplementation(seconds, guide) {\n  seconds = seconds < 0 ? 0 : seconds;\n  var s = Math.floor(seconds % 60);\n  var m = Math.floor(seconds / 60 % 60);\n  var h = Math.floor(seconds / 3600);\n  var gm = Math.floor(guide / 60 % 60);\n  var gh = Math.floor(guide / 3600); // handle invalid times\n\n  if (isNaN(seconds) || seconds === Infinity) {\n    // '-' is false for all relational operators (e.g. <, >=) so this setting\n    // will add the minimum number of fields specified by the guide\n    h = m = s = '-';\n  } // Check if we need to show hours\n\n\n  h = h > 0 || gh > 0 ? h + ':' : ''; // If hours are showing, we may need to add a leading zero.\n  // Always show at least one digit of minutes.\n\n  m = ((h || gm >= 10) && m < 10 ? '0' + m : m) + ':'; // Check if leading zero is need for seconds\n\n  s = s < 10 ? '0' + s : s;\n  return h + m + s;\n}; // Internal pointer to the current implementation.\n\n\nvar implementation = defaultImplementation;\n/**\n * Replaces the default formatTime implementation with a custom implementation.\n *\n * @param {Function} customImplementation\n *        A function which will be used in place of the default formatTime\n *        implementation. Will receive the current time in seconds and the\n *        guide (in seconds) as arguments.\n */\n\nfunction setFormatTime(customImplementation) {\n  implementation = customImplementation;\n}\n/**\n * Resets formatTime to the default implementation.\n */\n\nfunction resetFormatTime() {\n  implementation = defaultImplementation;\n}\n/**\n * Delegates to either the default time formatting function or a custom\n * function supplied via `setFormatTime`.\n *\n * Formats seconds as a time string (H:MM:SS or M:SS). Supplying a\n * guide (in seconds) will force a number of leading zeros to cover the\n * length of the guide.\n *\n * @static\n * @example  formatTime(125, 600) === \"02:05\"\n * @param    {number} seconds\n *           Number of seconds to be turned into a string\n *\n * @param    {number} guide\n *           Number (in seconds) to model the string after\n *\n * @return   {string}\n *           Time formatted as H:MM:SS or M:SS\n */\n\nfunction formatTime(seconds, guide) {\n  if (guide === void 0) {\n    guide = seconds;\n  }\n\n  return implementation(seconds, guide);\n}\n\n/**\n * Displays time information about the video\n *\n * @extends Component\n */\n\nvar TimeDisplay =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(TimeDisplay, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function TimeDisplay(player, options) {\n    var _this;\n\n    _this = _Component.call(this, player, options) || this;\n    _this.throttledUpdateContent = throttle(bind(_assertThisInitialized(_assertThisInitialized(_this)), _this.updateContent), 25);\n\n    _this.on(player, 'timeupdate', _this.throttledUpdateContent);\n\n    return _this;\n  }\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  var _proto = TimeDisplay.prototype;\n\n  _proto.createEl = function createEl$$1() {\n    var className = this.buildCSSClass();\n\n    var el = _Component.prototype.createEl.call(this, 'div', {\n      className: className + \" vjs-time-control vjs-control\",\n      innerHTML: \"<span class=\\\"vjs-control-text\\\" role=\\\"presentation\\\">\" + this.localize(this.labelText_) + \"\\xA0</span>\"\n    });\n\n    this.contentEl_ = createEl('span', {\n      className: className + \"-display\"\n    }, {\n      // tell screen readers not to automatically read the time as it changes\n      'aria-live': 'off',\n      // span elements have no implicit role, but some screen readers (notably VoiceOver)\n      // treat them as a break between items in the DOM when using arrow keys\n      // (or left-to-right swipes on iOS) to read contents of a page. Using\n      // role='presentation' causes VoiceOver to NOT treat this span as a break.\n      'role': 'presentation'\n    });\n    this.updateTextNode_();\n    el.appendChild(this.contentEl_);\n    return el;\n  };\n\n  _proto.dispose = function dispose() {\n    this.contentEl_ = null;\n    this.textNode_ = null;\n\n    _Component.prototype.dispose.call(this);\n  }\n  /**\n   * Updates the \"remaining time\" text node with new content using the\n   * contents of the `formattedTime_` property.\n   *\n   * @private\n   */\n  ;\n\n  _proto.updateTextNode_ = function updateTextNode_() {\n    if (!this.contentEl_) {\n      return;\n    }\n\n    while (this.contentEl_.firstChild) {\n      this.contentEl_.removeChild(this.contentEl_.firstChild);\n    }\n\n    this.textNode_ = document.createTextNode(this.formattedTime_ || this.formatTime_(0));\n    this.contentEl_.appendChild(this.textNode_);\n  }\n  /**\n   * Generates a formatted time for this component to use in display.\n   *\n   * @param  {number} time\n   *         A numeric time, in seconds.\n   *\n   * @return {string}\n   *         A formatted time\n   *\n   * @private\n   */\n  ;\n\n  _proto.formatTime_ = function formatTime_(time) {\n    return formatTime(time);\n  }\n  /**\n   * Updates the time display text node if it has what was passed in changed\n   * the formatted time.\n   *\n   * @param {number} time\n   *        The time to update to\n   *\n   * @private\n   */\n  ;\n\n  _proto.updateFormattedTime_ = function updateFormattedTime_(time) {\n    var formattedTime = this.formatTime_(time);\n\n    if (formattedTime === this.formattedTime_) {\n      return;\n    }\n\n    this.formattedTime_ = formattedTime;\n    this.requestAnimationFrame(this.updateTextNode_);\n  }\n  /**\n   * To be filled out in the child class, should update the displayed time\n   * in accordance with the fact that the current time has changed.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `timeupdate`  event that caused this to run.\n   *\n   * @listens Player#timeupdate\n   */\n  ;\n\n  _proto.updateContent = function updateContent(event) {};\n\n  return TimeDisplay;\n}(Component);\n/**\n * The text that is added to the `TimeDisplay` for screen reader users.\n *\n * @type {string}\n * @private\n */\n\n\nTimeDisplay.prototype.labelText_ = 'Time';\n/**\n * The text that should display over the `TimeDisplay`s controls. Added to for localization.\n *\n * @type {string}\n * @private\n *\n * @deprecated in v7; controlText_ is not used in non-active display Components\n */\n\nTimeDisplay.prototype.controlText_ = 'Time';\nComponent.registerComponent('TimeDisplay', TimeDisplay);\n\n/**\n * Displays the current time\n *\n * @extends Component\n */\n\nvar CurrentTimeDisplay =\n/*#__PURE__*/\nfunction (_TimeDisplay) {\n  _inheritsLoose(CurrentTimeDisplay, _TimeDisplay);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function CurrentTimeDisplay(player, options) {\n    var _this;\n\n    _this = _TimeDisplay.call(this, player, options) || this;\n\n    _this.on(player, 'ended', _this.handleEnded);\n\n    return _this;\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  var _proto = CurrentTimeDisplay.prototype;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return 'vjs-current-time';\n  }\n  /**\n   * Update current time display\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `timeupdate` event that caused this function to run.\n   *\n   * @listens Player#timeupdate\n   */\n  ;\n\n  _proto.updateContent = function updateContent(event) {\n    // Allows for smooth scrubbing, when player can't keep up.\n    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();\n    this.updateFormattedTime_(time);\n  }\n  /**\n   * When the player fires ended there should be no time left. Sadly\n   * this is not always the case, lets make it seem like that is the case\n   * for users.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `ended` event that caused this to run.\n   *\n   * @listens Player#ended\n   */\n  ;\n\n  _proto.handleEnded = function handleEnded(event) {\n    if (!this.player_.duration()) {\n      return;\n    }\n\n    this.updateFormattedTime_(this.player_.duration());\n  };\n\n  return CurrentTimeDisplay;\n}(TimeDisplay);\n/**\n * The text that is added to the `CurrentTimeDisplay` for screen reader users.\n *\n * @type {string}\n * @private\n */\n\n\nCurrentTimeDisplay.prototype.labelText_ = 'Current Time';\n/**\n * The text that should display over the `CurrentTimeDisplay`s controls. Added to for localization.\n *\n * @type {string}\n * @private\n *\n * @deprecated in v7; controlText_ is not used in non-active display Components\n */\n\nCurrentTimeDisplay.prototype.controlText_ = 'Current Time';\nComponent.registerComponent('CurrentTimeDisplay', CurrentTimeDisplay);\n\n/**\n * Displays the duration\n *\n * @extends Component\n */\n\nvar DurationDisplay =\n/*#__PURE__*/\nfunction (_TimeDisplay) {\n  _inheritsLoose(DurationDisplay, _TimeDisplay);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function DurationDisplay(player, options) {\n    var _this;\n\n    _this = _TimeDisplay.call(this, player, options) || this; // we do not want to/need to throttle duration changes,\n    // as they should always display the changed duration as\n    // it has changed\n\n    _this.on(player, 'durationchange', _this.updateContent); // Listen to loadstart because the player duration is reset when a new media element is loaded,\n    // but the durationchange on the user agent will not fire.\n    // @see [Spec]{@link https://www.w3.org/TR/2011/WD-html5-20110113/video.html#media-element-load-algorithm}\n\n\n    _this.on(player, 'loadstart', _this.updateContent); // Also listen for timeupdate (in the parent) and loadedmetadata because removing those\n    // listeners could have broken dependent applications/libraries. These\n    // can likely be removed for 7.0.\n\n\n    _this.on(player, 'loadedmetadata', _this.throttledUpdateContent);\n\n    return _this;\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  var _proto = DurationDisplay.prototype;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return 'vjs-duration';\n  }\n  /**\n   * Update duration time display.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `durationchange`, `timeupdate`, or `loadedmetadata` event that caused\n   *        this function to be called.\n   *\n   * @listens Player#durationchange\n   * @listens Player#timeupdate\n   * @listens Player#loadedmetadata\n   */\n  ;\n\n  _proto.updateContent = function updateContent(event) {\n    var duration = this.player_.duration();\n\n    if (this.duration_ !== duration) {\n      this.duration_ = duration;\n      this.updateFormattedTime_(duration);\n    }\n  };\n\n  return DurationDisplay;\n}(TimeDisplay);\n/**\n * The text that is added to the `DurationDisplay` for screen reader users.\n *\n * @type {string}\n * @private\n */\n\n\nDurationDisplay.prototype.labelText_ = 'Duration';\n/**\n * The text that should display over the `DurationDisplay`s controls. Added to for localization.\n *\n * @type {string}\n * @private\n *\n * @deprecated in v7; controlText_ is not used in non-active display Components\n */\n\nDurationDisplay.prototype.controlText_ = 'Duration';\nComponent.registerComponent('DurationDisplay', DurationDisplay);\n\n/**\n * The separator between the current time and duration.\n * Can be hidden if it's not needed in the design.\n *\n * @extends Component\n */\n\nvar TimeDivider =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(TimeDivider, _Component);\n\n  function TimeDivider() {\n    return _Component.apply(this, arguments) || this;\n  }\n\n  var _proto = TimeDivider.prototype;\n\n  /**\n   * Create the component's DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  _proto.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-time-control vjs-time-divider',\n      innerHTML: '<div><span>/</span></div>'\n    }, {\n      // this element and its contents can be hidden from assistive techs since\n      // it is made extraneous by the announcement of the control text\n      // for the current time and duration displays\n      'aria-hidden': true\n    });\n  };\n\n  return TimeDivider;\n}(Component);\n\nComponent.registerComponent('TimeDivider', TimeDivider);\n\n/**\n * Displays the time left in the video\n *\n * @extends Component\n */\n\nvar RemainingTimeDisplay =\n/*#__PURE__*/\nfunction (_TimeDisplay) {\n  _inheritsLoose(RemainingTimeDisplay, _TimeDisplay);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function RemainingTimeDisplay(player, options) {\n    var _this;\n\n    _this = _TimeDisplay.call(this, player, options) || this;\n\n    _this.on(player, 'durationchange', _this.throttledUpdateContent);\n\n    _this.on(player, 'ended', _this.handleEnded);\n\n    return _this;\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  var _proto = RemainingTimeDisplay.prototype;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return 'vjs-remaining-time';\n  }\n  /**\n   * Create the `Component`'s DOM element with the \"minus\" characted prepend to the time\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  ;\n\n  _proto.createEl = function createEl$$1() {\n    var el = _TimeDisplay.prototype.createEl.call(this);\n\n    el.insertBefore(createEl('span', {}, {\n      'aria-hidden': true\n    }, '-'), this.contentEl_);\n    return el;\n  }\n  /**\n   * Update remaining time display.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `timeupdate` or `durationchange` event that caused this to run.\n   *\n   * @listens Player#timeupdate\n   * @listens Player#durationchange\n   */\n  ;\n\n  _proto.updateContent = function updateContent(event) {\n    if (typeof this.player_.duration() !== 'number') {\n      return;\n    } // @deprecated We should only use remainingTimeDisplay\n    // as of video.js 7\n\n\n    if (this.player_.remainingTimeDisplay) {\n      this.updateFormattedTime_(this.player_.remainingTimeDisplay());\n    } else {\n      this.updateFormattedTime_(this.player_.remainingTime());\n    }\n  }\n  /**\n   * When the player fires ended there should be no time left. Sadly\n   * this is not always the case, lets make it seem like that is the case\n   * for users.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `ended` event that caused this to run.\n   *\n   * @listens Player#ended\n   */\n  ;\n\n  _proto.handleEnded = function handleEnded(event) {\n    if (!this.player_.duration()) {\n      return;\n    }\n\n    this.updateFormattedTime_(0);\n  };\n\n  return RemainingTimeDisplay;\n}(TimeDisplay);\n/**\n * The text that is added to the `RemainingTimeDisplay` for screen reader users.\n *\n * @type {string}\n * @private\n */\n\n\nRemainingTimeDisplay.prototype.labelText_ = 'Remaining Time';\n/**\n * The text that should display over the `RemainingTimeDisplay`s controls. Added to for localization.\n *\n * @type {string}\n * @private\n *\n * @deprecated in v7; controlText_ is not used in non-active display Components\n */\n\nRemainingTimeDisplay.prototype.controlText_ = 'Remaining Time';\nComponent.registerComponent('RemainingTimeDisplay', RemainingTimeDisplay);\n\n/**\n * Displays the live indicator when duration is Infinity.\n *\n * @extends Component\n */\n\nvar LiveDisplay =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(LiveDisplay, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function LiveDisplay(player, options) {\n    var _this;\n\n    _this = _Component.call(this, player, options) || this;\n\n    _this.updateShowing();\n\n    _this.on(_this.player(), 'durationchange', _this.updateShowing);\n\n    return _this;\n  }\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  var _proto = LiveDisplay.prototype;\n\n  _proto.createEl = function createEl$$1() {\n    var el = _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-live-control vjs-control'\n    });\n\n    this.contentEl_ = createEl('div', {\n      className: 'vjs-live-display',\n      innerHTML: \"<span class=\\\"vjs-control-text\\\">\" + this.localize('Stream Type') + \"\\xA0</span>\" + this.localize('LIVE')\n    }, {\n      'aria-live': 'off'\n    });\n    el.appendChild(this.contentEl_);\n    return el;\n  };\n\n  _proto.dispose = function dispose() {\n    this.contentEl_ = null;\n\n    _Component.prototype.dispose.call(this);\n  }\n  /**\n   * Check the duration to see if the LiveDisplay should be showing or not. Then show/hide\n   * it accordingly\n   *\n   * @param {EventTarget~Event} [event]\n   *        The {@link Player#durationchange} event that caused this function to run.\n   *\n   * @listens Player#durationchange\n   */\n  ;\n\n  _proto.updateShowing = function updateShowing(event) {\n    if (this.player().duration() === Infinity) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  };\n\n  return LiveDisplay;\n}(Component);\n\nComponent.registerComponent('LiveDisplay', LiveDisplay);\n\n/**\n * Displays the live indicator when duration is Infinity.\n *\n * @extends Component\n */\n\nvar SeekToLive =\n/*#__PURE__*/\nfunction (_Button) {\n  _inheritsLoose(SeekToLive, _Button);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function SeekToLive(player, options) {\n    var _this;\n\n    _this = _Button.call(this, player, options) || this;\n\n    _this.updateLiveEdgeStatus();\n\n    if (_this.player_.liveTracker) {\n      _this.on(_this.player_.liveTracker, 'liveedgechange', _this.updateLiveEdgeStatus);\n    }\n\n    return _this;\n  }\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  var _proto = SeekToLive.prototype;\n\n  _proto.createEl = function createEl$$1() {\n    var el = _Button.prototype.createEl.call(this, 'button', {\n      className: 'vjs-seek-to-live-control vjs-control'\n    });\n\n    this.textEl_ = createEl('span', {\n      className: 'vjs-seek-to-live-text',\n      innerHTML: this.localize('LIVE')\n    }, {\n      'aria-hidden': 'true'\n    });\n    el.appendChild(this.textEl_);\n    return el;\n  }\n  /**\n   * Update the state of this button if we are at the live edge\n   * or not\n   */\n  ;\n\n  _proto.updateLiveEdgeStatus = function updateLiveEdgeStatus(e) {\n    // default to live edge\n    if (!this.player_.liveTracker || this.player_.liveTracker.atLiveEdge()) {\n      this.setAttribute('aria-disabled', true);\n      this.addClass('vjs-at-live-edge');\n      this.controlText('Seek to live, currently playing live');\n    } else {\n      this.setAttribute('aria-disabled', false);\n      this.removeClass('vjs-at-live-edge');\n      this.controlText('Seek to live, currently behind live');\n    }\n  }\n  /**\n   * On click bring us as near to the live point as possible.\n   * This requires that we wait for the next `live-seekable-change`\n   * event which will happen every segment length seconds.\n   */\n  ;\n\n  _proto.handleClick = function handleClick() {\n    this.player_.liveTracker.seekToLiveEdge();\n  }\n  /**\n   * Dispose of the element and stop tracking\n   */\n  ;\n\n  _proto.dispose = function dispose() {\n    if (this.player_.liveTracker) {\n      this.off(this.player_.liveTracker, 'liveedgechange', this.updateLiveEdgeStatus);\n    }\n\n    this.textEl_ = null;\n\n    _Button.prototype.dispose.call(this);\n  };\n\n  return SeekToLive;\n}(Button);\n\nSeekToLive.prototype.controlText_ = 'Seek to live, currently playing live';\nComponent.registerComponent('SeekToLive', SeekToLive);\n\n/**\n * The base functionality for a slider. Can be vertical or horizontal.\n * For instance the volume bar or the seek bar on a video is a slider.\n *\n * @extends Component\n */\n\nvar Slider =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Slider, _Component);\n\n  /**\n  * Create an instance of this class\n  *\n  * @param {Player} player\n  *        The `Player` that this class should be attached to.\n  *\n  * @param {Object} [options]\n  *        The key/value store of player options.\n  */\n  function Slider(player, options) {\n    var _this;\n\n    _this = _Component.call(this, player, options) || this; // Set property names to bar to match with the child Slider class is looking for\n\n    _this.bar = _this.getChild(_this.options_.barName); // Set a horizontal or vertical class on the slider depending on the slider type\n\n    _this.vertical(!!_this.options_.vertical);\n\n    _this.enable();\n\n    return _this;\n  }\n  /**\n   * Are controls are currently enabled for this slider or not.\n   *\n   * @return {boolean}\n   *         true if controls are enabled, false otherwise\n   */\n\n\n  var _proto = Slider.prototype;\n\n  _proto.enabled = function enabled() {\n    return this.enabled_;\n  }\n  /**\n   * Enable controls for this slider if they are disabled\n   */\n  ;\n\n  _proto.enable = function enable() {\n    if (this.enabled()) {\n      return;\n    }\n\n    this.on('mousedown', this.handleMouseDown);\n    this.on('touchstart', this.handleMouseDown);\n    this.on('focus', this.handleFocus);\n    this.on('blur', this.handleBlur);\n    this.on('click', this.handleClick);\n    this.on(this.player_, 'controlsvisible', this.update);\n\n    if (this.playerEvent) {\n      this.on(this.player_, this.playerEvent, this.update);\n    }\n\n    this.removeClass('disabled');\n    this.setAttribute('tabindex', 0);\n    this.enabled_ = true;\n  }\n  /**\n   * Disable controls for this slider if they are enabled\n   */\n  ;\n\n  _proto.disable = function disable() {\n    if (!this.enabled()) {\n      return;\n    }\n\n    var doc = this.bar.el_.ownerDocument;\n    this.off('mousedown', this.handleMouseDown);\n    this.off('touchstart', this.handleMouseDown);\n    this.off('focus', this.handleFocus);\n    this.off('blur', this.handleBlur);\n    this.off('click', this.handleClick);\n    this.off(this.player_, 'controlsvisible', this.update);\n    this.off(doc, 'mousemove', this.handleMouseMove);\n    this.off(doc, 'mouseup', this.handleMouseUp);\n    this.off(doc, 'touchmove', this.handleMouseMove);\n    this.off(doc, 'touchend', this.handleMouseUp);\n    this.removeAttribute('tabindex');\n    this.addClass('disabled');\n\n    if (this.playerEvent) {\n      this.off(this.player_, this.playerEvent, this.update);\n    }\n\n    this.enabled_ = false;\n  }\n  /**\n   * Create the `Slider`s DOM element.\n   *\n   * @param {string} type\n   *        Type of element to create.\n   *\n   * @param {Object} [props={}]\n   *        List of properties in Object form.\n   *\n   * @param {Object} [attributes={}]\n   *        list of attributes in Object form.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  ;\n\n  _proto.createEl = function createEl$$1(type, props, attributes) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (attributes === void 0) {\n      attributes = {};\n    }\n\n    // Add the slider element class to all sub classes\n    props.className = props.className + ' vjs-slider';\n    props = assign({\n      tabIndex: 0\n    }, props);\n    attributes = assign({\n      'role': 'slider',\n      'aria-valuenow': 0,\n      'aria-valuemin': 0,\n      'aria-valuemax': 100,\n      'tabIndex': 0\n    }, attributes);\n    return _Component.prototype.createEl.call(this, type, props, attributes);\n  }\n  /**\n   * Handle `mousedown` or `touchstart` events on the `Slider`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousedown\n   * @listens touchstart\n   * @fires Slider#slideractive\n   */\n  ;\n\n  _proto.handleMouseDown = function handleMouseDown(event) {\n    var doc = this.bar.el_.ownerDocument;\n\n    if (event.type === 'mousedown') {\n      event.preventDefault();\n    } // Do not call preventDefault() on touchstart in Chrome\n    // to avoid console warnings. Use a 'touch-action: none' style\n    // instead to prevent unintented scrolling.\n    // https://developers.google.com/web/updates/2017/01/scrolling-intervention\n\n\n    if (event.type === 'touchstart' && !IS_CHROME) {\n      event.preventDefault();\n    }\n\n    blockTextSelection();\n    this.addClass('vjs-sliding');\n    /**\n     * Triggered when the slider is in an active state\n     *\n     * @event Slider#slideractive\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('slideractive');\n    this.on(doc, 'mousemove', this.handleMouseMove);\n    this.on(doc, 'mouseup', this.handleMouseUp);\n    this.on(doc, 'touchmove', this.handleMouseMove);\n    this.on(doc, 'touchend', this.handleMouseUp);\n    this.handleMouseMove(event);\n  }\n  /**\n   * Handle the `mousemove`, `touchmove`, and `mousedown` events on this `Slider`.\n   * The `mousemove` and `touchmove` events will only only trigger this function during\n   * `mousedown` and `touchstart`. This is due to {@link Slider#handleMouseDown} and\n   * {@link Slider#handleMouseUp}.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown`, `mousemove`, `touchstart`, or `touchmove` event that triggered\n   *        this function\n   *\n   * @listens mousemove\n   * @listens touchmove\n   */\n  ;\n\n  _proto.handleMouseMove = function handleMouseMove(event) {}\n  /**\n   * Handle `mouseup` or `touchend` events on the `Slider`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mouseup` or `touchend` event that triggered this function.\n   *\n   * @listens touchend\n   * @listens mouseup\n   * @fires Slider#sliderinactive\n   */\n  ;\n\n  _proto.handleMouseUp = function handleMouseUp() {\n    var doc = this.bar.el_.ownerDocument;\n    unblockTextSelection();\n    this.removeClass('vjs-sliding');\n    /**\n     * Triggered when the slider is no longer in an active state.\n     *\n     * @event Slider#sliderinactive\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('sliderinactive');\n    this.off(doc, 'mousemove', this.handleMouseMove);\n    this.off(doc, 'mouseup', this.handleMouseUp);\n    this.off(doc, 'touchmove', this.handleMouseMove);\n    this.off(doc, 'touchend', this.handleMouseUp);\n    this.update();\n  }\n  /**\n   * Update the progress bar of the `Slider`.\n   *\n   * @return {number}\n   *          The percentage of progress the progress bar represents as a\n   *          number from 0 to 1.\n   */\n  ;\n\n  _proto.update = function update() {\n    // In VolumeBar init we have a setTimeout for update that pops and update\n    // to the end of the execution stack. The player is destroyed before then\n    // update will cause an error\n    if (!this.el_) {\n      return;\n    } // If scrubbing, we could use a cached value to make the handle keep up\n    // with the user's mouse. On HTML5 browsers scrubbing is really smooth, but\n    // some flash players are slow, so we might want to utilize this later.\n    // var progress =  (this.player_.scrubbing()) ? this.player_.getCache().currentTime / this.player_.duration() : this.player_.currentTime() / this.player_.duration();\n\n\n    var progress = this.getPercent();\n    var bar = this.bar; // If there's no bar...\n\n    if (!bar) {\n      return;\n    } // Protect against no duration and other division issues\n\n\n    if (typeof progress !== 'number' || progress !== progress || progress < 0 || progress === Infinity) {\n      progress = 0;\n    } // Convert to a percentage for setting\n\n\n    var percentage = (progress * 100).toFixed(2) + '%';\n    var style = bar.el().style; // Set the new bar width or height\n\n    if (this.vertical()) {\n      style.height = percentage;\n    } else {\n      style.width = percentage;\n    }\n\n    return progress;\n  }\n  /**\n   * Calculate distance for slider\n   *\n   * @param {EventTarget~Event} event\n   *        The event that caused this function to run.\n   *\n   * @return {number}\n   *         The current position of the Slider.\n   *         - position.x for vertical `Slider`s\n   *         - position.y for horizontal `Slider`s\n   */\n  ;\n\n  _proto.calculateDistance = function calculateDistance(event) {\n    var position = getPointerPosition(this.el_, event);\n\n    if (this.vertical()) {\n      return position.y;\n    }\n\n    return position.x;\n  }\n  /**\n   * Handle a `focus` event on this `Slider`.\n   *\n   * @param {EventTarget~Event} event\n   *        The `focus` event that caused this function to run.\n   *\n   * @listens focus\n   */\n  ;\n\n  _proto.handleFocus = function handleFocus() {\n    this.on(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);\n  }\n  /**\n   * Handle a `keydown` event on the `Slider`. Watches for left, rigth, up, and down\n   * arrow keys. This function will only be called when the slider has focus. See\n   * {@link Slider#handleFocus} and {@link Slider#handleBlur}.\n   *\n   * @param {EventTarget~Event} event\n   *        the `keydown` event that caused this function to run.\n   *\n   * @listens keydown\n   */\n  ;\n\n  _proto.handleKeyPress = function handleKeyPress(event) {\n    // Left and Down Arrows\n    if (keycode.isEventKey(event, 'Left') || keycode.isEventKey(event, 'Down')) {\n      event.preventDefault();\n      this.stepBack(); // Up and Right Arrows\n    } else if (keycode.isEventKey(event, 'Right') || keycode.isEventKey(event, 'Up')) {\n      event.preventDefault();\n      this.stepForward();\n    } else {\n      // Pass keypress handling up for unsupported keys\n      _Component.prototype.handleKeyPress.call(this, event);\n    }\n  }\n  /**\n   * Handle a `blur` event on this `Slider`.\n   *\n   * @param {EventTarget~Event} event\n   *        The `blur` event that caused this function to run.\n   *\n   * @listens blur\n   */\n  ;\n\n  _proto.handleBlur = function handleBlur() {\n    this.off(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);\n  }\n  /**\n   * Listener for click events on slider, used to prevent clicks\n   *   from bubbling up to parent elements like button menus.\n   *\n   * @param {Object} event\n   *        Event that caused this object to run\n   */\n  ;\n\n  _proto.handleClick = function handleClick(event) {\n    event.stopImmediatePropagation();\n    event.preventDefault();\n  }\n  /**\n   * Get/set if slider is horizontal for vertical\n   *\n   * @param {boolean} [bool]\n   *        - true if slider is vertical,\n   *        - false is horizontal\n   *\n   * @return {boolean}\n   *         - true if slider is vertical, and getting\n   *         - false if the slider is horizontal, and getting\n   */\n  ;\n\n  _proto.vertical = function vertical(bool) {\n    if (bool === undefined) {\n      return this.vertical_ || false;\n    }\n\n    this.vertical_ = !!bool;\n\n    if (this.vertical_) {\n      this.addClass('vjs-slider-vertical');\n    } else {\n      this.addClass('vjs-slider-horizontal');\n    }\n  };\n\n  return Slider;\n}(Component);\n\nComponent.registerComponent('Slider', Slider);\n\n/**\n * Shows loading progress\n *\n * @extends Component\n */\n\nvar LoadProgressBar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(LoadProgressBar, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function LoadProgressBar(player, options) {\n    var _this;\n\n    _this = _Component.call(this, player, options) || this;\n    _this.partEls_ = [];\n\n    _this.on(player, 'progress', _this.update);\n\n    return _this;\n  }\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  var _proto = LoadProgressBar.prototype;\n\n  _proto.createEl = function createEl$$1() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-load-progress',\n      innerHTML: \"<span class=\\\"vjs-control-text\\\"><span>\" + this.localize('Loaded') + \"</span>: <span class=\\\"vjs-control-text-loaded-percentage\\\">0%</span></span>\"\n    });\n  };\n\n  _proto.dispose = function dispose() {\n    this.partEls_ = null;\n\n    _Component.prototype.dispose.call(this);\n  }\n  /**\n   * Update progress bar\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `progress` event that caused this function to run.\n   *\n   * @listens Player#progress\n   */\n  ;\n\n  _proto.update = function update(event) {\n    var liveTracker = this.player_.liveTracker;\n    var buffered = this.player_.buffered();\n    var duration = liveTracker && liveTracker.isLive() ? liveTracker.seekableEnd() : this.player_.duration();\n    var bufferedEnd = this.player_.bufferedEnd();\n    var children = this.partEls_;\n    var controlTextPercentage = this.$('.vjs-control-text-loaded-percentage'); // get the percent width of a time compared to the total end\n\n    var percentify = function percentify(time, end, rounded) {\n      // no NaN\n      var percent = time / end || 0;\n      percent = (percent >= 1 ? 1 : percent) * 100;\n\n      if (rounded) {\n        percent = percent.toFixed(2);\n      }\n\n      return percent + '%';\n    }; // update the width of the progress bar\n\n\n    this.el_.style.width = percentify(bufferedEnd, duration); // update the control-text\n\n    textContent(controlTextPercentage, percentify(bufferedEnd, duration, true)); // add child elements to represent the individual buffered time ranges\n\n    for (var i = 0; i < buffered.length; i++) {\n      var start = buffered.start(i);\n      var end = buffered.end(i);\n      var part = children[i];\n\n      if (!part) {\n        part = this.el_.appendChild(createEl());\n        children[i] = part;\n      } // set the percent based on the width of the progress bar (bufferedEnd)\n\n\n      part.style.left = percentify(start, bufferedEnd);\n      part.style.width = percentify(end - start, bufferedEnd);\n    } // remove unused buffered range elements\n\n\n    for (var _i = children.length; _i > buffered.length; _i--) {\n      this.el_.removeChild(children[_i - 1]);\n    }\n\n    children.length = buffered.length;\n  };\n\n  return LoadProgressBar;\n}(Component);\n\nComponent.registerComponent('LoadProgressBar', LoadProgressBar);\n\n/**\n * Time tooltips display a time above the progress bar.\n *\n * @extends Component\n */\n\nvar TimeTooltip =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(TimeTooltip, _Component);\n\n  function TimeTooltip() {\n    return _Component.apply(this, arguments) || this;\n  }\n\n  var _proto = TimeTooltip.prototype;\n\n  /**\n   * Create the time tooltip DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  _proto.createEl = function createEl$$1() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-time-tooltip'\n    }, {\n      'aria-hidden': 'true'\n    });\n  }\n  /**\n   * Updates the position of the time tooltip relative to the `SeekBar`.\n   *\n   * @param {Object} seekBarRect\n   *        The `ClientRect` for the {@link SeekBar} element.\n   *\n   * @param {number} seekBarPoint\n   *        A number from 0 to 1, representing a horizontal reference point\n   *        from the left edge of the {@link SeekBar}\n   */\n  ;\n\n  _proto.update = function update(seekBarRect, seekBarPoint, content) {\n    var tooltipRect = getBoundingClientRect(this.el_);\n    var playerRect = getBoundingClientRect(this.player_.el());\n    var seekBarPointPx = seekBarRect.width * seekBarPoint; // do nothing if either rect isn't available\n    // for example, if the player isn't in the DOM for testing\n\n    if (!playerRect || !tooltipRect) {\n      return;\n    } // This is the space left of the `seekBarPoint` available within the bounds\n    // of the player. We calculate any gap between the left edge of the player\n    // and the left edge of the `SeekBar` and add the number of pixels in the\n    // `SeekBar` before hitting the `seekBarPoint`\n\n\n    var spaceLeftOfPoint = seekBarRect.left - playerRect.left + seekBarPointPx; // This is the space right of the `seekBarPoint` available within the bounds\n    // of the player. We calculate the number of pixels from the `seekBarPoint`\n    // to the right edge of the `SeekBar` and add to that any gap between the\n    // right edge of the `SeekBar` and the player.\n\n    var spaceRightOfPoint = seekBarRect.width - seekBarPointPx + (playerRect.right - seekBarRect.right); // This is the number of pixels by which the tooltip will need to be pulled\n    // further to the right to center it over the `seekBarPoint`.\n\n    var pullTooltipBy = tooltipRect.width / 2; // Adjust the `pullTooltipBy` distance to the left or right depending on\n    // the results of the space calculations above.\n\n    if (spaceLeftOfPoint < pullTooltipBy) {\n      pullTooltipBy += pullTooltipBy - spaceLeftOfPoint;\n    } else if (spaceRightOfPoint < pullTooltipBy) {\n      pullTooltipBy = spaceRightOfPoint;\n    } // Due to the imprecision of decimal/ratio based calculations and varying\n    // rounding behaviors, there are cases where the spacing adjustment is off\n    // by a pixel or two. This adds insurance to these calculations.\n\n\n    if (pullTooltipBy < 0) {\n      pullTooltipBy = 0;\n    } else if (pullTooltipBy > tooltipRect.width) {\n      pullTooltipBy = tooltipRect.width;\n    }\n\n    this.el_.style.right = \"-\" + pullTooltipBy + \"px\";\n    textContent(this.el_, content);\n  }\n  /**\n   * Updates the position of the time tooltip relative to the `SeekBar`.\n   *\n   * @param {Object} seekBarRect\n   *        The `ClientRect` for the {@link SeekBar} element.\n   *\n   * @param {number} seekBarPoint\n   *        A number from 0 to 1, representing a horizontal reference point\n   *        from the left edge of the {@link SeekBar}\n   *\n   * @param {number} time\n   *        The time to update the tooltip to, not used during live playback\n   *\n   * @param {Function} cb\n   *        A function that will be called during the request animation frame\n   *        for tooltips that need to do additional animations from the default\n   */\n  ;\n\n  _proto.updateTime = function updateTime(seekBarRect, seekBarPoint, time, cb) {\n    var _this = this;\n\n    // If there is an existing rAF ID, cancel it so we don't over-queue.\n    if (this.rafId_) {\n      this.cancelAnimationFrame(this.rafId_);\n    }\n\n    this.rafId_ = this.requestAnimationFrame(function () {\n      var content;\n\n      var duration = _this.player_.duration();\n\n      if (_this.player_.liveTracker && _this.player_.liveTracker.isLive()) {\n        var liveWindow = _this.player_.liveTracker.liveWindow();\n\n        var secondsBehind = liveWindow - seekBarPoint * liveWindow;\n        content = (secondsBehind < 1 ? '' : '-') + formatTime(secondsBehind, liveWindow);\n      } else {\n        content = formatTime(time, duration);\n      }\n\n      _this.update(seekBarRect, seekBarPoint, content);\n\n      if (cb) {\n        cb();\n      }\n    });\n  };\n\n  return TimeTooltip;\n}(Component);\n\nComponent.registerComponent('TimeTooltip', TimeTooltip);\n\n/**\n * Used by {@link SeekBar} to display media playback progress as part of the\n * {@link ProgressControl}.\n *\n * @extends Component\n */\n\nvar PlayProgressBar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(PlayProgressBar, _Component);\n\n  function PlayProgressBar() {\n    return _Component.apply(this, arguments) || this;\n  }\n\n  var _proto = PlayProgressBar.prototype;\n\n  /**\n   * Create the the DOM element for this class.\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  _proto.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-play-progress vjs-slider-bar'\n    }, {\n      'aria-hidden': 'true'\n    });\n  }\n  /**\n   * Enqueues updates to its own DOM as well as the DOM of its\n   * {@link TimeTooltip} child.\n   *\n   * @param {Object} seekBarRect\n   *        The `ClientRect` for the {@link SeekBar} element.\n   *\n   * @param {number} seekBarPoint\n   *        A number from 0 to 1, representing a horizontal reference point\n   *        from the left edge of the {@link SeekBar}\n   */\n  ;\n\n  _proto.update = function update(seekBarRect, seekBarPoint) {\n    var timeTooltip = this.getChild('timeTooltip');\n\n    if (!timeTooltip) {\n      return;\n    }\n\n    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();\n    timeTooltip.updateTime(seekBarRect, seekBarPoint, time);\n  };\n\n  return PlayProgressBar;\n}(Component);\n/**\n * Default options for {@link PlayProgressBar}.\n *\n * @type {Object}\n * @private\n */\n\n\nPlayProgressBar.prototype.options_ = {\n  children: []\n}; // Time tooltips should not be added to a player on mobile devices\n\nif (!IS_IOS && !IS_ANDROID) {\n  PlayProgressBar.prototype.options_.children.push('timeTooltip');\n}\n\nComponent.registerComponent('PlayProgressBar', PlayProgressBar);\n\n/**\n * The {@link MouseTimeDisplay} component tracks mouse movement over the\n * {@link ProgressControl}. It displays an indicator and a {@link TimeTooltip}\n * indicating the time which is represented by a given point in the\n * {@link ProgressControl}.\n *\n * @extends Component\n */\n\nvar MouseTimeDisplay =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(MouseTimeDisplay, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The {@link Player} that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function MouseTimeDisplay(player, options) {\n    var _this;\n\n    _this = _Component.call(this, player, options) || this;\n    _this.update = throttle(bind(_assertThisInitialized(_assertThisInitialized(_this)), _this.update), 25);\n    return _this;\n  }\n  /**\n   * Create the DOM element for this class.\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  var _proto = MouseTimeDisplay.prototype;\n\n  _proto.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-mouse-display'\n    });\n  }\n  /**\n   * Enqueues updates to its own DOM as well as the DOM of its\n   * {@link TimeTooltip} child.\n   *\n   * @param {Object} seekBarRect\n   *        The `ClientRect` for the {@link SeekBar} element.\n   *\n   * @param {number} seekBarPoint\n   *        A number from 0 to 1, representing a horizontal reference point\n   *        from the left edge of the {@link SeekBar}\n   */\n  ;\n\n  _proto.update = function update(seekBarRect, seekBarPoint) {\n    var _this2 = this;\n\n    var time = seekBarPoint * this.player_.duration();\n    this.getChild('timeTooltip').updateTime(seekBarRect, seekBarPoint, time, function () {\n      _this2.el_.style.left = seekBarRect.width * seekBarPoint + \"px\";\n    });\n  };\n\n  return MouseTimeDisplay;\n}(Component);\n/**\n * Default options for `MouseTimeDisplay`\n *\n * @type {Object}\n * @private\n */\n\n\nMouseTimeDisplay.prototype.options_ = {\n  children: ['timeTooltip']\n};\nComponent.registerComponent('MouseTimeDisplay', MouseTimeDisplay);\n\nvar STEP_SECONDS = 5; // The multiplier of STEP_SECONDS that PgUp/PgDown move the timeline.\n\nvar PAGE_KEY_MULTIPLIER = 12; // The interval at which the bar should update as it progresses.\n\nvar UPDATE_REFRESH_INTERVAL = 30;\n/**\n * Seek bar and container for the progress bars. Uses {@link PlayProgressBar}\n * as its `bar`.\n *\n * @extends Slider\n */\n\nvar SeekBar =\n/*#__PURE__*/\nfunction (_Slider) {\n  _inheritsLoose(SeekBar, _Slider);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function SeekBar(player, options) {\n    var _this;\n\n    _this = _Slider.call(this, player, options) || this;\n\n    _this.setEventHandlers_();\n\n    return _this;\n  }\n  /**\n   * Sets the event handlers\n   *\n   * @private\n   */\n\n\n  var _proto = SeekBar.prototype;\n\n  _proto.setEventHandlers_ = function setEventHandlers_() {\n    this.update = throttle(bind(this, this.update), UPDATE_REFRESH_INTERVAL);\n    this.on(this.player_, 'timeupdate', this.update);\n    this.on(this.player_, 'ended', this.handleEnded);\n    this.on(this.player_, 'durationchange', this.update);\n\n    if (this.player_.liveTracker) {\n      this.on(this.player_.liveTracker, 'liveedgechange', this.update);\n    } // when playing, let's ensure we smoothly update the play progress bar\n    // via an interval\n\n\n    this.updateInterval = null;\n    this.on(this.player_, ['playing'], this.enableInterval_);\n    this.on(this.player_, ['ended', 'pause', 'waiting'], this.disableInterval_); // we don't need to update the play progress if the document is hidden,\n    // also, this causes the CPU to spike and eventually crash the page on IE11.\n\n    if ('hidden' in document && 'visibilityState' in document) {\n      this.on(document, 'visibilitychange', this.toggleVisibility_);\n    }\n  };\n\n  _proto.toggleVisibility_ = function toggleVisibility_(e) {\n    if (document.hidden) {\n      this.disableInterval_(e);\n    } else {\n      this.enableInterval_(); // we just switched back to the page and someone may be looking, so, update ASAP\n\n      this.requestAnimationFrame(this.update);\n    }\n  };\n\n  _proto.enableInterval_ = function enableInterval_() {\n    var _this2 = this;\n\n    this.clearInterval(this.updateInterval);\n    this.updateInterval = this.setInterval(function () {\n      _this2.requestAnimationFrame(_this2.update);\n    }, UPDATE_REFRESH_INTERVAL);\n  };\n\n  _proto.disableInterval_ = function disableInterval_(e) {\n    if (this.player_.liveTracker && this.player_.liveTracker.isLive() && e.type !== 'ended') {\n      return;\n    }\n\n    this.clearInterval(this.updateInterval);\n  }\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  ;\n\n  _proto.createEl = function createEl$$1() {\n    return _Slider.prototype.createEl.call(this, 'div', {\n      className: 'vjs-progress-holder'\n    }, {\n      'aria-label': this.localize('Progress Bar')\n    });\n  }\n  /**\n   * This function updates the play progress bar and accessibility\n   * attributes to whatever is passed in.\n   *\n   * @param {number} currentTime\n   *        The currentTime value that should be used for accessibility\n   *\n   * @param {number} percent\n   *        The percentage as a decimal that the bar should be filled from 0-1.\n   *\n   * @private\n   */\n  ;\n\n  _proto.update_ = function update_(currentTime, percent) {\n    var liveTracker = this.player_.liveTracker;\n    var duration = this.player_.duration();\n\n    if (liveTracker && liveTracker.isLive()) {\n      duration = this.player_.liveTracker.liveCurrentTime();\n    } // machine readable value of progress bar (percentage complete)\n\n\n    this.el_.setAttribute('aria-valuenow', (percent * 100).toFixed(2)); // human readable value of progress bar (time complete)\n\n    this.el_.setAttribute('aria-valuetext', this.localize('progress bar timing: currentTime={1} duration={2}', [formatTime(currentTime, duration), formatTime(duration, duration)], '{1} of {2}')); // Update the `PlayProgressBar`.\n\n    if (this.bar) {\n      this.bar.update(getBoundingClientRect(this.el_), percent);\n    }\n  }\n  /**\n   * Update the seek bar's UI.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `timeupdate` or `ended` event that caused this to run.\n   *\n   * @listens Player#timeupdate\n   *\n   * @return {number}\n   *          The current percent at a number from 0-1\n   */\n  ;\n\n  _proto.update = function update(event) {\n    // if the offsetParent is null, then this element is hidden, in which case\n    // we don't need to update it.\n    if (this.el().offsetParent === null) {\n      return;\n    }\n\n    var percent = _Slider.prototype.update.call(this);\n\n    this.update_(this.getCurrentTime_(), percent);\n    return percent;\n  }\n  /**\n   * Get the value of current time but allows for smooth scrubbing,\n   * when player can't keep up.\n   *\n   * @return {number}\n   *         The current time value to display\n   *\n   * @private\n   */\n  ;\n\n  _proto.getCurrentTime_ = function getCurrentTime_() {\n    return this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();\n  }\n  /**\n   * We want the seek bar to be full on ended\n   * no matter what the actual internal values are. so we force it.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `timeupdate` or `ended` event that caused this to run.\n   *\n   * @listens Player#ended\n   */\n  ;\n\n  _proto.handleEnded = function handleEnded(event) {\n    this.update_(this.player_.duration(), 1);\n  }\n  /**\n   * Get the percentage of media played so far.\n   *\n   * @return {number}\n   *         The percentage of media played so far (0 to 1).\n   */\n  ;\n\n  _proto.getPercent = function getPercent() {\n    var currentTime = this.getCurrentTime_();\n    var percent;\n    var liveTracker = this.player_.liveTracker;\n\n    if (liveTracker && liveTracker.isLive()) {\n      percent = (currentTime - liveTracker.seekableStart()) / liveTracker.liveWindow(); // prevent the percent from changing at the live edge\n\n      if (liveTracker.atLiveEdge()) {\n        percent = 1;\n      }\n    } else {\n      percent = currentTime / this.player_.duration();\n    }\n\n    return percent >= 1 ? 1 : percent || 0;\n  }\n  /**\n   * Handle mouse down on seek bar\n   *\n   * @param {EventTarget~Event} event\n   *        The `mousedown` event that caused this to run.\n   *\n   * @listens mousedown\n   */\n  ;\n\n  _proto.handleMouseDown = function handleMouseDown(event) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    } // Stop event propagation to prevent double fire in progress-control.js\n\n\n    event.stopPropagation();\n    this.player_.scrubbing(true);\n    this.videoWasPlaying = !this.player_.paused();\n    this.player_.pause();\n\n    _Slider.prototype.handleMouseDown.call(this, event);\n  }\n  /**\n   * Handle mouse move on seek bar\n   *\n   * @param {EventTarget~Event} event\n   *        The `mousemove` event that caused this to run.\n   *\n   * @listens mousemove\n   */\n  ;\n\n  _proto.handleMouseMove = function handleMouseMove(event) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    }\n\n    var newTime;\n    var distance = this.calculateDistance(event);\n    var liveTracker = this.player_.liveTracker;\n\n    if (!liveTracker || !liveTracker.isLive()) {\n      newTime = distance * this.player_.duration(); // Don't let video end while scrubbing.\n\n      if (newTime === this.player_.duration()) {\n        newTime = newTime - 0.1;\n      }\n    } else {\n      var seekableStart = liveTracker.seekableStart();\n      var seekableEnd = liveTracker.liveCurrentTime();\n      newTime = seekableStart + distance * liveTracker.liveWindow(); // Don't let video end while scrubbing.\n\n      if (newTime >= seekableEnd) {\n        newTime = seekableEnd;\n      } // Compensate for precision differences so that currentTime is not less\n      // than seekable start\n\n\n      if (newTime <= seekableStart) {\n        newTime = seekableStart + 0.1;\n      } // On android seekableEnd can be Infinity sometimes,\n      // this will cause newTime to be Infinity, which is\n      // not a valid currentTime.\n\n\n      if (newTime === Infinity) {\n        return;\n      }\n    } // Set new time (tell player to seek to new time)\n\n\n    this.player_.currentTime(newTime);\n  };\n\n  _proto.enable = function enable() {\n    _Slider.prototype.enable.call(this);\n\n    var mouseTimeDisplay = this.getChild('mouseTimeDisplay');\n\n    if (!mouseTimeDisplay) {\n      return;\n    }\n\n    mouseTimeDisplay.show();\n  };\n\n  _proto.disable = function disable() {\n    _Slider.prototype.disable.call(this);\n\n    var mouseTimeDisplay = this.getChild('mouseTimeDisplay');\n\n    if (!mouseTimeDisplay) {\n      return;\n    }\n\n    mouseTimeDisplay.hide();\n  }\n  /**\n   * Handle mouse up on seek bar\n   *\n   * @param {EventTarget~Event} event\n   *        The `mouseup` event that caused this to run.\n   *\n   * @listens mouseup\n   */\n  ;\n\n  _proto.handleMouseUp = function handleMouseUp(event) {\n    _Slider.prototype.handleMouseUp.call(this, event); // Stop event propagation to prevent double fire in progress-control.js\n\n\n    if (event) {\n      event.stopPropagation();\n    }\n\n    this.player_.scrubbing(false);\n    /**\n     * Trigger timeupdate because we're done seeking and the time has changed.\n     * This is particularly useful for if the player is paused to time the time displays.\n     *\n     * @event Tech#timeupdate\n     * @type {EventTarget~Event}\n     */\n\n    this.player_.trigger({\n      type: 'timeupdate',\n      target: this,\n      manuallyTriggered: true\n    });\n\n    if (this.videoWasPlaying) {\n      silencePromise(this.player_.play());\n    }\n  }\n  /**\n   * Move more quickly fast forward for keyboard-only users\n   */\n  ;\n\n  _proto.stepForward = function stepForward() {\n    this.player_.currentTime(this.player_.currentTime() + STEP_SECONDS);\n  }\n  /**\n   * Move more quickly rewind for keyboard-only users\n   */\n  ;\n\n  _proto.stepBack = function stepBack() {\n    this.player_.currentTime(this.player_.currentTime() - STEP_SECONDS);\n  }\n  /**\n   * Toggles the playback state of the player\n   * This gets called when enter or space is used on the seekbar\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown` event that caused this function to be called\n   *\n   */\n  ;\n\n  _proto.handleAction = function handleAction(event) {\n    if (this.player_.paused()) {\n      this.player_.play();\n    } else {\n      this.player_.pause();\n    }\n  }\n  /**\n   * Called when this SeekBar has focus and a key gets pressed down.\n   * Supports the following keys:\n   *\n   *   Space or Enter key fire a click event\n   *   Home key moves to start of the timeline\n   *   End key moves to end of the timeline\n   *   Digit \"0\" through \"9\" keys move to 0%, 10% ... 80%, 90% of the timeline\n   *   PageDown key moves back a larger step than ArrowDown\n   *   PageUp key moves forward a large step\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n  ;\n\n  _proto.handleKeyPress = function handleKeyPress(event) {\n    if (keycode.isEventKey(event, 'Space') || keycode.isEventKey(event, 'Enter')) {\n      event.preventDefault();\n      this.handleAction(event);\n    } else if (keycode.isEventKey(event, 'Home')) {\n      event.preventDefault();\n      this.player_.currentTime(0);\n    } else if (keycode.isEventKey(event, 'End')) {\n      event.preventDefault();\n      this.player_.currentTime(this.player_.duration());\n    } else if (/^[0-9]$/.test(keycode(event))) {\n      event.preventDefault();\n      var gotoFraction = (keycode.codes[keycode(event)] - keycode.codes['0']) * 10.0 / 100.0;\n      this.player_.currentTime(this.player_.duration() * gotoFraction);\n    } else if (keycode.isEventKey(event, 'PgDn')) {\n      event.preventDefault();\n      this.player_.currentTime(this.player_.currentTime() - STEP_SECONDS * PAGE_KEY_MULTIPLIER);\n    } else if (keycode.isEventKey(event, 'PgUp')) {\n      event.preventDefault();\n      this.player_.currentTime(this.player_.currentTime() + STEP_SECONDS * PAGE_KEY_MULTIPLIER);\n    } else {\n      // Pass keypress handling up for unsupported keys\n      _Slider.prototype.handleKeyPress.call(this, event);\n    }\n  };\n\n  return SeekBar;\n}(Slider);\n/**\n * Default options for the `SeekBar`\n *\n * @type {Object}\n * @private\n */\n\n\nSeekBar.prototype.options_ = {\n  children: ['loadProgressBar', 'playProgressBar'],\n  barName: 'playProgressBar'\n}; // MouseTimeDisplay tooltips should not be added to a player on mobile devices\n\nif (!IS_IOS && !IS_ANDROID) {\n  SeekBar.prototype.options_.children.splice(1, 0, 'mouseTimeDisplay');\n}\n\nComponent.registerComponent('SeekBar', SeekBar);\n\n/**\n * The Progress Control component contains the seek bar, load progress,\n * and play progress.\n *\n * @extends Component\n */\n\nvar ProgressControl =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(ProgressControl, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function ProgressControl(player, options) {\n    var _this;\n\n    _this = _Component.call(this, player, options) || this;\n    _this.handleMouseMove = throttle(bind(_assertThisInitialized(_assertThisInitialized(_this)), _this.handleMouseMove), 25);\n    _this.throttledHandleMouseSeek = throttle(bind(_assertThisInitialized(_assertThisInitialized(_this)), _this.handleMouseSeek), 25);\n\n    _this.enable();\n\n    return _this;\n  }\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  var _proto = ProgressControl.prototype;\n\n  _proto.createEl = function createEl$$1() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-progress-control vjs-control'\n    });\n  }\n  /**\n   * When the mouse moves over the `ProgressControl`, the pointer position\n   * gets passed down to the `MouseTimeDisplay` component.\n   *\n   * @param {EventTarget~Event} event\n   *        The `mousemove` event that caused this function to run.\n   *\n   * @listen mousemove\n   */\n  ;\n\n  _proto.handleMouseMove = function handleMouseMove(event) {\n    var seekBar = this.getChild('seekBar');\n\n    if (seekBar) {\n      var mouseTimeDisplay = seekBar.getChild('mouseTimeDisplay');\n      var seekBarEl = seekBar.el();\n      var seekBarRect = getBoundingClientRect(seekBarEl);\n      var seekBarPoint = getPointerPosition(seekBarEl, event).x; // The default skin has a gap on either side of the `SeekBar`. This means\n      // that it's possible to trigger this behavior outside the boundaries of\n      // the `SeekBar`. This ensures we stay within it at all times.\n\n      if (seekBarPoint > 1) {\n        seekBarPoint = 1;\n      } else if (seekBarPoint < 0) {\n        seekBarPoint = 0;\n      }\n\n      if (mouseTimeDisplay) {\n        mouseTimeDisplay.update(seekBarRect, seekBarPoint);\n      }\n    }\n  }\n  /**\n   * A throttled version of the {@link ProgressControl#handleMouseSeek} listener.\n   *\n   * @method ProgressControl#throttledHandleMouseSeek\n   * @param {EventTarget~Event} event\n   *        The `mousemove` event that caused this function to run.\n   *\n   * @listen mousemove\n   * @listen touchmove\n   */\n\n  /**\n   * Handle `mousemove` or `touchmove` events on the `ProgressControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousemove\n   * @listens touchmove\n   */\n  ;\n\n  _proto.handleMouseSeek = function handleMouseSeek(event) {\n    var seekBar = this.getChild('seekBar');\n\n    if (seekBar) {\n      seekBar.handleMouseMove(event);\n    }\n  }\n  /**\n   * Are controls are currently enabled for this progress control.\n   *\n   * @return {boolean}\n   *         true if controls are enabled, false otherwise\n   */\n  ;\n\n  _proto.enabled = function enabled() {\n    return this.enabled_;\n  }\n  /**\n   * Disable all controls on the progress control and its children\n   */\n  ;\n\n  _proto.disable = function disable() {\n    this.children().forEach(function (child) {\n      return child.disable && child.disable();\n    });\n\n    if (!this.enabled()) {\n      return;\n    }\n\n    this.off(['mousedown', 'touchstart'], this.handleMouseDown);\n    this.off(this.el_, 'mousemove', this.handleMouseMove);\n    this.handleMouseUp();\n    this.addClass('disabled');\n    this.enabled_ = false;\n  }\n  /**\n   * Enable all controls on the progress control and its children\n   */\n  ;\n\n  _proto.enable = function enable() {\n    this.children().forEach(function (child) {\n      return child.enable && child.enable();\n    });\n\n    if (this.enabled()) {\n      return;\n    }\n\n    this.on(['mousedown', 'touchstart'], this.handleMouseDown);\n    this.on(this.el_, 'mousemove', this.handleMouseMove);\n    this.removeClass('disabled');\n    this.enabled_ = true;\n  }\n  /**\n   * Handle `mousedown` or `touchstart` events on the `ProgressControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousedown\n   * @listens touchstart\n   */\n  ;\n\n  _proto.handleMouseDown = function handleMouseDown(event) {\n    var doc = this.el_.ownerDocument;\n    var seekBar = this.getChild('seekBar');\n\n    if (seekBar) {\n      seekBar.handleMouseDown(event);\n    }\n\n    this.on(doc, 'mousemove', this.throttledHandleMouseSeek);\n    this.on(doc, 'touchmove', this.throttledHandleMouseSeek);\n    this.on(doc, 'mouseup', this.handleMouseUp);\n    this.on(doc, 'touchend', this.handleMouseUp);\n  }\n  /**\n   * Handle `mouseup` or `touchend` events on the `ProgressControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mouseup` or `touchend` event that triggered this function.\n   *\n   * @listens touchend\n   * @listens mouseup\n   */\n  ;\n\n  _proto.handleMouseUp = function handleMouseUp(event) {\n    var doc = this.el_.ownerDocument;\n    var seekBar = this.getChild('seekBar');\n\n    if (seekBar) {\n      seekBar.handleMouseUp(event);\n    }\n\n    this.off(doc, 'mousemove', this.throttledHandleMouseSeek);\n    this.off(doc, 'touchmove', this.throttledHandleMouseSeek);\n    this.off(doc, 'mouseup', this.handleMouseUp);\n    this.off(doc, 'touchend', this.handleMouseUp);\n  };\n\n  return ProgressControl;\n}(Component);\n/**\n * Default options for `ProgressControl`\n *\n * @type {Object}\n * @private\n */\n\n\nProgressControl.prototype.options_ = {\n  children: ['seekBar']\n};\nComponent.registerComponent('ProgressControl', ProgressControl);\n\n/**\n * Toggle fullscreen video\n *\n * @extends Button\n */\n\nvar FullscreenToggle =\n/*#__PURE__*/\nfunction (_Button) {\n  _inheritsLoose(FullscreenToggle, _Button);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function FullscreenToggle(player, options) {\n    var _this;\n\n    _this = _Button.call(this, player, options) || this;\n\n    _this.on(player, 'fullscreenchange', _this.handleFullscreenChange);\n\n    if (document[FullscreenApi.fullscreenEnabled] === false) {\n      _this.disable();\n    }\n\n    return _this;\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  var _proto = FullscreenToggle.prototype;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-fullscreen-control \" + _Button.prototype.buildCSSClass.call(this);\n  }\n  /**\n   * Handles fullscreenchange on the player and change control text accordingly.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The {@link Player#fullscreenchange} event that caused this function to be\n   *        called.\n   *\n   * @listens Player#fullscreenchange\n   */\n  ;\n\n  _proto.handleFullscreenChange = function handleFullscreenChange(event) {\n    if (this.player_.isFullscreen()) {\n      this.controlText('Non-Fullscreen');\n    } else {\n      this.controlText('Fullscreen');\n    }\n  }\n  /**\n   * This gets called when an `FullscreenToggle` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  ;\n\n  _proto.handleClick = function handleClick(event) {\n    if (!this.player_.isFullscreen()) {\n      this.player_.requestFullscreen();\n    } else {\n      this.player_.exitFullscreen();\n    }\n  };\n\n  return FullscreenToggle;\n}(Button);\n/**\n * The text that should display over the `FullscreenToggle`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nFullscreenToggle.prototype.controlText_ = 'Fullscreen';\nComponent.registerComponent('FullscreenToggle', FullscreenToggle);\n\n/**\n * Check if volume control is supported and if it isn't hide the\n * `Component` that was passed  using the `vjs-hidden` class.\n *\n * @param {Component} self\n *        The component that should be hidden if volume is unsupported\n *\n * @param {Player} player\n *        A reference to the player\n *\n * @private\n */\nvar checkVolumeSupport = function checkVolumeSupport(self, player) {\n  // hide volume controls when they're not supported by the current tech\n  if (player.tech_ && !player.tech_.featuresVolumeControl) {\n    self.addClass('vjs-hidden');\n  }\n\n  self.on(player, 'loadstart', function () {\n    if (!player.tech_.featuresVolumeControl) {\n      self.addClass('vjs-hidden');\n    } else {\n      self.removeClass('vjs-hidden');\n    }\n  });\n};\n\n/**\n * Shows volume level\n *\n * @extends Component\n */\n\nvar VolumeLevel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(VolumeLevel, _Component);\n\n  function VolumeLevel() {\n    return _Component.apply(this, arguments) || this;\n  }\n\n  var _proto = VolumeLevel.prototype;\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  _proto.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-volume-level',\n      innerHTML: '<span class=\"vjs-control-text\"></span>'\n    });\n  };\n\n  return VolumeLevel;\n}(Component);\n\nComponent.registerComponent('VolumeLevel', VolumeLevel);\n\n/**\n * The bar that contains the volume level and can be clicked on to adjust the level\n *\n * @extends Slider\n */\n\nvar VolumeBar =\n/*#__PURE__*/\nfunction (_Slider) {\n  _inheritsLoose(VolumeBar, _Slider);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function VolumeBar(player, options) {\n    var _this;\n\n    _this = _Slider.call(this, player, options) || this;\n\n    _this.on('slideractive', _this.updateLastVolume_);\n\n    _this.on(player, 'volumechange', _this.updateARIAAttributes);\n\n    player.ready(function () {\n      return _this.updateARIAAttributes();\n    });\n    return _this;\n  }\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  var _proto = VolumeBar.prototype;\n\n  _proto.createEl = function createEl$$1() {\n    return _Slider.prototype.createEl.call(this, 'div', {\n      className: 'vjs-volume-bar vjs-slider-bar'\n    }, {\n      'aria-label': this.localize('Volume Level'),\n      'aria-live': 'polite'\n    });\n  }\n  /**\n   * Handle mouse down on volume bar\n   *\n   * @param {EventTarget~Event} event\n   *        The `mousedown` event that caused this to run.\n   *\n   * @listens mousedown\n   */\n  ;\n\n  _proto.handleMouseDown = function handleMouseDown(event) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    }\n\n    _Slider.prototype.handleMouseDown.call(this, event);\n  }\n  /**\n   * Handle movement events on the {@link VolumeMenuButton}.\n   *\n   * @param {EventTarget~Event} event\n   *        The event that caused this function to run.\n   *\n   * @listens mousemove\n   */\n  ;\n\n  _proto.handleMouseMove = function handleMouseMove(event) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    }\n\n    this.checkMuted();\n    this.player_.volume(this.calculateDistance(event));\n  }\n  /**\n   * If the player is muted unmute it.\n   */\n  ;\n\n  _proto.checkMuted = function checkMuted() {\n    if (this.player_.muted()) {\n      this.player_.muted(false);\n    }\n  }\n  /**\n   * Get percent of volume level\n   *\n   * @return {number}\n   *         Volume level percent as a decimal number.\n   */\n  ;\n\n  _proto.getPercent = function getPercent() {\n    if (this.player_.muted()) {\n      return 0;\n    }\n\n    return this.player_.volume();\n  }\n  /**\n   * Increase volume level for keyboard users\n   */\n  ;\n\n  _proto.stepForward = function stepForward() {\n    this.checkMuted();\n    this.player_.volume(this.player_.volume() + 0.1);\n  }\n  /**\n   * Decrease volume level for keyboard users\n   */\n  ;\n\n  _proto.stepBack = function stepBack() {\n    this.checkMuted();\n    this.player_.volume(this.player_.volume() - 0.1);\n  }\n  /**\n   * Update ARIA accessibility attributes\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `volumechange` event that caused this function to run.\n   *\n   * @listens Player#volumechange\n   */\n  ;\n\n  _proto.updateARIAAttributes = function updateARIAAttributes(event) {\n    var ariaValue = this.player_.muted() ? 0 : this.volumeAsPercentage_();\n    this.el_.setAttribute('aria-valuenow', ariaValue);\n    this.el_.setAttribute('aria-valuetext', ariaValue + '%');\n  }\n  /**\n   * Returns the current value of the player volume as a percentage\n   *\n   * @private\n   */\n  ;\n\n  _proto.volumeAsPercentage_ = function volumeAsPercentage_() {\n    return Math.round(this.player_.volume() * 100);\n  }\n  /**\n   * When user starts dragging the VolumeBar, store the volume and listen for\n   * the end of the drag. When the drag ends, if the volume was set to zero,\n   * set lastVolume to the stored volume.\n   *\n   * @listens slideractive\n   * @private\n   */\n  ;\n\n  _proto.updateLastVolume_ = function updateLastVolume_() {\n    var _this2 = this;\n\n    var volumeBeforeDrag = this.player_.volume();\n    this.one('sliderinactive', function () {\n      if (_this2.player_.volume() === 0) {\n        _this2.player_.lastVolume_(volumeBeforeDrag);\n      }\n    });\n  };\n\n  return VolumeBar;\n}(Slider);\n/**\n * Default options for the `VolumeBar`\n *\n * @type {Object}\n * @private\n */\n\n\nVolumeBar.prototype.options_ = {\n  children: ['volumeLevel'],\n  barName: 'volumeLevel'\n};\n/**\n * Call the update event for this Slider when this event happens on the player.\n *\n * @type {string}\n */\n\nVolumeBar.prototype.playerEvent = 'volumechange';\nComponent.registerComponent('VolumeBar', VolumeBar);\n\n/**\n * The component for controlling the volume level\n *\n * @extends Component\n */\n\nvar VolumeControl =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(VolumeControl, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  function VolumeControl(player, options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    options.vertical = options.vertical || false; // Pass the vertical option down to the VolumeBar if\n    // the VolumeBar is turned on.\n\n    if (typeof options.volumeBar === 'undefined' || isPlain(options.volumeBar)) {\n      options.volumeBar = options.volumeBar || {};\n      options.volumeBar.vertical = options.vertical;\n    }\n\n    _this = _Component.call(this, player, options) || this; // hide this control if volume support is missing\n\n    checkVolumeSupport(_assertThisInitialized(_assertThisInitialized(_this)), player);\n    _this.throttledHandleMouseMove = throttle(bind(_assertThisInitialized(_assertThisInitialized(_this)), _this.handleMouseMove), 25);\n\n    _this.on('mousedown', _this.handleMouseDown);\n\n    _this.on('touchstart', _this.handleMouseDown); // while the slider is active (the mouse has been pressed down and\n    // is dragging) or in focus we do not want to hide the VolumeBar\n\n\n    _this.on(_this.volumeBar, ['focus', 'slideractive'], function () {\n      _this.volumeBar.addClass('vjs-slider-active');\n\n      _this.addClass('vjs-slider-active');\n\n      _this.trigger('slideractive');\n    });\n\n    _this.on(_this.volumeBar, ['blur', 'sliderinactive'], function () {\n      _this.volumeBar.removeClass('vjs-slider-active');\n\n      _this.removeClass('vjs-slider-active');\n\n      _this.trigger('sliderinactive');\n    });\n\n    return _this;\n  }\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  var _proto = VolumeControl.prototype;\n\n  _proto.createEl = function createEl() {\n    var orientationClass = 'vjs-volume-horizontal';\n\n    if (this.options_.vertical) {\n      orientationClass = 'vjs-volume-vertical';\n    }\n\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: \"vjs-volume-control vjs-control \" + orientationClass\n    });\n  }\n  /**\n   * Handle `mousedown` or `touchstart` events on the `VolumeControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousedown\n   * @listens touchstart\n   */\n  ;\n\n  _proto.handleMouseDown = function handleMouseDown(event) {\n    var doc = this.el_.ownerDocument;\n    this.on(doc, 'mousemove', this.throttledHandleMouseMove);\n    this.on(doc, 'touchmove', this.throttledHandleMouseMove);\n    this.on(doc, 'mouseup', this.handleMouseUp);\n    this.on(doc, 'touchend', this.handleMouseUp);\n  }\n  /**\n   * Handle `mouseup` or `touchend` events on the `VolumeControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mouseup` or `touchend` event that triggered this function.\n   *\n   * @listens touchend\n   * @listens mouseup\n   */\n  ;\n\n  _proto.handleMouseUp = function handleMouseUp(event) {\n    var doc = this.el_.ownerDocument;\n    this.off(doc, 'mousemove', this.throttledHandleMouseMove);\n    this.off(doc, 'touchmove', this.throttledHandleMouseMove);\n    this.off(doc, 'mouseup', this.handleMouseUp);\n    this.off(doc, 'touchend', this.handleMouseUp);\n  }\n  /**\n   * Handle `mousedown` or `touchstart` events on the `VolumeControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousedown\n   * @listens touchstart\n   */\n  ;\n\n  _proto.handleMouseMove = function handleMouseMove(event) {\n    this.volumeBar.handleMouseMove(event);\n  };\n\n  return VolumeControl;\n}(Component);\n/**\n * Default options for the `VolumeControl`\n *\n * @type {Object}\n * @private\n */\n\n\nVolumeControl.prototype.options_ = {\n  children: ['volumeBar']\n};\nComponent.registerComponent('VolumeControl', VolumeControl);\n\n/**\n * Check if muting volume is supported and if it isn't hide the mute toggle\n * button.\n *\n * @param {Component} self\n *        A reference to the mute toggle button\n *\n * @param {Player} player\n *        A reference to the player\n *\n * @private\n */\nvar checkMuteSupport = function checkMuteSupport(self, player) {\n  // hide mute toggle button if it's not supported by the current tech\n  if (player.tech_ && !player.tech_.featuresMuteControl) {\n    self.addClass('vjs-hidden');\n  }\n\n  self.on(player, 'loadstart', function () {\n    if (!player.tech_.featuresMuteControl) {\n      self.addClass('vjs-hidden');\n    } else {\n      self.removeClass('vjs-hidden');\n    }\n  });\n};\n\n/**\n * A button component for muting the audio.\n *\n * @extends Button\n */\n\nvar MuteToggle =\n/*#__PURE__*/\nfunction (_Button) {\n  _inheritsLoose(MuteToggle, _Button);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function MuteToggle(player, options) {\n    var _this;\n\n    _this = _Button.call(this, player, options) || this; // hide this control if volume support is missing\n\n    checkMuteSupport(_assertThisInitialized(_assertThisInitialized(_this)), player);\n\n    _this.on(player, ['loadstart', 'volumechange'], _this.update);\n\n    return _this;\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  var _proto = MuteToggle.prototype;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-mute-control \" + _Button.prototype.buildCSSClass.call(this);\n  }\n  /**\n   * This gets called when an `MuteToggle` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  ;\n\n  _proto.handleClick = function handleClick(event) {\n    var vol = this.player_.volume();\n    var lastVolume = this.player_.lastVolume_();\n\n    if (vol === 0) {\n      var volumeToSet = lastVolume < 0.1 ? 0.1 : lastVolume;\n      this.player_.volume(volumeToSet);\n      this.player_.muted(false);\n    } else {\n      this.player_.muted(this.player_.muted() ? false : true);\n    }\n  }\n  /**\n   * Update the `MuteToggle` button based on the state of `volume` and `muted`\n   * on the player.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The {@link Player#loadstart} event if this function was called\n   *        through an event.\n   *\n   * @listens Player#loadstart\n   * @listens Player#volumechange\n   */\n  ;\n\n  _proto.update = function update(event) {\n    this.updateIcon_();\n    this.updateControlText_();\n  }\n  /**\n   * Update the appearance of the `MuteToggle` icon.\n   *\n   * Possible states (given `level` variable below):\n   * - 0: crossed out\n   * - 1: zero bars of volume\n   * - 2: one bar of volume\n   * - 3: two bars of volume\n   *\n   * @private\n   */\n  ;\n\n  _proto.updateIcon_ = function updateIcon_() {\n    var vol = this.player_.volume();\n    var level = 3; // in iOS when a player is loaded with muted attribute\n    // and volume is changed with a native mute button\n    // we want to make sure muted state is updated\n\n    if (IS_IOS && this.player_.tech_ && this.player_.tech_.el_) {\n      this.player_.muted(this.player_.tech_.el_.muted);\n    }\n\n    if (vol === 0 || this.player_.muted()) {\n      level = 0;\n    } else if (vol < 0.33) {\n      level = 1;\n    } else if (vol < 0.67) {\n      level = 2;\n    } // TODO improve muted icon classes\n\n\n    for (var i = 0; i < 4; i++) {\n      removeClass(this.el_, \"vjs-vol-\" + i);\n    }\n\n    addClass(this.el_, \"vjs-vol-\" + level);\n  }\n  /**\n   * If `muted` has changed on the player, update the control text\n   * (`title` attribute on `vjs-mute-control` element and content of\n   * `vjs-control-text` element).\n   *\n   * @private\n   */\n  ;\n\n  _proto.updateControlText_ = function updateControlText_() {\n    var soundOff = this.player_.muted() || this.player_.volume() === 0;\n    var text = soundOff ? 'Unmute' : 'Mute';\n\n    if (this.controlText() !== text) {\n      this.controlText(text);\n    }\n  };\n\n  return MuteToggle;\n}(Button);\n/**\n * The text that should display over the `MuteToggle`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nMuteToggle.prototype.controlText_ = 'Mute';\nComponent.registerComponent('MuteToggle', MuteToggle);\n\n/**\n * A Component to contain the MuteToggle and VolumeControl so that\n * they can work together.\n *\n * @extends Component\n */\n\nvar VolumePanel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(VolumePanel, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  function VolumePanel(player, options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (typeof options.inline !== 'undefined') {\n      options.inline = options.inline;\n    } else {\n      options.inline = true;\n    } // pass the inline option down to the VolumeControl as vertical if\n    // the VolumeControl is on.\n\n\n    if (typeof options.volumeControl === 'undefined' || isPlain(options.volumeControl)) {\n      options.volumeControl = options.volumeControl || {};\n      options.volumeControl.vertical = !options.inline;\n    }\n\n    _this = _Component.call(this, player, options) || this;\n\n    _this.on(player, ['loadstart'], _this.volumePanelState_); // while the slider is active (the mouse has been pressed down and\n    // is dragging) we do not want to hide the VolumeBar\n\n\n    _this.on(_this.volumeControl, ['slideractive'], _this.sliderActive_);\n\n    _this.on(_this.volumeControl, ['sliderinactive'], _this.sliderInactive_);\n\n    return _this;\n  }\n  /**\n   * Add vjs-slider-active class to the VolumePanel\n   *\n   * @listens VolumeControl#slideractive\n   * @private\n   */\n\n\n  var _proto = VolumePanel.prototype;\n\n  _proto.sliderActive_ = function sliderActive_() {\n    this.addClass('vjs-slider-active');\n  }\n  /**\n   * Removes vjs-slider-active class to the VolumePanel\n   *\n   * @listens VolumeControl#sliderinactive\n   * @private\n   */\n  ;\n\n  _proto.sliderInactive_ = function sliderInactive_() {\n    this.removeClass('vjs-slider-active');\n  }\n  /**\n   * Adds vjs-hidden or vjs-mute-toggle-only to the VolumePanel\n   * depending on MuteToggle and VolumeControl state\n   *\n   * @listens Player#loadstart\n   * @private\n   */\n  ;\n\n  _proto.volumePanelState_ = function volumePanelState_() {\n    // hide volume panel if neither volume control or mute toggle\n    // are displayed\n    if (this.volumeControl.hasClass('vjs-hidden') && this.muteToggle.hasClass('vjs-hidden')) {\n      this.addClass('vjs-hidden');\n    } // if only mute toggle is visible we don't want\n    // volume panel expanding when hovered or active\n\n\n    if (this.volumeControl.hasClass('vjs-hidden') && !this.muteToggle.hasClass('vjs-hidden')) {\n      this.addClass('vjs-mute-toggle-only');\n    }\n  }\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  ;\n\n  _proto.createEl = function createEl() {\n    var orientationClass = 'vjs-volume-panel-horizontal';\n\n    if (!this.options_.inline) {\n      orientationClass = 'vjs-volume-panel-vertical';\n    }\n\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: \"vjs-volume-panel vjs-control \" + orientationClass\n    });\n  };\n\n  return VolumePanel;\n}(Component);\n/**\n * Default options for the `VolumeControl`\n *\n * @type {Object}\n * @private\n */\n\n\nVolumePanel.prototype.options_ = {\n  children: ['muteToggle', 'volumeControl']\n};\nComponent.registerComponent('VolumePanel', VolumePanel);\n\n/**\n * The Menu component is used to build popup menus, including subtitle and\n * captions selection menus.\n *\n * @extends Component\n */\n\nvar Menu =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Menu, _Component);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Player} player\n   *        the player that this component should attach to\n   *\n   * @param {Object} [options]\n   *        Object of option names and values\n   *\n   */\n  function Menu(player, options) {\n    var _this;\n\n    _this = _Component.call(this, player, options) || this;\n\n    if (options) {\n      _this.menuButton_ = options.menuButton;\n    }\n\n    _this.focusedChild_ = -1;\n\n    _this.on('keydown', _this.handleKeyPress); // All the menu item instances share the same blur handler provided by the menu container.\n\n\n    _this.boundHandleBlur_ = bind(_assertThisInitialized(_assertThisInitialized(_this)), _this.handleBlur);\n    _this.boundHandleTapClick_ = bind(_assertThisInitialized(_assertThisInitialized(_this)), _this.handleTapClick);\n    return _this;\n  }\n  /**\n   * Add event listeners to the {@link MenuItem}.\n   *\n   * @param {Object} component\n   *        The instance of the `MenuItem` to add listeners to.\n   *\n   */\n\n\n  var _proto = Menu.prototype;\n\n  _proto.addEventListenerForItem = function addEventListenerForItem(component) {\n    if (!(component instanceof Component)) {\n      return;\n    }\n\n    this.on(component, 'blur', this.boundHandleBlur_);\n    this.on(component, ['tap', 'click'], this.boundHandleTapClick_);\n  }\n  /**\n   * Remove event listeners from the {@link MenuItem}.\n   *\n   * @param {Object} component\n   *        The instance of the `MenuItem` to remove listeners.\n   *\n   */\n  ;\n\n  _proto.removeEventListenerForItem = function removeEventListenerForItem(component) {\n    if (!(component instanceof Component)) {\n      return;\n    }\n\n    this.off(component, 'blur', this.boundHandleBlur_);\n    this.off(component, ['tap', 'click'], this.boundHandleTapClick_);\n  }\n  /**\n   * This method will be called indirectly when the component has been added\n   * before the component adds to the new menu instance by `addItem`.\n   * In this case, the original menu instance will remove the component\n   * by calling `removeChild`.\n   *\n   * @param {Object} component\n   *        The instance of the `MenuItem`\n   */\n  ;\n\n  _proto.removeChild = function removeChild(component) {\n    if (typeof component === 'string') {\n      component = this.getChild(component);\n    }\n\n    this.removeEventListenerForItem(component);\n\n    _Component.prototype.removeChild.call(this, component);\n  }\n  /**\n   * Add a {@link MenuItem} to the menu.\n   *\n   * @param {Object|string} component\n   *        The name or instance of the `MenuItem` to add.\n   *\n   */\n  ;\n\n  _proto.addItem = function addItem(component) {\n    var childComponent = this.addChild(component);\n\n    if (childComponent) {\n      this.addEventListenerForItem(childComponent);\n    }\n  }\n  /**\n   * Create the `Menu`s DOM element.\n   *\n   * @return {Element}\n   *         the element that was created\n   */\n  ;\n\n  _proto.createEl = function createEl$$1() {\n    var contentElType = this.options_.contentElType || 'ul';\n    this.contentEl_ = createEl(contentElType, {\n      className: 'vjs-menu-content'\n    });\n    this.contentEl_.setAttribute('role', 'menu');\n\n    var el = _Component.prototype.createEl.call(this, 'div', {\n      append: this.contentEl_,\n      className: 'vjs-menu'\n    });\n\n    el.appendChild(this.contentEl_); // Prevent clicks from bubbling up. Needed for Menu Buttons,\n    // where a click on the parent is significant\n\n    on(el, 'click', function (event) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    });\n    return el;\n  };\n\n  _proto.dispose = function dispose() {\n    this.contentEl_ = null;\n    this.boundHandleBlur_ = null;\n    this.boundHandleTapClick_ = null;\n\n    _Component.prototype.dispose.call(this);\n  }\n  /**\n   * Called when a `MenuItem` loses focus.\n   *\n   * @param {EventTarget~Event} event\n   *        The `blur` event that caused this function to be called.\n   *\n   * @listens blur\n   */\n  ;\n\n  _proto.handleBlur = function handleBlur(event) {\n    var relatedTarget = event.relatedTarget || document.activeElement; // Close menu popup when a user clicks outside the menu\n\n    if (!this.children().some(function (element) {\n      return element.el() === relatedTarget;\n    })) {\n      var btn = this.menuButton_;\n\n      if (btn && btn.buttonPressed_ && relatedTarget !== btn.el().firstChild) {\n        btn.unpressButton();\n      }\n    }\n  }\n  /**\n   * Called when a `MenuItem` gets clicked or tapped.\n   *\n   * @param {EventTarget~Event} event\n   *        The `click` or `tap` event that caused this function to be called.\n   *\n   * @listens click,tap\n   */\n  ;\n\n  _proto.handleTapClick = function handleTapClick(event) {\n    // Unpress the associated MenuButton, and move focus back to it\n    if (this.menuButton_) {\n      this.menuButton_.unpressButton();\n      var childComponents = this.children();\n\n      if (!Array.isArray(childComponents)) {\n        return;\n      }\n\n      var foundComponent = childComponents.filter(function (component) {\n        return component.el() === event.target;\n      })[0];\n\n      if (!foundComponent) {\n        return;\n      } // don't focus menu button if item is a caption settings item\n      // because focus will move elsewhere\n\n\n      if (foundComponent.name() !== 'CaptionSettingsMenuItem') {\n        this.menuButton_.focus();\n      }\n    }\n  }\n  /**\n   * Handle a `keydown` event on this menu. This listener is added in the constructor.\n   *\n   * @param {EventTarget~Event} event\n   *        A `keydown` event that happened on the menu.\n   *\n   * @listens keydown\n   */\n  ;\n\n  _proto.handleKeyPress = function handleKeyPress(event) {\n    // Left and Down Arrows\n    if (keycode.isEventKey(event, 'Left') || keycode.isEventKey(event, 'Down')) {\n      event.preventDefault();\n      this.stepForward(); // Up and Right Arrows\n    } else if (keycode.isEventKey(event, 'Right') || keycode.isEventKey(event, 'Up')) {\n      event.preventDefault();\n      this.stepBack();\n    }\n  }\n  /**\n   * Move to next (lower) menu item for keyboard users.\n   */\n  ;\n\n  _proto.stepForward = function stepForward() {\n    var stepChild = 0;\n\n    if (this.focusedChild_ !== undefined) {\n      stepChild = this.focusedChild_ + 1;\n    }\n\n    this.focus(stepChild);\n  }\n  /**\n   * Move to previous (higher) menu item for keyboard users.\n   */\n  ;\n\n  _proto.stepBack = function stepBack() {\n    var stepChild = 0;\n\n    if (this.focusedChild_ !== undefined) {\n      stepChild = this.focusedChild_ - 1;\n    }\n\n    this.focus(stepChild);\n  }\n  /**\n   * Set focus on a {@link MenuItem} in the `Menu`.\n   *\n   * @param {Object|string} [item=0]\n   *        Index of child item set focus on.\n   */\n  ;\n\n  _proto.focus = function focus(item) {\n    if (item === void 0) {\n      item = 0;\n    }\n\n    var children = this.children().slice();\n    var haveTitle = children.length && children[0].className && /vjs-menu-title/.test(children[0].className);\n\n    if (haveTitle) {\n      children.shift();\n    }\n\n    if (children.length > 0) {\n      if (item < 0) {\n        item = 0;\n      } else if (item >= children.length) {\n        item = children.length - 1;\n      }\n\n      this.focusedChild_ = item;\n      children[item].el_.focus();\n    }\n  };\n\n  return Menu;\n}(Component);\n\nComponent.registerComponent('Menu', Menu);\n\n/**\n * A `MenuButton` class for any popup {@link Menu}.\n *\n * @extends Component\n */\n\nvar MenuButton =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(MenuButton, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  function MenuButton(player, options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    _this = _Component.call(this, player, options) || this;\n    _this.menuButton_ = new Button(player, options);\n\n    _this.menuButton_.controlText(_this.controlText_);\n\n    _this.menuButton_.el_.setAttribute('aria-haspopup', 'true'); // Add buildCSSClass values to the button, not the wrapper\n\n\n    var buttonClass = Button.prototype.buildCSSClass();\n    _this.menuButton_.el_.className = _this.buildCSSClass() + ' ' + buttonClass;\n\n    _this.menuButton_.removeClass('vjs-control');\n\n    _this.addChild(_this.menuButton_);\n\n    _this.update();\n\n    _this.enabled_ = true;\n\n    _this.on(_this.menuButton_, 'tap', _this.handleClick);\n\n    _this.on(_this.menuButton_, 'click', _this.handleClick);\n\n    _this.on(_this.menuButton_, 'focus', _this.handleFocus);\n\n    _this.on(_this.menuButton_, 'blur', _this.handleBlur);\n\n    _this.on(_this.menuButton_, 'mouseenter', function () {\n      _this.menu.show();\n    });\n\n    _this.on('keydown', _this.handleSubmenuKeyPress);\n\n    return _this;\n  }\n  /**\n   * Update the menu based on the current state of its items.\n   */\n\n\n  var _proto = MenuButton.prototype;\n\n  _proto.update = function update() {\n    var menu = this.createMenu();\n\n    if (this.menu) {\n      this.menu.dispose();\n      this.removeChild(this.menu);\n    }\n\n    this.menu = menu;\n    this.addChild(menu);\n    /**\n     * Track the state of the menu button\n     *\n     * @type {Boolean}\n     * @private\n     */\n\n    this.buttonPressed_ = false;\n    this.menuButton_.el_.setAttribute('aria-expanded', 'false');\n\n    if (this.items && this.items.length <= this.hideThreshold_) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  }\n  /**\n   * Create the menu and add all items to it.\n   *\n   * @return {Menu}\n   *         The constructed menu\n   */\n  ;\n\n  _proto.createMenu = function createMenu() {\n    var menu = new Menu(this.player_, {\n      menuButton: this\n    });\n    /**\n     * Hide the menu if the number of items is less than or equal to this threshold. This defaults\n     * to 0 and whenever we add items which can be hidden to the menu we'll increment it. We list\n     * it here because every time we run `createMenu` we need to reset the value.\n     *\n     * @protected\n     * @type {Number}\n     */\n\n    this.hideThreshold_ = 0; // Add a title list item to the top\n\n    if (this.options_.title) {\n      var titleEl = createEl('li', {\n        className: 'vjs-menu-title',\n        innerHTML: toTitleCase(this.options_.title),\n        tabIndex: -1\n      });\n      this.hideThreshold_ += 1;\n      var titleComponent = new Component(this.player_, {\n        el: titleEl\n      });\n      menu.addItem(titleComponent);\n    }\n\n    this.items = this.createItems();\n\n    if (this.items) {\n      // Add menu items to the menu\n      for (var i = 0; i < this.items.length; i++) {\n        menu.addItem(this.items[i]);\n      }\n    }\n\n    return menu;\n  }\n  /**\n   * Create the list of menu items. Specific to each subclass.\n   *\n   * @abstract\n   */\n  ;\n\n  _proto.createItems = function createItems() {}\n  /**\n   * Create the `MenuButtons`s DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  ;\n\n  _proto.createEl = function createEl$$1() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: this.buildWrapperCSSClass()\n    }, {});\n  }\n  /**\n   * Allow sub components to stack CSS class names for the wrapper element\n   *\n   * @return {string}\n   *         The constructed wrapper DOM `className`\n   */\n  ;\n\n  _proto.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    var menuButtonClass = 'vjs-menu-button'; // If the inline option is passed, we want to use different styles altogether.\n\n    if (this.options_.inline === true) {\n      menuButtonClass += '-inline';\n    } else {\n      menuButtonClass += '-popup';\n    } // TODO: Fix the CSS so that this isn't necessary\n\n\n    var buttonClass = Button.prototype.buildCSSClass();\n    return \"vjs-menu-button \" + menuButtonClass + \" \" + buttonClass + \" \" + _Component.prototype.buildCSSClass.call(this);\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  ;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    var menuButtonClass = 'vjs-menu-button'; // If the inline option is passed, we want to use different styles altogether.\n\n    if (this.options_.inline === true) {\n      menuButtonClass += '-inline';\n    } else {\n      menuButtonClass += '-popup';\n    }\n\n    return \"vjs-menu-button \" + menuButtonClass + \" \" + _Component.prototype.buildCSSClass.call(this);\n  }\n  /**\n   * Get or set the localized control text that will be used for accessibility.\n   *\n   * > NOTE: This will come from the internal `menuButton_` element.\n   *\n   * @param {string} [text]\n   *        Control text for element.\n   *\n   * @param {Element} [el=this.menuButton_.el()]\n   *        Element to set the title on.\n   *\n   * @return {string}\n   *         - The control text when getting\n   */\n  ;\n\n  _proto.controlText = function controlText(text, el) {\n    if (el === void 0) {\n      el = this.menuButton_.el();\n    }\n\n    return this.menuButton_.controlText(text, el);\n  }\n  /**\n   * Handle a click on a `MenuButton`.\n   * See {@link ClickableComponent#handleClick} for instances where this is called.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  ;\n\n  _proto.handleClick = function handleClick(event) {\n    if (this.buttonPressed_) {\n      this.unpressButton();\n    } else {\n      this.pressButton();\n    }\n  }\n  /**\n   * Set the focus to the actual button, not to this element\n   */\n  ;\n\n  _proto.focus = function focus() {\n    this.menuButton_.focus();\n  }\n  /**\n   * Remove the focus from the actual button, not this element\n   */\n  ;\n\n  _proto.blur = function blur() {\n    this.menuButton_.blur();\n  }\n  /**\n   * This gets called when a `MenuButton` gains focus via a `focus` event.\n   * Turns on listening for `keydown` events. When they happen it\n   * calls `this.handleKeyPress`.\n   *\n   * @param {EventTarget~Event} event\n   *        The `focus` event that caused this function to be called.\n   *\n   * @listens focus\n   */\n  ;\n\n  _proto.handleFocus = function handleFocus() {\n    on(document, 'keydown', bind(this, this.handleKeyPress));\n  }\n  /**\n   * Called when a `MenuButton` loses focus. Turns off the listener for\n   * `keydown` events. Which Stops `this.handleKeyPress` from getting called.\n   *\n   * @param {EventTarget~Event} event\n   *        The `blur` event that caused this function to be called.\n   *\n   * @listens blur\n   */\n  ;\n\n  _proto.handleBlur = function handleBlur() {\n    off(document, 'keydown', bind(this, this.handleKeyPress));\n  }\n  /**\n   * Handle tab, escape, down arrow, and up arrow keys for `MenuButton`. See\n   * {@link ClickableComponent#handleKeyPress} for instances where this is called.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n  ;\n\n  _proto.handleKeyPress = function handleKeyPress(event) {\n    // Escape or Tab unpress the 'button'\n    if (keycode.isEventKey(event, 'Esc') || keycode.isEventKey(event, 'Tab')) {\n      if (this.buttonPressed_) {\n        this.unpressButton();\n      } // Don't preventDefault for Tab key - we still want to lose focus\n\n\n      if (!keycode.isEventKey(event, 'Tab')) {\n        event.preventDefault(); // Set focus back to the menu button's button\n\n        this.menuButton_.focus();\n      } // Up Arrow or Down Arrow also 'press' the button to open the menu\n\n    } else if (keycode.isEventKey(event, 'Up') || keycode.isEventKey(event, 'Down')) {\n      if (!this.buttonPressed_) {\n        event.preventDefault();\n        this.pressButton();\n      }\n    }\n  }\n  /**\n   * Handle a `keydown` event on a sub-menu. The listener for this is added in\n   * the constructor.\n   *\n   * @param {EventTarget~Event} event\n   *        Key press event\n   *\n   * @listens keydown\n   */\n  ;\n\n  _proto.handleSubmenuKeyPress = function handleSubmenuKeyPress(event) {\n    // Escape or Tab unpress the 'button'\n    if (keycode.isEventKey(event, 'Esc') || keycode.isEventKey(event, 'Tab')) {\n      if (this.buttonPressed_) {\n        this.unpressButton();\n      } // Don't preventDefault for Tab key - we still want to lose focus\n\n\n      if (!keycode.isEventKey(event, 'Tab')) {\n        event.preventDefault(); // Set focus back to the menu button's button\n\n        this.menuButton_.focus();\n      }\n    }\n  }\n  /**\n   * Put the current `MenuButton` into a pressed state.\n   */\n  ;\n\n  _proto.pressButton = function pressButton() {\n    if (this.enabled_) {\n      this.buttonPressed_ = true;\n      this.menu.show();\n      this.menu.lockShowing();\n      this.menuButton_.el_.setAttribute('aria-expanded', 'true'); // set the focus into the submenu, except on iOS where it is resulting in\n      // undesired scrolling behavior when the player is in an iframe\n\n      if (IS_IOS && isInFrame()) {\n        // Return early so that the menu isn't focused\n        return;\n      }\n\n      this.menu.focus();\n    }\n  }\n  /**\n   * Take the current `MenuButton` out of a pressed state.\n   */\n  ;\n\n  _proto.unpressButton = function unpressButton() {\n    if (this.enabled_) {\n      this.buttonPressed_ = false;\n      this.menu.unlockShowing();\n      this.menu.hide();\n      this.menuButton_.el_.setAttribute('aria-expanded', 'false');\n    }\n  }\n  /**\n   * Disable the `MenuButton`. Don't allow it to be clicked.\n   */\n  ;\n\n  _proto.disable = function disable() {\n    this.unpressButton();\n    this.enabled_ = false;\n    this.addClass('vjs-disabled');\n    this.menuButton_.disable();\n  }\n  /**\n   * Enable the `MenuButton`. Allow it to be clicked.\n   */\n  ;\n\n  _proto.enable = function enable() {\n    this.enabled_ = true;\n    this.removeClass('vjs-disabled');\n    this.menuButton_.enable();\n  };\n\n  return MenuButton;\n}(Component);\n\nComponent.registerComponent('MenuButton', MenuButton);\n\n/**\n * The base class for buttons that toggle specific  track types (e.g. subtitles).\n *\n * @extends MenuButton\n */\n\nvar TrackButton =\n/*#__PURE__*/\nfunction (_MenuButton) {\n  _inheritsLoose(TrackButton, _MenuButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function TrackButton(player, options) {\n    var _this;\n\n    var tracks = options.tracks;\n    _this = _MenuButton.call(this, player, options) || this;\n\n    if (_this.items.length <= 1) {\n      _this.hide();\n    }\n\n    if (!tracks) {\n      return _assertThisInitialized(_this);\n    }\n\n    var updateHandler = bind(_assertThisInitialized(_assertThisInitialized(_this)), _this.update);\n    tracks.addEventListener('removetrack', updateHandler);\n    tracks.addEventListener('addtrack', updateHandler);\n\n    _this.player_.on('ready', updateHandler);\n\n    _this.player_.on('dispose', function () {\n      tracks.removeEventListener('removetrack', updateHandler);\n      tracks.removeEventListener('addtrack', updateHandler);\n    });\n\n    return _this;\n  }\n\n  return TrackButton;\n}(MenuButton);\n\nComponent.registerComponent('TrackButton', TrackButton);\n\n/**\n * @file menu-keys.js\n */\n\n/**\n  * All keys used for operation of a menu (`MenuButton`, `Menu`, and `MenuItem`)\n  * Note that 'Enter' and 'Space' are not included here (otherwise they would\n  * prevent the `MenuButton` and `MenuItem` from being keyboard-clickable)\n  * @typedef MenuKeys\n  * @array\n  */\nvar MenuKeys = ['Tab', 'Esc', 'Up', 'Down', 'Right', 'Left'];\n\n/**\n * The component for a menu item. `<li>`\n *\n * @extends ClickableComponent\n */\n\nvar MenuItem =\n/*#__PURE__*/\nfunction (_ClickableComponent) {\n  _inheritsLoose(MenuItem, _ClickableComponent);\n\n  /**\n   * Creates an instance of the this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   *\n   */\n  function MenuItem(player, options) {\n    var _this;\n\n    _this = _ClickableComponent.call(this, player, options) || this;\n    _this.selectable = options.selectable;\n    _this.isSelected_ = options.selected || false;\n    _this.multiSelectable = options.multiSelectable;\n\n    _this.selected(_this.isSelected_);\n\n    if (_this.selectable) {\n      if (_this.multiSelectable) {\n        _this.el_.setAttribute('role', 'menuitemcheckbox');\n      } else {\n        _this.el_.setAttribute('role', 'menuitemradio');\n      }\n    } else {\n      _this.el_.setAttribute('role', 'menuitem');\n    }\n\n    return _this;\n  }\n  /**\n   * Create the `MenuItem's DOM element\n   *\n   * @param {string} [type=li]\n   *        Element's node type, not actually used, always set to `li`.\n   *\n   * @param {Object} [props={}]\n   *        An object of properties that should be set on the element\n   *\n   * @param {Object} [attrs={}]\n   *        An object of attributes that should be set on the element\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  var _proto = MenuItem.prototype;\n\n  _proto.createEl = function createEl(type, props, attrs) {\n    // The control is textual, not just an icon\n    this.nonIconControl = true;\n    return _ClickableComponent.prototype.createEl.call(this, 'li', assign({\n      className: 'vjs-menu-item',\n      innerHTML: \"<span class=\\\"vjs-menu-item-text\\\">\" + this.localize(this.options_.label) + \"</span>\",\n      tabIndex: -1\n    }, props), attrs);\n  }\n  /**\n   * Ignore keys which are used by the menu, but pass any other ones up. See\n   * {@link ClickableComponent#handleKeyPress} for instances where this is called.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n  ;\n\n  _proto.handleKeyPress = function handleKeyPress(event) {\n    if (!MenuKeys.some(function (key) {\n      return keycode.isEventKey(event, key);\n    })) {\n      // Pass keypress handling up for unused keys\n      _ClickableComponent.prototype.handleKeyPress.call(this, event);\n    }\n  }\n  /**\n   * Any click on a `MenuItem` puts it into the selected state.\n   * See {@link ClickableComponent#handleClick} for instances where this is called.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  ;\n\n  _proto.handleClick = function handleClick(event) {\n    this.selected(true);\n  }\n  /**\n   * Set the state for this menu item as selected or not.\n   *\n   * @param {boolean} selected\n   *        if the menu item is selected or not\n   */\n  ;\n\n  _proto.selected = function selected(_selected) {\n    if (this.selectable) {\n      if (_selected) {\n        this.addClass('vjs-selected');\n        this.el_.setAttribute('aria-checked', 'true'); // aria-checked isn't fully supported by browsers/screen readers,\n        // so indicate selected state to screen reader in the control text.\n\n        this.controlText(', selected');\n        this.isSelected_ = true;\n      } else {\n        this.removeClass('vjs-selected');\n        this.el_.setAttribute('aria-checked', 'false'); // Indicate un-selected state to screen reader\n\n        this.controlText('');\n        this.isSelected_ = false;\n      }\n    }\n  };\n\n  return MenuItem;\n}(ClickableComponent);\n\nComponent.registerComponent('MenuItem', MenuItem);\n\n/**\n * The specific menu item type for selecting a language within a text track kind\n *\n * @extends MenuItem\n */\n\nvar TextTrackMenuItem =\n/*#__PURE__*/\nfunction (_MenuItem) {\n  _inheritsLoose(TextTrackMenuItem, _MenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function TextTrackMenuItem(player, options) {\n    var _this;\n\n    var track = options.track;\n    var tracks = player.textTracks(); // Modify options for parent MenuItem class's init.\n\n    options.label = track.label || track.language || 'Unknown';\n    options.selected = track.mode === 'showing';\n    _this = _MenuItem.call(this, player, options) || this;\n    _this.track = track;\n\n    var changeHandler = function changeHandler() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this.handleTracksChange.apply(_assertThisInitialized(_assertThisInitialized(_this)), args);\n    };\n\n    var selectedLanguageChangeHandler = function selectedLanguageChangeHandler() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      _this.handleSelectedLanguageChange.apply(_assertThisInitialized(_assertThisInitialized(_this)), args);\n    };\n\n    player.on(['loadstart', 'texttrackchange'], changeHandler);\n    tracks.addEventListener('change', changeHandler);\n    tracks.addEventListener('selectedlanguagechange', selectedLanguageChangeHandler);\n\n    _this.on('dispose', function () {\n      player.off(['loadstart', 'texttrackchange'], changeHandler);\n      tracks.removeEventListener('change', changeHandler);\n      tracks.removeEventListener('selectedlanguagechange', selectedLanguageChangeHandler);\n    }); // iOS7 doesn't dispatch change events to TextTrackLists when an\n    // associated track's mode changes. Without something like\n    // Object.observe() (also not present on iOS7), it's not\n    // possible to detect changes to the mode attribute and polyfill\n    // the change event. As a poor substitute, we manually dispatch\n    // change events whenever the controls modify the mode.\n\n\n    if (tracks.onchange === undefined) {\n      var event;\n\n      _this.on(['tap', 'click'], function () {\n        if (typeof window$1.Event !== 'object') {\n          // Android 2.3 throws an Illegal Constructor error for window.Event\n          try {\n            event = new window$1.Event('change');\n          } catch (err) {// continue regardless of error\n          }\n        }\n\n        if (!event) {\n          event = document.createEvent('Event');\n          event.initEvent('change', true, true);\n        }\n\n        tracks.dispatchEvent(event);\n      });\n    } // set the default state based on current tracks\n\n\n    _this.handleTracksChange();\n\n    return _this;\n  }\n  /**\n   * This gets called when an `TextTrackMenuItem` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  var _proto = TextTrackMenuItem.prototype;\n\n  _proto.handleClick = function handleClick(event) {\n    var referenceTrack = this.track;\n    var tracks = this.player_.textTracks();\n\n    _MenuItem.prototype.handleClick.call(this, event);\n\n    if (!tracks) {\n      return;\n    } // Determine the relevant kind(s) of tracks for this component and filter\n    // out empty kinds.\n\n\n    var kinds = (referenceTrack.kinds || [referenceTrack.kind]).filter(Boolean);\n\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i]; // If the track from the text tracks list is not of the right kind,\n      // skip it. We do not want to affect tracks of incompatible kind(s).\n\n      if (kinds.indexOf(track.kind) === -1) {\n        continue;\n      } // If this text track is the component's track and it is not showing,\n      // set it to showing.\n\n\n      if (track === referenceTrack) {\n        if (track.mode !== 'showing') {\n          track.mode = 'showing';\n        } // If this text track is not the component's track and it is not\n        // disabled, set it to disabled.\n\n      } else if (track.mode !== 'disabled') {\n        track.mode = 'disabled';\n      }\n    }\n  }\n  /**\n   * Handle text track list change\n   *\n   * @param {EventTarget~Event} event\n   *        The `change` event that caused this function to be called.\n   *\n   * @listens TextTrackList#change\n   */\n  ;\n\n  _proto.handleTracksChange = function handleTracksChange(event) {\n    var shouldBeSelected = this.track.mode === 'showing'; // Prevent redundant selected() calls because they may cause\n    // screen readers to read the appended control text unnecessarily\n\n    if (shouldBeSelected !== this.isSelected_) {\n      this.selected(shouldBeSelected);\n    }\n  };\n\n  _proto.handleSelectedLanguageChange = function handleSelectedLanguageChange(event) {\n    if (this.track.mode === 'showing') {\n      var selectedLanguage = this.player_.cache_.selectedLanguage; // Don't replace the kind of track across the same language\n\n      if (selectedLanguage && selectedLanguage.enabled && selectedLanguage.language === this.track.language && selectedLanguage.kind !== this.track.kind) {\n        return;\n      }\n\n      this.player_.cache_.selectedLanguage = {\n        enabled: true,\n        language: this.track.language,\n        kind: this.track.kind\n      };\n    }\n  };\n\n  _proto.dispose = function dispose() {\n    // remove reference to track object on dispose\n    this.track = null;\n\n    _MenuItem.prototype.dispose.call(this);\n  };\n\n  return TextTrackMenuItem;\n}(MenuItem);\n\nComponent.registerComponent('TextTrackMenuItem', TextTrackMenuItem);\n\n/**\n * A special menu item for turning of a specific type of text track\n *\n * @extends TextTrackMenuItem\n */\n\nvar OffTextTrackMenuItem =\n/*#__PURE__*/\nfunction (_TextTrackMenuItem) {\n  _inheritsLoose(OffTextTrackMenuItem, _TextTrackMenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function OffTextTrackMenuItem(player, options) {\n    // Create pseudo track info\n    // Requires options['kind']\n    options.track = {\n      player: player,\n      kind: options.kind,\n      kinds: options.kinds,\n      default: false,\n      mode: 'disabled'\n    };\n\n    if (!options.kinds) {\n      options.kinds = [options.kind];\n    }\n\n    if (options.label) {\n      options.track.label = options.label;\n    } else {\n      options.track.label = options.kinds.join(' and ') + ' off';\n    } // MenuItem is selectable\n\n\n    options.selectable = true; // MenuItem is NOT multiSelectable (i.e. only one can be marked \"selected\" at a time)\n\n    options.multiSelectable = false;\n    return _TextTrackMenuItem.call(this, player, options) || this;\n  }\n  /**\n   * Handle text track change\n   *\n   * @param {EventTarget~Event} event\n   *        The event that caused this function to run\n   */\n\n\n  var _proto = OffTextTrackMenuItem.prototype;\n\n  _proto.handleTracksChange = function handleTracksChange(event) {\n    var tracks = this.player().textTracks();\n    var shouldBeSelected = true;\n\n    for (var i = 0, l = tracks.length; i < l; i++) {\n      var track = tracks[i];\n\n      if (this.options_.kinds.indexOf(track.kind) > -1 && track.mode === 'showing') {\n        shouldBeSelected = false;\n        break;\n      }\n    } // Prevent redundant selected() calls because they may cause\n    // screen readers to read the appended control text unnecessarily\n\n\n    if (shouldBeSelected !== this.isSelected_) {\n      this.selected(shouldBeSelected);\n    }\n  };\n\n  _proto.handleSelectedLanguageChange = function handleSelectedLanguageChange(event) {\n    var tracks = this.player().textTracks();\n    var allHidden = true;\n\n    for (var i = 0, l = tracks.length; i < l; i++) {\n      var track = tracks[i];\n\n      if (['captions', 'descriptions', 'subtitles'].indexOf(track.kind) > -1 && track.mode === 'showing') {\n        allHidden = false;\n        break;\n      }\n    }\n\n    if (allHidden) {\n      this.player_.cache_.selectedLanguage = {\n        enabled: false\n      };\n    }\n  };\n\n  return OffTextTrackMenuItem;\n}(TextTrackMenuItem);\n\nComponent.registerComponent('OffTextTrackMenuItem', OffTextTrackMenuItem);\n\n/**\n * The base class for buttons that toggle specific text track types (e.g. subtitles)\n *\n * @extends MenuButton\n */\n\nvar TextTrackButton =\n/*#__PURE__*/\nfunction (_TrackButton) {\n  _inheritsLoose(TextTrackButton, _TrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  function TextTrackButton(player, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    options.tracks = player.textTracks();\n    return _TrackButton.call(this, player, options) || this;\n  }\n  /**\n   * Create a menu item for each text track\n   *\n   * @param {TextTrackMenuItem[]} [items=[]]\n   *        Existing array of items to use during creation\n   *\n   * @return {TextTrackMenuItem[]}\n   *         Array of menu items that were created\n   */\n\n\n  var _proto = TextTrackButton.prototype;\n\n  _proto.createItems = function createItems(items, TrackMenuItem) {\n    if (items === void 0) {\n      items = [];\n    }\n\n    if (TrackMenuItem === void 0) {\n      TrackMenuItem = TextTrackMenuItem;\n    }\n\n    // Label is an override for the [track] off label\n    // USed to localise captions/subtitles\n    var label;\n\n    if (this.label_) {\n      label = this.label_ + \" off\";\n    } // Add an OFF menu item to turn all tracks off\n\n\n    items.push(new OffTextTrackMenuItem(this.player_, {\n      kinds: this.kinds_,\n      kind: this.kind_,\n      label: label\n    }));\n    this.hideThreshold_ += 1;\n    var tracks = this.player_.textTracks();\n\n    if (!Array.isArray(this.kinds_)) {\n      this.kinds_ = [this.kind_];\n    }\n\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i]; // only add tracks that are of an appropriate kind and have a label\n\n      if (this.kinds_.indexOf(track.kind) > -1) {\n        var item = new TrackMenuItem(this.player_, {\n          track: track,\n          // MenuItem is selectable\n          selectable: true,\n          // MenuItem is NOT multiSelectable (i.e. only one can be marked \"selected\" at a time)\n          multiSelectable: false\n        });\n        item.addClass(\"vjs-\" + track.kind + \"-menu-item\");\n        items.push(item);\n      }\n    }\n\n    return items;\n  };\n\n  return TextTrackButton;\n}(TrackButton);\n\nComponent.registerComponent('TextTrackButton', TextTrackButton);\n\n/**\n * The chapter track menu item\n *\n * @extends MenuItem\n */\n\nvar ChaptersTrackMenuItem =\n/*#__PURE__*/\nfunction (_MenuItem) {\n  _inheritsLoose(ChaptersTrackMenuItem, _MenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function ChaptersTrackMenuItem(player, options) {\n    var _this;\n\n    var track = options.track;\n    var cue = options.cue;\n    var currentTime = player.currentTime(); // Modify options for parent MenuItem class's init.\n\n    options.selectable = true;\n    options.multiSelectable = false;\n    options.label = cue.text;\n    options.selected = cue.startTime <= currentTime && currentTime < cue.endTime;\n    _this = _MenuItem.call(this, player, options) || this;\n    _this.track = track;\n    _this.cue = cue;\n    track.addEventListener('cuechange', bind(_assertThisInitialized(_assertThisInitialized(_this)), _this.update));\n    return _this;\n  }\n  /**\n   * This gets called when an `ChaptersTrackMenuItem` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  var _proto = ChaptersTrackMenuItem.prototype;\n\n  _proto.handleClick = function handleClick(event) {\n    _MenuItem.prototype.handleClick.call(this);\n\n    this.player_.currentTime(this.cue.startTime);\n    this.update(this.cue.startTime);\n  }\n  /**\n   * Update chapter menu item\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `cuechange` event that caused this function to run.\n   *\n   * @listens TextTrack#cuechange\n   */\n  ;\n\n  _proto.update = function update(event) {\n    var cue = this.cue;\n    var currentTime = this.player_.currentTime(); // vjs.log(currentTime, cue.startTime);\n\n    this.selected(cue.startTime <= currentTime && currentTime < cue.endTime);\n  };\n\n  return ChaptersTrackMenuItem;\n}(MenuItem);\n\nComponent.registerComponent('ChaptersTrackMenuItem', ChaptersTrackMenuItem);\n\n/**\n * The button component for toggling and selecting chapters\n * Chapters act much differently than other text tracks\n * Cues are navigation vs. other tracks of alternative languages\n *\n * @extends TextTrackButton\n */\n\nvar ChaptersButton =\n/*#__PURE__*/\nfunction (_TextTrackButton) {\n  _inheritsLoose(ChaptersButton, _TextTrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function to call when this function is ready.\n   */\n  function ChaptersButton(player, options, ready) {\n    return _TextTrackButton.call(this, player, options, ready) || this;\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  var _proto = ChaptersButton.prototype;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-chapters-button \" + _TextTrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  _proto.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return \"vjs-chapters-button \" + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);\n  }\n  /**\n   * Update the menu based on the current state of its items.\n   *\n   * @param {EventTarget~Event} [event]\n   *        An event that triggered this function to run.\n   *\n   * @listens TextTrackList#addtrack\n   * @listens TextTrackList#removetrack\n   * @listens TextTrackList#change\n   */\n  ;\n\n  _proto.update = function update(event) {\n    if (!this.track_ || event && (event.type === 'addtrack' || event.type === 'removetrack')) {\n      this.setTrack(this.findChaptersTrack());\n    }\n\n    _TextTrackButton.prototype.update.call(this);\n  }\n  /**\n   * Set the currently selected track for the chapters button.\n   *\n   * @param {TextTrack} track\n   *        The new track to select. Nothing will change if this is the currently selected\n   *        track.\n   */\n  ;\n\n  _proto.setTrack = function setTrack(track) {\n    if (this.track_ === track) {\n      return;\n    }\n\n    if (!this.updateHandler_) {\n      this.updateHandler_ = this.update.bind(this);\n    } // here this.track_ refers to the old track instance\n\n\n    if (this.track_) {\n      var remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);\n\n      if (remoteTextTrackEl) {\n        remoteTextTrackEl.removeEventListener('load', this.updateHandler_);\n      }\n\n      this.track_ = null;\n    }\n\n    this.track_ = track; // here this.track_ refers to the new track instance\n\n    if (this.track_) {\n      this.track_.mode = 'hidden';\n\n      var _remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);\n\n      if (_remoteTextTrackEl) {\n        _remoteTextTrackEl.addEventListener('load', this.updateHandler_);\n      }\n    }\n  }\n  /**\n   * Find the track object that is currently in use by this ChaptersButton\n   *\n   * @return {TextTrack|undefined}\n   *         The current track or undefined if none was found.\n   */\n  ;\n\n  _proto.findChaptersTrack = function findChaptersTrack() {\n    var tracks = this.player_.textTracks() || [];\n\n    for (var i = tracks.length - 1; i >= 0; i--) {\n      // We will always choose the last track as our chaptersTrack\n      var track = tracks[i];\n\n      if (track.kind === this.kind_) {\n        return track;\n      }\n    }\n  }\n  /**\n   * Get the caption for the ChaptersButton based on the track label. This will also\n   * use the current tracks localized kind as a fallback if a label does not exist.\n   *\n   * @return {string}\n   *         The tracks current label or the localized track kind.\n   */\n  ;\n\n  _proto.getMenuCaption = function getMenuCaption() {\n    if (this.track_ && this.track_.label) {\n      return this.track_.label;\n    }\n\n    return this.localize(toTitleCase(this.kind_));\n  }\n  /**\n   * Create menu from chapter track\n   *\n   * @return {Menu}\n   *         New menu for the chapter buttons\n   */\n  ;\n\n  _proto.createMenu = function createMenu() {\n    this.options_.title = this.getMenuCaption();\n    return _TextTrackButton.prototype.createMenu.call(this);\n  }\n  /**\n   * Create a menu item for each text track\n   *\n   * @return {TextTrackMenuItem[]}\n   *         Array of menu items\n   */\n  ;\n\n  _proto.createItems = function createItems() {\n    var items = [];\n\n    if (!this.track_) {\n      return items;\n    }\n\n    var cues = this.track_.cues;\n\n    if (!cues) {\n      return items;\n    }\n\n    for (var i = 0, l = cues.length; i < l; i++) {\n      var cue = cues[i];\n      var mi = new ChaptersTrackMenuItem(this.player_, {\n        track: this.track_,\n        cue: cue\n      });\n      items.push(mi);\n    }\n\n    return items;\n  };\n\n  return ChaptersButton;\n}(TextTrackButton);\n/**\n * `kind` of TextTrack to look for to associate it with this menu.\n *\n * @type {string}\n * @private\n */\n\n\nChaptersButton.prototype.kind_ = 'chapters';\n/**\n * The text that should display over the `ChaptersButton`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\nChaptersButton.prototype.controlText_ = 'Chapters';\nComponent.registerComponent('ChaptersButton', ChaptersButton);\n\n/**\n * The button component for toggling and selecting descriptions\n *\n * @extends TextTrackButton\n */\n\nvar DescriptionsButton =\n/*#__PURE__*/\nfunction (_TextTrackButton) {\n  _inheritsLoose(DescriptionsButton, _TextTrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function to call when this component is ready.\n   */\n  function DescriptionsButton(player, options, ready) {\n    var _this;\n\n    _this = _TextTrackButton.call(this, player, options, ready) || this;\n    var tracks = player.textTracks();\n    var changeHandler = bind(_assertThisInitialized(_assertThisInitialized(_this)), _this.handleTracksChange);\n    tracks.addEventListener('change', changeHandler);\n\n    _this.on('dispose', function () {\n      tracks.removeEventListener('change', changeHandler);\n    });\n\n    return _this;\n  }\n  /**\n   * Handle text track change\n   *\n   * @param {EventTarget~Event} event\n   *        The event that caused this function to run\n   *\n   * @listens TextTrackList#change\n   */\n\n\n  var _proto = DescriptionsButton.prototype;\n\n  _proto.handleTracksChange = function handleTracksChange(event) {\n    var tracks = this.player().textTracks();\n    var disabled = false; // Check whether a track of a different kind is showing\n\n    for (var i = 0, l = tracks.length; i < l; i++) {\n      var track = tracks[i];\n\n      if (track.kind !== this.kind_ && track.mode === 'showing') {\n        disabled = true;\n        break;\n      }\n    } // If another track is showing, disable this menu button\n\n\n    if (disabled) {\n      this.disable();\n    } else {\n      this.enable();\n    }\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  ;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-descriptions-button \" + _TextTrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  _proto.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return \"vjs-descriptions-button \" + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);\n  };\n\n  return DescriptionsButton;\n}(TextTrackButton);\n/**\n * `kind` of TextTrack to look for to associate it with this menu.\n *\n * @type {string}\n * @private\n */\n\n\nDescriptionsButton.prototype.kind_ = 'descriptions';\n/**\n * The text that should display over the `DescriptionsButton`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\nDescriptionsButton.prototype.controlText_ = 'Descriptions';\nComponent.registerComponent('DescriptionsButton', DescriptionsButton);\n\n/**\n * The button component for toggling and selecting subtitles\n *\n * @extends TextTrackButton\n */\n\nvar SubtitlesButton =\n/*#__PURE__*/\nfunction (_TextTrackButton) {\n  _inheritsLoose(SubtitlesButton, _TextTrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function to call when this component is ready.\n   */\n  function SubtitlesButton(player, options, ready) {\n    return _TextTrackButton.call(this, player, options, ready) || this;\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  var _proto = SubtitlesButton.prototype;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-subtitles-button \" + _TextTrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  _proto.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return \"vjs-subtitles-button \" + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);\n  };\n\n  return SubtitlesButton;\n}(TextTrackButton);\n/**\n * `kind` of TextTrack to look for to associate it with this menu.\n *\n * @type {string}\n * @private\n */\n\n\nSubtitlesButton.prototype.kind_ = 'subtitles';\n/**\n * The text that should display over the `SubtitlesButton`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\nSubtitlesButton.prototype.controlText_ = 'Subtitles';\nComponent.registerComponent('SubtitlesButton', SubtitlesButton);\n\n/**\n * The menu item for caption track settings menu\n *\n * @extends TextTrackMenuItem\n */\n\nvar CaptionSettingsMenuItem =\n/*#__PURE__*/\nfunction (_TextTrackMenuItem) {\n  _inheritsLoose(CaptionSettingsMenuItem, _TextTrackMenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function CaptionSettingsMenuItem(player, options) {\n    var _this;\n\n    options.track = {\n      player: player,\n      kind: options.kind,\n      label: options.kind + ' settings',\n      selectable: false,\n      default: false,\n      mode: 'disabled'\n    }; // CaptionSettingsMenuItem has no concept of 'selected'\n\n    options.selectable = false;\n    options.name = 'CaptionSettingsMenuItem';\n    _this = _TextTrackMenuItem.call(this, player, options) || this;\n\n    _this.addClass('vjs-texttrack-settings');\n\n    _this.controlText(', opens ' + options.kind + ' settings dialog');\n\n    return _this;\n  }\n  /**\n   * This gets called when an `CaptionSettingsMenuItem` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  var _proto = CaptionSettingsMenuItem.prototype;\n\n  _proto.handleClick = function handleClick(event) {\n    this.player().getChild('textTrackSettings').open();\n  };\n\n  return CaptionSettingsMenuItem;\n}(TextTrackMenuItem);\n\nComponent.registerComponent('CaptionSettingsMenuItem', CaptionSettingsMenuItem);\n\n/**\n * The button component for toggling and selecting captions\n *\n * @extends TextTrackButton\n */\n\nvar CaptionsButton =\n/*#__PURE__*/\nfunction (_TextTrackButton) {\n  _inheritsLoose(CaptionsButton, _TextTrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function to call when this component is ready.\n   */\n  function CaptionsButton(player, options, ready) {\n    return _TextTrackButton.call(this, player, options, ready) || this;\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  var _proto = CaptionsButton.prototype;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-captions-button \" + _TextTrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  _proto.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return \"vjs-captions-button \" + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);\n  }\n  /**\n   * Create caption menu items\n   *\n   * @return {CaptionSettingsMenuItem[]}\n   *         The array of current menu items.\n   */\n  ;\n\n  _proto.createItems = function createItems() {\n    var items = [];\n\n    if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild('textTrackSettings')) {\n      items.push(new CaptionSettingsMenuItem(this.player_, {\n        kind: this.kind_\n      }));\n      this.hideThreshold_ += 1;\n    }\n\n    return _TextTrackButton.prototype.createItems.call(this, items);\n  };\n\n  return CaptionsButton;\n}(TextTrackButton);\n/**\n * `kind` of TextTrack to look for to associate it with this menu.\n *\n * @type {string}\n * @private\n */\n\n\nCaptionsButton.prototype.kind_ = 'captions';\n/**\n * The text that should display over the `CaptionsButton`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\nCaptionsButton.prototype.controlText_ = 'Captions';\nComponent.registerComponent('CaptionsButton', CaptionsButton);\n\n/**\n * SubsCapsMenuItem has an [cc] icon to distinguish captions from subtitles\n * in the SubsCapsMenu.\n *\n * @extends TextTrackMenuItem\n */\n\nvar SubsCapsMenuItem =\n/*#__PURE__*/\nfunction (_TextTrackMenuItem) {\n  _inheritsLoose(SubsCapsMenuItem, _TextTrackMenuItem);\n\n  function SubsCapsMenuItem() {\n    return _TextTrackMenuItem.apply(this, arguments) || this;\n  }\n\n  var _proto = SubsCapsMenuItem.prototype;\n\n  _proto.createEl = function createEl(type, props, attrs) {\n    var innerHTML = \"<span class=\\\"vjs-menu-item-text\\\">\" + this.localize(this.options_.label);\n\n    if (this.options_.track.kind === 'captions') {\n      innerHTML += \"\\n        <span aria-hidden=\\\"true\\\" class=\\\"vjs-icon-placeholder\\\"></span>\\n        <span class=\\\"vjs-control-text\\\"> \" + this.localize('Captions') + \"</span>\\n      \";\n    }\n\n    innerHTML += '</span>';\n\n    var el = _TextTrackMenuItem.prototype.createEl.call(this, type, assign({\n      innerHTML: innerHTML\n    }, props), attrs);\n\n    return el;\n  };\n\n  return SubsCapsMenuItem;\n}(TextTrackMenuItem);\n\nComponent.registerComponent('SubsCapsMenuItem', SubsCapsMenuItem);\n\n/**\n * The button component for toggling and selecting captions and/or subtitles\n *\n * @extends TextTrackButton\n */\n\nvar SubsCapsButton =\n/*#__PURE__*/\nfunction (_TextTrackButton) {\n  _inheritsLoose(SubsCapsButton, _TextTrackButton);\n\n  function SubsCapsButton(player, options) {\n    var _this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    _this = _TextTrackButton.call(this, player, options) || this; // Although North America uses \"captions\" in most cases for\n    // \"captions and subtitles\" other locales use \"subtitles\"\n\n    _this.label_ = 'subtitles';\n\n    if (['en', 'en-us', 'en-ca', 'fr-ca'].indexOf(_this.player_.language_) > -1) {\n      _this.label_ = 'captions';\n    }\n\n    _this.menuButton_.controlText(toTitleCase(_this.label_));\n\n    return _this;\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  var _proto = SubsCapsButton.prototype;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-subs-caps-button \" + _TextTrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  _proto.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return \"vjs-subs-caps-button \" + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);\n  }\n  /**\n   * Create caption/subtitles menu items\n   *\n   * @return {CaptionSettingsMenuItem[]}\n   *         The array of current menu items.\n   */\n  ;\n\n  _proto.createItems = function createItems() {\n    var items = [];\n\n    if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild('textTrackSettings')) {\n      items.push(new CaptionSettingsMenuItem(this.player_, {\n        kind: this.label_\n      }));\n      this.hideThreshold_ += 1;\n    }\n\n    items = _TextTrackButton.prototype.createItems.call(this, items, SubsCapsMenuItem);\n    return items;\n  };\n\n  return SubsCapsButton;\n}(TextTrackButton);\n/**\n * `kind`s of TextTrack to look for to associate it with this menu.\n *\n * @type {array}\n * @private\n */\n\n\nSubsCapsButton.prototype.kinds_ = ['captions', 'subtitles'];\n/**\n * The text that should display over the `SubsCapsButton`s controls.\n *\n *\n * @type {string}\n * @private\n */\n\nSubsCapsButton.prototype.controlText_ = 'Subtitles';\nComponent.registerComponent('SubsCapsButton', SubsCapsButton);\n\n/**\n * An {@link AudioTrack} {@link MenuItem}\n *\n * @extends MenuItem\n */\n\nvar AudioTrackMenuItem =\n/*#__PURE__*/\nfunction (_MenuItem) {\n  _inheritsLoose(AudioTrackMenuItem, _MenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function AudioTrackMenuItem(player, options) {\n    var _this;\n\n    var track = options.track;\n    var tracks = player.audioTracks(); // Modify options for parent MenuItem class's init.\n\n    options.label = track.label || track.language || 'Unknown';\n    options.selected = track.enabled;\n    _this = _MenuItem.call(this, player, options) || this;\n    _this.track = track;\n\n    _this.addClass(\"vjs-\" + track.kind + \"-menu-item\");\n\n    var changeHandler = function changeHandler() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this.handleTracksChange.apply(_assertThisInitialized(_assertThisInitialized(_this)), args);\n    };\n\n    tracks.addEventListener('change', changeHandler);\n\n    _this.on('dispose', function () {\n      tracks.removeEventListener('change', changeHandler);\n    });\n\n    return _this;\n  }\n\n  var _proto = AudioTrackMenuItem.prototype;\n\n  _proto.createEl = function createEl(type, props, attrs) {\n    var innerHTML = \"<span class=\\\"vjs-menu-item-text\\\">\" + this.localize(this.options_.label);\n\n    if (this.options_.track.kind === 'main-desc') {\n      innerHTML += \"\\n        <span aria-hidden=\\\"true\\\" class=\\\"vjs-icon-placeholder\\\"></span>\\n        <span class=\\\"vjs-control-text\\\"> \" + this.localize('Descriptions') + \"</span>\\n      \";\n    }\n\n    innerHTML += '</span>';\n\n    var el = _MenuItem.prototype.createEl.call(this, type, assign({\n      innerHTML: innerHTML\n    }, props), attrs);\n\n    return el;\n  }\n  /**\n   * This gets called when an `AudioTrackMenuItem is \"clicked\". See {@link ClickableComponent}\n   * for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  ;\n\n  _proto.handleClick = function handleClick(event) {\n    var tracks = this.player_.audioTracks();\n\n    _MenuItem.prototype.handleClick.call(this, event);\n\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i];\n      track.enabled = track === this.track;\n    }\n  }\n  /**\n   * Handle any {@link AudioTrack} change.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The {@link AudioTrackList#change} event that caused this to run.\n   *\n   * @listens AudioTrackList#change\n   */\n  ;\n\n  _proto.handleTracksChange = function handleTracksChange(event) {\n    this.selected(this.track.enabled);\n  };\n\n  return AudioTrackMenuItem;\n}(MenuItem);\n\nComponent.registerComponent('AudioTrackMenuItem', AudioTrackMenuItem);\n\n/**\n * The base class for buttons that toggle specific {@link AudioTrack} types.\n *\n * @extends TrackButton\n */\n\nvar AudioTrackButton =\n/*#__PURE__*/\nfunction (_TrackButton) {\n  _inheritsLoose(AudioTrackButton, _TrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  function AudioTrackButton(player, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    options.tracks = player.audioTracks();\n    return _TrackButton.call(this, player, options) || this;\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  var _proto = AudioTrackButton.prototype;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-audio-button \" + _TrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  _proto.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return \"vjs-audio-button \" + _TrackButton.prototype.buildWrapperCSSClass.call(this);\n  }\n  /**\n   * Create a menu item for each audio track\n   *\n   * @param {AudioTrackMenuItem[]} [items=[]]\n   *        An array of existing menu items to use.\n   *\n   * @return {AudioTrackMenuItem[]}\n   *         An array of menu items\n   */\n  ;\n\n  _proto.createItems = function createItems(items) {\n    if (items === void 0) {\n      items = [];\n    }\n\n    // if there's only one audio track, there no point in showing it\n    this.hideThreshold_ = 1;\n    var tracks = this.player_.audioTracks();\n\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i];\n      items.push(new AudioTrackMenuItem(this.player_, {\n        track: track,\n        // MenuItem is selectable\n        selectable: true,\n        // MenuItem is NOT multiSelectable (i.e. only one can be marked \"selected\" at a time)\n        multiSelectable: false\n      }));\n    }\n\n    return items;\n  };\n\n  return AudioTrackButton;\n}(TrackButton);\n/**\n * The text that should display over the `AudioTrackButton`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nAudioTrackButton.prototype.controlText_ = 'Audio Track';\nComponent.registerComponent('AudioTrackButton', AudioTrackButton);\n\n/**\n * The specific menu item type for selecting a playback rate.\n *\n * @extends MenuItem\n */\n\nvar PlaybackRateMenuItem =\n/*#__PURE__*/\nfunction (_MenuItem) {\n  _inheritsLoose(PlaybackRateMenuItem, _MenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function PlaybackRateMenuItem(player, options) {\n    var _this;\n\n    var label = options.rate;\n    var rate = parseFloat(label, 10); // Modify options for parent MenuItem class's init.\n\n    options.label = label;\n    options.selected = rate === 1;\n    options.selectable = true;\n    options.multiSelectable = false;\n    _this = _MenuItem.call(this, player, options) || this;\n    _this.label = label;\n    _this.rate = rate;\n\n    _this.on(player, 'ratechange', _this.update);\n\n    return _this;\n  }\n  /**\n   * This gets called when an `PlaybackRateMenuItem` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  var _proto = PlaybackRateMenuItem.prototype;\n\n  _proto.handleClick = function handleClick(event) {\n    _MenuItem.prototype.handleClick.call(this);\n\n    this.player().playbackRate(this.rate);\n  }\n  /**\n   * Update the PlaybackRateMenuItem when the playbackrate changes.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `ratechange` event that caused this function to run.\n   *\n   * @listens Player#ratechange\n   */\n  ;\n\n  _proto.update = function update(event) {\n    this.selected(this.player().playbackRate() === this.rate);\n  };\n\n  return PlaybackRateMenuItem;\n}(MenuItem);\n/**\n * The text that should display over the `PlaybackRateMenuItem`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nPlaybackRateMenuItem.prototype.contentElType = 'button';\nComponent.registerComponent('PlaybackRateMenuItem', PlaybackRateMenuItem);\n\n/**\n * The component for controlling the playback rate.\n *\n * @extends MenuButton\n */\n\nvar PlaybackRateMenuButton =\n/*#__PURE__*/\nfunction (_MenuButton) {\n  _inheritsLoose(PlaybackRateMenuButton, _MenuButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function PlaybackRateMenuButton(player, options) {\n    var _this;\n\n    _this = _MenuButton.call(this, player, options) || this;\n\n    _this.updateVisibility();\n\n    _this.updateLabel();\n\n    _this.on(player, 'loadstart', _this.updateVisibility);\n\n    _this.on(player, 'ratechange', _this.updateLabel);\n\n    return _this;\n  }\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  var _proto = PlaybackRateMenuButton.prototype;\n\n  _proto.createEl = function createEl$$1() {\n    var el = _MenuButton.prototype.createEl.call(this);\n\n    this.labelEl_ = createEl('div', {\n      className: 'vjs-playback-rate-value',\n      innerHTML: '1x'\n    });\n    el.appendChild(this.labelEl_);\n    return el;\n  };\n\n  _proto.dispose = function dispose() {\n    this.labelEl_ = null;\n\n    _MenuButton.prototype.dispose.call(this);\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  ;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-playback-rate \" + _MenuButton.prototype.buildCSSClass.call(this);\n  };\n\n  _proto.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return \"vjs-playback-rate \" + _MenuButton.prototype.buildWrapperCSSClass.call(this);\n  }\n  /**\n   * Create the playback rate menu\n   *\n   * @return {Menu}\n   *         Menu object populated with {@link PlaybackRateMenuItem}s\n   */\n  ;\n\n  _proto.createMenu = function createMenu() {\n    var menu = new Menu(this.player());\n    var rates = this.playbackRates();\n\n    if (rates) {\n      for (var i = rates.length - 1; i >= 0; i--) {\n        menu.addChild(new PlaybackRateMenuItem(this.player(), {\n          rate: rates[i] + 'x'\n        }));\n      }\n    }\n\n    return menu;\n  }\n  /**\n   * Updates ARIA accessibility attributes\n   */\n  ;\n\n  _proto.updateARIAAttributes = function updateARIAAttributes() {\n    // Current playback rate\n    this.el().setAttribute('aria-valuenow', this.player().playbackRate());\n  }\n  /**\n   * This gets called when an `PlaybackRateMenuButton` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  ;\n\n  _proto.handleClick = function handleClick(event) {\n    // select next rate option\n    var currentRate = this.player().playbackRate();\n    var rates = this.playbackRates(); // this will select first one if the last one currently selected\n\n    var newRate = rates[0];\n\n    for (var i = 0; i < rates.length; i++) {\n      if (rates[i] > currentRate) {\n        newRate = rates[i];\n        break;\n      }\n    }\n\n    this.player().playbackRate(newRate);\n  }\n  /**\n   * Get possible playback rates\n   *\n   * @return {Array}\n   *         All possible playback rates\n   */\n  ;\n\n  _proto.playbackRates = function playbackRates() {\n    return this.options_.playbackRates || this.options_.playerOptions && this.options_.playerOptions.playbackRates;\n  }\n  /**\n   * Get whether playback rates is supported by the tech\n   * and an array of playback rates exists\n   *\n   * @return {boolean}\n   *         Whether changing playback rate is supported\n   */\n  ;\n\n  _proto.playbackRateSupported = function playbackRateSupported() {\n    return this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && this.playbackRates().length > 0;\n  }\n  /**\n   * Hide playback rate controls when they're no playback rate options to select\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#loadstart\n   */\n  ;\n\n  _proto.updateVisibility = function updateVisibility(event) {\n    if (this.playbackRateSupported()) {\n      this.removeClass('vjs-hidden');\n    } else {\n      this.addClass('vjs-hidden');\n    }\n  }\n  /**\n   * Update button label when rate changed\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#ratechange\n   */\n  ;\n\n  _proto.updateLabel = function updateLabel(event) {\n    if (this.playbackRateSupported()) {\n      this.labelEl_.innerHTML = this.player().playbackRate() + 'x';\n    }\n  };\n\n  return PlaybackRateMenuButton;\n}(MenuButton);\n/**\n * The text that should display over the `FullscreenToggle`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nPlaybackRateMenuButton.prototype.controlText_ = 'Playback Rate';\nComponent.registerComponent('PlaybackRateMenuButton', PlaybackRateMenuButton);\n\n/**\n * Just an empty spacer element that can be used as an append point for plugins, etc.\n * Also can be used to create space between elements when necessary.\n *\n * @extends Component\n */\n\nvar Spacer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Spacer, _Component);\n\n  function Spacer() {\n    return _Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Spacer.prototype;\n\n  /**\n  * Builds the default DOM `className`.\n  *\n  * @return {string}\n  *         The DOM `className` for this object.\n  */\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-spacer \" + _Component.prototype.buildCSSClass.call(this);\n  }\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  ;\n\n  _proto.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: this.buildCSSClass()\n    });\n  };\n\n  return Spacer;\n}(Component);\n\nComponent.registerComponent('Spacer', Spacer);\n\n/**\n * Spacer specifically meant to be used as an insertion point for new plugins, etc.\n *\n * @extends Spacer\n */\n\nvar CustomControlSpacer =\n/*#__PURE__*/\nfunction (_Spacer) {\n  _inheritsLoose(CustomControlSpacer, _Spacer);\n\n  function CustomControlSpacer() {\n    return _Spacer.apply(this, arguments) || this;\n  }\n\n  var _proto = CustomControlSpacer.prototype;\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-custom-control-spacer \" + _Spacer.prototype.buildCSSClass.call(this);\n  }\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  ;\n\n  _proto.createEl = function createEl() {\n    var el = _Spacer.prototype.createEl.call(this, {\n      className: this.buildCSSClass()\n    }); // No-flex/table-cell mode requires there be some content\n    // in the cell to fill the remaining space of the table.\n\n\n    el.innerHTML = \"\\xA0\";\n    return el;\n  };\n\n  return CustomControlSpacer;\n}(Spacer);\n\nComponent.registerComponent('CustomControlSpacer', CustomControlSpacer);\n\n/**\n * Container of main controls.\n *\n * @extends Component\n */\n\nvar ControlBar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(ControlBar, _Component);\n\n  function ControlBar() {\n    return _Component.apply(this, arguments) || this;\n  }\n\n  var _proto = ControlBar.prototype;\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  _proto.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-control-bar',\n      dir: 'ltr'\n    });\n  };\n\n  return ControlBar;\n}(Component);\n/**\n * Default options for `ControlBar`\n *\n * @type {Object}\n * @private\n */\n\n\nControlBar.prototype.options_ = {\n  children: ['playToggle', 'volumePanel', 'currentTimeDisplay', 'timeDivider', 'durationDisplay', 'progressControl', 'liveDisplay', 'seekToLive', 'remainingTimeDisplay', 'customControlSpacer', 'playbackRateMenuButton', 'chaptersButton', 'descriptionsButton', 'subsCapsButton', 'audioTrackButton', 'fullscreenToggle']\n};\nComponent.registerComponent('ControlBar', ControlBar);\n\n/**\n * A display that indicates an error has occurred. This means that the video\n * is unplayable.\n *\n * @extends ModalDialog\n */\n\nvar ErrorDisplay =\n/*#__PURE__*/\nfunction (_ModalDialog) {\n  _inheritsLoose(ErrorDisplay, _ModalDialog);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param  {Player} player\n   *         The `Player` that this class should be attached to.\n   *\n   * @param  {Object} [options]\n   *         The key/value store of player options.\n   */\n  function ErrorDisplay(player, options) {\n    var _this;\n\n    _this = _ModalDialog.call(this, player, options) || this;\n\n    _this.on(player, 'error', _this.open);\n\n    return _this;\n  }\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   *\n   * @deprecated Since version 5.\n   */\n\n\n  var _proto = ErrorDisplay.prototype;\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return \"vjs-error-display \" + _ModalDialog.prototype.buildCSSClass.call(this);\n  }\n  /**\n   * Gets the localized error message based on the `Player`s error.\n   *\n   * @return {string}\n   *         The `Player`s error message localized or an empty string.\n   */\n  ;\n\n  _proto.content = function content() {\n    var error = this.player().error();\n    return error ? this.localize(error.message) : '';\n  };\n\n  return ErrorDisplay;\n}(ModalDialog);\n/**\n * The default options for an `ErrorDisplay`.\n *\n * @private\n */\n\n\nErrorDisplay.prototype.options_ = mergeOptions(ModalDialog.prototype.options_, {\n  pauseOnOpen: false,\n  fillAlways: true,\n  temporary: false,\n  uncloseable: true\n});\nComponent.registerComponent('ErrorDisplay', ErrorDisplay);\n\nvar LOCAL_STORAGE_KEY = 'vjs-text-track-settings';\nvar COLOR_BLACK = ['#000', 'Black'];\nvar COLOR_BLUE = ['#00F', 'Blue'];\nvar COLOR_CYAN = ['#0FF', 'Cyan'];\nvar COLOR_GREEN = ['#0F0', 'Green'];\nvar COLOR_MAGENTA = ['#F0F', 'Magenta'];\nvar COLOR_RED = ['#F00', 'Red'];\nvar COLOR_WHITE = ['#FFF', 'White'];\nvar COLOR_YELLOW = ['#FF0', 'Yellow'];\nvar OPACITY_OPAQUE = ['1', 'Opaque'];\nvar OPACITY_SEMI = ['0.5', 'Semi-Transparent'];\nvar OPACITY_TRANS = ['0', 'Transparent']; // Configuration for the various <select> elements in the DOM of this component.\n//\n// Possible keys include:\n//\n// `default`:\n//   The default option index. Only needs to be provided if not zero.\n// `parser`:\n//   A function which is used to parse the value from the selected option in\n//   a customized way.\n// `selector`:\n//   The selector used to find the associated <select> element.\n\nvar selectConfigs = {\n  backgroundColor: {\n    selector: '.vjs-bg-color > select',\n    id: 'captions-background-color-%s',\n    label: 'Color',\n    options: [COLOR_BLACK, COLOR_WHITE, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]\n  },\n  backgroundOpacity: {\n    selector: '.vjs-bg-opacity > select',\n    id: 'captions-background-opacity-%s',\n    label: 'Transparency',\n    options: [OPACITY_OPAQUE, OPACITY_SEMI, OPACITY_TRANS]\n  },\n  color: {\n    selector: '.vjs-fg-color > select',\n    id: 'captions-foreground-color-%s',\n    label: 'Color',\n    options: [COLOR_WHITE, COLOR_BLACK, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]\n  },\n  edgeStyle: {\n    selector: '.vjs-edge-style > select',\n    id: '%s',\n    label: 'Text Edge Style',\n    options: [['none', 'None'], ['raised', 'Raised'], ['depressed', 'Depressed'], ['uniform', 'Uniform'], ['dropshadow', 'Dropshadow']]\n  },\n  fontFamily: {\n    selector: '.vjs-font-family > select',\n    id: 'captions-font-family-%s',\n    label: 'Font Family',\n    options: [['proportionalSansSerif', 'Proportional Sans-Serif'], ['monospaceSansSerif', 'Monospace Sans-Serif'], ['proportionalSerif', 'Proportional Serif'], ['monospaceSerif', 'Monospace Serif'], ['casual', 'Casual'], ['script', 'Script'], ['small-caps', 'Small Caps']]\n  },\n  fontPercent: {\n    selector: '.vjs-font-percent > select',\n    id: 'captions-font-size-%s',\n    label: 'Font Size',\n    options: [['0.50', '50%'], ['0.75', '75%'], ['1.00', '100%'], ['1.25', '125%'], ['1.50', '150%'], ['1.75', '175%'], ['2.00', '200%'], ['3.00', '300%'], ['4.00', '400%']],\n    default: 2,\n    parser: function parser(v) {\n      return v === '1.00' ? null : Number(v);\n    }\n  },\n  textOpacity: {\n    selector: '.vjs-text-opacity > select',\n    id: 'captions-foreground-opacity-%s',\n    label: 'Transparency',\n    options: [OPACITY_OPAQUE, OPACITY_SEMI]\n  },\n  // Options for this object are defined below.\n  windowColor: {\n    selector: '.vjs-window-color > select',\n    id: 'captions-window-color-%s',\n    label: 'Color'\n  },\n  // Options for this object are defined below.\n  windowOpacity: {\n    selector: '.vjs-window-opacity > select',\n    id: 'captions-window-opacity-%s',\n    label: 'Transparency',\n    options: [OPACITY_TRANS, OPACITY_SEMI, OPACITY_OPAQUE]\n  }\n};\nselectConfigs.windowColor.options = selectConfigs.backgroundColor.options;\n/**\n * Get the actual value of an option.\n *\n * @param  {string} value\n *         The value to get\n *\n * @param  {Function} [parser]\n *         Optional function to adjust the value.\n *\n * @return {Mixed}\n *         - Will be `undefined` if no value exists\n *         - Will be `undefined` if the given value is \"none\".\n *         - Will be the actual value otherwise.\n *\n * @private\n */\n\nfunction parseOptionValue(value, parser) {\n  if (parser) {\n    value = parser(value);\n  }\n\n  if (value && value !== 'none') {\n    return value;\n  }\n}\n/**\n * Gets the value of the selected <option> element within a <select> element.\n *\n * @param  {Element} el\n *         the element to look in\n *\n * @param  {Function} [parser]\n *         Optional function to adjust the value.\n *\n * @return {Mixed}\n *         - Will be `undefined` if no value exists\n *         - Will be `undefined` if the given value is \"none\".\n *         - Will be the actual value otherwise.\n *\n * @private\n */\n\n\nfunction getSelectedOptionValue(el, parser) {\n  var value = el.options[el.options.selectedIndex].value;\n  return parseOptionValue(value, parser);\n}\n/**\n * Sets the selected <option> element within a <select> element based on a\n * given value.\n *\n * @param {Element} el\n *        The element to look in.\n *\n * @param {string} value\n *        the property to look on.\n *\n * @param {Function} [parser]\n *        Optional function to adjust the value before comparing.\n *\n * @private\n */\n\n\nfunction setSelectedOption(el, value, parser) {\n  if (!value) {\n    return;\n  }\n\n  for (var i = 0; i < el.options.length; i++) {\n    if (parseOptionValue(el.options[i].value, parser) === value) {\n      el.selectedIndex = i;\n      break;\n    }\n  }\n}\n/**\n * Manipulate Text Tracks settings.\n *\n * @extends ModalDialog\n */\n\n\nvar TextTrackSettings =\n/*#__PURE__*/\nfunction (_ModalDialog) {\n  _inheritsLoose(TextTrackSettings, _ModalDialog);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *         The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *         The key/value store of player options.\n   */\n  function TextTrackSettings(player, options) {\n    var _this;\n\n    options.temporary = false;\n    _this = _ModalDialog.call(this, player, options) || this;\n    _this.updateDisplay = bind(_assertThisInitialized(_assertThisInitialized(_this)), _this.updateDisplay); // fill the modal and pretend we have opened it\n\n    _this.fill();\n\n    _this.hasBeenOpened_ = _this.hasBeenFilled_ = true;\n    _this.endDialog = createEl('p', {\n      className: 'vjs-control-text',\n      textContent: _this.localize('End of dialog window.')\n    });\n\n    _this.el().appendChild(_this.endDialog);\n\n    _this.setDefaults(); // Grab `persistTextTrackSettings` from the player options if not passed in child options\n\n\n    if (options.persistTextTrackSettings === undefined) {\n      _this.options_.persistTextTrackSettings = _this.options_.playerOptions.persistTextTrackSettings;\n    }\n\n    _this.on(_this.$('.vjs-done-button'), 'click', function () {\n      _this.saveSettings();\n\n      _this.close();\n    });\n\n    _this.on(_this.$('.vjs-default-button'), 'click', function () {\n      _this.setDefaults();\n\n      _this.updateDisplay();\n    });\n\n    each(selectConfigs, function (config) {\n      _this.on(_this.$(config.selector), 'change', _this.updateDisplay);\n    });\n\n    if (_this.options_.persistTextTrackSettings) {\n      _this.restoreSettings();\n    }\n\n    return _this;\n  }\n\n  var _proto = TextTrackSettings.prototype;\n\n  _proto.dispose = function dispose() {\n    this.endDialog = null;\n\n    _ModalDialog.prototype.dispose.call(this);\n  }\n  /**\n   * Create a <select> element with configured options.\n   *\n   * @param {string} key\n   *        Configuration key to use during creation.\n   *\n   * @return {string}\n   *         An HTML string.\n   *\n   * @private\n   */\n  ;\n\n  _proto.createElSelect_ = function createElSelect_(key, legendId, type) {\n    var _this2 = this;\n\n    if (legendId === void 0) {\n      legendId = '';\n    }\n\n    if (type === void 0) {\n      type = 'label';\n    }\n\n    var config = selectConfigs[key];\n    var id = config.id.replace('%s', this.id_);\n    var selectLabelledbyIds = [legendId, id].join(' ').trim();\n    return [\"<\" + type + \" id=\\\"\" + id + \"\\\" class=\\\"\" + (type === 'label' ? 'vjs-label' : '') + \"\\\">\", this.localize(config.label), \"</\" + type + \">\", \"<select aria-labelledby=\\\"\" + selectLabelledbyIds + \"\\\">\"].concat(config.options.map(function (o) {\n      var optionId = id + '-' + o[1].replace(/\\W+/g, '');\n      return [\"<option id=\\\"\" + optionId + \"\\\" value=\\\"\" + o[0] + \"\\\" \", \"aria-labelledby=\\\"\" + selectLabelledbyIds + \" \" + optionId + \"\\\">\", _this2.localize(o[1]), '</option>'].join('');\n    })).concat('</select>').join('');\n  }\n  /**\n   * Create foreground color element for the component\n   *\n   * @return {string}\n   *         An HTML string.\n   *\n   * @private\n   */\n  ;\n\n  _proto.createElFgColor_ = function createElFgColor_() {\n    var legendId = \"captions-text-legend-\" + this.id_;\n    return ['<fieldset class=\"vjs-fg-color vjs-track-setting\">', \"<legend id=\\\"\" + legendId + \"\\\">\", this.localize('Text'), '</legend>', this.createElSelect_('color', legendId), '<span class=\"vjs-text-opacity vjs-opacity\">', this.createElSelect_('textOpacity', legendId), '</span>', '</fieldset>'].join('');\n  }\n  /**\n   * Create background color element for the component\n   *\n   * @return {string}\n   *         An HTML string.\n   *\n   * @private\n   */\n  ;\n\n  _proto.createElBgColor_ = function createElBgColor_() {\n    var legendId = \"captions-background-\" + this.id_;\n    return ['<fieldset class=\"vjs-bg-color vjs-track-setting\">', \"<legend id=\\\"\" + legendId + \"\\\">\", this.localize('Background'), '</legend>', this.createElSelect_('backgroundColor', legendId), '<span class=\"vjs-bg-opacity vjs-opacity\">', this.createElSelect_('backgroundOpacity', legendId), '</span>', '</fieldset>'].join('');\n  }\n  /**\n   * Create window color element for the component\n   *\n   * @return {string}\n   *         An HTML string.\n   *\n   * @private\n   */\n  ;\n\n  _proto.createElWinColor_ = function createElWinColor_() {\n    var legendId = \"captions-window-\" + this.id_;\n    return ['<fieldset class=\"vjs-window-color vjs-track-setting\">', \"<legend id=\\\"\" + legendId + \"\\\">\", this.localize('Window'), '</legend>', this.createElSelect_('windowColor', legendId), '<span class=\"vjs-window-opacity vjs-opacity\">', this.createElSelect_('windowOpacity', legendId), '</span>', '</fieldset>'].join('');\n  }\n  /**\n   * Create color elements for the component\n   *\n   * @return {Element}\n   *         The element that was created\n   *\n   * @private\n   */\n  ;\n\n  _proto.createElColors_ = function createElColors_() {\n    return createEl('div', {\n      className: 'vjs-track-settings-colors',\n      innerHTML: [this.createElFgColor_(), this.createElBgColor_(), this.createElWinColor_()].join('')\n    });\n  }\n  /**\n   * Create font elements for the component\n   *\n   * @return {Element}\n   *         The element that was created.\n   *\n   * @private\n   */\n  ;\n\n  _proto.createElFont_ = function createElFont_() {\n    return createEl('div', {\n      className: 'vjs-track-settings-font',\n      innerHTML: ['<fieldset class=\"vjs-font-percent vjs-track-setting\">', this.createElSelect_('fontPercent', '', 'legend'), '</fieldset>', '<fieldset class=\"vjs-edge-style vjs-track-setting\">', this.createElSelect_('edgeStyle', '', 'legend'), '</fieldset>', '<fieldset class=\"vjs-font-family vjs-track-setting\">', this.createElSelect_('fontFamily', '', 'legend'), '</fieldset>'].join('')\n    });\n  }\n  /**\n   * Create controls for the component\n   *\n   * @return {Element}\n   *         The element that was created.\n   *\n   * @private\n   */\n  ;\n\n  _proto.createElControls_ = function createElControls_() {\n    var defaultsDescription = this.localize('restore all settings to the default values');\n    return createEl('div', {\n      className: 'vjs-track-settings-controls',\n      innerHTML: [\"<button type=\\\"button\\\" class=\\\"vjs-default-button\\\" title=\\\"\" + defaultsDescription + \"\\\">\", this.localize('Reset'), \"<span class=\\\"vjs-control-text\\\"> \" + defaultsDescription + \"</span>\", '</button>', \"<button type=\\\"button\\\" class=\\\"vjs-done-button\\\">\" + this.localize('Done') + \"</button>\"].join('')\n    });\n  };\n\n  _proto.content = function content() {\n    return [this.createElColors_(), this.createElFont_(), this.createElControls_()];\n  };\n\n  _proto.label = function label() {\n    return this.localize('Caption Settings Dialog');\n  };\n\n  _proto.description = function description() {\n    return this.localize('Beginning of dialog window. Escape will cancel and close the window.');\n  };\n\n  _proto.buildCSSClass = function buildCSSClass() {\n    return _ModalDialog.prototype.buildCSSClass.call(this) + ' vjs-text-track-settings';\n  }\n  /**\n   * Gets an object of text track settings (or null).\n   *\n   * @return {Object}\n   *         An object with config values parsed from the DOM or localStorage.\n   */\n  ;\n\n  _proto.getValues = function getValues() {\n    var _this3 = this;\n\n    return reduce(selectConfigs, function (accum, config, key) {\n      var value = getSelectedOptionValue(_this3.$(config.selector), config.parser);\n\n      if (value !== undefined) {\n        accum[key] = value;\n      }\n\n      return accum;\n    }, {});\n  }\n  /**\n   * Sets text track settings from an object of values.\n   *\n   * @param {Object} values\n   *        An object with config values parsed from the DOM or localStorage.\n   */\n  ;\n\n  _proto.setValues = function setValues(values) {\n    var _this4 = this;\n\n    each(selectConfigs, function (config, key) {\n      setSelectedOption(_this4.$(config.selector), values[key], config.parser);\n    });\n  }\n  /**\n   * Sets all `<select>` elements to their default values.\n   */\n  ;\n\n  _proto.setDefaults = function setDefaults() {\n    var _this5 = this;\n\n    each(selectConfigs, function (config) {\n      var index = config.hasOwnProperty('default') ? config.default : 0;\n      _this5.$(config.selector).selectedIndex = index;\n    });\n  }\n  /**\n   * Restore texttrack settings from localStorage\n   */\n  ;\n\n  _proto.restoreSettings = function restoreSettings() {\n    var values;\n\n    try {\n      values = JSON.parse(window$1.localStorage.getItem(LOCAL_STORAGE_KEY));\n    } catch (err) {\n      log.warn(err);\n    }\n\n    if (values) {\n      this.setValues(values);\n    }\n  }\n  /**\n   * Save text track settings to localStorage\n   */\n  ;\n\n  _proto.saveSettings = function saveSettings() {\n    if (!this.options_.persistTextTrackSettings) {\n      return;\n    }\n\n    var values = this.getValues();\n\n    try {\n      if (Object.keys(values).length) {\n        window$1.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(values));\n      } else {\n        window$1.localStorage.removeItem(LOCAL_STORAGE_KEY);\n      }\n    } catch (err) {\n      log.warn(err);\n    }\n  }\n  /**\n   * Update display of text track settings\n   */\n  ;\n\n  _proto.updateDisplay = function updateDisplay() {\n    var ttDisplay = this.player_.getChild('textTrackDisplay');\n\n    if (ttDisplay) {\n      ttDisplay.updateDisplay();\n    }\n  }\n  /**\n   * conditionally blur the element and refocus the captions button\n   *\n   * @private\n   */\n  ;\n\n  _proto.conditionalBlur_ = function conditionalBlur_() {\n    this.previouslyActiveEl_ = null;\n    this.off(document, 'keydown', this.handleKeyDown);\n    var cb = this.player_.controlBar;\n    var subsCapsBtn = cb && cb.subsCapsButton;\n    var ccBtn = cb && cb.captionsButton;\n\n    if (subsCapsBtn) {\n      subsCapsBtn.focus();\n    } else if (ccBtn) {\n      ccBtn.focus();\n    }\n  };\n\n  return TextTrackSettings;\n}(ModalDialog);\n\nComponent.registerComponent('TextTrackSettings', TextTrackSettings);\n\n/**\n * A Resize Manager. It is in charge of triggering `playerresize` on the player in the right conditions.\n *\n * It'll either create an iframe and use a debounced resize handler on it or use the new {@link https://wicg.github.io/ResizeObserver/|ResizeObserver}.\n *\n * If the ResizeObserver is available natively, it will be used. A polyfill can be passed in as an option.\n * If a `playerresize` event is not needed, the ResizeManager component can be removed from the player, see the example below.\n * @example <caption>How to disable the resize manager</caption>\n * const player = videojs('#vid', {\n *   resizeManager: false\n * });\n *\n * @see {@link https://wicg.github.io/ResizeObserver/|ResizeObserver specification}\n *\n * @extends Component\n */\n\nvar ResizeManager =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(ResizeManager, _Component);\n\n  /**\n   * Create the ResizeManager.\n   *\n   * @param {Object} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of ResizeManager options.\n   *\n   * @param {Object} [options.ResizeObserver]\n   *        A polyfill for ResizeObserver can be passed in here.\n   *        If this is set to null it will ignore the native ResizeObserver and fall back to the iframe fallback.\n   */\n  function ResizeManager(player, options) {\n    var _this;\n\n    var RESIZE_OBSERVER_AVAILABLE = options.ResizeObserver || window$1.ResizeObserver; // if `null` was passed, we want to disable the ResizeObserver\n\n    if (options.ResizeObserver === null) {\n      RESIZE_OBSERVER_AVAILABLE = false;\n    } // Only create an element when ResizeObserver isn't available\n\n\n    var options_ = mergeOptions({\n      createEl: !RESIZE_OBSERVER_AVAILABLE,\n      reportTouchActivity: false\n    }, options);\n    _this = _Component.call(this, player, options_) || this;\n    _this.ResizeObserver = options.ResizeObserver || window$1.ResizeObserver;\n    _this.loadListener_ = null;\n    _this.resizeObserver_ = null;\n    _this.debouncedHandler_ = debounce(function () {\n      _this.resizeHandler();\n    }, 100, false, _assertThisInitialized(_assertThisInitialized(_this)));\n\n    if (RESIZE_OBSERVER_AVAILABLE) {\n      _this.resizeObserver_ = new _this.ResizeObserver(_this.debouncedHandler_);\n\n      _this.resizeObserver_.observe(player.el());\n    } else {\n      _this.loadListener_ = function () {\n        if (!_this.el_ || !_this.el_.contentWindow) {\n          return;\n        }\n\n        var debouncedHandler_ = _this.debouncedHandler_;\n\n        var unloadListener_ = _this.unloadListener_ = function () {\n          off(this, 'resize', debouncedHandler_);\n          off(this, 'unload', unloadListener_);\n          unloadListener_ = null;\n        }; // safari and edge can unload the iframe before resizemanager dispose\n        // we have to dispose of event handlers correctly before that happens\n\n\n        on(_this.el_.contentWindow, 'unload', unloadListener_);\n        on(_this.el_.contentWindow, 'resize', debouncedHandler_);\n      };\n\n      _this.one('load', _this.loadListener_);\n    }\n\n    return _this;\n  }\n\n  var _proto = ResizeManager.prototype;\n\n  _proto.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'iframe', {\n      className: 'vjs-resize-manager',\n      tabIndex: -1\n    }, {\n      'aria-hidden': 'true'\n    });\n  }\n  /**\n   * Called when a resize is triggered on the iframe or a resize is observed via the ResizeObserver\n   *\n   * @fires Player#playerresize\n   */\n  ;\n\n  _proto.resizeHandler = function resizeHandler() {\n    /**\n     * Called when the player size has changed\n     *\n     * @event Player#playerresize\n     * @type {EventTarget~Event}\n     */\n    // make sure player is still around to trigger\n    // prevents this from causing an error after dispose\n    if (!this.player_ || !this.player_.trigger) {\n      return;\n    }\n\n    this.player_.trigger('playerresize');\n  };\n\n  _proto.dispose = function dispose() {\n    if (this.debouncedHandler_) {\n      this.debouncedHandler_.cancel();\n    }\n\n    if (this.resizeObserver_) {\n      if (this.player_.el()) {\n        this.resizeObserver_.unobserve(this.player_.el());\n      }\n\n      this.resizeObserver_.disconnect();\n    }\n\n    if (this.loadListener_) {\n      this.off('load', this.loadListener_);\n    }\n\n    if (this.el_ && this.el_.contentWindow && this.unloadListener_) {\n      this.unloadListener_.call(this.el_.contentWindow);\n    }\n\n    this.ResizeObserver = null;\n    this.resizeObserver = null;\n    this.debouncedHandler_ = null;\n    this.loadListener_ = null;\n\n    _Component.prototype.dispose.call(this);\n  };\n\n  return ResizeManager;\n}(Component);\n\nComponent.registerComponent('ResizeManager', ResizeManager);\n\n/* track when we are at the live edge, and other helpers for live playback */\n\nvar LiveTracker =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(LiveTracker, _Component);\n\n  function LiveTracker(player, options) {\n    var _this;\n\n    // LiveTracker does not need an element\n    var options_ = mergeOptions({\n      createEl: false\n    }, options);\n    _this = _Component.call(this, player, options_) || this;\n\n    _this.reset_();\n\n    _this.on(_this.player_, 'durationchange', _this.handleDurationchange); // we don't need to track live playback if the document is hidden,\n    // also, tracking when the document is hidden can\n    // cause the CPU to spike and eventually crash the page on IE11.\n\n\n    if (IE_VERSION && 'hidden' in document && 'visibilityState' in document) {\n      _this.on(document, 'visibilitychange', _this.handleVisibilityChange);\n    }\n\n    return _this;\n  }\n\n  var _proto = LiveTracker.prototype;\n\n  _proto.handleVisibilityChange = function handleVisibilityChange() {\n    if (this.player_.duration() !== Infinity) {\n      return;\n    }\n\n    if (document.hidden) {\n      this.stopTracking();\n    } else {\n      this.startTracking();\n    }\n  };\n\n  _proto.isBehind_ = function isBehind_() {\n    // don't report that we are behind until a timeupdate has been seen\n    if (!this.timeupdateSeen_) {\n      return false;\n    }\n\n    var liveCurrentTime = this.liveCurrentTime();\n    var currentTime = this.player_.currentTime();\n    var seekableIncrement = this.seekableIncrement_; // the live edge window is the amount of seconds away from live\n    // that a player can be, but still be considered live.\n    // we add 0.07 because the live tracking happens every 30ms\n    // and we want some wiggle room for short segment live playback\n\n    var liveEdgeWindow = seekableIncrement * 2 + 0.07; // on Android liveCurrentTime can bee Infinity, because seekableEnd\n    // can be Infinity, so we handle that case.\n\n    return liveCurrentTime !== Infinity && liveCurrentTime - liveEdgeWindow >= currentTime;\n  } // all the functionality for tracking when seek end changes\n  // and for tracking how far past seek end we should be\n  ;\n\n  _proto.trackLive_ = function trackLive_() {\n    this.pastSeekEnd_ = this.pastSeekEnd_;\n    var seekable = this.player_.seekable(); // skip undefined seekable\n\n    if (!seekable || !seekable.length) {\n      return;\n    }\n\n    var newSeekEnd = this.seekableEnd(); // we can only tell if we are behind live, when seekable changes\n    // once we detect that seekable has changed we check the new seek\n    // end against current time, with a fudge value of half a second.\n\n    if (newSeekEnd !== this.lastSeekEnd_) {\n      if (this.lastSeekEnd_) {\n        this.seekableIncrement_ = Math.abs(newSeekEnd - this.lastSeekEnd_);\n      }\n\n      this.pastSeekEnd_ = 0;\n      this.lastSeekEnd_ = newSeekEnd;\n      this.trigger('seekableendchange');\n    }\n\n    this.pastSeekEnd_ = this.pastSeekEnd() + 0.03;\n\n    if (this.isBehind_() !== this.behindLiveEdge()) {\n      this.behindLiveEdge_ = this.isBehind_();\n      this.trigger('liveedgechange');\n    }\n  }\n  /**\n   * handle a durationchange event on the player\n   * and start/stop tracking accordingly.\n   */\n  ;\n\n  _proto.handleDurationchange = function handleDurationchange() {\n    if (this.player_.duration() === Infinity) {\n      this.startTracking();\n    } else {\n      this.stopTracking();\n    }\n  }\n  /**\n   * start tracking live playback\n   */\n  ;\n\n  _proto.startTracking = function startTracking() {\n    var _this2 = this;\n\n    if (this.isTracking()) {\n      return;\n    }\n\n    this.trackingInterval_ = this.setInterval(this.trackLive_, 30);\n    this.trackLive_();\n    this.on(this.player_, 'play', this.trackLive_);\n    this.on(this.player_, 'pause', this.trackLive_);\n    this.one(this.player_, 'play', this.handlePlay); // this is to prevent showing that we are not live\n    // before a video starts to play\n\n    if (!this.timeupdateSeen_) {\n      this.handleTimeupdate = function () {\n        _this2.timeupdateSeen_ = true;\n        _this2.handleTimeupdate = null;\n      };\n\n      this.one(this.player_, 'timeupdate', this.handleTimeupdate);\n    }\n  };\n\n  _proto.handlePlay = function handlePlay() {\n    this.one(this.player_, 'timeupdate', this.seekToLiveEdge);\n  }\n  /**\n   * Stop tracking, and set all internal variables to\n   * their initial value.\n   */\n  ;\n\n  _proto.reset_ = function reset_() {\n    this.pastSeekEnd_ = 0;\n    this.lastSeekEnd_ = null;\n    this.behindLiveEdge_ = null;\n    this.timeupdateSeen_ = false;\n    this.clearInterval(this.trackingInterval_);\n    this.trackingInterval_ = null;\n    this.seekableIncrement_ = 12;\n    this.off(this.player_, 'play', this.trackLive_);\n    this.off(this.player_, 'pause', this.trackLive_);\n    this.off(this.player_, 'play', this.handlePlay);\n    this.off(this.player_, 'timeupdate', this.seekToLiveEdge);\n\n    if (this.handleTimeupdate) {\n      this.off(this.player_, 'timeupdate', this.handleTimeupdate);\n      this.handleTimeupdate = null;\n    }\n  }\n  /**\n   * stop tracking live playback\n   */\n  ;\n\n  _proto.stopTracking = function stopTracking() {\n    if (!this.isTracking()) {\n      return;\n    }\n\n    this.reset_();\n  }\n  /**\n   * A helper to get the player seekable end\n   * so that we don't have to null check everywhere\n   */\n  ;\n\n  _proto.seekableEnd = function seekableEnd() {\n    var seekable = this.player_.seekable();\n    var seekableEnds = [];\n    var i = seekable ? seekable.length : 0;\n\n    while (i--) {\n      seekableEnds.push(seekable.end(i));\n    } // grab the furthest seekable end after sorting, or if there are none\n    // default to Infinity\n\n\n    return seekableEnds.length ? seekableEnds.sort()[seekableEnds.length - 1] : Infinity;\n  }\n  /**\n   * A helper to get the player seekable start\n   * so that we don't have to null check everywhere\n   */\n  ;\n\n  _proto.seekableStart = function seekableStart() {\n    var seekable = this.player_.seekable();\n    var seekableStarts = [];\n    var i = seekable ? seekable.length : 0;\n\n    while (i--) {\n      seekableStarts.push(seekable.start(i));\n    } // grab the first seekable start after sorting, or if there are none\n    // default to 0\n\n\n    return seekableStarts.length ? seekableStarts.sort()[0] : 0;\n  }\n  /**\n   * Get the live time window\n   */\n  ;\n\n  _proto.liveWindow = function liveWindow() {\n    var liveCurrentTime = this.liveCurrentTime();\n\n    if (liveCurrentTime === Infinity) {\n      return Infinity;\n    }\n\n    return liveCurrentTime - this.seekableStart();\n  }\n  /**\n   * Determines if the player is live, only checks if this component\n   * is tracking live playback or not\n   */\n  ;\n\n  _proto.isLive = function isLive() {\n    return this.isTracking();\n  }\n  /**\n   * Determines if currentTime is at the live edge and won't fall behind\n   * on each seekableendchange\n   */\n  ;\n\n  _proto.atLiveEdge = function atLiveEdge() {\n    return !this.behindLiveEdge();\n  }\n  /**\n   * get what we expect the live current time to be\n   */\n  ;\n\n  _proto.liveCurrentTime = function liveCurrentTime() {\n    return this.pastSeekEnd() + this.seekableEnd();\n  }\n  /**\n   * Returns how far past seek end we expect current time to be\n   */\n  ;\n\n  _proto.pastSeekEnd = function pastSeekEnd() {\n    return this.pastSeekEnd_;\n  }\n  /**\n   * If we are currently behind the live edge, aka currentTime will be\n   * behind on a seekableendchange\n   */\n  ;\n\n  _proto.behindLiveEdge = function behindLiveEdge() {\n    return this.behindLiveEdge_;\n  };\n\n  _proto.isTracking = function isTracking() {\n    return typeof this.trackingInterval_ === 'number';\n  }\n  /**\n   * Seek to the live edge if we are behind the live edge\n   */\n  ;\n\n  _proto.seekToLiveEdge = function seekToLiveEdge() {\n    if (this.atLiveEdge()) {\n      return;\n    }\n\n    this.player_.currentTime(this.liveCurrentTime());\n\n    if (this.player_.paused()) {\n      this.player_.play();\n    }\n  };\n\n  _proto.dispose = function dispose() {\n    this.stopTracking();\n\n    _Component.prototype.dispose.call(this);\n  };\n\n  return LiveTracker;\n}(Component);\n\nComponent.registerComponent('LiveTracker', LiveTracker);\n\n/**\n * This function is used to fire a sourceset when there is something\n * similar to `mediaEl.load()` being called. It will try to find the source via\n * the `src` attribute and then the `<source>` elements. It will then fire `sourceset`\n * with the source that was found or empty string if we cannot know. If it cannot\n * find a source then `sourceset` will not be fired.\n *\n * @param {Html5} tech\n *        The tech object that sourceset was setup on\n *\n * @return {boolean}\n *         returns false if the sourceset was not fired and true otherwise.\n */\n\nvar sourcesetLoad = function sourcesetLoad(tech) {\n  var el = tech.el(); // if `el.src` is set, that source will be loaded.\n\n  if (el.hasAttribute('src')) {\n    tech.triggerSourceset(el.src);\n    return true;\n  }\n  /**\n   * Since there isn't a src property on the media element, source elements will be used for\n   * implementing the source selection algorithm. This happens asynchronously and\n   * for most cases were there is more than one source we cannot tell what source will\n   * be loaded, without re-implementing the source selection algorithm. At this time we are not\n   * going to do that. There are three special cases that we do handle here though:\n   *\n   * 1. If there are no sources, do not fire `sourceset`.\n   * 2. If there is only one `<source>` with a `src` property/attribute that is our `src`\n   * 3. If there is more than one `<source>` but all of them have the same `src` url.\n   *    That will be our src.\n   */\n\n\n  var sources = tech.$$('source');\n  var srcUrls = [];\n  var src = ''; // if there are no sources, do not fire sourceset\n\n  if (!sources.length) {\n    return false;\n  } // only count valid/non-duplicate source elements\n\n\n  for (var i = 0; i < sources.length; i++) {\n    var url = sources[i].src;\n\n    if (url && srcUrls.indexOf(url) === -1) {\n      srcUrls.push(url);\n    }\n  } // there were no valid sources\n\n\n  if (!srcUrls.length) {\n    return false;\n  } // there is only one valid source element url\n  // use that\n\n\n  if (srcUrls.length === 1) {\n    src = srcUrls[0];\n  }\n\n  tech.triggerSourceset(src);\n  return true;\n};\n/**\n * our implementation of an `innerHTML` descriptor for browsers\n * that do not have one.\n */\n\n\nvar innerHTMLDescriptorPolyfill = Object.defineProperty({}, 'innerHTML', {\n  get: function get() {\n    return this.cloneNode(true).innerHTML;\n  },\n  set: function set(v) {\n    // make a dummy node to use innerHTML on\n    var dummy = document.createElement(this.nodeName.toLowerCase()); // set innerHTML to the value provided\n\n    dummy.innerHTML = v; // make a document fragment to hold the nodes from dummy\n\n    var docFrag = document.createDocumentFragment(); // copy all of the nodes created by the innerHTML on dummy\n    // to the document fragment\n\n    while (dummy.childNodes.length) {\n      docFrag.appendChild(dummy.childNodes[0]);\n    } // remove content\n\n\n    this.innerText = ''; // now we add all of that html in one by appending the\n    // document fragment. This is how innerHTML does it.\n\n    window$1.Element.prototype.appendChild.call(this, docFrag); // then return the result that innerHTML's setter would\n\n    return this.innerHTML;\n  }\n});\n/**\n * Get a property descriptor given a list of priorities and the\n * property to get.\n */\n\nvar getDescriptor = function getDescriptor(priority, prop) {\n  var descriptor = {};\n\n  for (var i = 0; i < priority.length; i++) {\n    descriptor = Object.getOwnPropertyDescriptor(priority[i], prop);\n\n    if (descriptor && descriptor.set && descriptor.get) {\n      break;\n    }\n  }\n\n  descriptor.enumerable = true;\n  descriptor.configurable = true;\n  return descriptor;\n};\n\nvar getInnerHTMLDescriptor = function getInnerHTMLDescriptor(tech) {\n  return getDescriptor([tech.el(), window$1.HTMLMediaElement.prototype, window$1.Element.prototype, innerHTMLDescriptorPolyfill], 'innerHTML');\n};\n/**\n * Patches browser internal functions so that we can tell synchronously\n * if a `<source>` was appended to the media element. For some reason this\n * causes a `sourceset` if the the media element is ready and has no source.\n * This happens when:\n * - The page has just loaded and the media element does not have a source.\n * - The media element was emptied of all sources, then `load()` was called.\n *\n * It does this by patching the following functions/properties when they are supported:\n *\n * - `append()` - can be used to add a `<source>` element to the media element\n * - `appendChild()` - can be used to add a `<source>` element to the media element\n * - `insertAdjacentHTML()` -  can be used to add a `<source>` element to the media element\n * - `innerHTML` -  can be used to add a `<source>` element to the media element\n *\n * @param {Html5} tech\n *        The tech object that sourceset is being setup on.\n */\n\n\nvar firstSourceWatch = function firstSourceWatch(tech) {\n  var el = tech.el(); // make sure firstSourceWatch isn't setup twice.\n\n  if (el.resetSourceWatch_) {\n    return;\n  }\n\n  var old = {};\n  var innerDescriptor = getInnerHTMLDescriptor(tech);\n\n  var appendWrapper = function appendWrapper(appendFn) {\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var retval = appendFn.apply(el, args);\n      sourcesetLoad(tech);\n      return retval;\n    };\n  };\n\n  ['append', 'appendChild', 'insertAdjacentHTML'].forEach(function (k) {\n    if (!el[k]) {\n      return;\n    } // store the old function\n\n\n    old[k] = el[k]; // call the old function with a sourceset if a source\n    // was loaded\n\n    el[k] = appendWrapper(old[k]);\n  });\n  Object.defineProperty(el, 'innerHTML', mergeOptions(innerDescriptor, {\n    set: appendWrapper(innerDescriptor.set)\n  }));\n\n  el.resetSourceWatch_ = function () {\n    el.resetSourceWatch_ = null;\n    Object.keys(old).forEach(function (k) {\n      el[k] = old[k];\n    });\n    Object.defineProperty(el, 'innerHTML', innerDescriptor);\n  }; // on the first sourceset, we need to revert our changes\n\n\n  tech.one('sourceset', el.resetSourceWatch_);\n};\n/**\n * our implementation of a `src` descriptor for browsers\n * that do not have one.\n */\n\n\nvar srcDescriptorPolyfill = Object.defineProperty({}, 'src', {\n  get: function get() {\n    if (this.hasAttribute('src')) {\n      return getAbsoluteURL(window$1.Element.prototype.getAttribute.call(this, 'src'));\n    }\n\n    return '';\n  },\n  set: function set(v) {\n    window$1.Element.prototype.setAttribute.call(this, 'src', v);\n    return v;\n  }\n});\n\nvar getSrcDescriptor = function getSrcDescriptor(tech) {\n  return getDescriptor([tech.el(), window$1.HTMLMediaElement.prototype, srcDescriptorPolyfill], 'src');\n};\n/**\n * setup `sourceset` handling on the `Html5` tech. This function\n * patches the following element properties/functions:\n *\n * - `src` - to determine when `src` is set\n * - `setAttribute()` - to determine when `src` is set\n * - `load()` - this re-triggers the source selection algorithm, and can\n *              cause a sourceset.\n *\n * If there is no source when we are adding `sourceset` support or during a `load()`\n * we also patch the functions listed in `firstSourceWatch`.\n *\n * @param {Html5} tech\n *        The tech to patch\n */\n\n\nvar setupSourceset = function setupSourceset(tech) {\n  if (!tech.featuresSourceset) {\n    return;\n  }\n\n  var el = tech.el(); // make sure sourceset isn't setup twice.\n\n  if (el.resetSourceset_) {\n    return;\n  }\n\n  var srcDescriptor = getSrcDescriptor(tech);\n  var oldSetAttribute = el.setAttribute;\n  var oldLoad = el.load;\n  Object.defineProperty(el, 'src', mergeOptions(srcDescriptor, {\n    set: function set(v) {\n      var retval = srcDescriptor.set.call(el, v); // we use the getter here to get the actual value set on src\n\n      tech.triggerSourceset(el.src);\n      return retval;\n    }\n  }));\n\n  el.setAttribute = function (n, v) {\n    var retval = oldSetAttribute.call(el, n, v);\n\n    if (/src/i.test(n)) {\n      tech.triggerSourceset(el.src);\n    }\n\n    return retval;\n  };\n\n  el.load = function () {\n    var retval = oldLoad.call(el); // if load was called, but there was no source to fire\n    // sourceset on. We have to watch for a source append\n    // as that can trigger a `sourceset` when the media element\n    // has no source\n\n    if (!sourcesetLoad(tech)) {\n      tech.triggerSourceset('');\n      firstSourceWatch(tech);\n    }\n\n    return retval;\n  };\n\n  if (el.currentSrc) {\n    tech.triggerSourceset(el.currentSrc);\n  } else if (!sourcesetLoad(tech)) {\n    firstSourceWatch(tech);\n  }\n\n  el.resetSourceset_ = function () {\n    el.resetSourceset_ = null;\n    el.load = oldLoad;\n    el.setAttribute = oldSetAttribute;\n    Object.defineProperty(el, 'src', srcDescriptor);\n\n    if (el.resetSourceWatch_) {\n      el.resetSourceWatch_();\n    }\n  };\n};\n\nfunction _templateObject$1() {\n  var data = _taggedTemplateLiteralLoose([\"Text Tracks are being loaded from another origin but the crossorigin attribute isn't used.\\n            This may prevent text tracks from loading.\"]);\n\n  _templateObject$1 = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n/**\n * HTML5 Media Controller - Wrapper for HTML5 Media API\n *\n * @mixes Tech~SourceHandlerAdditions\n * @extends Tech\n */\n\nvar Html5 =\n/*#__PURE__*/\nfunction (_Tech) {\n  _inheritsLoose(Html5, _Tech);\n\n  /**\n  * Create an instance of this Tech.\n  *\n  * @param {Object} [options]\n  *        The key/value store of player options.\n  *\n  * @param {Component~ReadyCallback} ready\n  *        Callback function to call when the `HTML5` Tech is ready.\n  */\n  function Html5(options, ready) {\n    var _this;\n\n    _this = _Tech.call(this, options, ready) || this;\n    var source = options.source;\n    var crossoriginTracks = false; // Set the source if one is provided\n    // 1) Check if the source is new (if not, we want to keep the original so playback isn't interrupted)\n    // 2) Check to see if the network state of the tag was failed at init, and if so, reset the source\n    // anyway so the error gets fired.\n\n    if (source && (_this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) {\n      _this.setSource(source);\n    } else {\n      _this.handleLateInit_(_this.el_);\n    } // setup sourceset after late sourceset/init\n\n\n    if (options.enableSourceset) {\n      _this.setupSourcesetHandling_();\n    }\n\n    if (_this.el_.hasChildNodes()) {\n      var nodes = _this.el_.childNodes;\n      var nodesLength = nodes.length;\n      var removeNodes = [];\n\n      while (nodesLength--) {\n        var node = nodes[nodesLength];\n        var nodeName = node.nodeName.toLowerCase();\n\n        if (nodeName === 'track') {\n          if (!_this.featuresNativeTextTracks) {\n            // Empty video tag tracks so the built-in player doesn't use them also.\n            // This may not be fast enough to stop HTML5 browsers from reading the tags\n            // so we'll need to turn off any default tracks if we're manually doing\n            // captions and subtitles. videoElement.textTracks\n            removeNodes.push(node);\n          } else {\n            // store HTMLTrackElement and TextTrack to remote list\n            _this.remoteTextTrackEls().addTrackElement_(node);\n\n            _this.remoteTextTracks().addTrack(node.track);\n\n            _this.textTracks().addTrack(node.track);\n\n            if (!crossoriginTracks && !_this.el_.hasAttribute('crossorigin') && isCrossOrigin(node.src)) {\n              crossoriginTracks = true;\n            }\n          }\n        }\n      }\n\n      for (var i = 0; i < removeNodes.length; i++) {\n        _this.el_.removeChild(removeNodes[i]);\n      }\n    }\n\n    _this.proxyNativeTracks_();\n\n    if (_this.featuresNativeTextTracks && crossoriginTracks) {\n      log.warn(tsml(_templateObject$1()));\n    } // prevent iOS Safari from disabling metadata text tracks during native playback\n\n\n    _this.restoreMetadataTracksInIOSNativePlayer_(); // Determine if native controls should be used\n    // Our goal should be to get the custom controls on mobile solid everywhere\n    // so we can remove this all together. Right now this will block custom\n    // controls on touch enabled laptops like the Chrome Pixel\n\n\n    if ((TOUCH_ENABLED || IS_IPHONE || IS_NATIVE_ANDROID) && options.nativeControlsForTouch === true) {\n      _this.setControls(true);\n    } // on iOS, we want to proxy `webkitbeginfullscreen` and `webkitendfullscreen`\n    // into a `fullscreenchange` event\n\n\n    _this.proxyWebkitFullscreen_();\n\n    _this.triggerReady();\n\n    return _this;\n  }\n  /**\n   * Dispose of `HTML5` media element and remove all tracks.\n   */\n\n\n  var _proto = Html5.prototype;\n\n  _proto.dispose = function dispose() {\n    if (this.el_ && this.el_.resetSourceset_) {\n      this.el_.resetSourceset_();\n    }\n\n    Html5.disposeMediaElement(this.el_);\n    this.options_ = null; // tech will handle clearing of the emulated track list\n\n    _Tech.prototype.dispose.call(this);\n  }\n  /**\n   * Modify the media element so that we can detect when\n   * the source is changed. Fires `sourceset` just after the source has changed\n   */\n  ;\n\n  _proto.setupSourcesetHandling_ = function setupSourcesetHandling_() {\n    setupSourceset(this);\n  }\n  /**\n   * When a captions track is enabled in the iOS Safari native player, all other\n   * tracks are disabled (including metadata tracks), which nulls all of their\n   * associated cue points. This will restore metadata tracks to their pre-fullscreen\n   * state in those cases so that cue points are not needlessly lost.\n   *\n   * @private\n   */\n  ;\n\n  _proto.restoreMetadataTracksInIOSNativePlayer_ = function restoreMetadataTracksInIOSNativePlayer_() {\n    var textTracks = this.textTracks();\n    var metadataTracksPreFullscreenState; // captures a snapshot of every metadata track's current state\n\n    var takeMetadataTrackSnapshot = function takeMetadataTrackSnapshot() {\n      metadataTracksPreFullscreenState = [];\n\n      for (var i = 0; i < textTracks.length; i++) {\n        var track = textTracks[i];\n\n        if (track.kind === 'metadata') {\n          metadataTracksPreFullscreenState.push({\n            track: track,\n            storedMode: track.mode\n          });\n        }\n      }\n    }; // snapshot each metadata track's initial state, and update the snapshot\n    // each time there is a track 'change' event\n\n\n    takeMetadataTrackSnapshot();\n    textTracks.addEventListener('change', takeMetadataTrackSnapshot);\n    this.on('dispose', function () {\n      return textTracks.removeEventListener('change', takeMetadataTrackSnapshot);\n    });\n\n    var restoreTrackMode = function restoreTrackMode() {\n      for (var i = 0; i < metadataTracksPreFullscreenState.length; i++) {\n        var storedTrack = metadataTracksPreFullscreenState[i];\n\n        if (storedTrack.track.mode === 'disabled' && storedTrack.track.mode !== storedTrack.storedMode) {\n          storedTrack.track.mode = storedTrack.storedMode;\n        }\n      } // we only want this handler to be executed on the first 'change' event\n\n\n      textTracks.removeEventListener('change', restoreTrackMode);\n    }; // when we enter fullscreen playback, stop updating the snapshot and\n    // restore all track modes to their pre-fullscreen state\n\n\n    this.on('webkitbeginfullscreen', function () {\n      textTracks.removeEventListener('change', takeMetadataTrackSnapshot); // remove the listener before adding it just in case it wasn't previously removed\n\n      textTracks.removeEventListener('change', restoreTrackMode);\n      textTracks.addEventListener('change', restoreTrackMode);\n    }); // start updating the snapshot again after leaving fullscreen\n\n    this.on('webkitendfullscreen', function () {\n      // remove the listener before adding it just in case it wasn't previously removed\n      textTracks.removeEventListener('change', takeMetadataTrackSnapshot);\n      textTracks.addEventListener('change', takeMetadataTrackSnapshot); // remove the restoreTrackMode handler in case it wasn't triggered during fullscreen playback\n\n      textTracks.removeEventListener('change', restoreTrackMode);\n    });\n  }\n  /**\n   * Attempt to force override of tracks for the given type\n   *\n   * @param {string} type - Track type to override, possible values include 'Audio',\n   * 'Video', and 'Text'.\n   * @param {boolean} override - If set to true native audio/video will be overridden,\n   * otherwise native audio/video will potentially be used.\n   * @private\n   */\n  ;\n\n  _proto.overrideNative_ = function overrideNative_(type, override) {\n    var _this2 = this;\n\n    // If there is no behavioral change don't add/remove listeners\n    if (override !== this[\"featuresNative\" + type + \"Tracks\"]) {\n      return;\n    }\n\n    var lowerCaseType = type.toLowerCase();\n\n    if (this[lowerCaseType + \"TracksListeners_\"]) {\n      Object.keys(this[lowerCaseType + \"TracksListeners_\"]).forEach(function (eventName) {\n        var elTracks = _this2.el()[lowerCaseType + \"Tracks\"];\n\n        elTracks.removeEventListener(eventName, _this2[lowerCaseType + \"TracksListeners_\"][eventName]);\n      });\n    }\n\n    this[\"featuresNative\" + type + \"Tracks\"] = !override;\n    this[lowerCaseType + \"TracksListeners_\"] = null;\n    this.proxyNativeTracksForType_(lowerCaseType);\n  }\n  /**\n   * Attempt to force override of native audio tracks.\n   *\n   * @param {boolean} override - If set to true native audio will be overridden,\n   * otherwise native audio will potentially be used.\n   */\n  ;\n\n  _proto.overrideNativeAudioTracks = function overrideNativeAudioTracks(override) {\n    this.overrideNative_('Audio', override);\n  }\n  /**\n   * Attempt to force override of native video tracks.\n   *\n   * @param {boolean} override - If set to true native video will be overridden,\n   * otherwise native video will potentially be used.\n   */\n  ;\n\n  _proto.overrideNativeVideoTracks = function overrideNativeVideoTracks(override) {\n    this.overrideNative_('Video', override);\n  }\n  /**\n   * Proxy native track list events for the given type to our track\n   * lists if the browser we are playing in supports that type of track list.\n   *\n   * @param {string} name - Track type; values include 'audio', 'video', and 'text'\n   * @private\n   */\n  ;\n\n  _proto.proxyNativeTracksForType_ = function proxyNativeTracksForType_(name) {\n    var _this3 = this;\n\n    var props = NORMAL[name];\n    var elTracks = this.el()[props.getterName];\n    var techTracks = this[props.getterName]();\n\n    if (!this[\"featuresNative\" + props.capitalName + \"Tracks\"] || !elTracks || !elTracks.addEventListener) {\n      return;\n    }\n\n    var listeners = {\n      change: function change(e) {\n        techTracks.trigger({\n          type: 'change',\n          target: techTracks,\n          currentTarget: techTracks,\n          srcElement: techTracks\n        });\n      },\n      addtrack: function addtrack(e) {\n        techTracks.addTrack(e.track);\n      },\n      removetrack: function removetrack(e) {\n        techTracks.removeTrack(e.track);\n      }\n    };\n\n    var removeOldTracks = function removeOldTracks() {\n      var removeTracks = [];\n\n      for (var i = 0; i < techTracks.length; i++) {\n        var found = false;\n\n        for (var j = 0; j < elTracks.length; j++) {\n          if (elTracks[j] === techTracks[i]) {\n            found = true;\n            break;\n          }\n        }\n\n        if (!found) {\n          removeTracks.push(techTracks[i]);\n        }\n      }\n\n      while (removeTracks.length) {\n        techTracks.removeTrack(removeTracks.shift());\n      }\n    };\n\n    this[props.getterName + 'Listeners_'] = listeners;\n    Object.keys(listeners).forEach(function (eventName) {\n      var listener = listeners[eventName];\n      elTracks.addEventListener(eventName, listener);\n\n      _this3.on('dispose', function (e) {\n        return elTracks.removeEventListener(eventName, listener);\n      });\n    }); // Remove (native) tracks that are not used anymore\n\n    this.on('loadstart', removeOldTracks);\n    this.on('dispose', function (e) {\n      return _this3.off('loadstart', removeOldTracks);\n    });\n  }\n  /**\n   * Proxy all native track list events to our track lists if the browser we are playing\n   * in supports that type of track list.\n   *\n   * @private\n   */\n  ;\n\n  _proto.proxyNativeTracks_ = function proxyNativeTracks_() {\n    var _this4 = this;\n\n    NORMAL.names.forEach(function (name) {\n      _this4.proxyNativeTracksForType_(name);\n    });\n  }\n  /**\n   * Create the `Html5` Tech's DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  ;\n\n  _proto.createEl = function createEl$$1() {\n    var el = this.options_.tag; // Check if this browser supports moving the element into the box.\n    // On the iPhone video will break if you move the element,\n    // So we have to create a brand new element.\n    // If we ingested the player div, we do not need to move the media element.\n\n    if (!el || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {\n      // If the original tag is still there, clone and remove it.\n      if (el) {\n        var clone = el.cloneNode(true);\n\n        if (el.parentNode) {\n          el.parentNode.insertBefore(clone, el);\n        }\n\n        Html5.disposeMediaElement(el);\n        el = clone;\n      } else {\n        el = document.createElement('video'); // determine if native controls should be used\n\n        var tagAttributes = this.options_.tag && getAttributes(this.options_.tag);\n        var attributes = mergeOptions({}, tagAttributes);\n\n        if (!TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) {\n          delete attributes.controls;\n        }\n\n        setAttributes(el, assign(attributes, {\n          id: this.options_.techId,\n          class: 'vjs-tech'\n        }));\n      }\n\n      el.playerId = this.options_.playerId;\n    }\n\n    if (typeof this.options_.preload !== 'undefined') {\n      setAttribute(el, 'preload', this.options_.preload);\n    } // Update specific tag settings, in case they were overridden\n    // `autoplay` has to be *last* so that `muted` and `playsinline` are present\n    // when iOS/Safari or other browsers attempt to autoplay.\n\n\n    var settingsAttrs = ['loop', 'muted', 'playsinline', 'autoplay'];\n\n    for (var i = 0; i < settingsAttrs.length; i++) {\n      var attr = settingsAttrs[i];\n      var value = this.options_[attr];\n\n      if (typeof value !== 'undefined') {\n        if (value) {\n          setAttribute(el, attr, attr);\n        } else {\n          removeAttribute(el, attr);\n        }\n\n        el[attr] = value;\n      }\n    }\n\n    return el;\n  }\n  /**\n   * This will be triggered if the loadstart event has already fired, before videojs was\n   * ready. Two known examples of when this can happen are:\n   * 1. If we're loading the playback object after it has started loading\n   * 2. The media is already playing the (often with autoplay on) then\n   *\n   * This function will fire another loadstart so that videojs can catchup.\n   *\n   * @fires Tech#loadstart\n   *\n   * @return {undefined}\n   *         returns nothing.\n   */\n  ;\n\n  _proto.handleLateInit_ = function handleLateInit_(el) {\n    if (el.networkState === 0 || el.networkState === 3) {\n      // The video element hasn't started loading the source yet\n      // or didn't find a source\n      return;\n    }\n\n    if (el.readyState === 0) {\n      // NetworkState is set synchronously BUT loadstart is fired at the\n      // end of the current stack, usually before setInterval(fn, 0).\n      // So at this point we know loadstart may have already fired or is\n      // about to fire, and either way the player hasn't seen it yet.\n      // We don't want to fire loadstart prematurely here and cause a\n      // double loadstart so we'll wait and see if it happens between now\n      // and the next loop, and fire it if not.\n      // HOWEVER, we also want to make sure it fires before loadedmetadata\n      // which could also happen between now and the next loop, so we'll\n      // watch for that also.\n      var loadstartFired = false;\n\n      var setLoadstartFired = function setLoadstartFired() {\n        loadstartFired = true;\n      };\n\n      this.on('loadstart', setLoadstartFired);\n\n      var triggerLoadstart = function triggerLoadstart() {\n        // We did miss the original loadstart. Make sure the player\n        // sees loadstart before loadedmetadata\n        if (!loadstartFired) {\n          this.trigger('loadstart');\n        }\n      };\n\n      this.on('loadedmetadata', triggerLoadstart);\n      this.ready(function () {\n        this.off('loadstart', setLoadstartFired);\n        this.off('loadedmetadata', triggerLoadstart);\n\n        if (!loadstartFired) {\n          // We did miss the original native loadstart. Fire it now.\n          this.trigger('loadstart');\n        }\n      });\n      return;\n    } // From here on we know that loadstart already fired and we missed it.\n    // The other readyState events aren't as much of a problem if we double\n    // them, so not going to go to as much trouble as loadstart to prevent\n    // that unless we find reason to.\n\n\n    var eventsToTrigger = ['loadstart']; // loadedmetadata: newly equal to HAVE_METADATA (1) or greater\n\n    eventsToTrigger.push('loadedmetadata'); // loadeddata: newly increased to HAVE_CURRENT_DATA (2) or greater\n\n    if (el.readyState >= 2) {\n      eventsToTrigger.push('loadeddata');\n    } // canplay: newly increased to HAVE_FUTURE_DATA (3) or greater\n\n\n    if (el.readyState >= 3) {\n      eventsToTrigger.push('canplay');\n    } // canplaythrough: newly equal to HAVE_ENOUGH_DATA (4)\n\n\n    if (el.readyState >= 4) {\n      eventsToTrigger.push('canplaythrough');\n    } // We still need to give the player time to add event listeners\n\n\n    this.ready(function () {\n      eventsToTrigger.forEach(function (type) {\n        this.trigger(type);\n      }, this);\n    });\n  }\n  /**\n   * Set current time for the `HTML5` tech.\n   *\n   * @param {number} seconds\n   *        Set the current time of the media to this.\n   */\n  ;\n\n  _proto.setCurrentTime = function setCurrentTime(seconds) {\n    try {\n      this.el_.currentTime = seconds;\n    } catch (e) {\n      log(e, 'Video is not ready. (Video.js)'); // this.warning(VideoJS.warnings.videoNotReady);\n    }\n  }\n  /**\n   * Get the current duration of the HTML5 media element.\n   *\n   * @return {number}\n   *         The duration of the media or 0 if there is no duration.\n   */\n  ;\n\n  _proto.duration = function duration() {\n    var _this5 = this;\n\n    // Android Chrome will report duration as Infinity for VOD HLS until after\n    // playback has started, which triggers the live display erroneously.\n    // Return NaN if playback has not started and trigger a durationupdate once\n    // the duration can be reliably known.\n    if (this.el_.duration === Infinity && IS_ANDROID && IS_CHROME && this.el_.currentTime === 0) {\n      // Wait for the first `timeupdate` with currentTime > 0 - there may be\n      // several with 0\n      var checkProgress = function checkProgress() {\n        if (_this5.el_.currentTime > 0) {\n          // Trigger durationchange for genuinely live video\n          if (_this5.el_.duration === Infinity) {\n            _this5.trigger('durationchange');\n          }\n\n          _this5.off('timeupdate', checkProgress);\n        }\n      };\n\n      this.on('timeupdate', checkProgress);\n      return NaN;\n    }\n\n    return this.el_.duration || NaN;\n  }\n  /**\n   * Get the current width of the HTML5 media element.\n   *\n   * @return {number}\n   *         The width of the HTML5 media element.\n   */\n  ;\n\n  _proto.width = function width() {\n    return this.el_.offsetWidth;\n  }\n  /**\n   * Get the current height of the HTML5 media element.\n   *\n   * @return {number}\n   *         The height of the HTML5 media element.\n   */\n  ;\n\n  _proto.height = function height() {\n    return this.el_.offsetHeight;\n  }\n  /**\n   * Proxy iOS `webkitbeginfullscreen` and `webkitendfullscreen` into\n   * `fullscreenchange` event.\n   *\n   * @private\n   * @fires fullscreenchange\n   * @listens webkitendfullscreen\n   * @listens webkitbeginfullscreen\n   * @listens webkitbeginfullscreen\n   */\n  ;\n\n  _proto.proxyWebkitFullscreen_ = function proxyWebkitFullscreen_() {\n    var _this6 = this;\n\n    if (!('webkitDisplayingFullscreen' in this.el_)) {\n      return;\n    }\n\n    var endFn = function endFn() {\n      this.trigger('fullscreenchange', {\n        isFullscreen: false\n      });\n    };\n\n    var beginFn = function beginFn() {\n      if ('webkitPresentationMode' in this.el_ && this.el_.webkitPresentationMode !== 'picture-in-picture') {\n        this.one('webkitendfullscreen', endFn);\n        this.trigger('fullscreenchange', {\n          isFullscreen: true\n        });\n      }\n    };\n\n    this.on('webkitbeginfullscreen', beginFn);\n    this.on('dispose', function () {\n      _this6.off('webkitbeginfullscreen', beginFn);\n\n      _this6.off('webkitendfullscreen', endFn);\n    });\n  }\n  /**\n   * Check if fullscreen is supported on the current playback device.\n   *\n   * @return {boolean}\n   *         - True if fullscreen is supported.\n   *         - False if fullscreen is not supported.\n   */\n  ;\n\n  _proto.supportsFullScreen = function supportsFullScreen() {\n    if (typeof this.el_.webkitEnterFullScreen === 'function') {\n      var userAgent = window$1.navigator && window$1.navigator.userAgent || ''; // Seems to be broken in Chromium/Chrome && Safari in Leopard\n\n      if (/Android/.test(userAgent) || !/Chrome|Mac OS X 10.5/.test(userAgent)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Request that the `HTML5` Tech enter fullscreen.\n   */\n  ;\n\n  _proto.enterFullScreen = function enterFullScreen() {\n    var video = this.el_;\n\n    if (video.paused && video.networkState <= video.HAVE_METADATA) {\n      // attempt to prime the video element for programmatic access\n      // this isn't necessary on the desktop but shouldn't hurt\n      this.el_.play(); // playing and pausing synchronously during the transition to fullscreen\n      // can get iOS ~6.1 devices into a play/pause loop\n\n      this.setTimeout(function () {\n        video.pause();\n        video.webkitEnterFullScreen();\n      }, 0);\n    } else {\n      video.webkitEnterFullScreen();\n    }\n  }\n  /**\n   * Request that the `HTML5` Tech exit fullscreen.\n   */\n  ;\n\n  _proto.exitFullScreen = function exitFullScreen() {\n    this.el_.webkitExitFullScreen();\n  }\n  /**\n   * A getter/setter for the `Html5` Tech's source object.\n   * > Note: Please use {@link Html5#setSource}\n   *\n   * @param {Tech~SourceObject} [src]\n   *        The source object you want to set on the `HTML5` techs element.\n   *\n   * @return {Tech~SourceObject|undefined}\n   *         - The current source object when a source is not passed in.\n   *         - undefined when setting\n   *\n   * @deprecated Since version 5.\n   */\n  ;\n\n  _proto.src = function src(_src) {\n    if (_src === undefined) {\n      return this.el_.src;\n    } // Setting src through `src` instead of `setSrc` will be deprecated\n\n\n    this.setSrc(_src);\n  }\n  /**\n   * Reset the tech by removing all sources and then calling\n   * {@link Html5.resetMediaElement}.\n   */\n  ;\n\n  _proto.reset = function reset() {\n    Html5.resetMediaElement(this.el_);\n  }\n  /**\n   * Get the current source on the `HTML5` Tech. Falls back to returning the source from\n   * the HTML5 media element.\n   *\n   * @return {Tech~SourceObject}\n   *         The current source object from the HTML5 tech. With a fallback to the\n   *         elements source.\n   */\n  ;\n\n  _proto.currentSrc = function currentSrc() {\n    if (this.currentSource_) {\n      return this.currentSource_.src;\n    }\n\n    return this.el_.currentSrc;\n  }\n  /**\n   * Set controls attribute for the HTML5 media Element.\n   *\n   * @param {string} val\n   *        Value to set the controls attribute to\n   */\n  ;\n\n  _proto.setControls = function setControls(val) {\n    this.el_.controls = !!val;\n  }\n  /**\n   * Create and returns a remote {@link TextTrack} object.\n   *\n   * @param {string} kind\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\n   *\n   * @param {string} [label]\n   *        Label to identify the text track\n   *\n   * @param {string} [language]\n   *        Two letter language abbreviation\n   *\n   * @return {TextTrack}\n   *         The TextTrack that gets created.\n   */\n  ;\n\n  _proto.addTextTrack = function addTextTrack(kind, label, language) {\n    if (!this.featuresNativeTextTracks) {\n      return _Tech.prototype.addTextTrack.call(this, kind, label, language);\n    }\n\n    return this.el_.addTextTrack(kind, label, language);\n  }\n  /**\n   * Creates either native TextTrack or an emulated TextTrack depending\n   * on the value of `featuresNativeTextTracks`\n   *\n   * @param {Object} options\n   *        The object should contain the options to initialize the TextTrack with.\n   *\n   * @param {string} [options.kind]\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).\n   *\n   * @param {string} [options.label]\n   *        Label to identify the text track\n   *\n   * @param {string} [options.language]\n   *        Two letter language abbreviation.\n   *\n   * @param {boolean} [options.default]\n   *        Default this track to on.\n   *\n   * @param {string} [options.id]\n   *        The internal id to assign this track.\n   *\n   * @param {string} [options.src]\n   *        A source url for the track.\n   *\n   * @return {HTMLTrackElement}\n   *         The track element that gets created.\n   */\n  ;\n\n  _proto.createRemoteTextTrack = function createRemoteTextTrack(options) {\n    if (!this.featuresNativeTextTracks) {\n      return _Tech.prototype.createRemoteTextTrack.call(this, options);\n    }\n\n    var htmlTrackElement = document.createElement('track');\n\n    if (options.kind) {\n      htmlTrackElement.kind = options.kind;\n    }\n\n    if (options.label) {\n      htmlTrackElement.label = options.label;\n    }\n\n    if (options.language || options.srclang) {\n      htmlTrackElement.srclang = options.language || options.srclang;\n    }\n\n    if (options.default) {\n      htmlTrackElement.default = options.default;\n    }\n\n    if (options.id) {\n      htmlTrackElement.id = options.id;\n    }\n\n    if (options.src) {\n      htmlTrackElement.src = options.src;\n    }\n\n    return htmlTrackElement;\n  }\n  /**\n   * Creates a remote text track object and returns an html track element.\n   *\n   * @param {Object} options The object should contain values for\n   * kind, language, label, and src (location of the WebVTT file)\n   * @param {boolean} [manualCleanup=true] if set to false, the TextTrack will be\n   * automatically removed from the video element whenever the source changes\n   * @return {HTMLTrackElement} An Html Track Element.\n   * This can be an emulated {@link HTMLTrackElement} or a native one.\n   * @deprecated The default value of the \"manualCleanup\" parameter will default\n   * to \"false\" in upcoming versions of Video.js\n   */\n  ;\n\n  _proto.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {\n    var htmlTrackElement = _Tech.prototype.addRemoteTextTrack.call(this, options, manualCleanup);\n\n    if (this.featuresNativeTextTracks) {\n      this.el().appendChild(htmlTrackElement);\n    }\n\n    return htmlTrackElement;\n  }\n  /**\n   * Remove remote `TextTrack` from `TextTrackList` object\n   *\n   * @param {TextTrack} track\n   *        `TextTrack` object to remove\n   */\n  ;\n\n  _proto.removeRemoteTextTrack = function removeRemoteTextTrack(track) {\n    _Tech.prototype.removeRemoteTextTrack.call(this, track);\n\n    if (this.featuresNativeTextTracks) {\n      var tracks = this.$$('track');\n      var i = tracks.length;\n\n      while (i--) {\n        if (track === tracks[i] || track === tracks[i].track) {\n          this.el().removeChild(tracks[i]);\n        }\n      }\n    }\n  }\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object}\n   *         An object with supported media playback quality metrics\n   */\n  ;\n\n  _proto.getVideoPlaybackQuality = function getVideoPlaybackQuality() {\n    if (typeof this.el().getVideoPlaybackQuality === 'function') {\n      return this.el().getVideoPlaybackQuality();\n    }\n\n    var videoPlaybackQuality = {};\n\n    if (typeof this.el().webkitDroppedFrameCount !== 'undefined' && typeof this.el().webkitDecodedFrameCount !== 'undefined') {\n      videoPlaybackQuality.droppedVideoFrames = this.el().webkitDroppedFrameCount;\n      videoPlaybackQuality.totalVideoFrames = this.el().webkitDecodedFrameCount;\n    }\n\n    if (window$1.performance && typeof window$1.performance.now === 'function') {\n      videoPlaybackQuality.creationTime = window$1.performance.now();\n    } else if (window$1.performance && window$1.performance.timing && typeof window$1.performance.timing.navigationStart === 'number') {\n      videoPlaybackQuality.creationTime = window$1.Date.now() - window$1.performance.timing.navigationStart;\n    }\n\n    return videoPlaybackQuality;\n  };\n\n  return Html5;\n}(Tech);\n/* HTML5 Support Testing ---------------------------------------------------- */\n\n\nif (isReal()) {\n  /**\n   * Element for testing browser HTML5 media capabilities\n   *\n   * @type {Element}\n   * @constant\n   * @private\n   */\n  Html5.TEST_VID = document.createElement('video');\n  var track = document.createElement('track');\n  track.kind = 'captions';\n  track.srclang = 'en';\n  track.label = 'English';\n  Html5.TEST_VID.appendChild(track);\n}\n/**\n * Check if HTML5 media is supported by this browser/device.\n *\n * @return {boolean}\n *         - True if HTML5 media is supported.\n *         - False if HTML5 media is not supported.\n */\n\n\nHtml5.isSupported = function () {\n  // IE with no Media Player is a LIAR! (#984)\n  try {\n    Html5.TEST_VID.volume = 0.5;\n  } catch (e) {\n    return false;\n  }\n\n  return !!(Html5.TEST_VID && Html5.TEST_VID.canPlayType);\n};\n/**\n * Check if the tech can support the given type\n *\n * @param {string} type\n *        The mimetype to check\n * @return {string} 'probably', 'maybe', or '' (empty string)\n */\n\n\nHtml5.canPlayType = function (type) {\n  return Html5.TEST_VID.canPlayType(type);\n};\n/**\n * Check if the tech can support the given source\n *\n * @param {Object} srcObj\n *        The source object\n * @param {Object} options\n *        The options passed to the tech\n * @return {string} 'probably', 'maybe', or '' (empty string)\n */\n\n\nHtml5.canPlaySource = function (srcObj, options) {\n  return Html5.canPlayType(srcObj.type);\n};\n/**\n * Check if the volume can be changed in this browser/device.\n * Volume cannot be changed in a lot of mobile devices.\n * Specifically, it can't be changed from 1 on iOS.\n *\n * @return {boolean}\n *         - True if volume can be controlled\n *         - False otherwise\n */\n\n\nHtml5.canControlVolume = function () {\n  // IE will error if Windows Media Player not installed #3315\n  try {\n    var volume = Html5.TEST_VID.volume;\n    Html5.TEST_VID.volume = volume / 2 + 0.1;\n    return volume !== Html5.TEST_VID.volume;\n  } catch (e) {\n    return false;\n  }\n};\n/**\n * Check if the volume can be muted in this browser/device.\n * Some devices, e.g. iOS, don't allow changing volume\n * but permits muting/unmuting.\n *\n * @return {bolean}\n *      - True if volume can be muted\n *      - False otherwise\n */\n\n\nHtml5.canMuteVolume = function () {\n  try {\n    var muted = Html5.TEST_VID.muted; // in some versions of iOS muted property doesn't always\n    // work, so we want to set both property and attribute\n\n    Html5.TEST_VID.muted = !muted;\n\n    if (Html5.TEST_VID.muted) {\n      setAttribute(Html5.TEST_VID, 'muted', 'muted');\n    } else {\n      removeAttribute(Html5.TEST_VID, 'muted', 'muted');\n    }\n\n    return muted !== Html5.TEST_VID.muted;\n  } catch (e) {\n    return false;\n  }\n};\n/**\n * Check if the playback rate can be changed in this browser/device.\n *\n * @return {boolean}\n *         - True if playback rate can be controlled\n *         - False otherwise\n */\n\n\nHtml5.canControlPlaybackRate = function () {\n  // Playback rate API is implemented in Android Chrome, but doesn't do anything\n  // https://github.com/videojs/video.js/issues/3180\n  if (IS_ANDROID && IS_CHROME && CHROME_VERSION < 58) {\n    return false;\n  } // IE will error if Windows Media Player not installed #3315\n\n\n  try {\n    var playbackRate = Html5.TEST_VID.playbackRate;\n    Html5.TEST_VID.playbackRate = playbackRate / 2 + 0.1;\n    return playbackRate !== Html5.TEST_VID.playbackRate;\n  } catch (e) {\n    return false;\n  }\n};\n/**\n * Check if we can override a video/audio elements attributes, with\n * Object.defineProperty.\n *\n * @return {boolean}\n *         - True if builtin attributes can be overridden\n *         - False otherwise\n */\n\n\nHtml5.canOverrideAttributes = function () {\n  // if we cannot overwrite the src/innerHTML property, there is no support\n  // iOS 7 safari for instance cannot do this.\n  try {\n    var noop = function noop() {};\n\n    Object.defineProperty(document.createElement('video'), 'src', {\n      get: noop,\n      set: noop\n    });\n    Object.defineProperty(document.createElement('audio'), 'src', {\n      get: noop,\n      set: noop\n    });\n    Object.defineProperty(document.createElement('video'), 'innerHTML', {\n      get: noop,\n      set: noop\n    });\n    Object.defineProperty(document.createElement('audio'), 'innerHTML', {\n      get: noop,\n      set: noop\n    });\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n};\n/**\n * Check to see if native `TextTrack`s are supported by this browser/device.\n *\n * @return {boolean}\n *         - True if native `TextTrack`s are supported.\n *         - False otherwise\n */\n\n\nHtml5.supportsNativeTextTracks = function () {\n  return IS_ANY_SAFARI || IS_IOS && IS_CHROME;\n};\n/**\n * Check to see if native `VideoTrack`s are supported by this browser/device\n *\n * @return {boolean}\n *        - True if native `VideoTrack`s are supported.\n *        - False otherwise\n */\n\n\nHtml5.supportsNativeVideoTracks = function () {\n  return !!(Html5.TEST_VID && Html5.TEST_VID.videoTracks);\n};\n/**\n * Check to see if native `AudioTrack`s are supported by this browser/device\n *\n * @return {boolean}\n *        - True if native `AudioTrack`s are supported.\n *        - False otherwise\n */\n\n\nHtml5.supportsNativeAudioTracks = function () {\n  return !!(Html5.TEST_VID && Html5.TEST_VID.audioTracks);\n};\n/**\n * An array of events available on the Html5 tech.\n *\n * @private\n * @type {Array}\n */\n\n\nHtml5.Events = ['loadstart', 'suspend', 'abort', 'error', 'emptied', 'stalled', 'loadedmetadata', 'loadeddata', 'canplay', 'canplaythrough', 'playing', 'waiting', 'seeking', 'seeked', 'ended', 'durationchange', 'timeupdate', 'progress', 'play', 'pause', 'ratechange', 'resize', 'volumechange'];\n/**\n * Boolean indicating whether the `Tech` supports volume control.\n *\n * @type {boolean}\n * @default {@link Html5.canControlVolume}\n */\n\nHtml5.prototype.featuresVolumeControl = Html5.canControlVolume();\n/**\n * Boolean indicating whether the `Tech` supports muting volume.\n *\n * @type {bolean}\n * @default {@link Html5.canMuteVolume}\n */\n\nHtml5.prototype.featuresMuteControl = Html5.canMuteVolume();\n/**\n * Boolean indicating whether the `Tech` supports changing the speed at which the media\n * plays. Examples:\n *   - Set player to play 2x (twice) as fast\n *   - Set player to play 0.5x (half) as fast\n *\n * @type {boolean}\n * @default {@link Html5.canControlPlaybackRate}\n */\n\nHtml5.prototype.featuresPlaybackRate = Html5.canControlPlaybackRate();\n/**\n * Boolean indicating whether the `Tech` supports the `sourceset` event.\n *\n * @type {boolean}\n * @default\n */\n\nHtml5.prototype.featuresSourceset = Html5.canOverrideAttributes();\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the media element\n * moving in the DOM. iOS breaks if you move the media element, so this is set this to\n * false there. Everywhere else this should be true.\n *\n * @type {boolean}\n * @default\n */\n\nHtml5.prototype.movingMediaElementInDOM = !IS_IOS; // TODO: Previous comment: No longer appears to be used. Can probably be removed.\n//       Is this true?\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports automatic media resize\n * when going into fullscreen.\n *\n * @type {boolean}\n * @default\n */\n\nHtml5.prototype.featuresFullscreenResize = true;\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the progress event.\n * If this is false, manual `progress` events will be triggered instead.\n *\n * @type {boolean}\n * @default\n */\n\nHtml5.prototype.featuresProgressEvents = true;\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the timeupdate event.\n * If this is false, manual `timeupdate` events will be triggered instead.\n *\n * @default\n */\n\nHtml5.prototype.featuresTimeupdateEvents = true;\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `TextTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeTextTracks}\n */\n\nHtml5.prototype.featuresNativeTextTracks = Html5.supportsNativeTextTracks();\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `VideoTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeVideoTracks}\n */\n\nHtml5.prototype.featuresNativeVideoTracks = Html5.supportsNativeVideoTracks();\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `AudioTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeAudioTracks}\n */\n\nHtml5.prototype.featuresNativeAudioTracks = Html5.supportsNativeAudioTracks(); // HTML5 Feature detection and Device Fixes --------------------------------- //\n\nvar canPlayType = Html5.TEST_VID && Html5.TEST_VID.constructor.prototype.canPlayType;\nvar mpegurlRE = /^application\\/(?:x-|vnd\\.apple\\.)mpegurl/i;\n\nHtml5.patchCanPlayType = function () {\n  // Android 4.0 and above can play HLS to some extent but it reports being unable to do so\n  // Firefox and Chrome report correctly\n  if (ANDROID_VERSION >= 4.0 && !IS_FIREFOX && !IS_CHROME) {\n    Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {\n      if (type && mpegurlRE.test(type)) {\n        return 'maybe';\n      }\n\n      return canPlayType.call(this, type);\n    };\n  }\n};\n\nHtml5.unpatchCanPlayType = function () {\n  var r = Html5.TEST_VID.constructor.prototype.canPlayType;\n  Html5.TEST_VID.constructor.prototype.canPlayType = canPlayType;\n  return r;\n}; // by default, patch the media element\n\n\nHtml5.patchCanPlayType();\n\nHtml5.disposeMediaElement = function (el) {\n  if (!el) {\n    return;\n  }\n\n  if (el.parentNode) {\n    el.parentNode.removeChild(el);\n  } // remove any child track or source nodes to prevent their loading\n\n\n  while (el.hasChildNodes()) {\n    el.removeChild(el.firstChild);\n  } // remove any src reference. not setting `src=''` because that causes a warning\n  // in firefox\n\n\n  el.removeAttribute('src'); // force the media element to update its loading state by calling load()\n  // however IE on Windows 7N has a bug that throws an error so need a try/catch (#793)\n\n  if (typeof el.load === 'function') {\n    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)\n    (function () {\n      try {\n        el.load();\n      } catch (e) {// not supported\n      }\n    })();\n  }\n};\n\nHtml5.resetMediaElement = function (el) {\n  if (!el) {\n    return;\n  }\n\n  var sources = el.querySelectorAll('source');\n  var i = sources.length;\n\n  while (i--) {\n    el.removeChild(sources[i]);\n  } // remove any src reference.\n  // not setting `src=''` because that throws an error\n\n\n  el.removeAttribute('src');\n\n  if (typeof el.load === 'function') {\n    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)\n    (function () {\n      try {\n        el.load();\n      } catch (e) {// satisfy linter\n      }\n    })();\n  }\n};\n/* Native HTML5 element property wrapping ----------------------------------- */\n// Wrap native boolean attributes with getters that check both property and attribute\n// The list is as followed:\n// muted, defaultMuted, autoplay, controls, loop, playsinline\n\n\n[\n/**\n * Get the value of `muted` from the media element. `muted` indicates\n * that the volume for the media should be set to silent. This does not actually change\n * the `volume` attribute.\n *\n * @method Html5#muted\n * @return {boolean}\n *         - True if the value of `volume` should be ignored and the audio set to silent.\n *         - False if the value of `volume` should be used.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}\n */\n'muted',\n/**\n * Get the value of `defaultMuted` from the media element. `defaultMuted` indicates\n * whether the media should start muted or not. Only changes the default state of the\n * media. `muted` and `defaultMuted` can have different values. {@link Html5#muted} indicates the\n * current state.\n *\n * @method Html5#defaultMuted\n * @return {boolean}\n *         - The value of `defaultMuted` from the media element.\n *         - True indicates that the media should start muted.\n *         - False indicates that the media should not start muted\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}\n */\n'defaultMuted',\n/**\n * Get the value of `autoplay` from the media element. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Html5#autoplay\n * @return {boolean}\n *         - The value of `autoplay` from the media element.\n *         - True indicates that the media should start as soon as the page loads.\n *         - False indicates that the media should not start as soon as the page loads.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}\n */\n'autoplay',\n/**\n * Get the value of `controls` from the media element. `controls` indicates\n * whether the native media controls should be shown or hidden.\n *\n * @method Html5#controls\n * @return {boolean}\n *         - The value of `controls` from the media element.\n *         - True indicates that native controls should be showing.\n *         - False indicates that native controls should be hidden.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-controls}\n */\n'controls',\n/**\n * Get the value of `loop` from the media element. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Html5#loop\n * @return {boolean}\n *         - The value of `loop` from the media element.\n *         - True indicates that playback should seek back to start once\n *           the end of a media is reached.\n *         - False indicates that playback should not loop back to the start when the\n *           end of the media is reached.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}\n */\n'loop',\n/**\n * Get the value of `playsinline` from the media element. `playsinline` indicates\n * to the browser that non-fullscreen playback is preferred when fullscreen\n * playback is the native default, such as in iOS Safari.\n *\n * @method Html5#playsinline\n * @return {boolean}\n *         - The value of `playsinline` from the media element.\n *         - True indicates that the media should play inline.\n *         - False indicates that the media should not play inline.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n */\n'playsinline'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop] || this.el_.hasAttribute(prop);\n  };\n}); // Wrap native boolean attributes with setters that set both property and attribute\n// The list is as followed:\n// setMuted, setDefaultMuted, setAutoplay, setLoop, setPlaysinline\n// setControls is special-cased above\n\n[\n/**\n * Set the value of `muted` on the media element. `muted` indicates that the current\n * audio level should be silent.\n *\n * @method Html5#setMuted\n * @param {boolean} muted\n *        - True if the audio should be set to silent\n *        - False otherwise\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}\n */\n'muted',\n/**\n * Set the value of `defaultMuted` on the media element. `defaultMuted` indicates that the current\n * audio level should be silent, but will only effect the muted level on intial playback..\n *\n * @method Html5.prototype.setDefaultMuted\n * @param {boolean} defaultMuted\n *        - True if the audio should be set to silent\n *        - False otherwise\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}\n */\n'defaultMuted',\n/**\n * Set the value of `autoplay` on the media element. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Html5#setAutoplay\n * @param {boolean} autoplay\n *         - True indicates that the media should start as soon as the page loads.\n *         - False indicates that the media should not start as soon as the page loads.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}\n */\n'autoplay',\n/**\n * Set the value of `loop` on the media element. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Html5#setLoop\n * @param {boolean} loop\n *         - True indicates that playback should seek back to start once\n *           the end of a media is reached.\n *         - False indicates that playback should not loop back to the start when the\n *           end of the media is reached.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}\n */\n'loop',\n/**\n * Set the value of `playsinline` from the media element. `playsinline` indicates\n * to the browser that non-fullscreen playback is preferred when fullscreen\n * playback is the native default, such as in iOS Safari.\n *\n * @method Html5#setPlaysinline\n * @param {boolean} playsinline\n *         - True indicates that the media should play inline.\n *         - False indicates that the media should not play inline.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n */\n'playsinline'].forEach(function (prop) {\n  Html5.prototype['set' + toTitleCase(prop)] = function (v) {\n    this.el_[prop] = v;\n\n    if (v) {\n      this.el_.setAttribute(prop, prop);\n    } else {\n      this.el_.removeAttribute(prop);\n    }\n  };\n}); // Wrap native properties with a getter\n// The list is as followed\n// paused, currentTime, buffered, volume, poster, preload, error, seeking\n// seekable, ended, playbackRate, defaultPlaybackRate, played, networkState\n// readyState, videoWidth, videoHeight\n\n[\n/**\n * Get the value of `paused` from the media element. `paused` indicates whether the media element\n * is currently paused or not.\n *\n * @method Html5#paused\n * @return {boolean}\n *         The value of `paused` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-paused}\n */\n'paused',\n/**\n * Get the value of `currentTime` from the media element. `currentTime` indicates\n * the current second that the media is at in playback.\n *\n * @method Html5#currentTime\n * @return {number}\n *         The value of `currentTime` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-currenttime}\n */\n'currentTime',\n/**\n * Get the value of `buffered` from the media element. `buffered` is a `TimeRange`\n * object that represents the parts of the media that are already downloaded and\n * available for playback.\n *\n * @method Html5#buffered\n * @return {TimeRange}\n *         The value of `buffered` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-buffered}\n */\n'buffered',\n/**\n * Get the value of `volume` from the media element. `volume` indicates\n * the current playback volume of audio for a media. `volume` will be a value from 0\n * (silent) to 1 (loudest and default).\n *\n * @method Html5#volume\n * @return {number}\n *         The value of `volume` from the media element. Value will be between 0-1.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}\n */\n'volume',\n/**\n * Get the value of `poster` from the media element. `poster` indicates\n * that the url of an image file that can/will be shown when no media data is available.\n *\n * @method Html5#poster\n * @return {string}\n *         The value of `poster` from the media element. Value will be a url to an\n *         image.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-video-poster}\n */\n'poster',\n/**\n * Get the value of `preload` from the media element. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Html5#preload\n * @return {string}\n *         The value of `preload` from the media element. Will be 'none', 'metadata',\n *         or 'auto'.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}\n */\n'preload',\n/**\n * Get the value of the `error` from the media element. `error` indicates any\n * MediaError that may have occurred during playback. If error returns null there is no\n * current error.\n *\n * @method Html5#error\n * @return {MediaError|null}\n *         The value of `error` from the media element. Will be `MediaError` if there\n *         is a current error and null otherwise.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-error}\n */\n'error',\n/**\n * Get the value of `seeking` from the media element. `seeking` indicates whether the\n * media is currently seeking to a new position or not.\n *\n * @method Html5#seeking\n * @return {boolean}\n *         - The value of `seeking` from the media element.\n *         - True indicates that the media is currently seeking to a new position.\n *         - False indicates that the media is not seeking to a new position at this time.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seeking}\n */\n'seeking',\n/**\n * Get the value of `seekable` from the media element. `seekable` returns a\n * `TimeRange` object indicating ranges of time that can currently be `seeked` to.\n *\n * @method Html5#seekable\n * @return {TimeRange}\n *         The value of `seekable` from the media element. A `TimeRange` object\n *         indicating the current ranges of time that can be seeked to.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seekable}\n */\n'seekable',\n/**\n * Get the value of `ended` from the media element. `ended` indicates whether\n * the media has reached the end or not.\n *\n * @method Html5#ended\n * @return {boolean}\n *         - The value of `ended` from the media element.\n *         - True indicates that the media has ended.\n *         - False indicates that the media has not ended.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}\n */\n'ended',\n/**\n * Get the value of `playbackRate` from the media element. `playbackRate` indicates\n * the rate at which the media is currently playing back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5#playbackRate\n * @return {number}\n *         The value of `playbackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n */\n'playbackRate',\n/**\n * Get the value of `defaultPlaybackRate` from the media element. `defaultPlaybackRate` indicates\n * the rate at which the media is currently playing back. This value will not indicate the current\n * `playbackRate` after playback has started, use {@link Html5#playbackRate} for that.\n *\n * Examples:\n *   - if defaultPlaybackRate is set to 2, media will play twice as fast.\n *   - if defaultPlaybackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5.prototype.defaultPlaybackRate\n * @return {number}\n *         The value of `defaultPlaybackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n */\n'defaultPlaybackRate',\n/**\n * Get the value of `played` from the media element. `played` returns a `TimeRange`\n * object representing points in the media timeline that have been played.\n *\n * @method Html5#played\n * @return {TimeRange}\n *         The value of `played` from the media element. A `TimeRange` object indicating\n *         the ranges of time that have been played.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-played}\n */\n'played',\n/**\n * Get the value of `networkState` from the media element. `networkState` indicates\n * the current network state. It returns an enumeration from the following list:\n * - 0: NETWORK_EMPTY\n * - 1: NETWORK_IDLE\n * - 2: NETWORK_LOADING\n * - 3: NETWORK_NO_SOURCE\n *\n * @method Html5#networkState\n * @return {number}\n *         The value of `networkState` from the media element. This will be a number\n *         from the list in the description.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-networkstate}\n */\n'networkState',\n/**\n * Get the value of `readyState` from the media element. `readyState` indicates\n * the current state of the media element. It returns an enumeration from the\n * following list:\n * - 0: HAVE_NOTHING\n * - 1: HAVE_METADATA\n * - 2: HAVE_CURRENT_DATA\n * - 3: HAVE_FUTURE_DATA\n * - 4: HAVE_ENOUGH_DATA\n *\n * @method Html5#readyState\n * @return {number}\n *         The value of `readyState` from the media element. This will be a number\n *         from the list in the description.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#ready-states}\n */\n'readyState',\n/**\n * Get the value of `videoWidth` from the video element. `videoWidth` indicates\n * the current width of the video in css pixels.\n *\n * @method Html5#videoWidth\n * @return {number}\n *         The value of `videoWidth` from the video element. This will be a number\n *         in css pixels.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}\n */\n'videoWidth',\n/**\n * Get the value of `videoHeight` from the video element. `videoHeight` indicates\n * the current height of the video in css pixels.\n *\n * @method Html5#videoHeight\n * @return {number}\n *         The value of `videoHeight` from the video element. This will be a number\n *         in css pixels.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}\n */\n'videoHeight'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop];\n  };\n}); // Wrap native properties with a setter in this format:\n// set + toTitleCase(name)\n// The list is as follows:\n// setVolume, setSrc, setPoster, setPreload, setPlaybackRate, setDefaultPlaybackRate\n\n[\n/**\n * Set the value of `volume` on the media element. `volume` indicates the current\n * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and\n * so on.\n *\n * @method Html5#setVolume\n * @param {number} percentAsDecimal\n *        The volume percent as a decimal. Valid range is from 0-1.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}\n */\n'volume',\n/**\n * Set the value of `src` on the media element. `src` indicates the current\n * {@link Tech~SourceObject} for the media.\n *\n * @method Html5#setSrc\n * @param {Tech~SourceObject} src\n *        The source object to set as the current source.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-src}\n */\n'src',\n/**\n * Set the value of `poster` on the media element. `poster` is the url to\n * an image file that can/will be shown when no media data is available.\n *\n * @method Html5#setPoster\n * @param {string} poster\n *        The url to an image that should be used as the `poster` for the media\n *        element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-poster}\n */\n'poster',\n/**\n * Set the value of `preload` on the media element. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Html5#setPreload\n * @param {string} preload\n *         The value of `preload` to set on the media element. Must be 'none', 'metadata',\n *         or 'auto'.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}\n */\n'preload',\n/**\n * Set the value of `playbackRate` on the media element. `playbackRate` indicates\n * the rate at which the media should play back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5#setPlaybackRate\n * @return {number}\n *         The value of `playbackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n */\n'playbackRate',\n/**\n * Set the value of `defaultPlaybackRate` on the media element. `defaultPlaybackRate` indicates\n * the rate at which the media should play back upon initial startup. Changing this value\n * after a video has started will do nothing. Instead you should used {@link Html5#setPlaybackRate}.\n *\n * Example Values:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5.prototype.setDefaultPlaybackRate\n * @return {number}\n *         The value of `defaultPlaybackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultplaybackrate}\n */\n'defaultPlaybackRate'].forEach(function (prop) {\n  Html5.prototype['set' + toTitleCase(prop)] = function (v) {\n    this.el_[prop] = v;\n  };\n}); // wrap native functions with a function\n// The list is as follows:\n// pause, load, play\n\n[\n/**\n * A wrapper around the media elements `pause` function. This will call the `HTML5`\n * media elements `pause` function.\n *\n * @method Html5#pause\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-pause}\n */\n'pause',\n/**\n * A wrapper around the media elements `load` function. This will call the `HTML5`s\n * media element `load` function.\n *\n * @method Html5#load\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-load}\n */\n'load',\n/**\n * A wrapper around the media elements `play` function. This will call the `HTML5`s\n * media element `play` function.\n *\n * @method Html5#play\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-play}\n */\n'play'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop]();\n  };\n});\nTech.withSourceHandlers(Html5);\n/**\n * Native source handler for Html5, simply passes the source to the media element.\n *\n * @property {Tech~SourceObject} source\n *        The source object\n *\n * @property {Html5} tech\n *        The instance of the HTML5 tech.\n */\n\nHtml5.nativeSourceHandler = {};\n/**\n * Check if the media element can play the given mime type.\n *\n * @param {string} type\n *        The mimetype to check\n *\n * @return {string}\n *         'probably', 'maybe', or '' (empty string)\n */\n\nHtml5.nativeSourceHandler.canPlayType = function (type) {\n  // IE without MediaPlayer throws an error (#519)\n  try {\n    return Html5.TEST_VID.canPlayType(type);\n  } catch (e) {\n    return '';\n  }\n};\n/**\n * Check if the media element can handle a source natively.\n *\n * @param {Tech~SourceObject} source\n *         The source object\n *\n * @param {Object} [options]\n *         Options to be passed to the tech.\n *\n * @return {string}\n *         'probably', 'maybe', or '' (empty string).\n */\n\n\nHtml5.nativeSourceHandler.canHandleSource = function (source, options) {\n  // If a type was provided we should rely on that\n  if (source.type) {\n    return Html5.nativeSourceHandler.canPlayType(source.type); // If no type, fall back to checking 'video/[EXTENSION]'\n  } else if (source.src) {\n    var ext = getFileExtension(source.src);\n    return Html5.nativeSourceHandler.canPlayType(\"video/\" + ext);\n  }\n\n  return '';\n};\n/**\n * Pass the source to the native media element.\n *\n * @param {Tech~SourceObject} source\n *        The source object\n *\n * @param {Html5} tech\n *        The instance of the Html5 tech\n *\n * @param {Object} [options]\n *        The options to pass to the source\n */\n\n\nHtml5.nativeSourceHandler.handleSource = function (source, tech, options) {\n  tech.setSrc(source.src);\n};\n/**\n * A noop for the native dispose function, as cleanup is not needed.\n */\n\n\nHtml5.nativeSourceHandler.dispose = function () {}; // Register the native source handler\n\n\nHtml5.registerSourceHandler(Html5.nativeSourceHandler);\nTech.registerTech('Html5', Html5);\n\nfunction _templateObject$2() {\n  var data = _taggedTemplateLiteralLoose([\"\\n        Using the tech directly can be dangerous. I hope you know what you're doing.\\n        See https://github.com/videojs/video.js/issues/2617 for more info.\\n      \"]);\n\n  _templateObject$2 = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n// on the player when they happen\n\nvar TECH_EVENTS_RETRIGGER = [\n/**\n * Fired while the user agent is downloading media data.\n *\n * @event Player#progress\n * @type {EventTarget~Event}\n */\n\n/**\n * Retrigger the `progress` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechProgress_\n * @fires Player#progress\n * @listens Tech#progress\n */\n'progress',\n/**\n * Fires when the loading of an audio/video is aborted.\n *\n * @event Player#abort\n * @type {EventTarget~Event}\n */\n\n/**\n * Retrigger the `abort` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechAbort_\n * @fires Player#abort\n * @listens Tech#abort\n */\n'abort',\n/**\n * Fires when the browser is intentionally not getting media data.\n *\n * @event Player#suspend\n * @type {EventTarget~Event}\n */\n\n/**\n * Retrigger the `suspend` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechSuspend_\n * @fires Player#suspend\n * @listens Tech#suspend\n */\n'suspend',\n/**\n * Fires when the current playlist is empty.\n *\n * @event Player#emptied\n * @type {EventTarget~Event}\n */\n\n/**\n * Retrigger the `emptied` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechEmptied_\n * @fires Player#emptied\n * @listens Tech#emptied\n */\n'emptied',\n/**\n * Fires when the browser is trying to get media data, but data is not available.\n *\n * @event Player#stalled\n * @type {EventTarget~Event}\n */\n\n/**\n * Retrigger the `stalled` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechStalled_\n * @fires Player#stalled\n * @listens Tech#stalled\n */\n'stalled',\n/**\n * Fires when the browser has loaded meta data for the audio/video.\n *\n * @event Player#loadedmetadata\n * @type {EventTarget~Event}\n */\n\n/**\n * Retrigger the `stalled` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechLoadedmetadata_\n * @fires Player#loadedmetadata\n * @listens Tech#loadedmetadata\n */\n'loadedmetadata',\n/**\n * Fires when the browser has loaded the current frame of the audio/video.\n *\n * @event Player#loadeddata\n * @type {event}\n */\n\n/**\n * Retrigger the `loadeddata` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechLoaddeddata_\n * @fires Player#loadeddata\n * @listens Tech#loadeddata\n */\n'loadeddata',\n/**\n * Fires when the current playback position has changed.\n *\n * @event Player#timeupdate\n * @type {event}\n */\n\n/**\n * Retrigger the `timeupdate` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechTimeUpdate_\n * @fires Player#timeupdate\n * @listens Tech#timeupdate\n */\n'timeupdate',\n/**\n * Fires when the video's intrinsic dimensions change\n *\n * @event Player#resize\n * @type {event}\n */\n\n/**\n * Retrigger the `resize` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechResize_\n * @fires Player#resize\n * @listens Tech#resize\n */\n'resize',\n/**\n * Fires when the volume has been changed\n *\n * @event Player#volumechange\n * @type {event}\n */\n\n/**\n * Retrigger the `volumechange` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechVolumechange_\n * @fires Player#volumechange\n * @listens Tech#volumechange\n */\n'volumechange',\n/**\n * Fires when the text track has been changed\n *\n * @event Player#texttrackchange\n * @type {event}\n */\n\n/**\n * Retrigger the `texttrackchange` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechTexttrackchange_\n * @fires Player#texttrackchange\n * @listens Tech#texttrackchange\n */\n'texttrackchange']; // events to queue when playback rate is zero\n// this is a hash for the sole purpose of mapping non-camel-cased event names\n// to camel-cased function names\n\nvar TECH_EVENTS_QUEUE = {\n  canplay: 'CanPlay',\n  canplaythrough: 'CanPlayThrough',\n  playing: 'Playing',\n  seeked: 'Seeked'\n};\nvar BREAKPOINT_ORDER = ['tiny', 'xsmall', 'small', 'medium', 'large', 'xlarge', 'huge'];\nvar BREAKPOINT_CLASSES = {}; // grep: vjs-layout-tiny\n// grep: vjs-layout-x-small\n// grep: vjs-layout-small\n// grep: vjs-layout-medium\n// grep: vjs-layout-large\n// grep: vjs-layout-x-large\n// grep: vjs-layout-huge\n\nBREAKPOINT_ORDER.forEach(function (k) {\n  var v = k.charAt(0) === 'x' ? \"x-\" + k.substring(1) : k;\n  BREAKPOINT_CLASSES[k] = \"vjs-layout-\" + v;\n});\nvar DEFAULT_BREAKPOINTS = {\n  tiny: 210,\n  xsmall: 320,\n  small: 425,\n  medium: 768,\n  large: 1440,\n  xlarge: 2560,\n  huge: Infinity\n};\n/**\n * An instance of the `Player` class is created when any of the Video.js setup methods\n * are used to initialize a video.\n *\n * After an instance has been created it can be accessed globally in two ways:\n * 1. By calling `videojs('example_video_1');`\n * 2. By using it directly via  `videojs.players.example_video_1;`\n *\n * @extends Component\n */\n\nvar Player =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Player, _Component);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Element} tag\n   *        The original video DOM element used for configuring options.\n   *\n   * @param {Object} [options]\n   *        Object of option names and values.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        Ready callback function.\n   */\n  function Player(tag, options, ready) {\n    var _this;\n\n    // Make sure tag ID exists\n    tag.id = tag.id || options.id || \"vjs_video_\" + newGUID(); // Set Options\n    // The options argument overrides options set in the video tag\n    // which overrides globally set options.\n    // This latter part coincides with the load order\n    // (tag must exist before Player)\n\n    options = assign(Player.getTagSettings(tag), options); // Delay the initialization of children because we need to set up\n    // player properties first, and can't use `this` before `super()`\n\n    options.initChildren = false; // Same with creating the element\n\n    options.createEl = false; // don't auto mixin the evented mixin\n\n    options.evented = false; // we don't want the player to report touch activity on itself\n    // see enableTouchActivity in Component\n\n    options.reportTouchActivity = false; // If language is not set, get the closest lang attribute\n\n    if (!options.language) {\n      if (typeof tag.closest === 'function') {\n        var closest = tag.closest('[lang]');\n\n        if (closest && closest.getAttribute) {\n          options.language = closest.getAttribute('lang');\n        }\n      } else {\n        var element = tag;\n\n        while (element && element.nodeType === 1) {\n          if (getAttributes(element).hasOwnProperty('lang')) {\n            options.language = element.getAttribute('lang');\n            break;\n          }\n\n          element = element.parentNode;\n        }\n      }\n    } // Run base component initializing with new options\n\n\n    _this = _Component.call(this, null, options, ready) || this; // Create bound methods for document listeners.\n\n    _this.boundDocumentFullscreenChange_ = bind(_assertThisInitialized(_assertThisInitialized(_this)), _this.documentFullscreenChange_);\n    _this.boundFullWindowOnEscKey_ = bind(_assertThisInitialized(_assertThisInitialized(_this)), _this.fullWindowOnEscKey);\n    _this.boundHandleKeyPress_ = bind(_assertThisInitialized(_assertThisInitialized(_this)), _this.handleKeyPress); // create logger\n\n    _this.log = createLogger$1(_this.id_); // Tracks when a tech changes the poster\n\n    _this.isPosterFromTech_ = false; // Holds callback info that gets queued when playback rate is zero\n    // and a seek is happening\n\n    _this.queuedCallbacks_ = []; // Turn off API access because we're loading a new tech that might load asynchronously\n\n    _this.isReady_ = false; // Init state hasStarted_\n\n    _this.hasStarted_ = false; // Init state userActive_\n\n    _this.userActive_ = false; // if the global option object was accidentally blown away by\n    // someone, bail early with an informative error\n\n    if (!_this.options_ || !_this.options_.techOrder || !_this.options_.techOrder.length) {\n      throw new Error('No techOrder specified. Did you overwrite ' + 'videojs.options instead of just changing the ' + 'properties you want to override?');\n    } // Store the original tag used to set options\n\n\n    _this.tag = tag; // Store the tag attributes used to restore html5 element\n\n    _this.tagAttributes = tag && getAttributes(tag); // Update current language\n\n    _this.language(_this.options_.language); // Update Supported Languages\n\n\n    if (options.languages) {\n      // Normalise player option languages to lowercase\n      var languagesToLower = {};\n      Object.getOwnPropertyNames(options.languages).forEach(function (name$$1) {\n        languagesToLower[name$$1.toLowerCase()] = options.languages[name$$1];\n      });\n      _this.languages_ = languagesToLower;\n    } else {\n      _this.languages_ = Player.prototype.options_.languages;\n    }\n\n    _this.resetCache_(); // Set poster\n\n\n    _this.poster_ = options.poster || ''; // Set controls\n\n    _this.controls_ = !!options.controls; // Original tag settings stored in options\n    // now remove immediately so native controls don't flash.\n    // May be turned back on by HTML5 tech if nativeControlsForTouch is true\n\n    tag.controls = false;\n    tag.removeAttribute('controls');\n    _this.changingSrc_ = false;\n    _this.playCallbacks_ = [];\n    _this.playTerminatedQueue_ = []; // the attribute overrides the option\n\n    if (tag.hasAttribute('autoplay')) {\n      _this.autoplay(true);\n    } else {\n      // otherwise use the setter to validate and\n      // set the correct value.\n      _this.autoplay(_this.options_.autoplay);\n    } // check plugins\n\n\n    if (options.plugins) {\n      Object.keys(options.plugins).forEach(function (name$$1) {\n        if (typeof _this[name$$1] !== 'function') {\n          throw new Error(\"plugin \\\"\" + name$$1 + \"\\\" does not exist\");\n        }\n      });\n    }\n    /*\n     * Store the internal state of scrubbing\n     *\n     * @private\n     * @return {Boolean} True if the user is scrubbing\n     */\n\n\n    _this.scrubbing_ = false;\n    _this.el_ = _this.createEl(); // Make this an evented object and use `el_` as its event bus.\n\n    evented(_assertThisInitialized(_assertThisInitialized(_this)), {\n      eventBusKey: 'el_'\n    });\n\n    if (_this.fluid_) {\n      _this.on('playerreset', _this.updateStyleEl_);\n    } // We also want to pass the original player options to each component and plugin\n    // as well so they don't need to reach back into the player for options later.\n    // We also need to do another copy of this.options_ so we don't end up with\n    // an infinite loop.\n\n\n    var playerOptionsCopy = mergeOptions(_this.options_); // Load plugins\n\n    if (options.plugins) {\n      Object.keys(options.plugins).forEach(function (name$$1) {\n        _this[name$$1](options.plugins[name$$1]);\n      });\n    }\n\n    _this.options_.playerOptions = playerOptionsCopy;\n    _this.middleware_ = [];\n\n    _this.initChildren(); // Set isAudio based on whether or not an audio tag was used\n\n\n    _this.isAudio(tag.nodeName.toLowerCase() === 'audio'); // Update controls className. Can't do this when the controls are initially\n    // set because the element doesn't exist yet.\n\n\n    if (_this.controls()) {\n      _this.addClass('vjs-controls-enabled');\n    } else {\n      _this.addClass('vjs-controls-disabled');\n    } // Set ARIA label and region role depending on player type\n\n\n    _this.el_.setAttribute('role', 'region');\n\n    if (_this.isAudio()) {\n      _this.el_.setAttribute('aria-label', _this.localize('Audio Player'));\n    } else {\n      _this.el_.setAttribute('aria-label', _this.localize('Video Player'));\n    }\n\n    if (_this.isAudio()) {\n      _this.addClass('vjs-audio');\n    }\n\n    if (_this.flexNotSupported_()) {\n      _this.addClass('vjs-no-flex');\n    } // TODO: Make this smarter. Toggle user state between touching/mousing\n    // using events, since devices can have both touch and mouse events.\n    // TODO: Make this check be performed again when the window switches between monitors\n    // (See https://github.com/videojs/video.js/issues/5683)\n\n\n    if (TOUCH_ENABLED) {\n      _this.addClass('vjs-touch-enabled');\n    } // iOS Safari has broken hover handling\n\n\n    if (!IS_IOS) {\n      _this.addClass('vjs-workinghover');\n    } // Make player easily findable by ID\n\n\n    Player.players[_this.id_] = _assertThisInitialized(_assertThisInitialized(_this)); // Add a major version class to aid css in plugins\n\n    var majorVersion = version.split('.')[0];\n\n    _this.addClass(\"vjs-v\" + majorVersion); // When the player is first initialized, trigger activity so components\n    // like the control bar show themselves if needed\n\n\n    _this.userActive(true);\n\n    _this.reportUserActivity();\n\n    _this.one('play', _this.listenForUserActivity_);\n\n    _this.on('focus', _this.handleFocus);\n\n    _this.on('blur', _this.handleBlur);\n\n    _this.on('stageclick', _this.handleStageClick_);\n\n    _this.breakpoints(_this.options_.breakpoints);\n\n    _this.responsive(_this.options_.responsive);\n\n    return _this;\n  }\n  /**\n   * Destroys the video player and does any necessary cleanup.\n   *\n   * This is especially helpful if you are dynamically adding and removing videos\n   * to/from the DOM.\n   *\n   * @fires Player#dispose\n   */\n\n\n  var _proto = Player.prototype;\n\n  _proto.dispose = function dispose() {\n    var _this2 = this;\n\n    /**\n     * Called when the player is being disposed of.\n     *\n     * @event Player#dispose\n     * @type {EventTarget~Event}\n     */\n    this.trigger('dispose'); // prevent dispose from being called twice\n\n    this.off('dispose'); // Make sure all player-specific document listeners are unbound. This is\n\n    off(document, FullscreenApi.fullscreenchange, this.boundDocumentFullscreenChange_);\n    off(document, 'keydown', this.boundFullWindowOnEscKey_);\n    off(document, 'keydown', this.boundHandleKeyPress_);\n\n    if (this.styleEl_ && this.styleEl_.parentNode) {\n      this.styleEl_.parentNode.removeChild(this.styleEl_);\n      this.styleEl_ = null;\n    } // Kill reference to this player\n\n\n    Player.players[this.id_] = null;\n\n    if (this.tag && this.tag.player) {\n      this.tag.player = null;\n    }\n\n    if (this.el_ && this.el_.player) {\n      this.el_.player = null;\n    }\n\n    if (this.tech_) {\n      this.tech_.dispose();\n      this.isPosterFromTech_ = false;\n      this.poster_ = '';\n    }\n\n    if (this.playerElIngest_) {\n      this.playerElIngest_ = null;\n    }\n\n    if (this.tag) {\n      this.tag = null;\n    }\n\n    clearCacheForPlayer(this); // remove all event handlers for track lists\n    // all tracks and track listeners are removed on\n    // tech dispose\n\n    ALL.names.forEach(function (name$$1) {\n      var props = ALL[name$$1];\n\n      var list = _this2[props.getterName](); // if it is not a native list\n      // we have to manually remove event listeners\n\n\n      if (list && list.off) {\n        list.off();\n      }\n    }); // the actual .el_ is removed here\n\n    _Component.prototype.dispose.call(this);\n  }\n  /**\n   * Create the `Player`'s DOM element.\n   *\n   * @return {Element}\n   *         The DOM element that gets created.\n   */\n  ;\n\n  _proto.createEl = function createEl$$1() {\n    var tag = this.tag;\n    var el;\n    var playerElIngest = this.playerElIngest_ = tag.parentNode && tag.parentNode.hasAttribute && tag.parentNode.hasAttribute('data-vjs-player');\n    var divEmbed = this.tag.tagName.toLowerCase() === 'video-js';\n\n    if (playerElIngest) {\n      el = this.el_ = tag.parentNode;\n    } else if (!divEmbed) {\n      el = this.el_ = _Component.prototype.createEl.call(this, 'div');\n    } // Copy over all the attributes from the tag, including ID and class\n    // ID will now reference player box, not the video tag\n\n\n    var attrs = getAttributes(tag);\n\n    if (divEmbed) {\n      el = this.el_ = tag;\n      tag = this.tag = document.createElement('video');\n\n      while (el.children.length) {\n        tag.appendChild(el.firstChild);\n      }\n\n      if (!hasClass(el, 'video-js')) {\n        addClass(el, 'video-js');\n      }\n\n      el.appendChild(tag);\n      playerElIngest = this.playerElIngest_ = el; // move properties over from our custom `video-js` element\n      // to our new `video` element. This will move things like\n      // `src` or `controls` that were set via js before the player\n      // was initialized.\n\n      Object.keys(el).forEach(function (k) {\n        tag[k] = el[k];\n      });\n    } // set tabindex to -1 to remove the video element from the focus order\n\n\n    tag.setAttribute('tabindex', '-1');\n    attrs.tabindex = '-1'; // Workaround for #4583 (JAWS+IE doesn't announce BPB or play button)\n    // See https://github.com/FreedomScientific/VFO-standards-support/issues/78\n    // Note that we can't detect if JAWS is being used, but this ARIA attribute\n    //  doesn't change behavior of IE11 if JAWS is not being used\n\n    if (IE_VERSION) {\n      tag.setAttribute('role', 'application');\n      attrs.role = 'application';\n    } // Remove width/height attrs from tag so CSS can make it 100% width/height\n\n\n    tag.removeAttribute('width');\n    tag.removeAttribute('height');\n\n    if ('width' in attrs) {\n      delete attrs.width;\n    }\n\n    if ('height' in attrs) {\n      delete attrs.height;\n    }\n\n    Object.getOwnPropertyNames(attrs).forEach(function (attr) {\n      // don't copy over the class attribute to the player element when we're in a div embed\n      // the class is already set up properly in the divEmbed case\n      // and we want to make sure that the `video-js` class doesn't get lost\n      if (!(divEmbed && attr === 'class')) {\n        el.setAttribute(attr, attrs[attr]);\n      }\n\n      if (divEmbed) {\n        tag.setAttribute(attr, attrs[attr]);\n      }\n    }); // Update tag id/class for use as HTML5 playback tech\n    // Might think we should do this after embedding in container so .vjs-tech class\n    // doesn't flash 100% width/height, but class only applies with .video-js parent\n\n    tag.playerId = tag.id;\n    tag.id += '_html5_api';\n    tag.className = 'vjs-tech'; // Make player findable on elements\n\n    tag.player = el.player = this; // Default state of video is paused\n\n    this.addClass('vjs-paused'); // Add a style element in the player that we'll use to set the width/height\n    // of the player in a way that's still overrideable by CSS, just like the\n    // video element\n\n    if (window$1.VIDEOJS_NO_DYNAMIC_STYLE !== true) {\n      this.styleEl_ = createStyleElement('vjs-styles-dimensions');\n      var defaultsStyleEl = $('.vjs-styles-defaults');\n      var head = $('head');\n      head.insertBefore(this.styleEl_, defaultsStyleEl ? defaultsStyleEl.nextSibling : head.firstChild);\n    }\n\n    this.fill_ = false;\n    this.fluid_ = false; // Pass in the width/height/aspectRatio options which will update the style el\n\n    this.width(this.options_.width);\n    this.height(this.options_.height);\n    this.fill(this.options_.fill);\n    this.fluid(this.options_.fluid);\n    this.aspectRatio(this.options_.aspectRatio); // Hide any links within the video/audio tag,\n    // because IE doesn't hide them completely from screen readers.\n\n    var links = tag.getElementsByTagName('a');\n\n    for (var i = 0; i < links.length; i++) {\n      var linkEl = links.item(i);\n      addClass(linkEl, 'vjs-hidden');\n      linkEl.setAttribute('hidden', 'hidden');\n    } // insertElFirst seems to cause the networkState to flicker from 3 to 2, so\n    // keep track of the original for later so we can know if the source originally failed\n\n\n    tag.initNetworkState_ = tag.networkState; // Wrap video tag in div (el/box) container\n\n    if (tag.parentNode && !playerElIngest) {\n      tag.parentNode.insertBefore(el, tag);\n    } // insert the tag as the first child of the player element\n    // then manually add it to the children array so that this.addChild\n    // will work properly for other components\n    //\n    // Breaks iPhone, fixed in HTML5 setup.\n\n\n    prependTo(tag, el);\n    this.children_.unshift(tag); // Set lang attr on player to ensure CSS :lang() in consistent with player\n    // if it's been set to something different to the doc\n\n    this.el_.setAttribute('lang', this.language_);\n    this.el_ = el;\n    return el;\n  }\n  /**\n   * A getter/setter for the `Player`'s width. Returns the player's configured value.\n   * To get the current width use `currentWidth()`.\n   *\n   * @param {number} [value]\n   *        The value to set the `Player`'s width to.\n   *\n   * @return {number}\n   *         The current width of the `Player` when getting.\n   */\n  ;\n\n  _proto.width = function width(value) {\n    return this.dimension('width', value);\n  }\n  /**\n   * A getter/setter for the `Player`'s height. Returns the player's configured value.\n   * To get the current height use `currentheight()`.\n   *\n   * @param {number} [value]\n   *        The value to set the `Player`'s heigth to.\n   *\n   * @return {number}\n   *         The current height of the `Player` when getting.\n   */\n  ;\n\n  _proto.height = function height(value) {\n    return this.dimension('height', value);\n  }\n  /**\n   * A getter/setter for the `Player`'s width & height.\n   *\n   * @param {string} dimension\n   *        This string can be:\n   *        - 'width'\n   *        - 'height'\n   *\n   * @param {number} [value]\n   *        Value for dimension specified in the first argument.\n   *\n   * @return {number}\n   *         The dimension arguments value when getting (width/height).\n   */\n  ;\n\n  _proto.dimension = function dimension(_dimension, value) {\n    var privDimension = _dimension + '_';\n\n    if (value === undefined) {\n      return this[privDimension] || 0;\n    }\n\n    if (value === '') {\n      // If an empty string is given, reset the dimension to be automatic\n      this[privDimension] = undefined;\n      this.updateStyleEl_();\n      return;\n    }\n\n    var parsedVal = parseFloat(value);\n\n    if (isNaN(parsedVal)) {\n      log.error(\"Improper value \\\"\" + value + \"\\\" supplied for for \" + _dimension);\n      return;\n    }\n\n    this[privDimension] = parsedVal;\n    this.updateStyleEl_();\n  }\n  /**\n   * A getter/setter/toggler for the vjs-fluid `className` on the `Player`.\n   *\n   * Turning this on will turn off fill mode.\n   *\n   * @param {boolean} [bool]\n   *        - A value of true adds the class.\n   *        - A value of false removes the class.\n   *        - No value will be a getter.\n   *\n   * @return {boolean|undefined}\n   *         - The value of fluid when getting.\n   *         - `undefined` when setting.\n   */\n  ;\n\n  _proto.fluid = function fluid(bool) {\n    if (bool === undefined) {\n      return !!this.fluid_;\n    }\n\n    this.fluid_ = !!bool;\n\n    if (isEvented(this)) {\n      this.off('playerreset', this.updateStyleEl_);\n    }\n\n    if (bool) {\n      this.addClass('vjs-fluid');\n      this.fill(false);\n      addEventedCallback(function () {\n        this.on('playerreset', this.updateStyleEl_);\n      });\n    } else {\n      this.removeClass('vjs-fluid');\n    }\n\n    this.updateStyleEl_();\n  }\n  /**\n   * A getter/setter/toggler for the vjs-fill `className` on the `Player`.\n   *\n   * Turning this on will turn off fluid mode.\n   *\n   * @param {boolean} [bool]\n   *        - A value of true adds the class.\n   *        - A value of false removes the class.\n   *        - No value will be a getter.\n   *\n   * @return {boolean|undefined}\n   *         - The value of fluid when getting.\n   *         - `undefined` when setting.\n   */\n  ;\n\n  _proto.fill = function fill(bool) {\n    if (bool === undefined) {\n      return !!this.fill_;\n    }\n\n    this.fill_ = !!bool;\n\n    if (bool) {\n      this.addClass('vjs-fill');\n      this.fluid(false);\n    } else {\n      this.removeClass('vjs-fill');\n    }\n  }\n  /**\n   * Get/Set the aspect ratio\n   *\n   * @param {string} [ratio]\n   *        Aspect ratio for player\n   *\n   * @return {string|undefined}\n   *         returns the current aspect ratio when getting\n   */\n\n  /**\n   * A getter/setter for the `Player`'s aspect ratio.\n   *\n   * @param {string} [ratio]\n   *        The value to set the `Player's aspect ratio to.\n   *\n   * @return {string|undefined}\n   *         - The current aspect ratio of the `Player` when getting.\n   *         - undefined when setting\n   */\n  ;\n\n  _proto.aspectRatio = function aspectRatio(ratio) {\n    if (ratio === undefined) {\n      return this.aspectRatio_;\n    } // Check for width:height format\n\n\n    if (!/^\\d+\\:\\d+$/.test(ratio)) {\n      throw new Error('Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.');\n    }\n\n    this.aspectRatio_ = ratio; // We're assuming if you set an aspect ratio you want fluid mode,\n    // because in fixed mode you could calculate width and height yourself.\n\n    this.fluid(true);\n    this.updateStyleEl_();\n  }\n  /**\n   * Update styles of the `Player` element (height, width and aspect ratio).\n   *\n   * @private\n   * @listens Tech#loadedmetadata\n   */\n  ;\n\n  _proto.updateStyleEl_ = function updateStyleEl_() {\n    if (window$1.VIDEOJS_NO_DYNAMIC_STYLE === true) {\n      var _width = typeof this.width_ === 'number' ? this.width_ : this.options_.width;\n\n      var _height = typeof this.height_ === 'number' ? this.height_ : this.options_.height;\n\n      var techEl = this.tech_ && this.tech_.el();\n\n      if (techEl) {\n        if (_width >= 0) {\n          techEl.width = _width;\n        }\n\n        if (_height >= 0) {\n          techEl.height = _height;\n        }\n      }\n\n      return;\n    }\n\n    var width;\n    var height;\n    var aspectRatio;\n    var idClass; // The aspect ratio is either used directly or to calculate width and height.\n\n    if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== 'auto') {\n      // Use any aspectRatio that's been specifically set\n      aspectRatio = this.aspectRatio_;\n    } else if (this.videoWidth() > 0) {\n      // Otherwise try to get the aspect ratio from the video metadata\n      aspectRatio = this.videoWidth() + ':' + this.videoHeight();\n    } else {\n      // Or use a default. The video element's is 2:1, but 16:9 is more common.\n      aspectRatio = '16:9';\n    } // Get the ratio as a decimal we can use to calculate dimensions\n\n\n    var ratioParts = aspectRatio.split(':');\n    var ratioMultiplier = ratioParts[1] / ratioParts[0];\n\n    if (this.width_ !== undefined) {\n      // Use any width that's been specifically set\n      width = this.width_;\n    } else if (this.height_ !== undefined) {\n      // Or calulate the width from the aspect ratio if a height has been set\n      width = this.height_ / ratioMultiplier;\n    } else {\n      // Or use the video's metadata, or use the video el's default of 300\n      width = this.videoWidth() || 300;\n    }\n\n    if (this.height_ !== undefined) {\n      // Use any height that's been specifically set\n      height = this.height_;\n    } else {\n      // Otherwise calculate the height from the ratio and the width\n      height = width * ratioMultiplier;\n    } // Ensure the CSS class is valid by starting with an alpha character\n\n\n    if (/^[^a-zA-Z]/.test(this.id())) {\n      idClass = 'dimensions-' + this.id();\n    } else {\n      idClass = this.id() + '-dimensions';\n    } // Ensure the right class is still on the player for the style element\n\n\n    this.addClass(idClass);\n    setTextContent(this.styleEl_, \"\\n      .\" + idClass + \" {\\n        width: \" + width + \"px;\\n        height: \" + height + \"px;\\n      }\\n\\n      .\" + idClass + \".vjs-fluid {\\n        padding-top: \" + ratioMultiplier * 100 + \"%;\\n      }\\n    \");\n  }\n  /**\n   * Load/Create an instance of playback {@link Tech} including element\n   * and API methods. Then append the `Tech` element in `Player` as a child.\n   *\n   * @param {string} techName\n   *        name of the playback technology\n   *\n   * @param {string} source\n   *        video source\n   *\n   * @private\n   */\n  ;\n\n  _proto.loadTech_ = function loadTech_(techName, source) {\n    var _this3 = this;\n\n    // Pause and remove current playback technology\n    if (this.tech_) {\n      this.unloadTech_();\n    }\n\n    var titleTechName = toTitleCase(techName);\n    var camelTechName = techName.charAt(0).toLowerCase() + techName.slice(1); // get rid of the HTML5 video tag as soon as we are using another tech\n\n    if (titleTechName !== 'Html5' && this.tag) {\n      Tech.getTech('Html5').disposeMediaElement(this.tag);\n      this.tag.player = null;\n      this.tag = null;\n    }\n\n    this.techName_ = titleTechName; // Turn off API access because we're loading a new tech that might load asynchronously\n\n    this.isReady_ = false; // if autoplay is a string we pass false to the tech\n    // because the player is going to handle autoplay on `loadstart`\n\n    var autoplay = typeof this.autoplay() === 'string' ? false : this.autoplay(); // Grab tech-specific options from player options and add source and parent element to use.\n\n    var techOptions = {\n      source: source,\n      autoplay: autoplay,\n      'nativeControlsForTouch': this.options_.nativeControlsForTouch,\n      'playerId': this.id(),\n      'techId': this.id() + \"_\" + camelTechName + \"_api\",\n      'playsinline': this.options_.playsinline,\n      'preload': this.options_.preload,\n      'loop': this.options_.loop,\n      'muted': this.options_.muted,\n      'poster': this.poster(),\n      'language': this.language(),\n      'playerElIngest': this.playerElIngest_ || false,\n      'vtt.js': this.options_['vtt.js'],\n      'canOverridePoster': !!this.options_.techCanOverridePoster,\n      'enableSourceset': this.options_.enableSourceset\n    };\n    ALL.names.forEach(function (name$$1) {\n      var props = ALL[name$$1];\n      techOptions[props.getterName] = _this3[props.privateName];\n    });\n    assign(techOptions, this.options_[titleTechName]);\n    assign(techOptions, this.options_[camelTechName]);\n    assign(techOptions, this.options_[techName.toLowerCase()]);\n\n    if (this.tag) {\n      techOptions.tag = this.tag;\n    }\n\n    if (source && source.src === this.cache_.src && this.cache_.currentTime > 0) {\n      techOptions.startTime = this.cache_.currentTime;\n    } // Initialize tech instance\n\n\n    var TechClass = Tech.getTech(techName);\n\n    if (!TechClass) {\n      throw new Error(\"No Tech named '\" + titleTechName + \"' exists! '\" + titleTechName + \"' should be registered using videojs.registerTech()'\");\n    }\n\n    this.tech_ = new TechClass(techOptions); // player.triggerReady is always async, so don't need this to be async\n\n    this.tech_.ready(bind(this, this.handleTechReady_), true);\n    textTrackConverter.jsonToTextTracks(this.textTracksJson_ || [], this.tech_); // Listen to all HTML5-defined events and trigger them on the player\n\n    TECH_EVENTS_RETRIGGER.forEach(function (event) {\n      _this3.on(_this3.tech_, event, _this3[\"handleTech\" + toTitleCase(event) + \"_\"]);\n    });\n    Object.keys(TECH_EVENTS_QUEUE).forEach(function (event) {\n      _this3.on(_this3.tech_, event, function (eventObj) {\n        if (_this3.tech_.playbackRate() === 0 && _this3.tech_.seeking()) {\n          _this3.queuedCallbacks_.push({\n            callback: _this3[\"handleTech\" + TECH_EVENTS_QUEUE[event] + \"_\"].bind(_this3),\n            event: eventObj\n          });\n\n          return;\n        }\n\n        _this3[\"handleTech\" + TECH_EVENTS_QUEUE[event] + \"_\"](eventObj);\n      });\n    });\n    this.on(this.tech_, 'loadstart', this.handleTechLoadStart_);\n    this.on(this.tech_, 'sourceset', this.handleTechSourceset_);\n    this.on(this.tech_, 'waiting', this.handleTechWaiting_);\n    this.on(this.tech_, 'ended', this.handleTechEnded_);\n    this.on(this.tech_, 'seeking', this.handleTechSeeking_);\n    this.on(this.tech_, 'play', this.handleTechPlay_);\n    this.on(this.tech_, 'firstplay', this.handleTechFirstPlay_);\n    this.on(this.tech_, 'pause', this.handleTechPause_);\n    this.on(this.tech_, 'durationchange', this.handleTechDurationChange_);\n    this.on(this.tech_, 'fullscreenchange', this.handleTechFullscreenChange_);\n    this.on(this.tech_, 'error', this.handleTechError_);\n    this.on(this.tech_, 'loadedmetadata', this.updateStyleEl_);\n    this.on(this.tech_, 'posterchange', this.handleTechPosterChange_);\n    this.on(this.tech_, 'textdata', this.handleTechTextData_);\n    this.on(this.tech_, 'ratechange', this.handleTechRateChange_);\n    this.usingNativeControls(this.techGet_('controls'));\n\n    if (this.controls() && !this.usingNativeControls()) {\n      this.addTechControlsListeners_();\n    } // Add the tech element in the DOM if it was not already there\n    // Make sure to not insert the original video element if using Html5\n\n\n    if (this.tech_.el().parentNode !== this.el() && (titleTechName !== 'Html5' || !this.tag)) {\n      prependTo(this.tech_.el(), this.el());\n    } // Get rid of the original video tag reference after the first tech is loaded\n\n\n    if (this.tag) {\n      this.tag.player = null;\n      this.tag = null;\n    }\n  }\n  /**\n   * Unload and dispose of the current playback {@link Tech}.\n   *\n   * @private\n   */\n  ;\n\n  _proto.unloadTech_ = function unloadTech_() {\n    var _this4 = this;\n\n    // Save the current text tracks so that we can reuse the same text tracks with the next tech\n    ALL.names.forEach(function (name$$1) {\n      var props = ALL[name$$1];\n      _this4[props.privateName] = _this4[props.getterName]();\n    });\n    this.textTracksJson_ = textTrackConverter.textTracksToJson(this.tech_);\n    this.isReady_ = false;\n    this.tech_.dispose();\n    this.tech_ = false;\n\n    if (this.isPosterFromTech_) {\n      this.poster_ = '';\n      this.trigger('posterchange');\n    }\n\n    this.isPosterFromTech_ = false;\n  }\n  /**\n   * Return a reference to the current {@link Tech}.\n   * It will print a warning by default about the danger of using the tech directly\n   * but any argument that is passed in will silence the warning.\n   *\n   * @param {*} [safety]\n   *        Anything passed in to silence the warning\n   *\n   * @return {Tech}\n   *         The Tech\n   */\n  ;\n\n  _proto.tech = function tech(safety) {\n    if (safety === undefined) {\n      log.warn(tsml(_templateObject$2()));\n    }\n\n    return this.tech_;\n  }\n  /**\n   * Set up click and touch listeners for the playback element\n   *\n   * - On desktops: a click on the video itself will toggle playback\n   * - On mobile devices: a click on the video toggles controls\n   *   which is done by toggling the user state between active and\n   *   inactive\n   * - A tap can signal that a user has become active or has become inactive\n   *   e.g. a quick tap on an iPhone movie should reveal the controls. Another\n   *   quick tap should hide them again (signaling the user is in an inactive\n   *   viewing state)\n   * - In addition to this, we still want the user to be considered inactive after\n   *   a few seconds of inactivity.\n   *\n   * > Note: the only part of iOS interaction we can't mimic with this setup\n   * is a touch and hold on the video element counting as activity in order to\n   * keep the controls showing, but that shouldn't be an issue. A touch and hold\n   * on any controls will still keep the user active\n   *\n   * @private\n   */\n  ;\n\n  _proto.addTechControlsListeners_ = function addTechControlsListeners_() {\n    // Make sure to remove all the previous listeners in case we are called multiple times.\n    this.removeTechControlsListeners_(); // Some browsers (Chrome & IE) don't trigger a click on a flash swf, but do\n    // trigger mousedown/up.\n    // http://stackoverflow.com/questions/1444562/javascript-onclick-event-over-flash-object\n    // Any touch events are set to block the mousedown event from happening\n\n    this.on(this.tech_, 'mousedown', this.handleTechClick_);\n    this.on(this.tech_, 'dblclick', this.handleTechDoubleClick_); // If the controls were hidden we don't want that to change without a tap event\n    // so we'll check if the controls were already showing before reporting user\n    // activity\n\n    this.on(this.tech_, 'touchstart', this.handleTechTouchStart_);\n    this.on(this.tech_, 'touchmove', this.handleTechTouchMove_);\n    this.on(this.tech_, 'touchend', this.handleTechTouchEnd_); // The tap listener needs to come after the touchend listener because the tap\n    // listener cancels out any reportedUserActivity when setting userActive(false)\n\n    this.on(this.tech_, 'tap', this.handleTechTap_);\n  }\n  /**\n   * Remove the listeners used for click and tap controls. This is needed for\n   * toggling to controls disabled, where a tap/touch should do nothing.\n   *\n   * @private\n   */\n  ;\n\n  _proto.removeTechControlsListeners_ = function removeTechControlsListeners_() {\n    // We don't want to just use `this.off()` because there might be other needed\n    // listeners added by techs that extend this.\n    this.off(this.tech_, 'tap', this.handleTechTap_);\n    this.off(this.tech_, 'touchstart', this.handleTechTouchStart_);\n    this.off(this.tech_, 'touchmove', this.handleTechTouchMove_);\n    this.off(this.tech_, 'touchend', this.handleTechTouchEnd_);\n    this.off(this.tech_, 'mousedown', this.handleTechClick_);\n    this.off(this.tech_, 'dblclick', this.handleTechDoubleClick_);\n  }\n  /**\n   * Player waits for the tech to be ready\n   *\n   * @private\n   */\n  ;\n\n  _proto.handleTechReady_ = function handleTechReady_() {\n    this.triggerReady(); // Keep the same volume as before\n\n    if (this.cache_.volume) {\n      this.techCall_('setVolume', this.cache_.volume);\n    } // Look if the tech found a higher resolution poster while loading\n\n\n    this.handleTechPosterChange_(); // Update the duration if available\n\n    this.handleTechDurationChange_();\n  }\n  /**\n   * Retrigger the `loadstart` event that was triggered by the {@link Tech}. This\n   * function will also trigger {@link Player#firstplay} if it is the first loadstart\n   * for a video.\n   *\n   * @fires Player#loadstart\n   * @fires Player#firstplay\n   * @listens Tech#loadstart\n   * @private\n   */\n  ;\n\n  _proto.handleTechLoadStart_ = function handleTechLoadStart_() {\n    // TODO: Update to use `emptied` event instead. See #1277.\n    this.removeClass('vjs-ended');\n    this.removeClass('vjs-seeking'); // reset the error state\n\n    this.error(null); // Update the duration\n\n    this.handleTechDurationChange_(); // If it's already playing we want to trigger a firstplay event now.\n    // The firstplay event relies on both the play and loadstart events\n    // which can happen in any order for a new source\n\n    if (!this.paused()) {\n      /**\n       * Fired when the user agent begins looking for media data\n       *\n       * @event Player#loadstart\n       * @type {EventTarget~Event}\n       */\n      this.trigger('loadstart');\n      this.trigger('firstplay');\n    } else {\n      // reset the hasStarted state\n      this.hasStarted(false);\n      this.trigger('loadstart');\n    } // autoplay happens after loadstart for the browser,\n    // so we mimic that behavior\n\n\n    this.manualAutoplay_(this.autoplay());\n  }\n  /**\n   * Handle autoplay string values, rather than the typical boolean\n   * values that should be handled by the tech. Note that this is not\n   * part of any specification. Valid values and what they do can be\n   * found on the autoplay getter at Player#autoplay()\n   */\n  ;\n\n  _proto.manualAutoplay_ = function manualAutoplay_(type) {\n    var _this5 = this;\n\n    if (!this.tech_ || typeof type !== 'string') {\n      return;\n    }\n\n    var muted = function muted() {\n      var previouslyMuted = _this5.muted();\n\n      _this5.muted(true);\n\n      var restoreMuted = function restoreMuted() {\n        _this5.muted(previouslyMuted);\n      }; // restore muted on play terminatation\n\n\n      _this5.playTerminatedQueue_.push(restoreMuted);\n\n      var mutedPromise = _this5.play();\n\n      if (!isPromise(mutedPromise)) {\n        return;\n      }\n\n      return mutedPromise.catch(restoreMuted);\n    };\n\n    var promise; // if muted defaults to true\n    // the only thing we can do is call play\n\n    if (type === 'any' && this.muted() !== true) {\n      promise = this.play();\n\n      if (isPromise(promise)) {\n        promise = promise.catch(muted);\n      }\n    } else if (type === 'muted' && this.muted() !== true) {\n      promise = muted();\n    } else {\n      promise = this.play();\n    }\n\n    if (!isPromise(promise)) {\n      return;\n    }\n\n    return promise.then(function () {\n      _this5.trigger({\n        type: 'autoplay-success',\n        autoplay: type\n      });\n    }).catch(function (e) {\n      _this5.trigger({\n        type: 'autoplay-failure',\n        autoplay: type\n      });\n    });\n  }\n  /**\n   * Update the internal source caches so that we return the correct source from\n   * `src()`, `currentSource()`, and `currentSources()`.\n   *\n   * > Note: `currentSources` will not be updated if the source that is passed in exists\n   *         in the current `currentSources` cache.\n   *\n   *\n   * @param {Tech~SourceObject} srcObj\n   *        A string or object source to update our caches to.\n   */\n  ;\n\n  _proto.updateSourceCaches_ = function updateSourceCaches_(srcObj) {\n    if (srcObj === void 0) {\n      srcObj = '';\n    }\n\n    var src = srcObj;\n    var type = '';\n\n    if (typeof src !== 'string') {\n      src = srcObj.src;\n      type = srcObj.type;\n    } // make sure all the caches are set to default values\n    // to prevent null checking\n\n\n    this.cache_.source = this.cache_.source || {};\n    this.cache_.sources = this.cache_.sources || []; // try to get the type of the src that was passed in\n\n    if (src && !type) {\n      type = findMimetype(this, src);\n    } // update `currentSource` cache always\n\n\n    this.cache_.source = mergeOptions({}, srcObj, {\n      src: src,\n      type: type\n    });\n    var matchingSources = this.cache_.sources.filter(function (s) {\n      return s.src && s.src === src;\n    });\n    var sourceElSources = [];\n    var sourceEls = this.$$('source');\n    var matchingSourceEls = [];\n\n    for (var i = 0; i < sourceEls.length; i++) {\n      var sourceObj = getAttributes(sourceEls[i]);\n      sourceElSources.push(sourceObj);\n\n      if (sourceObj.src && sourceObj.src === src) {\n        matchingSourceEls.push(sourceObj.src);\n      }\n    } // if we have matching source els but not matching sources\n    // the current source cache is not up to date\n\n\n    if (matchingSourceEls.length && !matchingSources.length) {\n      this.cache_.sources = sourceElSources; // if we don't have matching source or source els set the\n      // sources cache to the `currentSource` cache\n    } else if (!matchingSources.length) {\n      this.cache_.sources = [this.cache_.source];\n    } // update the tech `src` cache\n\n\n    this.cache_.src = src;\n  }\n  /**\n   * *EXPERIMENTAL* Fired when the source is set or changed on the {@link Tech}\n   * causing the media element to reload.\n   *\n   * It will fire for the initial source and each subsequent source.\n   * This event is a custom event from Video.js and is triggered by the {@link Tech}.\n   *\n   * The event object for this event contains a `src` property that will contain the source\n   * that was available when the event was triggered. This is generally only necessary if Video.js\n   * is switching techs while the source was being changed.\n   *\n   * It is also fired when `load` is called on the player (or media element)\n   * because the {@link https://html.spec.whatwg.org/multipage/media.html#dom-media-load|specification for `load`}\n   * says that the resource selection algorithm needs to be aborted and restarted.\n   * In this case, it is very likely that the `src` property will be set to the\n   * empty string `\"\"` to indicate we do not know what the source will be but\n   * that it is changing.\n   *\n   * *This event is currently still experimental and may change in minor releases.*\n   * __To use this, pass `enableSourceset` option to the player.__\n   *\n   * @event Player#sourceset\n   * @type {EventTarget~Event}\n   * @prop {string} src\n   *                The source url available when the `sourceset` was triggered.\n   *                It will be an empty string if we cannot know what the source is\n   *                but know that the source will change.\n   */\n\n  /**\n   * Retrigger the `sourceset` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#sourceset\n   * @listens Tech#sourceset\n   * @private\n   */\n  ;\n\n  _proto.handleTechSourceset_ = function handleTechSourceset_(event) {\n    var _this6 = this;\n\n    // only update the source cache when the source\n    // was not updated using the player api\n    if (!this.changingSrc_) {\n      var updateSourceCaches = function updateSourceCaches(src) {\n        return _this6.updateSourceCaches_(src);\n      };\n\n      var playerSrc = this.currentSource().src;\n      var eventSrc = event.src; // if we have a playerSrc that is not a blob, and a tech src that is a blob\n\n      if (playerSrc && !/^blob:/.test(playerSrc) && /^blob:/.test(eventSrc)) {\n        // if both the tech source and the player source were updated we assume\n        // something like @videojs/http-streaming did the sourceset and skip updating the source cache.\n        if (!this.lastSource_ || this.lastSource_.tech !== eventSrc && this.lastSource_.player !== playerSrc) {\n          updateSourceCaches = function updateSourceCaches() {};\n        }\n      } // update the source to the intial source right away\n      // in some cases this will be empty string\n\n\n      updateSourceCaches(eventSrc); // if the `sourceset` `src` was an empty string\n      // wait for a `loadstart` to update the cache to `currentSrc`.\n      // If a sourceset happens before a `loadstart`, we reset the state\n      // as this function will be called again.\n\n      if (!event.src) {\n        var updateCache = function updateCache(e) {\n          if (e.type !== 'sourceset') {\n            var techSrc = _this6.techGet('currentSrc');\n\n            _this6.lastSource_.tech = techSrc;\n\n            _this6.updateSourceCaches_(techSrc);\n          }\n\n          _this6.tech_.off(['sourceset', 'loadstart'], updateCache);\n        };\n\n        this.tech_.one(['sourceset', 'loadstart'], updateCache);\n      }\n    }\n\n    this.lastSource_ = {\n      player: this.currentSource().src,\n      tech: event.src\n    };\n    this.trigger({\n      src: event.src,\n      type: 'sourceset'\n    });\n  }\n  /**\n   * Add/remove the vjs-has-started class\n   *\n   * @fires Player#firstplay\n   *\n   * @param {boolean} request\n   *        - true: adds the class\n   *        - false: remove the class\n   *\n   * @return {boolean}\n   *         the boolean value of hasStarted_\n   */\n  ;\n\n  _proto.hasStarted = function hasStarted(request) {\n    if (request === undefined) {\n      // act as getter, if we have no request to change\n      return this.hasStarted_;\n    }\n\n    if (request === this.hasStarted_) {\n      return;\n    }\n\n    this.hasStarted_ = request;\n\n    if (this.hasStarted_) {\n      this.addClass('vjs-has-started');\n      this.trigger('firstplay');\n    } else {\n      this.removeClass('vjs-has-started');\n    }\n  }\n  /**\n   * Fired whenever the media begins or resumes playback\n   *\n   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play}\n   * @fires Player#play\n   * @listens Tech#play\n   * @private\n   */\n  ;\n\n  _proto.handleTechPlay_ = function handleTechPlay_() {\n    this.removeClass('vjs-ended');\n    this.removeClass('vjs-paused');\n    this.addClass('vjs-playing'); // hide the poster when the user hits play\n\n    this.hasStarted(true);\n    /**\n     * Triggered whenever an {@link Tech#play} event happens. Indicates that\n     * playback has started or resumed.\n     *\n     * @event Player#play\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('play');\n  }\n  /**\n   * Retrigger the `ratechange` event that was triggered by the {@link Tech}.\n   *\n   * If there were any events queued while the playback rate was zero, fire\n   * those events now.\n   *\n   * @private\n   * @method Player#handleTechRateChange_\n   * @fires Player#ratechange\n   * @listens Tech#ratechange\n   */\n  ;\n\n  _proto.handleTechRateChange_ = function handleTechRateChange_() {\n    if (this.tech_.playbackRate() > 0 && this.cache_.lastPlaybackRate === 0) {\n      this.queuedCallbacks_.forEach(function (queued) {\n        return queued.callback(queued.event);\n      });\n      this.queuedCallbacks_ = [];\n    }\n\n    this.cache_.lastPlaybackRate = this.tech_.playbackRate();\n    /**\n     * Fires when the playing speed of the audio/video is changed\n     *\n     * @event Player#ratechange\n     * @type {event}\n     */\n\n    this.trigger('ratechange');\n  }\n  /**\n   * Retrigger the `waiting` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#waiting\n   * @listens Tech#waiting\n   * @private\n   */\n  ;\n\n  _proto.handleTechWaiting_ = function handleTechWaiting_() {\n    var _this7 = this;\n\n    this.addClass('vjs-waiting');\n    /**\n     * A readyState change on the DOM element has caused playback to stop.\n     *\n     * @event Player#waiting\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('waiting'); // Browsers may emit a timeupdate event after a waiting event. In order to prevent\n    // premature removal of the waiting class, wait for the time to change.\n\n    var timeWhenWaiting = this.currentTime();\n\n    var timeUpdateListener = function timeUpdateListener() {\n      if (timeWhenWaiting !== _this7.currentTime()) {\n        _this7.removeClass('vjs-waiting');\n\n        _this7.off('timeupdate', timeUpdateListener);\n      }\n    };\n\n    this.on('timeupdate', timeUpdateListener);\n  }\n  /**\n   * Retrigger the `canplay` event that was triggered by the {@link Tech}.\n   * > Note: This is not consistent between browsers. See #1351\n   *\n   * @fires Player#canplay\n   * @listens Tech#canplay\n   * @private\n   */\n  ;\n\n  _proto.handleTechCanPlay_ = function handleTechCanPlay_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media has a readyState of HAVE_FUTURE_DATA or greater.\n     *\n     * @event Player#canplay\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('canplay');\n  }\n  /**\n   * Retrigger the `canplaythrough` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#canplaythrough\n   * @listens Tech#canplaythrough\n   * @private\n   */\n  ;\n\n  _proto.handleTechCanPlayThrough_ = function handleTechCanPlayThrough_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media has a readyState of HAVE_ENOUGH_DATA or greater. This means that the\n     * entire media file can be played without buffering.\n     *\n     * @event Player#canplaythrough\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('canplaythrough');\n  }\n  /**\n   * Retrigger the `playing` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#playing\n   * @listens Tech#playing\n   * @private\n   */\n  ;\n\n  _proto.handleTechPlaying_ = function handleTechPlaying_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media is no longer blocked from playback, and has started playing.\n     *\n     * @event Player#playing\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('playing');\n  }\n  /**\n   * Retrigger the `seeking` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#seeking\n   * @listens Tech#seeking\n   * @private\n   */\n  ;\n\n  _proto.handleTechSeeking_ = function handleTechSeeking_() {\n    this.addClass('vjs-seeking');\n    /**\n     * Fired whenever the player is jumping to a new time\n     *\n     * @event Player#seeking\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('seeking');\n  }\n  /**\n   * Retrigger the `seeked` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#seeked\n   * @listens Tech#seeked\n   * @private\n   */\n  ;\n\n  _proto.handleTechSeeked_ = function handleTechSeeked_() {\n    this.removeClass('vjs-seeking');\n    this.removeClass('vjs-ended');\n    /**\n     * Fired when the player has finished jumping to a new time\n     *\n     * @event Player#seeked\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('seeked');\n  }\n  /**\n   * Retrigger the `firstplay` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#firstplay\n   * @listens Tech#firstplay\n   * @deprecated As of 6.0 firstplay event is deprecated.\n   *             As of 6.0 passing the `starttime` option to the player and the firstplay event are deprecated.\n   * @private\n   */\n  ;\n\n  _proto.handleTechFirstPlay_ = function handleTechFirstPlay_() {\n    // If the first starttime attribute is specified\n    // then we will start at the given offset in seconds\n    if (this.options_.starttime) {\n      log.warn('Passing the `starttime` option to the player will be deprecated in 6.0');\n      this.currentTime(this.options_.starttime);\n    }\n\n    this.addClass('vjs-has-started');\n    /**\n     * Fired the first time a video is played. Not part of the HLS spec, and this is\n     * probably not the best implementation yet, so use sparingly. If you don't have a\n     * reason to prevent playback, use `myPlayer.one('play');` instead.\n     *\n     * @event Player#firstplay\n     * @deprecated As of 6.0 firstplay event is deprecated.\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('firstplay');\n  }\n  /**\n   * Retrigger the `pause` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#pause\n   * @listens Tech#pause\n   * @private\n   */\n  ;\n\n  _proto.handleTechPause_ = function handleTechPause_() {\n    this.removeClass('vjs-playing');\n    this.addClass('vjs-paused');\n    /**\n     * Fired whenever the media has been paused\n     *\n     * @event Player#pause\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('pause');\n  }\n  /**\n   * Retrigger the `ended` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#ended\n   * @listens Tech#ended\n   * @private\n   */\n  ;\n\n  _proto.handleTechEnded_ = function handleTechEnded_() {\n    this.addClass('vjs-ended');\n\n    if (this.options_.loop) {\n      this.currentTime(0);\n      this.play();\n    } else if (!this.paused()) {\n      this.pause();\n    }\n    /**\n     * Fired when the end of the media resource is reached (currentTime == duration)\n     *\n     * @event Player#ended\n     * @type {EventTarget~Event}\n     */\n\n\n    this.trigger('ended');\n  }\n  /**\n   * Fired when the duration of the media resource is first known or changed\n   *\n   * @listens Tech#durationchange\n   * @private\n   */\n  ;\n\n  _proto.handleTechDurationChange_ = function handleTechDurationChange_() {\n    this.duration(this.techGet_('duration'));\n  }\n  /**\n   * Handle a click on the media element to play/pause\n   *\n   * @param {EventTarget~Event} event\n   *        the event that caused this function to trigger\n   *\n   * @listens Tech#mousedown\n   * @private\n   */\n  ;\n\n  _proto.handleTechClick_ = function handleTechClick_(event) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    } // When controls are disabled a click should not toggle playback because\n    // the click is considered a control\n\n\n    if (!this.controls_) {\n      return;\n    }\n\n    if (this.paused()) {\n      silencePromise(this.play());\n    } else {\n      this.pause();\n    }\n  }\n  /**\n   * Handle a double-click on the media element to enter/exit fullscreen\n   *\n   * @param {EventTarget~Event} event\n   *        the event that caused this function to trigger\n   *\n   * @listens Tech#dblclick\n   * @private\n   */\n  ;\n\n  _proto.handleTechDoubleClick_ = function handleTechDoubleClick_(event) {\n    if (!this.controls_) {\n      return;\n    } // we do not want to toggle fullscreen state\n    // when double-clicking inside a control bar or a modal\n\n\n    var inAllowedEls = Array.prototype.some.call(this.$$('.vjs-control-bar, .vjs-modal-dialog'), function (el) {\n      return el.contains(event.target);\n    });\n\n    if (!inAllowedEls) {\n      /*\n       * options.userActions.doubleClick\n       *\n       * If `undefined` or `true`, double-click toggles fullscreen if controls are present\n       * Set to `false` to disable double-click handling\n       * Set to a function to substitute an external double-click handler\n       */\n      if (this.options_ === undefined || this.options_.userActions === undefined || this.options_.userActions.doubleClick === undefined || this.options_.userActions.doubleClick !== false) {\n        if (this.options_ !== undefined && this.options_.userActions !== undefined && typeof this.options_.userActions.doubleClick === 'function') {\n          this.options_.userActions.doubleClick.call(this, event);\n        } else if (this.isFullscreen()) {\n          this.exitFullscreen();\n        } else {\n          this.requestFullscreen();\n        }\n      }\n    }\n  }\n  /**\n   * Handle a tap on the media element. It will toggle the user\n   * activity state, which hides and shows the controls.\n   *\n   * @listens Tech#tap\n   * @private\n   */\n  ;\n\n  _proto.handleTechTap_ = function handleTechTap_() {\n    this.userActive(!this.userActive());\n  }\n  /**\n   * Handle touch to start\n   *\n   * @listens Tech#touchstart\n   * @private\n   */\n  ;\n\n  _proto.handleTechTouchStart_ = function handleTechTouchStart_() {\n    this.userWasActive = this.userActive();\n  }\n  /**\n   * Handle touch to move\n   *\n   * @listens Tech#touchmove\n   * @private\n   */\n  ;\n\n  _proto.handleTechTouchMove_ = function handleTechTouchMove_() {\n    if (this.userWasActive) {\n      this.reportUserActivity();\n    }\n  }\n  /**\n   * Handle touch to end\n   *\n   * @param {EventTarget~Event} event\n   *        the touchend event that triggered\n   *        this function\n   *\n   * @listens Tech#touchend\n   * @private\n   */\n  ;\n\n  _proto.handleTechTouchEnd_ = function handleTechTouchEnd_(event) {\n    // Stop the mouse events from also happening\n    event.preventDefault();\n  }\n  /**\n   * native click events on the SWF aren't triggered on IE11, Win8.1RT\n   * use stageclick events triggered from inside the SWF instead\n   *\n   * @private\n   * @listens stageclick\n   */\n  ;\n\n  _proto.handleStageClick_ = function handleStageClick_() {\n    this.reportUserActivity();\n  }\n  /**\n   * @private\n   */\n  ;\n\n  _proto.toggleFullscreenClass_ = function toggleFullscreenClass_() {\n    if (this.isFullscreen()) {\n      this.addClass('vjs-fullscreen');\n    } else {\n      this.removeClass('vjs-fullscreen');\n    }\n  }\n  /**\n   * when the document fschange event triggers it calls this\n   */\n  ;\n\n  _proto.documentFullscreenChange_ = function documentFullscreenChange_(e) {\n    var fsApi = FullscreenApi;\n    this.isFullscreen(document[fsApi.fullscreenElement] === this.el() || this.el().matches(':' + fsApi.fullscreen)); // If cancelling fullscreen, remove event listener.\n\n    if (this.isFullscreen() === false) {\n      off(document, fsApi.fullscreenchange, this.boundDocumentFullscreenChange_);\n    }\n\n    if (!prefixedAPI) {\n      /**\n       * @event Player#fullscreenchange\n       * @type {EventTarget~Event}\n       */\n      this.trigger('fullscreenchange');\n    }\n  }\n  /**\n   * Handle Tech Fullscreen Change\n   *\n   * @param {EventTarget~Event} event\n   *        the fullscreenchange event that triggered this function\n   *\n   * @param {Object} data\n   *        the data that was sent with the event\n   *\n   * @private\n   * @listens Tech#fullscreenchange\n   * @fires Player#fullscreenchange\n   */\n  ;\n\n  _proto.handleTechFullscreenChange_ = function handleTechFullscreenChange_(event, data) {\n    if (data) {\n      this.isFullscreen(data.isFullscreen);\n    }\n    /**\n     * Fired when going in and out of fullscreen.\n     *\n     * @event Player#fullscreenchange\n     * @type {EventTarget~Event}\n     */\n\n\n    this.trigger('fullscreenchange');\n  }\n  /**\n   * Fires when an error occurred during the loading of an audio/video.\n   *\n   * @private\n   * @listens Tech#error\n   */\n  ;\n\n  _proto.handleTechError_ = function handleTechError_() {\n    var error = this.tech_.error();\n    this.error(error);\n  }\n  /**\n   * Retrigger the `textdata` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#textdata\n   * @listens Tech#textdata\n   * @private\n   */\n  ;\n\n  _proto.handleTechTextData_ = function handleTechTextData_() {\n    var data = null;\n\n    if (arguments.length > 1) {\n      data = arguments[1];\n    }\n    /**\n     * Fires when we get a textdata event from tech\n     *\n     * @event Player#textdata\n     * @type {EventTarget~Event}\n     */\n\n\n    this.trigger('textdata', data);\n  }\n  /**\n   * Get object for cached values.\n   *\n   * @return {Object}\n   *         get the current object cache\n   */\n  ;\n\n  _proto.getCache = function getCache() {\n    return this.cache_;\n  }\n  /**\n   * Resets the internal cache object.\n   *\n   * Using this function outside the player constructor or reset method may\n   * have unintended side-effects.\n   *\n   * @private\n   */\n  ;\n\n  _proto.resetCache_ = function resetCache_() {\n    this.cache_ = {\n      // Right now, the currentTime is not _really_ cached because it is always\n      // retrieved from the tech (see: currentTime). However, for completeness,\n      // we set it to zero here to ensure that if we do start actually caching\n      // it, we reset it along with everything else.\n      currentTime: 0,\n      inactivityTimeout: this.options_.inactivityTimeout,\n      duration: NaN,\n      lastVolume: 1,\n      lastPlaybackRate: this.defaultPlaybackRate(),\n      media: null,\n      src: '',\n      source: {},\n      sources: [],\n      volume: 1\n    };\n  }\n  /**\n   * Pass values to the playback tech\n   *\n   * @param {string} [method]\n   *        the method to call\n   *\n   * @param {Object} arg\n   *        the argument to pass\n   *\n   * @private\n   */\n  ;\n\n  _proto.techCall_ = function techCall_(method, arg) {\n    // If it's not ready yet, call method when it is\n    this.ready(function () {\n      if (method in allowedSetters) {\n        return set$1(this.middleware_, this.tech_, method, arg);\n      } else if (method in allowedMediators) {\n        return mediate(this.middleware_, this.tech_, method, arg);\n      }\n\n      try {\n        if (this.tech_) {\n          this.tech_[method](arg);\n        }\n      } catch (e) {\n        log(e);\n        throw e;\n      }\n    }, true);\n  }\n  /**\n   * Get calls can't wait for the tech, and sometimes don't need to.\n   *\n   * @param {string} method\n   *        Tech method\n   *\n   * @return {Function|undefined}\n   *         the method or undefined\n   *\n   * @private\n   */\n  ;\n\n  _proto.techGet_ = function techGet_(method) {\n    if (!this.tech_ || !this.tech_.isReady_) {\n      return;\n    }\n\n    if (method in allowedGetters) {\n      return get(this.middleware_, this.tech_, method);\n    } else if (method in allowedMediators) {\n      return mediate(this.middleware_, this.tech_, method);\n    } // Flash likes to die and reload when you hide or reposition it.\n    // In these cases the object methods go away and we get errors.\n    // When that happens we'll catch the errors and inform tech that it's not ready any more.\n\n\n    try {\n      return this.tech_[method]();\n    } catch (e) {\n      // When building additional tech libs, an expected method may not be defined yet\n      if (this.tech_[method] === undefined) {\n        log(\"Video.js: \" + method + \" method not defined for \" + this.techName_ + \" playback technology.\", e);\n        throw e;\n      } // When a method isn't available on the object it throws a TypeError\n\n\n      if (e.name === 'TypeError') {\n        log(\"Video.js: \" + method + \" unavailable on \" + this.techName_ + \" playback technology element.\", e);\n        this.tech_.isReady_ = false;\n        throw e;\n      } // If error unknown, just log and throw\n\n\n      log(e);\n      throw e;\n    }\n  }\n  /**\n   * Attempt to begin playback at the first opportunity.\n   *\n   * @return {Promise|undefined}\n   *         Returns a promise if the browser supports Promises (or one\n   *         was passed in as an option). This promise will be resolved on\n   *         the return value of play. If this is undefined it will fulfill the\n   *         promise chain otherwise the promise chain will be fulfilled when\n   *         the promise from play is fulfilled.\n   */\n  ;\n\n  _proto.play = function play() {\n    var _this8 = this;\n\n    var PromiseClass = this.options_.Promise || window$1.Promise;\n\n    if (PromiseClass) {\n      return new PromiseClass(function (resolve) {\n        _this8.play_(resolve);\n      });\n    }\n\n    return this.play_();\n  }\n  /**\n   * The actual logic for play, takes a callback that will be resolved on the\n   * return value of play. This allows us to resolve to the play promise if there\n   * is one on modern browsers.\n   *\n   * @private\n   * @param {Function} [callback]\n   *        The callback that should be called when the techs play is actually called\n   */\n  ;\n\n  _proto.play_ = function play_(callback) {\n    var _this9 = this;\n\n    if (callback === void 0) {\n      callback = silencePromise;\n    }\n\n    this.playCallbacks_.push(callback);\n    var isSrcReady = Boolean(!this.changingSrc_ && (this.src() || this.currentSrc())); // treat calls to play_ somewhat like the `one` event function\n\n    if (this.waitToPlay_) {\n      this.off(['ready', 'loadstart'], this.waitToPlay_);\n      this.waitToPlay_ = null;\n    } // if the player/tech is not ready or the src itself is not ready\n    // queue up a call to play on `ready` or `loadstart`\n\n\n    if (!this.isReady_ || !isSrcReady) {\n      this.waitToPlay_ = function (e) {\n        _this9.play_();\n      };\n\n      this.one(['ready', 'loadstart'], this.waitToPlay_); // if we are in Safari, there is a high chance that loadstart will trigger after the gesture timeperiod\n      // in that case, we need to prime the video element by calling load so it'll be ready in time\n\n      if (!isSrcReady && (IS_ANY_SAFARI || IS_IOS)) {\n        this.load();\n      }\n\n      return;\n    } // If the player/tech is ready and we have a source, we can attempt playback.\n\n\n    var val = this.techGet_('play'); // play was terminated if the returned value is null\n\n    if (val === null) {\n      this.runPlayTerminatedQueue_();\n    } else {\n      this.runPlayCallbacks_(val);\n    }\n  }\n  /**\n   * These functions will be run when if play is terminated. If play\n   * runPlayCallbacks_ is run these function will not be run. This allows us\n   * to differenciate between a terminated play and an actual call to play.\n   */\n  ;\n\n  _proto.runPlayTerminatedQueue_ = function runPlayTerminatedQueue_() {\n    var queue = this.playTerminatedQueue_.slice(0);\n    this.playTerminatedQueue_ = [];\n    queue.forEach(function (q) {\n      q();\n    });\n  }\n  /**\n   * When a callback to play is delayed we have to run these\n   * callbacks when play is actually called on the tech. This function\n   * runs the callbacks that were delayed and accepts the return value\n   * from the tech.\n   *\n   * @param {undefined|Promise} val\n   *        The return value from the tech.\n   */\n  ;\n\n  _proto.runPlayCallbacks_ = function runPlayCallbacks_(val) {\n    var callbacks = this.playCallbacks_.slice(0);\n    this.playCallbacks_ = []; // clear play terminatedQueue since we finished a real play\n\n    this.playTerminatedQueue_ = [];\n    callbacks.forEach(function (cb) {\n      cb(val);\n    });\n  }\n  /**\n   * Pause the video playback\n   *\n   * @return {Player}\n   *         A reference to the player object this function was called on\n   */\n  ;\n\n  _proto.pause = function pause() {\n    this.techCall_('pause');\n  }\n  /**\n   * Check if the player is paused or has yet to play\n   *\n   * @return {boolean}\n   *         - false: if the media is currently playing\n   *         - true: if media is not currently playing\n   */\n  ;\n\n  _proto.paused = function paused() {\n    // The initial state of paused should be true (in Safari it's actually false)\n    return this.techGet_('paused') === false ? false : true;\n  }\n  /**\n   * Get a TimeRange object representing the current ranges of time that the user\n   * has played.\n   *\n   * @return {TimeRange}\n   *         A time range object that represents all the increments of time that have\n   *         been played.\n   */\n  ;\n\n  _proto.played = function played() {\n    return this.techGet_('played') || createTimeRanges(0, 0);\n  }\n  /**\n   * Returns whether or not the user is \"scrubbing\". Scrubbing is\n   * when the user has clicked the progress bar handle and is\n   * dragging it along the progress bar.\n   *\n   * @param {boolean} [isScrubbing]\n   *        whether the user is or is not scrubbing\n   *\n   * @return {boolean}\n   *         The value of scrubbing when getting\n   */\n  ;\n\n  _proto.scrubbing = function scrubbing(isScrubbing) {\n    if (typeof isScrubbing === 'undefined') {\n      return this.scrubbing_;\n    }\n\n    this.scrubbing_ = !!isScrubbing;\n\n    if (isScrubbing) {\n      this.addClass('vjs-scrubbing');\n    } else {\n      this.removeClass('vjs-scrubbing');\n    }\n  }\n  /**\n   * Get or set the current time (in seconds)\n   *\n   * @param {number|string} [seconds]\n   *        The time to seek to in seconds\n   *\n   * @return {number}\n   *         - the current time in seconds when getting\n   */\n  ;\n\n  _proto.currentTime = function currentTime(seconds) {\n    if (typeof seconds !== 'undefined') {\n      if (seconds < 0) {\n        seconds = 0;\n      }\n\n      this.techCall_('setCurrentTime', seconds);\n      return;\n    } // cache last currentTime and return. default to 0 seconds\n    //\n    // Caching the currentTime is meant to prevent a massive amount of reads on the tech's\n    // currentTime when scrubbing, but may not provide much performance benefit afterall.\n    // Should be tested. Also something has to read the actual current time or the cache will\n    // never get updated.\n\n\n    this.cache_.currentTime = this.techGet_('currentTime') || 0;\n    return this.cache_.currentTime;\n  }\n  /**\n   * Normally gets the length in time of the video in seconds;\n   * in all but the rarest use cases an argument will NOT be passed to the method\n   *\n   * > **NOTE**: The video must have started loading before the duration can be\n   * known, and in the case of Flash, may not be known until the video starts\n   * playing.\n   *\n   * @fires Player#durationchange\n   *\n   * @param {number} [seconds]\n   *        The duration of the video to set in seconds\n   *\n   * @return {number}\n   *         - The duration of the video in seconds when getting\n   */\n  ;\n\n  _proto.duration = function duration(seconds) {\n    if (seconds === undefined) {\n      // return NaN if the duration is not known\n      return this.cache_.duration !== undefined ? this.cache_.duration : NaN;\n    }\n\n    seconds = parseFloat(seconds); // Standardize on Infinity for signaling video is live\n\n    if (seconds < 0) {\n      seconds = Infinity;\n    }\n\n    if (seconds !== this.cache_.duration) {\n      // Cache the last set value for optimized scrubbing (esp. Flash)\n      this.cache_.duration = seconds;\n\n      if (seconds === Infinity) {\n        this.addClass('vjs-live');\n\n        if (this.options_.liveui && this.player_.liveTracker) {\n          this.addClass('vjs-liveui');\n        }\n      } else {\n        this.removeClass('vjs-live');\n        this.removeClass('vjs-liveui');\n      }\n\n      if (!isNaN(seconds)) {\n        // Do not fire durationchange unless the duration value is known.\n        // @see [Spec]{@link https://www.w3.org/TR/2011/WD-html5-20110113/video.html#media-element-load-algorithm}\n\n        /**\n         * @event Player#durationchange\n         * @type {EventTarget~Event}\n         */\n        this.trigger('durationchange');\n      }\n    }\n  }\n  /**\n   * Calculates how much time is left in the video. Not part\n   * of the native video API.\n   *\n   * @return {number}\n   *         The time remaining in seconds\n   */\n  ;\n\n  _proto.remainingTime = function remainingTime() {\n    return this.duration() - this.currentTime();\n  }\n  /**\n   * A remaining time function that is intented to be used when\n   * the time is to be displayed directly to the user.\n   *\n   * @return {number}\n   *         The rounded time remaining in seconds\n   */\n  ;\n\n  _proto.remainingTimeDisplay = function remainingTimeDisplay() {\n    return Math.floor(this.duration()) - Math.floor(this.currentTime());\n  } //\n  // Kind of like an array of portions of the video that have been downloaded.\n\n  /**\n   * Get a TimeRange object with an array of the times of the video\n   * that have been downloaded. If you just want the percent of the\n   * video that's been downloaded, use bufferedPercent.\n   *\n   * @see [Buffered Spec]{@link http://dev.w3.org/html5/spec/video.html#dom-media-buffered}\n   *\n   * @return {TimeRange}\n   *         A mock TimeRange object (following HTML spec)\n   */\n  ;\n\n  _proto.buffered = function buffered() {\n    var buffered = this.techGet_('buffered');\n\n    if (!buffered || !buffered.length) {\n      buffered = createTimeRanges(0, 0);\n    }\n\n    return buffered;\n  }\n  /**\n   * Get the percent (as a decimal) of the video that's been downloaded.\n   * This method is not a part of the native HTML video API.\n   *\n   * @return {number}\n   *         A decimal between 0 and 1 representing the percent\n   *         that is buffered 0 being 0% and 1 being 100%\n   */\n  ;\n\n  _proto.bufferedPercent = function bufferedPercent$$1() {\n    return bufferedPercent(this.buffered(), this.duration());\n  }\n  /**\n   * Get the ending time of the last buffered time range\n   * This is used in the progress bar to encapsulate all time ranges.\n   *\n   * @return {number}\n   *         The end of the last buffered time range\n   */\n  ;\n\n  _proto.bufferedEnd = function bufferedEnd() {\n    var buffered = this.buffered();\n    var duration = this.duration();\n    var end = buffered.end(buffered.length - 1);\n\n    if (end > duration) {\n      end = duration;\n    }\n\n    return end;\n  }\n  /**\n   * Get or set the current volume of the media\n   *\n   * @param  {number} [percentAsDecimal]\n   *         The new volume as a decimal percent:\n   *         - 0 is muted/0%/off\n   *         - 1.0 is 100%/full\n   *         - 0.5 is half volume or 50%\n   *\n   * @return {number}\n   *         The current volume as a percent when getting\n   */\n  ;\n\n  _proto.volume = function volume(percentAsDecimal) {\n    var vol;\n\n    if (percentAsDecimal !== undefined) {\n      // Force value to between 0 and 1\n      vol = Math.max(0, Math.min(1, parseFloat(percentAsDecimal)));\n      this.cache_.volume = vol;\n      this.techCall_('setVolume', vol);\n\n      if (vol > 0) {\n        this.lastVolume_(vol);\n      }\n\n      return;\n    } // Default to 1 when returning current volume.\n\n\n    vol = parseFloat(this.techGet_('volume'));\n    return isNaN(vol) ? 1 : vol;\n  }\n  /**\n   * Get the current muted state, or turn mute on or off\n   *\n   * @param {boolean} [muted]\n   *        - true to mute\n   *        - false to unmute\n   *\n   * @return {boolean}\n   *         - true if mute is on and getting\n   *         - false if mute is off and getting\n   */\n  ;\n\n  _proto.muted = function muted(_muted) {\n    if (_muted !== undefined) {\n      this.techCall_('setMuted', _muted);\n      return;\n    }\n\n    return this.techGet_('muted') || false;\n  }\n  /**\n   * Get the current defaultMuted state, or turn defaultMuted on or off. defaultMuted\n   * indicates the state of muted on initial playback.\n   *\n   * ```js\n   *   var myPlayer = videojs('some-player-id');\n   *\n   *   myPlayer.src(\"http://www.example.com/path/to/video.mp4\");\n   *\n   *   // get, should be false\n   *   console.log(myPlayer.defaultMuted());\n   *   // set to true\n   *   myPlayer.defaultMuted(true);\n   *   // get should be true\n   *   console.log(myPlayer.defaultMuted());\n   * ```\n   *\n   * @param {boolean} [defaultMuted]\n   *        - true to mute\n   *        - false to unmute\n   *\n   * @return {boolean|Player}\n   *         - true if defaultMuted is on and getting\n   *         - false if defaultMuted is off and getting\n   *         - A reference to the current player when setting\n   */\n  ;\n\n  _proto.defaultMuted = function defaultMuted(_defaultMuted) {\n    if (_defaultMuted !== undefined) {\n      return this.techCall_('setDefaultMuted', _defaultMuted);\n    }\n\n    return this.techGet_('defaultMuted') || false;\n  }\n  /**\n   * Get the last volume, or set it\n   *\n   * @param  {number} [percentAsDecimal]\n   *         The new last volume as a decimal percent:\n   *         - 0 is muted/0%/off\n   *         - 1.0 is 100%/full\n   *         - 0.5 is half volume or 50%\n   *\n   * @return {number}\n   *         the current value of lastVolume as a percent when getting\n   *\n   * @private\n   */\n  ;\n\n  _proto.lastVolume_ = function lastVolume_(percentAsDecimal) {\n    if (percentAsDecimal !== undefined && percentAsDecimal !== 0) {\n      this.cache_.lastVolume = percentAsDecimal;\n      return;\n    }\n\n    return this.cache_.lastVolume;\n  }\n  /**\n   * Check if current tech can support native fullscreen\n   * (e.g. with built in controls like iOS, so not our flash swf)\n   *\n   * @return {boolean}\n   *         if native fullscreen is supported\n   */\n  ;\n\n  _proto.supportsFullScreen = function supportsFullScreen() {\n    return this.techGet_('supportsFullScreen') || false;\n  }\n  /**\n   * Check if the player is in fullscreen mode or tell the player that it\n   * is or is not in fullscreen mode.\n   *\n   * > NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official\n   * property and instead document.fullscreenElement is used. But isFullscreen is\n   * still a valuable property for internal player workings.\n   *\n   * @param  {boolean} [isFS]\n   *         Set the players current fullscreen state\n   *\n   * @return {boolean}\n   *         - true if fullscreen is on and getting\n   *         - false if fullscreen is off and getting\n   */\n  ;\n\n  _proto.isFullscreen = function isFullscreen(isFS) {\n    if (isFS !== undefined) {\n      this.isFullscreen_ = !!isFS;\n      this.toggleFullscreenClass_();\n      return;\n    }\n\n    return !!this.isFullscreen_;\n  }\n  /**\n   * Increase the size of the video to full screen\n   * In some browsers, full screen is not supported natively, so it enters\n   * \"full window mode\", where the video fills the browser window.\n   * In browsers and devices that support native full screen, sometimes the\n   * browser's default controls will be shown, and not the Video.js custom skin.\n   * This includes most mobile devices (iOS, Android) and older versions of\n   * Safari.\n   *\n   * @fires Player#fullscreenchange\n   */\n  ;\n\n  _proto.requestFullscreen = function requestFullscreen() {\n    var fsApi = FullscreenApi;\n    this.isFullscreen(true);\n\n    if (fsApi.requestFullscreen) {\n      // the browser supports going fullscreen at the element level so we can\n      // take the controls fullscreen as well as the video\n      // Trigger fullscreenchange event after change\n      // We have to specifically add this each time, and remove\n      // when canceling fullscreen. Otherwise if there's multiple\n      // players on a page, they would all be reacting to the same fullscreen\n      // events\n      on(document, fsApi.fullscreenchange, this.boundDocumentFullscreenChange_);\n      this.el_[fsApi.requestFullscreen]();\n    } else if (this.tech_.supportsFullScreen()) {\n      // we can't take the video.js controls fullscreen but we can go fullscreen\n      // with native controls\n      this.techCall_('enterFullScreen');\n    } else {\n      // fullscreen isn't supported so we'll just stretch the video element to\n      // fill the viewport\n      this.enterFullWindow();\n      /**\n       * @event Player#fullscreenchange\n       * @type {EventTarget~Event}\n       */\n\n      this.trigger('fullscreenchange');\n    }\n  }\n  /**\n   * Return the video to its normal size after having been in full screen mode\n   *\n   * @fires Player#fullscreenchange\n   */\n  ;\n\n  _proto.exitFullscreen = function exitFullscreen() {\n    var fsApi = FullscreenApi;\n    this.isFullscreen(false); // Check for browser element fullscreen support\n\n    if (fsApi.requestFullscreen) {\n      document[fsApi.exitFullscreen]();\n    } else if (this.tech_.supportsFullScreen()) {\n      this.techCall_('exitFullScreen');\n    } else {\n      this.exitFullWindow();\n      /**\n       * @event Player#fullscreenchange\n       * @type {EventTarget~Event}\n       */\n\n      this.trigger('fullscreenchange');\n    }\n  }\n  /**\n   * When fullscreen isn't supported we can stretch the\n   * video container to as wide as the browser will let us.\n   *\n   * @fires Player#enterFullWindow\n   */\n  ;\n\n  _proto.enterFullWindow = function enterFullWindow() {\n    this.isFullWindow = true; // Storing original doc overflow value to return to when fullscreen is off\n\n    this.docOrigOverflow = document.documentElement.style.overflow; // Add listener for esc key to exit fullscreen\n\n    on(document, 'keydown', this.boundFullWindowOnEscKey_); // Hide any scroll bars\n\n    document.documentElement.style.overflow = 'hidden'; // Apply fullscreen styles\n\n    addClass(document.body, 'vjs-full-window');\n    /**\n     * @event Player#enterFullWindow\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('enterFullWindow');\n  }\n  /**\n   * Check for call to either exit full window or\n   * full screen on ESC key\n   *\n   * @param {string} event\n   *        Event to check for key press\n   */\n  ;\n\n  _proto.fullWindowOnEscKey = function fullWindowOnEscKey(event) {\n    if (keycode.isEventKey(event, 'Esc')) {\n      if (this.isFullscreen() === true) {\n        this.exitFullscreen();\n      } else {\n        this.exitFullWindow();\n      }\n    }\n  }\n  /**\n   * Exit full window\n   *\n   * @fires Player#exitFullWindow\n   */\n  ;\n\n  _proto.exitFullWindow = function exitFullWindow() {\n    this.isFullWindow = false;\n    off(document, 'keydown', this.boundFullWindowOnEscKey_); // Unhide scroll bars.\n\n    document.documentElement.style.overflow = this.docOrigOverflow; // Remove fullscreen styles\n\n    removeClass(document.body, 'vjs-full-window'); // Resize the box, controller, and poster to original sizes\n    // this.positionAll();\n\n    /**\n     * @event Player#exitFullWindow\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('exitFullWindow');\n  }\n  /**\n   * This gets called when a `Player` gains focus via a `focus` event.\n   * Turns on listening for `keydown` events. When they happen it\n   * calls `this.handleKeyPress`.\n   *\n   * @param {EventTarget~Event} event\n   *        The `focus` event that caused this function to be called.\n   *\n   * @listens focus\n   */\n  ;\n\n  _proto.handleFocus = function handleFocus(event) {\n    // call off first to make sure we don't keep adding keydown handlers\n    off(document, 'keydown', this.boundHandleKeyPress_);\n    on(document, 'keydown', this.boundHandleKeyPress_);\n  }\n  /**\n   * Called when a `Player` loses focus. Turns off the listener for\n   * `keydown` events. Which Stops `this.handleKeyPress` from getting called.\n   *\n   * @param {EventTarget~Event} event\n   *        The `blur` event that caused this function to be called.\n   *\n   * @listens blur\n   */\n  ;\n\n  _proto.handleBlur = function handleBlur(event) {\n    off(document, 'keydown', this.boundHandleKeyPress_);\n  }\n  /**\n   * Called when this Player has focus and a key gets pressed down, or when\n   * any Component of this player receives a key press that it doesn't handle.\n   * This allows player-wide hotkeys (either as defined below, or optionally\n   * by an external function).\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n  ;\n\n  _proto.handleKeyPress = function handleKeyPress(event) {\n    if (this.options_.userActions && this.options_.userActions.hotkeys && this.options_.userActions.hotkeys !== false) {\n      if (typeof this.options_.userActions.hotkeys === 'function') {\n        this.options_.userActions.hotkeys.call(this, event);\n      } else {\n        this.handleHotkeys(event);\n      }\n    }\n  }\n  /**\n   * Called when this Player receives a hotkey keydown event.\n   * Supported player-wide hotkeys are:\n   *\n   *   f          - toggle fullscreen\n   *   m          - toggle mute\n   *   k or Space - toggle play/pause\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown` event that caused this function to be called.\n   */\n  ;\n\n  _proto.handleHotkeys = function handleHotkeys(event) {\n    var hotkeys = this.options_.userActions ? this.options_.userActions.hotkeys : {}; // set fullscreenKey, muteKey, playPauseKey from `hotkeys`, use defaults if not set\n\n    var _hotkeys$fullscreenKe = hotkeys.fullscreenKey,\n        fullscreenKey = _hotkeys$fullscreenKe === void 0 ? function (keydownEvent) {\n      return keycode.isEventKey(keydownEvent, 'f');\n    } : _hotkeys$fullscreenKe,\n        _hotkeys$muteKey = hotkeys.muteKey,\n        muteKey = _hotkeys$muteKey === void 0 ? function (keydownEvent) {\n      return keycode.isEventKey(keydownEvent, 'm');\n    } : _hotkeys$muteKey,\n        _hotkeys$playPauseKey = hotkeys.playPauseKey,\n        playPauseKey = _hotkeys$playPauseKey === void 0 ? function (keydownEvent) {\n      return keycode.isEventKey(keydownEvent, 'k') || keycode.isEventKey(keydownEvent, 'Space');\n    } : _hotkeys$playPauseKey;\n\n    if (fullscreenKey.call(this, event)) {\n      event.preventDefault();\n      var FSToggle = Component.getComponent('FullscreenToggle');\n\n      if (document[FullscreenApi.fullscreenEnabled] !== false) {\n        FSToggle.prototype.handleClick.call(this);\n      }\n    } else if (muteKey.call(this, event)) {\n      event.preventDefault();\n      var MuteToggle = Component.getComponent('MuteToggle');\n      MuteToggle.prototype.handleClick.call(this);\n    } else if (playPauseKey.call(this, event)) {\n      event.preventDefault();\n      var PlayToggle = Component.getComponent('PlayToggle');\n      PlayToggle.prototype.handleClick.call(this);\n    }\n  }\n  /**\n   * Check whether the player can play a given mimetype\n   *\n   * @see https://www.w3.org/TR/2011/WD-html5-20110113/video.html#dom-navigator-canplaytype\n   *\n   * @param {string} type\n   *        The mimetype to check\n   *\n   * @return {string}\n   *         'probably', 'maybe', or '' (empty string)\n   */\n  ;\n\n  _proto.canPlayType = function canPlayType(type) {\n    var can; // Loop through each playback technology in the options order\n\n    for (var i = 0, j = this.options_.techOrder; i < j.length; i++) {\n      var techName = j[i];\n      var tech = Tech.getTech(techName); // Support old behavior of techs being registered as components.\n      // Remove once that deprecated behavior is removed.\n\n      if (!tech) {\n        tech = Component.getComponent(techName);\n      } // Check if the current tech is defined before continuing\n\n\n      if (!tech) {\n        log.error(\"The \\\"\" + techName + \"\\\" tech is undefined. Skipped browser support check for that tech.\");\n        continue;\n      } // Check if the browser supports this technology\n\n\n      if (tech.isSupported()) {\n        can = tech.canPlayType(type);\n\n        if (can) {\n          return can;\n        }\n      }\n    }\n\n    return '';\n  }\n  /**\n   * Select source based on tech-order or source-order\n   * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,\n   * defaults to tech-order selection\n   *\n   * @param {Array} sources\n   *        The sources for a media asset\n   *\n   * @return {Object|boolean}\n   *         Object of source and tech order or false\n   */\n  ;\n\n  _proto.selectSource = function selectSource(sources) {\n    var _this10 = this;\n\n    // Get only the techs specified in `techOrder` that exist and are supported by the\n    // current platform\n    var techs = this.options_.techOrder.map(function (techName) {\n      return [techName, Tech.getTech(techName)];\n    }).filter(function (_ref) {\n      var techName = _ref[0],\n          tech = _ref[1];\n\n      // Check if the current tech is defined before continuing\n      if (tech) {\n        // Check if the browser supports this technology\n        return tech.isSupported();\n      }\n\n      log.error(\"The \\\"\" + techName + \"\\\" tech is undefined. Skipped browser support check for that tech.\");\n      return false;\n    }); // Iterate over each `innerArray` element once per `outerArray` element and execute\n    // `tester` with both. If `tester` returns a non-falsy value, exit early and return\n    // that value.\n\n    var findFirstPassingTechSourcePair = function findFirstPassingTechSourcePair(outerArray, innerArray, tester) {\n      var found;\n      outerArray.some(function (outerChoice) {\n        return innerArray.some(function (innerChoice) {\n          found = tester(outerChoice, innerChoice);\n\n          if (found) {\n            return true;\n          }\n        });\n      });\n      return found;\n    };\n\n    var foundSourceAndTech;\n\n    var flip = function flip(fn) {\n      return function (a, b) {\n        return fn(b, a);\n      };\n    };\n\n    var finder = function finder(_ref2, source) {\n      var techName = _ref2[0],\n          tech = _ref2[1];\n\n      if (tech.canPlaySource(source, _this10.options_[techName.toLowerCase()])) {\n        return {\n          source: source,\n          tech: techName\n        };\n      }\n    }; // Depending on the truthiness of `options.sourceOrder`, we swap the order of techs and sources\n    // to select from them based on their priority.\n\n\n    if (this.options_.sourceOrder) {\n      // Source-first ordering\n      foundSourceAndTech = findFirstPassingTechSourcePair(sources, techs, flip(finder));\n    } else {\n      // Tech-first ordering\n      foundSourceAndTech = findFirstPassingTechSourcePair(techs, sources, finder);\n    }\n\n    return foundSourceAndTech || false;\n  }\n  /**\n   * Get or set the video source.\n   *\n   * @param {Tech~SourceObject|Tech~SourceObject[]|string} [source]\n   *        A SourceObject, an array of SourceObjects, or a string referencing\n   *        a URL to a media source. It is _highly recommended_ that an object\n   *        or array of objects is used here, so that source selection\n   *        algorithms can take the `type` into account.\n   *\n   *        If not provided, this method acts as a getter.\n   *\n   * @return {string|undefined}\n   *         If the `source` argument is missing, returns the current source\n   *         URL. Otherwise, returns nothing/undefined.\n   */\n  ;\n\n  _proto.src = function src(source) {\n    var _this11 = this;\n\n    // getter usage\n    if (typeof source === 'undefined') {\n      return this.cache_.src || '';\n    } // filter out invalid sources and turn our source into\n    // an array of source objects\n\n\n    var sources = filterSource(source); // if a source was passed in then it is invalid because\n    // it was filtered to a zero length Array. So we have to\n    // show an error\n\n    if (!sources.length) {\n      this.setTimeout(function () {\n        this.error({\n          code: 4,\n          message: this.localize(this.options_.notSupportedMessage)\n        });\n      }, 0);\n      return;\n    } // intial sources\n\n\n    this.changingSrc_ = true;\n    this.cache_.sources = sources;\n    this.updateSourceCaches_(sources[0]); // middlewareSource is the source after it has been changed by middleware\n\n    setSource(this, sources[0], function (middlewareSource, mws) {\n      _this11.middleware_ = mws; // since sourceSet is async we have to update the cache again after we select a source since\n      // the source that is selected could be out of order from the cache update above this callback.\n\n      _this11.cache_.sources = sources;\n\n      _this11.updateSourceCaches_(middlewareSource);\n\n      var err = _this11.src_(middlewareSource);\n\n      if (err) {\n        if (sources.length > 1) {\n          return _this11.src(sources.slice(1));\n        }\n\n        _this11.changingSrc_ = false; // We need to wrap this in a timeout to give folks a chance to add error event handlers\n\n        _this11.setTimeout(function () {\n          this.error({\n            code: 4,\n            message: this.localize(this.options_.notSupportedMessage)\n          });\n        }, 0); // we could not find an appropriate tech, but let's still notify the delegate that this is it\n        // this needs a better comment about why this is needed\n\n\n        _this11.triggerReady();\n\n        return;\n      }\n\n      setTech(mws, _this11.tech_);\n    });\n  }\n  /**\n   * Set the source object on the tech, returns a boolean that indicates whether\n   * there is a tech that can play the source or not\n   *\n   * @param {Tech~SourceObject} source\n   *        The source object to set on the Tech\n   *\n   * @return {boolean}\n   *         - True if there is no Tech to playback this source\n   *         - False otherwise\n   *\n   * @private\n   */\n  ;\n\n  _proto.src_ = function src_(source) {\n    var _this12 = this;\n\n    var sourceTech = this.selectSource([source]);\n\n    if (!sourceTech) {\n      return true;\n    }\n\n    if (!titleCaseEquals(sourceTech.tech, this.techName_)) {\n      this.changingSrc_ = true; // load this technology with the chosen source\n\n      this.loadTech_(sourceTech.tech, sourceTech.source);\n      this.tech_.ready(function () {\n        _this12.changingSrc_ = false;\n      });\n      return false;\n    } // wait until the tech is ready to set the source\n    // and set it synchronously if possible (#2326)\n\n\n    this.ready(function () {\n      // The setSource tech method was added with source handlers\n      // so older techs won't support it\n      // We need to check the direct prototype for the case where subclasses\n      // of the tech do not support source handlers\n      if (this.tech_.constructor.prototype.hasOwnProperty('setSource')) {\n        this.techCall_('setSource', source);\n      } else {\n        this.techCall_('src', source.src);\n      }\n\n      this.changingSrc_ = false;\n    }, true);\n    return false;\n  }\n  /**\n   * Begin loading the src data.\n   */\n  ;\n\n  _proto.load = function load() {\n    this.techCall_('load');\n  }\n  /**\n   * Reset the player. Loads the first tech in the techOrder,\n   * removes all the text tracks in the existing `tech`,\n   * and calls `reset` on the `tech`.\n   */\n  ;\n\n  _proto.reset = function reset() {\n    var _this13 = this;\n\n    var PromiseClass = this.options_.Promise || window$1.Promise;\n\n    if (this.paused() || !PromiseClass) {\n      this.doReset_();\n    } else {\n      var playPromise = this.play();\n      silencePromise(playPromise.then(function () {\n        return _this13.doReset_();\n      }));\n    }\n  };\n\n  _proto.doReset_ = function doReset_() {\n    if (this.tech_) {\n      this.tech_.clearTracks('text');\n    }\n\n    this.resetCache_();\n    this.poster('');\n    this.loadTech_(this.options_.techOrder[0], null);\n    this.techCall_('reset');\n    this.resetControlBarUI_();\n\n    if (isEvented(this)) {\n      this.trigger('playerreset');\n    }\n  }\n  /**\n   * Reset Control Bar's UI by calling sub-methods that reset\n   * all of Control Bar's components\n   */\n  ;\n\n  _proto.resetControlBarUI_ = function resetControlBarUI_() {\n    this.resetProgressBar_();\n    this.resetPlaybackRate_();\n    this.resetVolumeBar_();\n  }\n  /**\n   * Reset tech's progress so progress bar is reset in the UI\n   */\n  ;\n\n  _proto.resetProgressBar_ = function resetProgressBar_() {\n    this.currentTime(0);\n    var _this$controlBar = this.controlBar,\n        durationDisplay = _this$controlBar.durationDisplay,\n        remainingTimeDisplay = _this$controlBar.remainingTimeDisplay;\n\n    if (durationDisplay) {\n      durationDisplay.updateContent();\n    }\n\n    if (remainingTimeDisplay) {\n      remainingTimeDisplay.updateContent();\n    }\n  }\n  /**\n   * Reset Playback ratio\n   */\n  ;\n\n  _proto.resetPlaybackRate_ = function resetPlaybackRate_() {\n    this.playbackRate(this.defaultPlaybackRate());\n    this.handleTechRateChange_();\n  }\n  /**\n   * Reset Volume bar\n   */\n  ;\n\n  _proto.resetVolumeBar_ = function resetVolumeBar_() {\n    this.volume(1.0);\n    this.trigger('volumechange');\n  }\n  /**\n   * Returns all of the current source objects.\n   *\n   * @return {Tech~SourceObject[]}\n   *         The current source objects\n   */\n  ;\n\n  _proto.currentSources = function currentSources() {\n    var source = this.currentSource();\n    var sources = []; // assume `{}` or `{ src }`\n\n    if (Object.keys(source).length !== 0) {\n      sources.push(source);\n    }\n\n    return this.cache_.sources || sources;\n  }\n  /**\n   * Returns the current source object.\n   *\n   * @return {Tech~SourceObject}\n   *         The current source object\n   */\n  ;\n\n  _proto.currentSource = function currentSource() {\n    return this.cache_.source || {};\n  }\n  /**\n   * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4\n   * Can be used in conjunction with `currentType` to assist in rebuilding the current source object.\n   *\n   * @return {string}\n   *         The current source\n   */\n  ;\n\n  _proto.currentSrc = function currentSrc() {\n    return this.currentSource() && this.currentSource().src || '';\n  }\n  /**\n   * Get the current source type e.g. video/mp4\n   * This can allow you rebuild the current source object so that you could load the same\n   * source and tech later\n   *\n   * @return {string}\n   *         The source MIME type\n   */\n  ;\n\n  _proto.currentType = function currentType() {\n    return this.currentSource() && this.currentSource().type || '';\n  }\n  /**\n   * Get or set the preload attribute\n   *\n   * @param {boolean} [value]\n   *        - true means that we should preload\n   *        - false means that we should not preload\n   *\n   * @return {string}\n   *         The preload attribute value when getting\n   */\n  ;\n\n  _proto.preload = function preload(value) {\n    if (value !== undefined) {\n      this.techCall_('setPreload', value);\n      this.options_.preload = value;\n      return;\n    }\n\n    return this.techGet_('preload');\n  }\n  /**\n   * Get or set the autoplay option. When this is a boolean it will\n   * modify the attribute on the tech. When this is a string the attribute on\n   * the tech will be removed and `Player` will handle autoplay on loadstarts.\n   *\n   * @param {boolean|string} [value]\n   *        - true: autoplay using the browser behavior\n   *        - false: do not autoplay\n   *        - 'play': call play() on every loadstart\n   *        - 'muted': call muted() then play() on every loadstart\n   *        - 'any': call play() on every loadstart. if that fails call muted() then play().\n   *        - *: values other than those listed here will be set `autoplay` to true\n   *\n   * @return {boolean|string}\n   *         The current value of autoplay when getting\n   */\n  ;\n\n  _proto.autoplay = function autoplay(value) {\n    // getter usage\n    if (value === undefined) {\n      return this.options_.autoplay || false;\n    }\n\n    var techAutoplay; // if the value is a valid string set it to that\n\n    if (typeof value === 'string' && /(any|play|muted)/.test(value)) {\n      this.options_.autoplay = value;\n      this.manualAutoplay_(value);\n      techAutoplay = false; // any falsy value sets autoplay to false in the browser,\n      // lets do the same\n    } else if (!value) {\n      this.options_.autoplay = false; // any other value (ie truthy) sets autoplay to true\n    } else {\n      this.options_.autoplay = true;\n    }\n\n    techAutoplay = typeof techAutoplay === 'undefined' ? this.options_.autoplay : techAutoplay; // if we don't have a tech then we do not queue up\n    // a setAutoplay call on tech ready. We do this because the\n    // autoplay option will be passed in the constructor and we\n    // do not need to set it twice\n\n    if (this.tech_) {\n      this.techCall_('setAutoplay', techAutoplay);\n    }\n  }\n  /**\n   * Set or unset the playsinline attribute.\n   * Playsinline tells the browser that non-fullscreen playback is preferred.\n   *\n   * @param {boolean} [value]\n   *        - true means that we should try to play inline by default\n   *        - false means that we should use the browser's default playback mode,\n   *          which in most cases is inline. iOS Safari is a notable exception\n   *          and plays fullscreen by default.\n   *\n   * @return {string|Player}\n   *         - the current value of playsinline\n   *         - the player when setting\n   *\n   * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n   */\n  ;\n\n  _proto.playsinline = function playsinline(value) {\n    if (value !== undefined) {\n      this.techCall_('setPlaysinline', value);\n      this.options_.playsinline = value;\n      return this;\n    }\n\n    return this.techGet_('playsinline');\n  }\n  /**\n   * Get or set the loop attribute on the video element.\n   *\n   * @param {boolean} [value]\n   *        - true means that we should loop the video\n   *        - false means that we should not loop the video\n   *\n   * @return {boolean}\n   *         The current value of loop when getting\n   */\n  ;\n\n  _proto.loop = function loop(value) {\n    if (value !== undefined) {\n      this.techCall_('setLoop', value);\n      this.options_.loop = value;\n      return;\n    }\n\n    return this.techGet_('loop');\n  }\n  /**\n   * Get or set the poster image source url\n   *\n   * @fires Player#posterchange\n   *\n   * @param {string} [src]\n   *        Poster image source URL\n   *\n   * @return {string}\n   *         The current value of poster when getting\n   */\n  ;\n\n  _proto.poster = function poster(src) {\n    if (src === undefined) {\n      return this.poster_;\n    } // The correct way to remove a poster is to set as an empty string\n    // other falsey values will throw errors\n\n\n    if (!src) {\n      src = '';\n    }\n\n    if (src === this.poster_) {\n      return;\n    } // update the internal poster variable\n\n\n    this.poster_ = src; // update the tech's poster\n\n    this.techCall_('setPoster', src);\n    this.isPosterFromTech_ = false; // alert components that the poster has been set\n\n    /**\n     * This event fires when the poster image is changed on the player.\n     *\n     * @event Player#posterchange\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('posterchange');\n  }\n  /**\n   * Some techs (e.g. YouTube) can provide a poster source in an\n   * asynchronous way. We want the poster component to use this\n   * poster source so that it covers up the tech's controls.\n   * (YouTube's play button). However we only want to use this\n   * source if the player user hasn't set a poster through\n   * the normal APIs.\n   *\n   * @fires Player#posterchange\n   * @listens Tech#posterchange\n   * @private\n   */\n  ;\n\n  _proto.handleTechPosterChange_ = function handleTechPosterChange_() {\n    if ((!this.poster_ || this.options_.techCanOverridePoster) && this.tech_ && this.tech_.poster) {\n      var newPoster = this.tech_.poster() || '';\n\n      if (newPoster !== this.poster_) {\n        this.poster_ = newPoster;\n        this.isPosterFromTech_ = true; // Let components know the poster has changed\n\n        this.trigger('posterchange');\n      }\n    }\n  }\n  /**\n   * Get or set whether or not the controls are showing.\n   *\n   * @fires Player#controlsenabled\n   *\n   * @param {boolean} [bool]\n   *        - true to turn controls on\n   *        - false to turn controls off\n   *\n   * @return {boolean}\n   *         The current value of controls when getting\n   */\n  ;\n\n  _proto.controls = function controls(bool) {\n    if (bool === undefined) {\n      return !!this.controls_;\n    }\n\n    bool = !!bool; // Don't trigger a change event unless it actually changed\n\n    if (this.controls_ === bool) {\n      return;\n    }\n\n    this.controls_ = bool;\n\n    if (this.usingNativeControls()) {\n      this.techCall_('setControls', bool);\n    }\n\n    if (this.controls_) {\n      this.removeClass('vjs-controls-disabled');\n      this.addClass('vjs-controls-enabled');\n      /**\n       * @event Player#controlsenabled\n       * @type {EventTarget~Event}\n       */\n\n      this.trigger('controlsenabled');\n\n      if (!this.usingNativeControls()) {\n        this.addTechControlsListeners_();\n      }\n    } else {\n      this.removeClass('vjs-controls-enabled');\n      this.addClass('vjs-controls-disabled');\n      /**\n       * @event Player#controlsdisabled\n       * @type {EventTarget~Event}\n       */\n\n      this.trigger('controlsdisabled');\n\n      if (!this.usingNativeControls()) {\n        this.removeTechControlsListeners_();\n      }\n    }\n  }\n  /**\n   * Toggle native controls on/off. Native controls are the controls built into\n   * devices (e.g. default iPhone controls), Flash, or other techs\n   * (e.g. Vimeo Controls)\n   * **This should only be set by the current tech, because only the tech knows\n   * if it can support native controls**\n   *\n   * @fires Player#usingnativecontrols\n   * @fires Player#usingcustomcontrols\n   *\n   * @param {boolean} [bool]\n   *        - true to turn native controls on\n   *        - false to turn native controls off\n   *\n   * @return {boolean}\n   *         The current value of native controls when getting\n   */\n  ;\n\n  _proto.usingNativeControls = function usingNativeControls(bool) {\n    if (bool === undefined) {\n      return !!this.usingNativeControls_;\n    }\n\n    bool = !!bool; // Don't trigger a change event unless it actually changed\n\n    if (this.usingNativeControls_ === bool) {\n      return;\n    }\n\n    this.usingNativeControls_ = bool;\n\n    if (this.usingNativeControls_) {\n      this.addClass('vjs-using-native-controls');\n      /**\n       * player is using the native device controls\n       *\n       * @event Player#usingnativecontrols\n       * @type {EventTarget~Event}\n       */\n\n      this.trigger('usingnativecontrols');\n    } else {\n      this.removeClass('vjs-using-native-controls');\n      /**\n       * player is using the custom HTML controls\n       *\n       * @event Player#usingcustomcontrols\n       * @type {EventTarget~Event}\n       */\n\n      this.trigger('usingcustomcontrols');\n    }\n  }\n  /**\n   * Set or get the current MediaError\n   *\n   * @fires Player#error\n   *\n   * @param  {MediaError|string|number} [err]\n   *         A MediaError or a string/number to be turned\n   *         into a MediaError\n   *\n   * @return {MediaError|null}\n   *         The current MediaError when getting (or null)\n   */\n  ;\n\n  _proto.error = function error(err) {\n    if (err === undefined) {\n      return this.error_ || null;\n    } // restoring to default\n\n\n    if (err === null) {\n      this.error_ = err;\n      this.removeClass('vjs-error');\n\n      if (this.errorDisplay) {\n        this.errorDisplay.close();\n      }\n\n      return;\n    }\n\n    this.error_ = new MediaError(err); // add the vjs-error classname to the player\n\n    this.addClass('vjs-error'); // log the name of the error type and any message\n    // IE11 logs \"[object object]\" and required you to expand message to see error object\n\n    log.error(\"(CODE:\" + this.error_.code + \" \" + MediaError.errorTypes[this.error_.code] + \")\", this.error_.message, this.error_);\n    /**\n     * @event Player#error\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('error');\n    return;\n  }\n  /**\n   * Report user activity\n   *\n   * @param {Object} event\n   *        Event object\n   */\n  ;\n\n  _proto.reportUserActivity = function reportUserActivity(event) {\n    this.userActivity_ = true;\n  }\n  /**\n   * Get/set if user is active\n   *\n   * @fires Player#useractive\n   * @fires Player#userinactive\n   *\n   * @param {boolean} [bool]\n   *        - true if the user is active\n   *        - false if the user is inactive\n   *\n   * @return {boolean}\n   *         The current value of userActive when getting\n   */\n  ;\n\n  _proto.userActive = function userActive(bool) {\n    if (bool === undefined) {\n      return this.userActive_;\n    }\n\n    bool = !!bool;\n\n    if (bool === this.userActive_) {\n      return;\n    }\n\n    this.userActive_ = bool;\n\n    if (this.userActive_) {\n      this.userActivity_ = true;\n      this.removeClass('vjs-user-inactive');\n      this.addClass('vjs-user-active');\n      /**\n       * @event Player#useractive\n       * @type {EventTarget~Event}\n       */\n\n      this.trigger('useractive');\n      return;\n    } // Chrome/Safari/IE have bugs where when you change the cursor it can\n    // trigger a mousemove event. This causes an issue when you're hiding\n    // the cursor when the user is inactive, and a mousemove signals user\n    // activity. Making it impossible to go into inactive mode. Specifically\n    // this happens in fullscreen when we really need to hide the cursor.\n    //\n    // When this gets resolved in ALL browsers it can be removed\n    // https://code.google.com/p/chromium/issues/detail?id=103041\n\n\n    if (this.tech_) {\n      this.tech_.one('mousemove', function (e) {\n        e.stopPropagation();\n        e.preventDefault();\n      });\n    }\n\n    this.userActivity_ = false;\n    this.removeClass('vjs-user-active');\n    this.addClass('vjs-user-inactive');\n    /**\n     * @event Player#userinactive\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('userinactive');\n  }\n  /**\n   * Listen for user activity based on timeout value\n   *\n   * @private\n   */\n  ;\n\n  _proto.listenForUserActivity_ = function listenForUserActivity_() {\n    var mouseInProgress;\n    var lastMoveX;\n    var lastMoveY;\n    var handleActivity = bind(this, this.reportUserActivity);\n\n    var handleMouseMove = function handleMouseMove(e) {\n      // #1068 - Prevent mousemove spamming\n      // Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970\n      if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {\n        lastMoveX = e.screenX;\n        lastMoveY = e.screenY;\n        handleActivity();\n      }\n    };\n\n    var handleMouseDown = function handleMouseDown() {\n      handleActivity(); // For as long as the they are touching the device or have their mouse down,\n      // we consider them active even if they're not moving their finger or mouse.\n      // So we want to continue to update that they are active\n\n      this.clearInterval(mouseInProgress); // Setting userActivity=true now and setting the interval to the same time\n      // as the activityCheck interval (250) should ensure we never miss the\n      // next activityCheck\n\n      mouseInProgress = this.setInterval(handleActivity, 250);\n    };\n\n    var handleMouseUp = function handleMouseUp(event) {\n      handleActivity(); // Stop the interval that maintains activity if the mouse/touch is down\n\n      this.clearInterval(mouseInProgress);\n    }; // Any mouse movement will be considered user activity\n\n\n    this.on('mousedown', handleMouseDown);\n    this.on('mousemove', handleMouseMove);\n    this.on('mouseup', handleMouseUp);\n    var controlBar = this.getChild('controlBar'); // Fixes bug on Android & iOS where when tapping progressBar (when control bar is displayed)\n    // controlBar would no longer be hidden by default timeout.\n\n    if (controlBar && !IS_IOS && !IS_ANDROID) {\n      controlBar.on('mouseenter', function (event) {\n        this.player().cache_.inactivityTimeout = this.player().options_.inactivityTimeout;\n        this.player().options_.inactivityTimeout = 0;\n      });\n      controlBar.on('mouseleave', function (event) {\n        this.player().options_.inactivityTimeout = this.player().cache_.inactivityTimeout;\n      });\n    } // Listen for keyboard navigation\n    // Shouldn't need to use inProgress interval because of key repeat\n\n\n    this.on('keydown', handleActivity);\n    this.on('keyup', handleActivity); // Run an interval every 250 milliseconds instead of stuffing everything into\n    // the mousemove/touchmove function itself, to prevent performance degradation.\n    // `this.reportUserActivity` simply sets this.userActivity_ to true, which\n    // then gets picked up by this loop\n    // http://ejohn.org/blog/learning-from-twitter/\n\n    var inactivityTimeout;\n    this.setInterval(function () {\n      // Check to see if mouse/touch activity has happened\n      if (!this.userActivity_) {\n        return;\n      } // Reset the activity tracker\n\n\n      this.userActivity_ = false; // If the user state was inactive, set the state to active\n\n      this.userActive(true); // Clear any existing inactivity timeout to start the timer over\n\n      this.clearTimeout(inactivityTimeout);\n      var timeout = this.options_.inactivityTimeout;\n\n      if (timeout <= 0) {\n        return;\n      } // In <timeout> milliseconds, if no more activity has occurred the\n      // user will be considered inactive\n\n\n      inactivityTimeout = this.setTimeout(function () {\n        // Protect against the case where the inactivityTimeout can trigger just\n        // before the next user activity is picked up by the activity check loop\n        // causing a flicker\n        if (!this.userActivity_) {\n          this.userActive(false);\n        }\n      }, timeout);\n    }, 250);\n  }\n  /**\n   * Gets or sets the current playback rate. A playback rate of\n   * 1.0 represents normal speed and 0.5 would indicate half-speed\n   * playback, for instance.\n   *\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate\n   *\n   * @param {number} [rate]\n   *       New playback rate to set.\n   *\n   * @return {number}\n   *         The current playback rate when getting or 1.0\n   */\n  ;\n\n  _proto.playbackRate = function playbackRate(rate) {\n    if (rate !== undefined) {\n      // NOTE: this.cache_.lastPlaybackRate is set from the tech handler\n      // that is registered above\n      this.techCall_('setPlaybackRate', rate);\n      return;\n    }\n\n    if (this.tech_ && this.tech_.featuresPlaybackRate) {\n      return this.cache_.lastPlaybackRate || this.techGet_('playbackRate');\n    }\n\n    return 1.0;\n  }\n  /**\n   * Gets or sets the current default playback rate. A default playback rate of\n   * 1.0 represents normal speed and 0.5 would indicate half-speed playback, for instance.\n   * defaultPlaybackRate will only represent what the initial playbackRate of a video was, not\n   * not the current playbackRate.\n   *\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-defaultplaybackrate\n   *\n   * @param {number} [rate]\n   *       New default playback rate to set.\n   *\n   * @return {number|Player}\n   *         - The default playback rate when getting or 1.0\n   *         - the player when setting\n   */\n  ;\n\n  _proto.defaultPlaybackRate = function defaultPlaybackRate(rate) {\n    if (rate !== undefined) {\n      return this.techCall_('setDefaultPlaybackRate', rate);\n    }\n\n    if (this.tech_ && this.tech_.featuresPlaybackRate) {\n      return this.techGet_('defaultPlaybackRate');\n    }\n\n    return 1.0;\n  }\n  /**\n   * Gets or sets the audio flag\n   *\n   * @param {boolean} bool\n   *        - true signals that this is an audio player\n   *        - false signals that this is not an audio player\n   *\n   * @return {boolean}\n   *         The current value of isAudio when getting\n   */\n  ;\n\n  _proto.isAudio = function isAudio(bool) {\n    if (bool !== undefined) {\n      this.isAudio_ = !!bool;\n      return;\n    }\n\n    return !!this.isAudio_;\n  }\n  /**\n   * A helper method for adding a {@link TextTrack} to our\n   * {@link TextTrackList}.\n   *\n   * In addition to the W3C settings we allow adding additional info through options.\n   *\n   * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack\n   *\n   * @param {string} [kind]\n   *        the kind of TextTrack you are adding\n   *\n   * @param {string} [label]\n   *        the label to give the TextTrack label\n   *\n   * @param {string} [language]\n   *        the language to set on the TextTrack\n   *\n   * @return {TextTrack|undefined}\n   *         the TextTrack that was added or undefined\n   *         if there is no tech\n   */\n  ;\n\n  _proto.addTextTrack = function addTextTrack(kind, label, language) {\n    if (this.tech_) {\n      return this.tech_.addTextTrack(kind, label, language);\n    }\n  }\n  /**\n   * Create a remote {@link TextTrack} and an {@link HTMLTrackElement}. It will\n   * automatically removed from the video element whenever the source changes, unless\n   * manualCleanup is set to false.\n   *\n   * @param {Object} options\n   *        Options to pass to {@link HTMLTrackElement} during creation. See\n   *        {@link HTMLTrackElement} for object properties that you should use.\n   *\n   * @param {boolean} [manualCleanup=true] if set to false, the TextTrack will be\n   *\n   * @return {HtmlTrackElement}\n   *         the HTMLTrackElement that was created and added\n   *         to the HtmlTrackElementList and the remote\n   *         TextTrackList\n   *\n   * @deprecated The default value of the \"manualCleanup\" parameter will default\n   *             to \"false\" in upcoming versions of Video.js\n   */\n  ;\n\n  _proto.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {\n    if (this.tech_) {\n      return this.tech_.addRemoteTextTrack(options, manualCleanup);\n    }\n  }\n  /**\n   * Remove a remote {@link TextTrack} from the respective\n   * {@link TextTrackList} and {@link HtmlTrackElementList}.\n   *\n   * @param {Object} track\n   *        Remote {@link TextTrack} to remove\n   *\n   * @return {undefined}\n   *         does not return anything\n   */\n  ;\n\n  _proto.removeRemoteTextTrack = function removeRemoteTextTrack(obj) {\n    if (obj === void 0) {\n      obj = {};\n    }\n\n    var _obj = obj,\n        track = _obj.track;\n\n    if (!track) {\n      track = obj;\n    } // destructure the input into an object with a track argument, defaulting to arguments[0]\n    // default the whole argument to an empty object if nothing was passed in\n\n\n    if (this.tech_) {\n      return this.tech_.removeRemoteTextTrack(track);\n    }\n  }\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object|undefined}\n   *         An object with supported media playback quality metrics or undefined if there\n   *         is no tech or the tech does not support it.\n   */\n  ;\n\n  _proto.getVideoPlaybackQuality = function getVideoPlaybackQuality() {\n    return this.techGet_('getVideoPlaybackQuality');\n  }\n  /**\n   * Get video width\n   *\n   * @return {number}\n   *         current video width\n   */\n  ;\n\n  _proto.videoWidth = function videoWidth() {\n    return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;\n  }\n  /**\n   * Get video height\n   *\n   * @return {number}\n   *         current video height\n   */\n  ;\n\n  _proto.videoHeight = function videoHeight() {\n    return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;\n  }\n  /**\n   * The player's language code\n   * NOTE: The language should be set in the player options if you want the\n   * the controls to be built with a specific language. Changing the language\n   * later will not update controls text.\n   *\n   * @param {string} [code]\n   *        the language code to set the player to\n   *\n   * @return {string}\n   *         The current language code when getting\n   */\n  ;\n\n  _proto.language = function language(code) {\n    if (code === undefined) {\n      return this.language_;\n    }\n\n    this.language_ = String(code).toLowerCase();\n  }\n  /**\n   * Get the player's language dictionary\n   * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time\n   * Languages specified directly in the player options have precedence\n   *\n   * @return {Array}\n   *         An array of of supported languages\n   */\n  ;\n\n  _proto.languages = function languages() {\n    return mergeOptions(Player.prototype.options_.languages, this.languages_);\n  }\n  /**\n   * returns a JavaScript object reperesenting the current track\n   * information. **DOES not return it as JSON**\n   *\n   * @return {Object}\n   *         Object representing the current of track info\n   */\n  ;\n\n  _proto.toJSON = function toJSON() {\n    var options = mergeOptions(this.options_);\n    var tracks = options.tracks;\n    options.tracks = [];\n\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i]; // deep merge tracks and null out player so no circular references\n\n      track = mergeOptions(track);\n      track.player = undefined;\n      options.tracks[i] = track;\n    }\n\n    return options;\n  }\n  /**\n   * Creates a simple modal dialog (an instance of the {@link ModalDialog}\n   * component) that immediately overlays the player with arbitrary\n   * content and removes itself when closed.\n   *\n   * @param {string|Function|Element|Array|null} content\n   *        Same as {@link ModalDialog#content}'s param of the same name.\n   *        The most straight-forward usage is to provide a string or DOM\n   *        element.\n   *\n   * @param {Object} [options]\n   *        Extra options which will be passed on to the {@link ModalDialog}.\n   *\n   * @return {ModalDialog}\n   *         the {@link ModalDialog} that was created\n   */\n  ;\n\n  _proto.createModal = function createModal(content, options) {\n    var _this14 = this;\n\n    options = options || {};\n    options.content = content || '';\n    var modal = new ModalDialog(this, options);\n    this.addChild(modal);\n    modal.on('dispose', function () {\n      _this14.removeChild(modal);\n    });\n    modal.open();\n    return modal;\n  }\n  /**\n   * Change breakpoint classes when the player resizes.\n   *\n   * @private\n   */\n  ;\n\n  _proto.updateCurrentBreakpoint_ = function updateCurrentBreakpoint_() {\n    if (!this.responsive()) {\n      return;\n    }\n\n    var currentBreakpoint = this.currentBreakpoint();\n    var currentWidth = this.currentWidth();\n\n    for (var i = 0; i < BREAKPOINT_ORDER.length; i++) {\n      var candidateBreakpoint = BREAKPOINT_ORDER[i];\n      var maxWidth = this.breakpoints_[candidateBreakpoint];\n\n      if (currentWidth <= maxWidth) {\n        // The current breakpoint did not change, nothing to do.\n        if (currentBreakpoint === candidateBreakpoint) {\n          return;\n        } // Only remove a class if there is a current breakpoint.\n\n\n        if (currentBreakpoint) {\n          this.removeClass(BREAKPOINT_CLASSES[currentBreakpoint]);\n        }\n\n        this.addClass(BREAKPOINT_CLASSES[candidateBreakpoint]);\n        this.breakpoint_ = candidateBreakpoint;\n        break;\n      }\n    }\n  }\n  /**\n   * Removes the current breakpoint.\n   *\n   * @private\n   */\n  ;\n\n  _proto.removeCurrentBreakpoint_ = function removeCurrentBreakpoint_() {\n    var className = this.currentBreakpointClass();\n    this.breakpoint_ = '';\n\n    if (className) {\n      this.removeClass(className);\n    }\n  }\n  /**\n   * Get or set breakpoints on the player.\n   *\n   * Calling this method with an object or `true` will remove any previous\n   * custom breakpoints and start from the defaults again.\n   *\n   * @param  {Object|boolean} [breakpoints]\n   *         If an object is given, it can be used to provide custom\n   *         breakpoints. If `true` is given, will set default breakpoints.\n   *         If this argument is not given, will simply return the current\n   *         breakpoints.\n   *\n   * @param  {number} [breakpoints.tiny]\n   *         The maximum width for the \"vjs-layout-tiny\" class.\n   *\n   * @param  {number} [breakpoints.xsmall]\n   *         The maximum width for the \"vjs-layout-x-small\" class.\n   *\n   * @param  {number} [breakpoints.small]\n   *         The maximum width for the \"vjs-layout-small\" class.\n   *\n   * @param  {number} [breakpoints.medium]\n   *         The maximum width for the \"vjs-layout-medium\" class.\n   *\n   * @param  {number} [breakpoints.large]\n   *         The maximum width for the \"vjs-layout-large\" class.\n   *\n   * @param  {number} [breakpoints.xlarge]\n   *         The maximum width for the \"vjs-layout-x-large\" class.\n   *\n   * @param  {number} [breakpoints.huge]\n   *         The maximum width for the \"vjs-layout-huge\" class.\n   *\n   * @return {Object}\n   *         An object mapping breakpoint names to maximum width values.\n   */\n  ;\n\n  _proto.breakpoints = function breakpoints(_breakpoints) {\n    // Used as a getter.\n    if (_breakpoints === undefined) {\n      return assign(this.breakpoints_);\n    }\n\n    this.breakpoint_ = '';\n    this.breakpoints_ = assign({}, DEFAULT_BREAKPOINTS, _breakpoints); // When breakpoint definitions change, we need to update the currently\n    // selected breakpoint.\n\n    this.updateCurrentBreakpoint_(); // Clone the breakpoints before returning.\n\n    return assign(this.breakpoints_);\n  }\n  /**\n   * Get or set a flag indicating whether or not this player should adjust\n   * its UI based on its dimensions.\n   *\n   * @param  {boolean} value\n   *         Should be `true` if the player should adjust its UI based on its\n   *         dimensions; otherwise, should be `false`.\n   *\n   * @return {boolean}\n   *         Will be `true` if this player should adjust its UI based on its\n   *         dimensions; otherwise, will be `false`.\n   */\n  ;\n\n  _proto.responsive = function responsive(value) {\n    // Used as a getter.\n    if (value === undefined) {\n      return this.responsive_;\n    }\n\n    value = Boolean(value);\n    var current = this.responsive_; // Nothing changed.\n\n    if (value === current) {\n      return;\n    } // The value actually changed, set it.\n\n\n    this.responsive_ = value; // Start listening for breakpoints and set the initial breakpoint if the\n    // player is now responsive.\n\n    if (value) {\n      this.on('playerresize', this.updateCurrentBreakpoint_);\n      this.updateCurrentBreakpoint_(); // Stop listening for breakpoints if the player is no longer responsive.\n    } else {\n      this.off('playerresize', this.updateCurrentBreakpoint_);\n      this.removeCurrentBreakpoint_();\n    }\n\n    return value;\n  }\n  /**\n   * Get current breakpoint name, if any.\n   *\n   * @return {string}\n   *         If there is currently a breakpoint set, returns a the key from the\n   *         breakpoints object matching it. Otherwise, returns an empty string.\n   */\n  ;\n\n  _proto.currentBreakpoint = function currentBreakpoint() {\n    return this.breakpoint_;\n  }\n  /**\n   * Get the current breakpoint class name.\n   *\n   * @return {string}\n   *         The matching class name (e.g. `\"vjs-layout-tiny\"` or\n   *         `\"vjs-layout-large\"`) for the current breakpoint. Empty string if\n   *         there is no current breakpoint.\n   */\n  ;\n\n  _proto.currentBreakpointClass = function currentBreakpointClass() {\n    return BREAKPOINT_CLASSES[this.breakpoint_] || '';\n  }\n  /**\n   * An object that describes a single piece of media.\n   *\n   * Properties that are not part of this type description will be retained; so,\n   * this can be viewed as a generic metadata storage mechanism as well.\n   *\n   * @see      {@link https://wicg.github.io/mediasession/#the-mediametadata-interface}\n   * @typedef  {Object} Player~MediaObject\n   *\n   * @property {string} [album]\n   *           Unused, except if this object is passed to the `MediaSession`\n   *           API.\n   *\n   * @property {string} [artist]\n   *           Unused, except if this object is passed to the `MediaSession`\n   *           API.\n   *\n   * @property {Object[]} [artwork]\n   *           Unused, except if this object is passed to the `MediaSession`\n   *           API. If not specified, will be populated via the `poster`, if\n   *           available.\n   *\n   * @property {string} [poster]\n   *           URL to an image that will display before playback.\n   *\n   * @property {Tech~SourceObject|Tech~SourceObject[]|string} [src]\n   *           A single source object, an array of source objects, or a string\n   *           referencing a URL to a media source. It is _highly recommended_\n   *           that an object or array of objects is used here, so that source\n   *           selection algorithms can take the `type` into account.\n   *\n   * @property {string} [title]\n   *           Unused, except if this object is passed to the `MediaSession`\n   *           API.\n   *\n   * @property {Object[]} [textTracks]\n   *           An array of objects to be used to create text tracks, following\n   *           the {@link https://www.w3.org/TR/html50/embedded-content-0.html#the-track-element|native track element format}.\n   *           For ease of removal, these will be created as \"remote\" text\n   *           tracks and set to automatically clean up on source changes.\n   *\n   *           These objects may have properties like `src`, `kind`, `label`,\n   *           and `language`, see {@link Tech#createRemoteTextTrack}.\n   */\n\n  /**\n   * Populate the player using a {@link Player~MediaObject|MediaObject}.\n   *\n   * @param  {Player~MediaObject} media\n   *         A media object.\n   *\n   * @param  {Function} ready\n   *         A callback to be called when the player is ready.\n   */\n  ;\n\n  _proto.loadMedia = function loadMedia(media, ready) {\n    var _this15 = this;\n\n    if (!media || typeof media !== 'object') {\n      return;\n    }\n\n    this.reset(); // Clone the media object so it cannot be mutated from outside.\n\n    this.cache_.media = mergeOptions(media);\n    var _this$cache_$media = this.cache_.media,\n        artwork = _this$cache_$media.artwork,\n        poster = _this$cache_$media.poster,\n        src = _this$cache_$media.src,\n        textTracks = _this$cache_$media.textTracks; // If `artwork` is not given, create it using `poster`.\n\n    if (!artwork && poster) {\n      this.cache_.media.artwork = [{\n        src: poster,\n        type: getMimetype(poster)\n      }];\n    }\n\n    if (src) {\n      this.src(src);\n    }\n\n    if (poster) {\n      this.poster(poster);\n    }\n\n    if (Array.isArray(textTracks)) {\n      textTracks.forEach(function (tt) {\n        return _this15.addRemoteTextTrack(tt, false);\n      });\n    }\n\n    this.ready(ready);\n  }\n  /**\n   * Get a clone of the current {@link Player~MediaObject} for this player.\n   *\n   * If the `loadMedia` method has not been used, will attempt to return a\n   * {@link Player~MediaObject} based on the current state of the player.\n   *\n   * @return {Player~MediaObject}\n   */\n  ;\n\n  _proto.getMedia = function getMedia() {\n    if (!this.cache_.media) {\n      var poster = this.poster();\n      var src = this.currentSources();\n      var textTracks = Array.prototype.map.call(this.remoteTextTracks(), function (tt) {\n        return {\n          kind: tt.kind,\n          label: tt.label,\n          language: tt.language,\n          src: tt.src\n        };\n      });\n      var media = {\n        src: src,\n        textTracks: textTracks\n      };\n\n      if (poster) {\n        media.poster = poster;\n        media.artwork = [{\n          src: media.poster,\n          type: getMimetype(media.poster)\n        }];\n      }\n\n      return media;\n    }\n\n    return mergeOptions(this.cache_.media);\n  }\n  /**\n   * Gets tag settings\n   *\n   * @param {Element} tag\n   *        The player tag\n   *\n   * @return {Object}\n   *         An object containing all of the settings\n   *         for a player tag\n   */\n  ;\n\n  Player.getTagSettings = function getTagSettings(tag) {\n    var baseOptions = {\n      sources: [],\n      tracks: []\n    };\n    var tagOptions = getAttributes(tag);\n    var dataSetup = tagOptions['data-setup'];\n\n    if (hasClass(tag, 'vjs-fill')) {\n      tagOptions.fill = true;\n    }\n\n    if (hasClass(tag, 'vjs-fluid')) {\n      tagOptions.fluid = true;\n    } // Check if data-setup attr exists.\n\n\n    if (dataSetup !== null) {\n      // Parse options JSON\n      // If empty string, make it a parsable json object.\n      var _safeParseTuple = safeParseTuple(dataSetup || '{}'),\n          err = _safeParseTuple[0],\n          data = _safeParseTuple[1];\n\n      if (err) {\n        log.error(err);\n      }\n\n      assign(tagOptions, data);\n    }\n\n    assign(baseOptions, tagOptions); // Get tag children settings\n\n    if (tag.hasChildNodes()) {\n      var children = tag.childNodes;\n\n      for (var i = 0, j = children.length; i < j; i++) {\n        var child = children[i]; // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/\n\n        var childName = child.nodeName.toLowerCase();\n\n        if (childName === 'source') {\n          baseOptions.sources.push(getAttributes(child));\n        } else if (childName === 'track') {\n          baseOptions.tracks.push(getAttributes(child));\n        }\n      }\n    }\n\n    return baseOptions;\n  }\n  /**\n   * Determine whether or not flexbox is supported\n   *\n   * @return {boolean}\n   *         - true if flexbox is supported\n   *         - false if flexbox is not supported\n   */\n  ;\n\n  _proto.flexNotSupported_ = function flexNotSupported_() {\n    var elem = document.createElement('i'); // Note: We don't actually use flexBasis (or flexOrder), but it's one of the more\n    // common flex features that we can rely on when checking for flex support.\n\n    return !('flexBasis' in elem.style || 'webkitFlexBasis' in elem.style || 'mozFlexBasis' in elem.style || 'msFlexBasis' in elem.style || // IE10-specific (2012 flex spec), available for completeness\n    'msFlexOrder' in elem.style);\n  };\n\n  return Player;\n}(Component);\n/**\n * Get the {@link VideoTrackList}\n * @link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist\n *\n * @return {VideoTrackList}\n *         the current video track list\n *\n * @method Player.prototype.videoTracks\n */\n\n/**\n * Get the {@link AudioTrackList}\n * @link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist\n *\n * @return {AudioTrackList}\n *         the current audio track list\n *\n * @method Player.prototype.audioTracks\n */\n\n/**\n * Get the {@link TextTrackList}\n *\n * @link http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks\n *\n * @return {TextTrackList}\n *         the current text track list\n *\n * @method Player.prototype.textTracks\n */\n\n/**\n * Get the remote {@link TextTrackList}\n *\n * @return {TextTrackList}\n *         The current remote text track list\n *\n * @method Player.prototype.remoteTextTracks\n */\n\n/**\n * Get the remote {@link HtmlTrackElementList} tracks.\n *\n * @return {HtmlTrackElementList}\n *         The current remote text track element list\n *\n * @method Player.prototype.remoteTextTrackEls\n */\n\n\nALL.names.forEach(function (name$$1) {\n  var props = ALL[name$$1];\n\n  Player.prototype[props.getterName] = function () {\n    if (this.tech_) {\n      return this.tech_[props.getterName]();\n    } // if we have not yet loadTech_, we create {video,audio,text}Tracks_\n    // these will be passed to the tech during loading\n\n\n    this[props.privateName] = this[props.privateName] || new props.ListClass();\n    return this[props.privateName];\n  };\n});\n/**\n * Global enumeration of players.\n *\n * The keys are the player IDs and the values are either the {@link Player}\n * instance or `null` for disposed players.\n *\n * @type {Object}\n */\n\nPlayer.players = {};\nvar navigator = window$1.navigator;\n/*\n * Player instance options, surfaced using options\n * options = Player.prototype.options_\n * Make changes in options, not here.\n *\n * @type {Object}\n * @private\n */\n\nPlayer.prototype.options_ = {\n  // Default order of fallback technology\n  techOrder: Tech.defaultTechOrder_,\n  html5: {},\n  flash: {},\n  // default inactivity timeout\n  inactivityTimeout: 2000,\n  // default playback rates\n  playbackRates: [],\n  // Add playback rate selection by adding rates\n  // 'playbackRates': [0.5, 1, 1.5, 2],\n  liveui: false,\n  // Included control sets\n  children: ['mediaLoader', 'posterImage', 'textTrackDisplay', 'loadingSpinner', 'bigPlayButton', 'liveTracker', 'controlBar', 'errorDisplay', 'textTrackSettings', 'resizeManager'],\n  language: navigator && (navigator.languages && navigator.languages[0] || navigator.userLanguage || navigator.language) || 'en',\n  // locales and their language translations\n  languages: {},\n  // Default message to show when a video cannot be played.\n  notSupportedMessage: 'No compatible source was found for this media.',\n  breakpoints: {},\n  responsive: false\n};\n[\n/**\n * Returns whether or not the player is in the \"ended\" state.\n *\n * @return {Boolean} True if the player is in the ended state, false if not.\n * @method Player#ended\n */\n'ended',\n/**\n * Returns whether or not the player is in the \"seeking\" state.\n *\n * @return {Boolean} True if the player is in the seeking state, false if not.\n * @method Player#seeking\n */\n'seeking',\n/**\n * Returns the TimeRanges of the media that are currently available\n * for seeking to.\n *\n * @return {TimeRanges} the seekable intervals of the media timeline\n * @method Player#seekable\n */\n'seekable',\n/**\n * Returns the current state of network activity for the element, from\n * the codes in the list below.\n * - NETWORK_EMPTY (numeric value 0)\n *   The element has not yet been initialised. All attributes are in\n *   their initial states.\n * - NETWORK_IDLE (numeric value 1)\n *   The element's resource selection algorithm is active and has\n *   selected a resource, but it is not actually using the network at\n *   this time.\n * - NETWORK_LOADING (numeric value 2)\n *   The user agent is actively trying to download data.\n * - NETWORK_NO_SOURCE (numeric value 3)\n *   The element's resource selection algorithm is active, but it has\n *   not yet found a resource to use.\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states\n * @return {number} the current network activity state\n * @method Player#networkState\n */\n'networkState',\n/**\n * Returns a value that expresses the current state of the element\n * with respect to rendering the current playback position, from the\n * codes in the list below.\n * - HAVE_NOTHING (numeric value 0)\n *   No information regarding the media resource is available.\n * - HAVE_METADATA (numeric value 1)\n *   Enough of the resource has been obtained that the duration of the\n *   resource is available.\n * - HAVE_CURRENT_DATA (numeric value 2)\n *   Data for the immediate current playback position is available.\n * - HAVE_FUTURE_DATA (numeric value 3)\n *   Data for the immediate current playback position is available, as\n *   well as enough data for the user agent to advance the current\n *   playback position in the direction of playback.\n * - HAVE_ENOUGH_DATA (numeric value 4)\n *   The user agent estimates that enough data is available for\n *   playback to proceed uninterrupted.\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate\n * @return {number} the current playback rendering state\n * @method Player#readyState\n */\n'readyState'].forEach(function (fn) {\n  Player.prototype[fn] = function () {\n    return this.techGet_(fn);\n  };\n});\nTECH_EVENTS_RETRIGGER.forEach(function (event) {\n  Player.prototype[\"handleTech\" + toTitleCase(event) + \"_\"] = function () {\n    return this.trigger(event);\n  };\n});\n/**\n * Fired when the player has initial duration and dimension information\n *\n * @event Player#loadedmetadata\n * @type {EventTarget~Event}\n */\n\n/**\n * Fired when the player has downloaded data at the current playback position\n *\n * @event Player#loadeddata\n * @type {EventTarget~Event}\n */\n\n/**\n * Fired when the current playback position has changed *\n * During playback this is fired every 15-250 milliseconds, depending on the\n * playback technology in use.\n *\n * @event Player#timeupdate\n * @type {EventTarget~Event}\n */\n\n/**\n * Fired when the volume changes\n *\n * @event Player#volumechange\n * @type {EventTarget~Event}\n */\n\n/**\n * Reports whether or not a player has a plugin available.\n *\n * This does not report whether or not the plugin has ever been initialized\n * on this player. For that, [usingPlugin]{@link Player#usingPlugin}.\n *\n * @method Player#hasPlugin\n * @param  {string}  name\n *         The name of a plugin.\n *\n * @return {boolean}\n *         Whether or not this player has the requested plugin available.\n */\n\n/**\n * Reports whether or not a player is using a plugin by name.\n *\n * For basic plugins, this only reports whether the plugin has _ever_ been\n * initialized on this player.\n *\n * @method Player#usingPlugin\n * @param  {string} name\n *         The name of a plugin.\n *\n * @return {boolean}\n *         Whether or not this player is using the requested plugin.\n */\n\nComponent.registerComponent('Player', Player);\n\n/**\n * The base plugin name.\n *\n * @private\n * @constant\n * @type {string}\n */\n\nvar BASE_PLUGIN_NAME = 'plugin';\n/**\n * The key on which a player's active plugins cache is stored.\n *\n * @private\n * @constant\n * @type     {string}\n */\n\nvar PLUGIN_CACHE_KEY = 'activePlugins_';\n/**\n * Stores registered plugins in a private space.\n *\n * @private\n * @type    {Object}\n */\n\nvar pluginStorage = {};\n/**\n * Reports whether or not a plugin has been registered.\n *\n * @private\n * @param   {string} name\n *          The name of a plugin.\n *\n * @return {boolean}\n *          Whether or not the plugin has been registered.\n */\n\nvar pluginExists = function pluginExists(name) {\n  return pluginStorage.hasOwnProperty(name);\n};\n/**\n * Get a single registered plugin by name.\n *\n * @private\n * @param   {string} name\n *          The name of a plugin.\n *\n * @return {Function|undefined}\n *          The plugin (or undefined).\n */\n\n\nvar getPlugin = function getPlugin(name) {\n  return pluginExists(name) ? pluginStorage[name] : undefined;\n};\n/**\n * Marks a plugin as \"active\" on a player.\n *\n * Also, ensures that the player has an object for tracking active plugins.\n *\n * @private\n * @param   {Player} player\n *          A Video.js player instance.\n *\n * @param   {string} name\n *          The name of a plugin.\n */\n\n\nvar markPluginAsActive = function markPluginAsActive(player, name) {\n  player[PLUGIN_CACHE_KEY] = player[PLUGIN_CACHE_KEY] || {};\n  player[PLUGIN_CACHE_KEY][name] = true;\n};\n/**\n * Triggers a pair of plugin setup events.\n *\n * @private\n * @param  {Player} player\n *         A Video.js player instance.\n *\n * @param  {Plugin~PluginEventHash} hash\n *         A plugin event hash.\n *\n * @param  {boolean} [before]\n *         If true, prefixes the event name with \"before\". In other words,\n *         use this to trigger \"beforepluginsetup\" instead of \"pluginsetup\".\n */\n\n\nvar triggerSetupEvent = function triggerSetupEvent(player, hash, before) {\n  var eventName = (before ? 'before' : '') + 'pluginsetup';\n  player.trigger(eventName, hash);\n  player.trigger(eventName + ':' + hash.name, hash);\n};\n/**\n * Takes a basic plugin function and returns a wrapper function which marks\n * on the player that the plugin has been activated.\n *\n * @private\n * @param   {string} name\n *          The name of the plugin.\n *\n * @param   {Function} plugin\n *          The basic plugin.\n *\n * @return {Function}\n *          A wrapper function for the given plugin.\n */\n\n\nvar createBasicPlugin = function createBasicPlugin(name, plugin) {\n  var basicPluginWrapper = function basicPluginWrapper() {\n    // We trigger the \"beforepluginsetup\" and \"pluginsetup\" events on the player\n    // regardless, but we want the hash to be consistent with the hash provided\n    // for advanced plugins.\n    //\n    // The only potentially counter-intuitive thing here is the `instance` in\n    // the \"pluginsetup\" event is the value returned by the `plugin` function.\n    triggerSetupEvent(this, {\n      name: name,\n      plugin: plugin,\n      instance: null\n    }, true);\n    var instance = plugin.apply(this, arguments);\n    markPluginAsActive(this, name);\n    triggerSetupEvent(this, {\n      name: name,\n      plugin: plugin,\n      instance: instance\n    });\n    return instance;\n  };\n\n  Object.keys(plugin).forEach(function (prop) {\n    basicPluginWrapper[prop] = plugin[prop];\n  });\n  return basicPluginWrapper;\n};\n/**\n * Takes a plugin sub-class and returns a factory function for generating\n * instances of it.\n *\n * This factory function will replace itself with an instance of the requested\n * sub-class of Plugin.\n *\n * @private\n * @param   {string} name\n *          The name of the plugin.\n *\n * @param   {Plugin} PluginSubClass\n *          The advanced plugin.\n *\n * @return {Function}\n */\n\n\nvar createPluginFactory = function createPluginFactory(name, PluginSubClass) {\n  // Add a `name` property to the plugin prototype so that each plugin can\n  // refer to itself by name.\n  PluginSubClass.prototype.name = name;\n  return function () {\n    triggerSetupEvent(this, {\n      name: name,\n      plugin: PluginSubClass,\n      instance: null\n    }, true);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var instance = _construct(PluginSubClass, [this].concat(args)); // The plugin is replaced by a function that returns the current instance.\n\n\n    this[name] = function () {\n      return instance;\n    };\n\n    triggerSetupEvent(this, instance.getEventHash());\n    return instance;\n  };\n};\n/**\n * Parent class for all advanced plugins.\n *\n * @mixes   module:evented~EventedMixin\n * @mixes   module:stateful~StatefulMixin\n * @fires   Player#beforepluginsetup\n * @fires   Player#beforepluginsetup:$name\n * @fires   Player#pluginsetup\n * @fires   Player#pluginsetup:$name\n * @listens Player#dispose\n * @throws  {Error}\n *          If attempting to instantiate the base {@link Plugin} class\n *          directly instead of via a sub-class.\n */\n\n\nvar Plugin =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Creates an instance of this class.\n   *\n   * Sub-classes should call `super` to ensure plugins are properly initialized.\n   *\n   * @param {Player} player\n   *        A Video.js player instance.\n   */\n  function Plugin(player) {\n    if (this.constructor === Plugin) {\n      throw new Error('Plugin must be sub-classed; not directly instantiated.');\n    }\n\n    this.player = player; // Make this object evented, but remove the added `trigger` method so we\n    // use the prototype version instead.\n\n    evented(this);\n    delete this.trigger;\n    stateful(this, this.constructor.defaultState);\n    markPluginAsActive(player, this.name); // Auto-bind the dispose method so we can use it as a listener and unbind\n    // it later easily.\n\n    this.dispose = bind(this, this.dispose); // If the player is disposed, dispose the plugin.\n\n    player.on('dispose', this.dispose);\n  }\n  /**\n   * Get the version of the plugin that was set on <pluginName>.VERSION\n   */\n\n\n  var _proto = Plugin.prototype;\n\n  _proto.version = function version() {\n    return this.constructor.VERSION;\n  }\n  /**\n   * Each event triggered by plugins includes a hash of additional data with\n   * conventional properties.\n   *\n   * This returns that object or mutates an existing hash.\n   *\n   * @param   {Object} [hash={}]\n   *          An object to be used as event an event hash.\n   *\n   * @return {Plugin~PluginEventHash}\n   *          An event hash object with provided properties mixed-in.\n   */\n  ;\n\n  _proto.getEventHash = function getEventHash(hash) {\n    if (hash === void 0) {\n      hash = {};\n    }\n\n    hash.name = this.name;\n    hash.plugin = this.constructor;\n    hash.instance = this;\n    return hash;\n  }\n  /**\n   * Triggers an event on the plugin object and overrides\n   * {@link module:evented~EventedMixin.trigger|EventedMixin.trigger}.\n   *\n   * @param   {string|Object} event\n   *          An event type or an object with a type property.\n   *\n   * @param   {Object} [hash={}]\n   *          Additional data hash to merge with a\n   *          {@link Plugin~PluginEventHash|PluginEventHash}.\n   *\n   * @return {boolean}\n   *          Whether or not default was prevented.\n   */\n  ;\n\n  _proto.trigger = function trigger$$1(event, hash) {\n    if (hash === void 0) {\n      hash = {};\n    }\n\n    return trigger(this.eventBusEl_, event, this.getEventHash(hash));\n  }\n  /**\n   * Handles \"statechanged\" events on the plugin. No-op by default, override by\n   * subclassing.\n   *\n   * @abstract\n   * @param    {Event} e\n   *           An event object provided by a \"statechanged\" event.\n   *\n   * @param    {Object} e.changes\n   *           An object describing changes that occurred with the \"statechanged\"\n   *           event.\n   */\n  ;\n\n  _proto.handleStateChanged = function handleStateChanged(e) {}\n  /**\n   * Disposes a plugin.\n   *\n   * Subclasses can override this if they want, but for the sake of safety,\n   * it's probably best to subscribe the \"dispose\" event.\n   *\n   * @fires Plugin#dispose\n   */\n  ;\n\n  _proto.dispose = function dispose() {\n    var name = this.name,\n        player = this.player;\n    /**\n     * Signals that a advanced plugin is about to be disposed.\n     *\n     * @event Plugin#dispose\n     * @type  {EventTarget~Event}\n     */\n\n    this.trigger('dispose');\n    this.off();\n    player.off('dispose', this.dispose); // Eliminate any possible sources of leaking memory by clearing up\n    // references between the player and the plugin instance and nulling out\n    // the plugin's state and replacing methods with a function that throws.\n\n    player[PLUGIN_CACHE_KEY][name] = false;\n    this.player = this.state = null; // Finally, replace the plugin name on the player with a new factory\n    // function, so that the plugin is ready to be set up again.\n\n    player[name] = createPluginFactory(name, pluginStorage[name]);\n  }\n  /**\n   * Determines if a plugin is a basic plugin (i.e. not a sub-class of `Plugin`).\n   *\n   * @param   {string|Function} plugin\n   *          If a string, matches the name of a plugin. If a function, will be\n   *          tested directly.\n   *\n   * @return {boolean}\n   *          Whether or not a plugin is a basic plugin.\n   */\n  ;\n\n  Plugin.isBasic = function isBasic(plugin) {\n    var p = typeof plugin === 'string' ? getPlugin(plugin) : plugin;\n    return typeof p === 'function' && !Plugin.prototype.isPrototypeOf(p.prototype);\n  }\n  /**\n   * Register a Video.js plugin.\n   *\n   * @param   {string} name\n   *          The name of the plugin to be registered. Must be a string and\n   *          must not match an existing plugin or a method on the `Player`\n   *          prototype.\n   *\n   * @param   {Function} plugin\n   *          A sub-class of `Plugin` or a function for basic plugins.\n   *\n   * @return {Function}\n   *          For advanced plugins, a factory function for that plugin. For\n   *          basic plugins, a wrapper function that initializes the plugin.\n   */\n  ;\n\n  Plugin.registerPlugin = function registerPlugin(name, plugin) {\n    if (typeof name !== 'string') {\n      throw new Error(\"Illegal plugin name, \\\"\" + name + \"\\\", must be a string, was \" + typeof name + \".\");\n    }\n\n    if (pluginExists(name)) {\n      log.warn(\"A plugin named \\\"\" + name + \"\\\" already exists. You may want to avoid re-registering plugins!\");\n    } else if (Player.prototype.hasOwnProperty(name)) {\n      throw new Error(\"Illegal plugin name, \\\"\" + name + \"\\\", cannot share a name with an existing player method!\");\n    }\n\n    if (typeof plugin !== 'function') {\n      throw new Error(\"Illegal plugin for \\\"\" + name + \"\\\", must be a function, was \" + typeof plugin + \".\");\n    }\n\n    pluginStorage[name] = plugin; // Add a player prototype method for all sub-classed plugins (but not for\n    // the base Plugin class).\n\n    if (name !== BASE_PLUGIN_NAME) {\n      if (Plugin.isBasic(plugin)) {\n        Player.prototype[name] = createBasicPlugin(name, plugin);\n      } else {\n        Player.prototype[name] = createPluginFactory(name, plugin);\n      }\n    }\n\n    return plugin;\n  }\n  /**\n   * De-register a Video.js plugin.\n   *\n   * @param  {string} name\n   *         The name of the plugin to be de-registered. Must be a string that\n   *         matches an existing plugin.\n   *\n   * @throws {Error}\n   *         If an attempt is made to de-register the base plugin.\n   */\n  ;\n\n  Plugin.deregisterPlugin = function deregisterPlugin(name) {\n    if (name === BASE_PLUGIN_NAME) {\n      throw new Error('Cannot de-register base plugin.');\n    }\n\n    if (pluginExists(name)) {\n      delete pluginStorage[name];\n      delete Player.prototype[name];\n    }\n  }\n  /**\n   * Gets an object containing multiple Video.js plugins.\n   *\n   * @param   {Array} [names]\n   *          If provided, should be an array of plugin names. Defaults to _all_\n   *          plugin names.\n   *\n   * @return {Object|undefined}\n   *          An object containing plugin(s) associated with their name(s) or\n   *          `undefined` if no matching plugins exist).\n   */\n  ;\n\n  Plugin.getPlugins = function getPlugins(names) {\n    if (names === void 0) {\n      names = Object.keys(pluginStorage);\n    }\n\n    var result;\n    names.forEach(function (name) {\n      var plugin = getPlugin(name);\n\n      if (plugin) {\n        result = result || {};\n        result[name] = plugin;\n      }\n    });\n    return result;\n  }\n  /**\n   * Gets a plugin's version, if available\n   *\n   * @param   {string} name\n   *          The name of a plugin.\n   *\n   * @return {string}\n   *          The plugin's version or an empty string.\n   */\n  ;\n\n  Plugin.getPluginVersion = function getPluginVersion(name) {\n    var plugin = getPlugin(name);\n    return plugin && plugin.VERSION || '';\n  };\n\n  return Plugin;\n}();\n/**\n * Gets a plugin by name if it exists.\n *\n * @static\n * @method   getPlugin\n * @memberOf Plugin\n * @param    {string} name\n *           The name of a plugin.\n *\n * @returns  {Function|undefined}\n *           The plugin (or `undefined`).\n */\n\n\nPlugin.getPlugin = getPlugin;\n/**\n * The name of the base plugin class as it is registered.\n *\n * @type {string}\n */\n\nPlugin.BASE_PLUGIN_NAME = BASE_PLUGIN_NAME;\nPlugin.registerPlugin(BASE_PLUGIN_NAME, Plugin);\n/**\n * Documented in player.js\n *\n * @ignore\n */\n\nPlayer.prototype.usingPlugin = function (name) {\n  return !!this[PLUGIN_CACHE_KEY] && this[PLUGIN_CACHE_KEY][name] === true;\n};\n/**\n * Documented in player.js\n *\n * @ignore\n */\n\n\nPlayer.prototype.hasPlugin = function (name) {\n  return !!pluginExists(name);\n};\n/**\n * Signals that a plugin is about to be set up on a player.\n *\n * @event    Player#beforepluginsetup\n * @type     {Plugin~PluginEventHash}\n */\n\n/**\n * Signals that a plugin is about to be set up on a player - by name. The name\n * is the name of the plugin.\n *\n * @event    Player#beforepluginsetup:$name\n * @type     {Plugin~PluginEventHash}\n */\n\n/**\n * Signals that a plugin has just been set up on a player.\n *\n * @event    Player#pluginsetup\n * @type     {Plugin~PluginEventHash}\n */\n\n/**\n * Signals that a plugin has just been set up on a player - by name. The name\n * is the name of the plugin.\n *\n * @event    Player#pluginsetup:$name\n * @type     {Plugin~PluginEventHash}\n */\n\n/**\n * @typedef  {Object} Plugin~PluginEventHash\n *\n * @property {string} instance\n *           For basic plugins, the return value of the plugin function. For\n *           advanced plugins, the plugin instance on which the event is fired.\n *\n * @property {string} name\n *           The name of the plugin.\n *\n * @property {string} plugin\n *           For basic plugins, the plugin function. For advanced plugins, the\n *           plugin class/constructor.\n */\n\n/**\n * @file extend.js\n * @module extend\n */\n\n/**\n * A combination of node inherits and babel's inherits (after transpile).\n * Both work the same but node adds `super_` to the subClass\n * and Bable adds the superClass as __proto__. Both seem useful.\n *\n * @param {Object} subClass\n *        The class to inherit to\n *\n * @param {Object} superClass\n *        The class to inherit from\n *\n * @private\n */\nvar _inherits$1 = function _inherits(subClass, superClass) {\n  if (typeof superClass !== 'function' && superClass !== null) {\n    throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    // node\n    subClass.super_ = superClass;\n  }\n};\n/**\n * Used to subclass an existing class by emulating ES subclassing using the\n * `extends` keyword.\n *\n * @function\n * @example\n * var MyComponent = videojs.extend(videojs.getComponent('Component'), {\n *   myCustomMethod: function() {\n *     // Do things in my method.\n *   }\n * });\n *\n * @param    {Function} superClass\n *           The class to inherit from\n *\n * @param    {Object}   [subClassMethods={}]\n *           Methods of the new class\n *\n * @return   {Function}\n *           The new class with subClassMethods that inherited superClass.\n */\n\n\nvar extend = function extend(superClass, subClassMethods) {\n  if (subClassMethods === void 0) {\n    subClassMethods = {};\n  }\n\n  var subClass = function subClass() {\n    superClass.apply(this, arguments);\n  };\n\n  var methods = {};\n\n  if (typeof subClassMethods === 'object') {\n    if (subClassMethods.constructor !== Object.prototype.constructor) {\n      subClass = subClassMethods.constructor;\n    }\n\n    methods = subClassMethods;\n  } else if (typeof subClassMethods === 'function') {\n    subClass = subClassMethods;\n  }\n\n  _inherits$1(subClass, superClass); // Extend subObj's prototype with functions and other properties from props\n\n\n  for (var name in methods) {\n    if (methods.hasOwnProperty(name)) {\n      subClass.prototype[name] = methods[name];\n    }\n  }\n\n  return subClass;\n};\n\n/**\n * @file video.js\n * @module videojs\n */\n/**\n * Normalize an `id` value by trimming off a leading `#`\n *\n * @private\n * @param   {string} id\n *          A string, maybe with a leading `#`.\n *\n * @return {string}\n *          The string, without any leading `#`.\n */\n\nvar normalizeId = function normalizeId(id) {\n  return id.indexOf('#') === 0 ? id.slice(1) : id;\n};\n/**\n * The `videojs()` function doubles as the main function for users to create a\n * {@link Player} instance as well as the main library namespace.\n *\n * It can also be used as a getter for a pre-existing {@link Player} instance.\n * However, we _strongly_ recommend using `videojs.getPlayer()` for this\n * purpose because it avoids any potential for unintended initialization.\n *\n * Due to [limitations](https://github.com/jsdoc3/jsdoc/issues/955#issuecomment-313829149)\n * of our JSDoc template, we cannot properly document this as both a function\n * and a namespace, so its function signature is documented here.\n *\n * #### Arguments\n * ##### id\n * string|Element, **required**\n *\n * Video element or video element ID.\n *\n * ##### options\n * Object, optional\n *\n * Options object for providing settings.\n * See: [Options Guide](https://docs.videojs.com/tutorial-options.html).\n *\n * ##### ready\n * {@link Component~ReadyCallback}, optional\n *\n * A function to be called when the {@link Player} and {@link Tech} are ready.\n *\n * #### Return Value\n *\n * The `videojs()` function returns a {@link Player} instance.\n *\n * @namespace\n *\n * @borrows AudioTrack as AudioTrack\n * @borrows Component.getComponent as getComponent\n * @borrows module:computed-style~computedStyle as computedStyle\n * @borrows module:events.on as on\n * @borrows module:events.one as one\n * @borrows module:events.off as off\n * @borrows module:events.trigger as trigger\n * @borrows EventTarget as EventTarget\n * @borrows module:extend~extend as extend\n * @borrows module:fn.bind as bind\n * @borrows module:format-time.formatTime as formatTime\n * @borrows module:format-time.resetFormatTime as resetFormatTime\n * @borrows module:format-time.setFormatTime as setFormatTime\n * @borrows module:merge-options.mergeOptions as mergeOptions\n * @borrows module:middleware.use as use\n * @borrows Player.players as players\n * @borrows Plugin.registerPlugin as registerPlugin\n * @borrows Plugin.deregisterPlugin as deregisterPlugin\n * @borrows Plugin.getPlugins as getPlugins\n * @borrows Plugin.getPlugin as getPlugin\n * @borrows Plugin.getPluginVersion as getPluginVersion\n * @borrows Tech.getTech as getTech\n * @borrows Tech.registerTech as registerTech\n * @borrows TextTrack as TextTrack\n * @borrows module:time-ranges.createTimeRanges as createTimeRange\n * @borrows module:time-ranges.createTimeRanges as createTimeRanges\n * @borrows module:url.isCrossOrigin as isCrossOrigin\n * @borrows module:url.parseUrl as parseUrl\n * @borrows VideoTrack as VideoTrack\n *\n * @param  {string|Element} id\n *         Video element or video element ID.\n *\n * @param  {Object} [options]\n *         Options object for providing settings.\n *         See: [Options Guide](https://docs.videojs.com/tutorial-options.html).\n *\n * @param  {Component~ReadyCallback} [ready]\n *         A function to be called when the {@link Player} and {@link Tech} are\n *         ready.\n *\n * @return {Player}\n *         The `videojs()` function returns a {@link Player|Player} instance.\n */\n\n\nfunction videojs$1(id, options, ready) {\n  var player = videojs$1.getPlayer(id);\n\n  if (player) {\n    if (options) {\n      log.warn(\"Player \\\"\" + id + \"\\\" is already initialised. Options will not be applied.\");\n    }\n\n    if (ready) {\n      player.ready(ready);\n    }\n\n    return player;\n  }\n\n  var el = typeof id === 'string' ? $('#' + normalizeId(id)) : id;\n\n  if (!isEl(el)) {\n    throw new TypeError('The element or ID supplied is not valid. (videojs)');\n  } // document.body.contains(el) will only check if el is contained within that one document.\n  // This causes problems for elements in iframes.\n  // Instead, use the element's ownerDocument instead of the global document.\n  // This will make sure that the element is indeed in the dom of that document.\n  // Additionally, check that the document in question has a default view.\n  // If the document is no longer attached to the dom, the defaultView of the document will be null.\n\n\n  if (!el.ownerDocument.defaultView || !el.ownerDocument.body.contains(el)) {\n    log.warn('The element supplied is not included in the DOM');\n  }\n\n  options = options || {};\n  videojs$1.hooks('beforesetup').forEach(function (hookFunction) {\n    var opts = hookFunction(el, mergeOptions(options));\n\n    if (!isObject(opts) || Array.isArray(opts)) {\n      log.error('please return an object in beforesetup hooks');\n      return;\n    }\n\n    options = mergeOptions(options, opts);\n  }); // We get the current \"Player\" component here in case an integration has\n  // replaced it with a custom player.\n\n  var PlayerComponent = Component.getComponent('Player');\n  player = new PlayerComponent(el, options, ready);\n  videojs$1.hooks('setup').forEach(function (hookFunction) {\n    return hookFunction(player);\n  });\n  return player;\n}\n/**\n * An Object that contains lifecycle hooks as keys which point to an array\n * of functions that are run when a lifecycle is triggered\n *\n * @private\n */\n\n\nvideojs$1.hooks_ = {};\n/**\n * Get a list of hooks for a specific lifecycle\n *\n * @param  {string} type\n *         the lifecyle to get hooks from\n *\n * @param  {Function|Function[]} [fn]\n *         Optionally add a hook (or hooks) to the lifecycle that your are getting.\n *\n * @return {Array}\n *         an array of hooks, or an empty array if there are none.\n */\n\nvideojs$1.hooks = function (type, fn) {\n  videojs$1.hooks_[type] = videojs$1.hooks_[type] || [];\n\n  if (fn) {\n    videojs$1.hooks_[type] = videojs$1.hooks_[type].concat(fn);\n  }\n\n  return videojs$1.hooks_[type];\n};\n/**\n * Add a function hook to a specific videojs lifecycle.\n *\n * @param {string} type\n *        the lifecycle to hook the function to.\n *\n * @param {Function|Function[]}\n *        The function or array of functions to attach.\n */\n\n\nvideojs$1.hook = function (type, fn) {\n  videojs$1.hooks(type, fn);\n};\n/**\n * Add a function hook that will only run once to a specific videojs lifecycle.\n *\n * @param {string} type\n *        the lifecycle to hook the function to.\n *\n * @param {Function|Function[]}\n *        The function or array of functions to attach.\n */\n\n\nvideojs$1.hookOnce = function (type, fn) {\n  videojs$1.hooks(type, [].concat(fn).map(function (original) {\n    var wrapper = function wrapper() {\n      videojs$1.removeHook(type, wrapper);\n      return original.apply(void 0, arguments);\n    };\n\n    return wrapper;\n  }));\n};\n/**\n * Remove a hook from a specific videojs lifecycle.\n *\n * @param  {string} type\n *         the lifecycle that the function hooked to\n *\n * @param  {Function} fn\n *         The hooked function to remove\n *\n * @return {boolean}\n *         The function that was removed or undef\n */\n\n\nvideojs$1.removeHook = function (type, fn) {\n  var index = videojs$1.hooks(type).indexOf(fn);\n\n  if (index <= -1) {\n    return false;\n  }\n\n  videojs$1.hooks_[type] = videojs$1.hooks_[type].slice();\n  videojs$1.hooks_[type].splice(index, 1);\n  return true;\n}; // Add default styles\n\n\nif (window$1.VIDEOJS_NO_DYNAMIC_STYLE !== true && isReal()) {\n  var style$1 = $('.vjs-styles-defaults');\n\n  if (!style$1) {\n    style$1 = createStyleElement('vjs-styles-defaults');\n    var head = $('head');\n\n    if (head) {\n      head.insertBefore(style$1, head.firstChild);\n    }\n\n    setTextContent(style$1, \"\\n      .video-js {\\n        width: 300px;\\n        height: 150px;\\n      }\\n\\n      .vjs-fluid {\\n        padding-top: 56.25%\\n      }\\n    \");\n  }\n} // Run Auto-load players\n// You have to wait at least once in case this script is loaded after your\n// video in the DOM (weird behavior only with minified version)\n\n\nautoSetupTimeout(1, videojs$1);\n/**\n * Current Video.js version. Follows [semantic versioning](https://semver.org/).\n *\n * @type {string}\n */\n\nvideojs$1.VERSION = version;\n/**\n * The global options object. These are the settings that take effect\n * if no overrides are specified when the player is created.\n *\n * @type {Object}\n */\n\nvideojs$1.options = Player.prototype.options_;\n/**\n * Get an object with the currently created players, keyed by player ID\n *\n * @return {Object}\n *         The created players\n */\n\nvideojs$1.getPlayers = function () {\n  return Player.players;\n};\n/**\n * Get a single player based on an ID or DOM element.\n *\n * This is useful if you want to check if an element or ID has an associated\n * Video.js player, but not create one if it doesn't.\n *\n * @param   {string|Element} id\n *          An HTML element - `<video>`, `<audio>`, or `<video-js>` -\n *          or a string matching the `id` of such an element.\n *\n * @return {Player|undefined}\n *          A player instance or `undefined` if there is no player instance\n *          matching the argument.\n */\n\n\nvideojs$1.getPlayer = function (id) {\n  var players = Player.players;\n  var tag;\n\n  if (typeof id === 'string') {\n    var nId = normalizeId(id);\n    var player = players[nId];\n\n    if (player) {\n      return player;\n    }\n\n    tag = $('#' + nId);\n  } else {\n    tag = id;\n  }\n\n  if (isEl(tag)) {\n    var _tag = tag,\n        _player = _tag.player,\n        playerId = _tag.playerId; // Element may have a `player` property referring to an already created\n    // player instance. If so, return that.\n\n    if (_player || players[playerId]) {\n      return _player || players[playerId];\n    }\n  }\n};\n/**\n * Returns an array of all current players.\n *\n * @return {Array}\n *         An array of all players. The array will be in the order that\n *         `Object.keys` provides, which could potentially vary between\n *         JavaScript engines.\n *\n */\n\n\nvideojs$1.getAllPlayers = function () {\n  return (// Disposed players leave a key with a `null` value, so we need to make sure\n    // we filter those out.\n    Object.keys(Player.players).map(function (k) {\n      return Player.players[k];\n    }).filter(Boolean)\n  );\n};\n\nvideojs$1.players = Player.players;\nvideojs$1.getComponent = Component.getComponent;\n/**\n * Register a component so it can referred to by name. Used when adding to other\n * components, either through addChild `component.addChild('myComponent')` or through\n * default children options  `{ children: ['myComponent'] }`.\n *\n * > NOTE: You could also just initialize the component before adding.\n * `component.addChild(new MyComponent());`\n *\n * @param {string} name\n *        The class name of the component\n *\n * @param {Component} comp\n *        The component class\n *\n * @return {Component}\n *         The newly registered component\n */\n\nvideojs$1.registerComponent = function (name$$1, comp) {\n  if (Tech.isTech(comp)) {\n    log.warn(\"The \" + name$$1 + \" tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)\");\n  }\n\n  Component.registerComponent.call(Component, name$$1, comp);\n};\n\nvideojs$1.getTech = Tech.getTech;\nvideojs$1.registerTech = Tech.registerTech;\nvideojs$1.use = use;\n/**\n * An object that can be returned by a middleware to signify\n * that the middleware is being terminated.\n *\n * @type {object}\n * @property {object} middleware.TERMINATOR\n */\n\nObject.defineProperty(videojs$1, 'middleware', {\n  value: {},\n  writeable: false,\n  enumerable: true\n});\nObject.defineProperty(videojs$1.middleware, 'TERMINATOR', {\n  value: TERMINATOR,\n  writeable: false,\n  enumerable: true\n});\n/**\n * A reference to the {@link module:browser|browser utility module} as an object.\n *\n * @type {Object}\n * @see  {@link module:browser|browser}\n */\n\nvideojs$1.browser = browser;\n/**\n * Use {@link module:browser.TOUCH_ENABLED|browser.TOUCH_ENABLED} instead; only\n * included for backward-compatibility with 4.x.\n *\n * @deprecated Since version 5.0, use {@link module:browser.TOUCH_ENABLED|browser.TOUCH_ENABLED instead.\n * @type {boolean}\n */\n\nvideojs$1.TOUCH_ENABLED = TOUCH_ENABLED;\nvideojs$1.extend = extend;\nvideojs$1.mergeOptions = mergeOptions;\nvideojs$1.bind = bind;\nvideojs$1.registerPlugin = Plugin.registerPlugin;\nvideojs$1.deregisterPlugin = Plugin.deregisterPlugin;\n/**\n * Deprecated method to register a plugin with Video.js\n *\n * @deprecated videojs.plugin() is deprecated; use videojs.registerPlugin() instead\n *\n * @param {string} name\n *        The plugin name\n *\n * @param {Plugin|Function} plugin\n *         The plugin sub-class or function\n */\n\nvideojs$1.plugin = function (name$$1, plugin) {\n  log.warn('videojs.plugin() is deprecated; use videojs.registerPlugin() instead');\n  return Plugin.registerPlugin(name$$1, plugin);\n};\n\nvideojs$1.getPlugins = Plugin.getPlugins;\nvideojs$1.getPlugin = Plugin.getPlugin;\nvideojs$1.getPluginVersion = Plugin.getPluginVersion;\n/**\n * Adding languages so that they're available to all players.\n * Example: `videojs.addLanguage('es', { 'Hello': 'Hola' });`\n *\n * @param {string} code\n *        The language code or dictionary property\n *\n * @param {Object} data\n *        The data values to be translated\n *\n * @return {Object}\n *         The resulting language dictionary object\n */\n\nvideojs$1.addLanguage = function (code, data) {\n  var _mergeOptions;\n\n  code = ('' + code).toLowerCase();\n  videojs$1.options.languages = mergeOptions(videojs$1.options.languages, (_mergeOptions = {}, _mergeOptions[code] = data, _mergeOptions));\n  return videojs$1.options.languages[code];\n};\n/**\n * A reference to the {@link module:log|log utility module} as an object.\n *\n * @type {Function}\n * @see  {@link module:log|log}\n */\n\n\nvideojs$1.log = log;\nvideojs$1.createLogger = createLogger$1;\nvideojs$1.createTimeRange = videojs$1.createTimeRanges = createTimeRanges;\nvideojs$1.formatTime = formatTime;\nvideojs$1.setFormatTime = setFormatTime;\nvideojs$1.resetFormatTime = resetFormatTime;\nvideojs$1.parseUrl = parseUrl;\nvideojs$1.isCrossOrigin = isCrossOrigin;\nvideojs$1.EventTarget = EventTarget;\nvideojs$1.on = on;\nvideojs$1.one = one;\nvideojs$1.off = off;\nvideojs$1.trigger = trigger;\n/**\n * A cross-browser XMLHttpRequest wrapper.\n *\n * @function\n * @param    {Object} options\n *           Settings for the request.\n *\n * @return   {XMLHttpRequest|XDomainRequest}\n *           The request object.\n *\n * @see      https://github.com/Raynos/xhr\n */\n\nvideojs$1.xhr = xhr;\nvideojs$1.TextTrack = TextTrack;\nvideojs$1.AudioTrack = AudioTrack;\nvideojs$1.VideoTrack = VideoTrack;\n['isEl', 'isTextNode', 'createEl', 'hasClass', 'addClass', 'removeClass', 'toggleClass', 'setAttributes', 'getAttributes', 'emptyEl', 'appendContent', 'insertContent'].forEach(function (k) {\n  videojs$1[k] = function () {\n    log.warn(\"videojs.\" + k + \"() is deprecated; use videojs.dom.\" + k + \"() instead\");\n    return Dom[k].apply(null, arguments);\n  };\n});\nvideojs$1.computedStyle = computedStyle;\n/**\n * A reference to the {@link module:dom|DOM utility module} as an object.\n *\n * @type {Object}\n * @see  {@link module:dom|dom}\n */\n\nvideojs$1.dom = Dom;\n/**\n * A reference to the {@link module:url|URL utility module} as an object.\n *\n * @type {Object}\n * @see  {@link module:url|url}\n */\n\nvideojs$1.url = Url;\n\n/**\n * @videojs/http-streaming\n * @version 1.9.3\n * @copyright 2019 Brightcove, Inc\n * @license Apache-2.0\n */\n/**\n * @file resolve-url.js - Handling how URLs are resolved and manipulated\n */\n\nvar resolveUrl = function resolveUrl(baseURL, relativeURL) {\n  // return early if we don't need to resolve\n  if (/^[a-z]+:/i.test(relativeURL)) {\n    return relativeURL;\n  } // if the base URL is relative then combine with the current location\n\n\n  if (!/\\/\\//i.test(baseURL)) {\n    baseURL = URLToolkit.buildAbsoluteURL(window$1.location.href, baseURL);\n  }\n\n  return URLToolkit.buildAbsoluteURL(baseURL, relativeURL);\n};\n/**\n * Checks whether xhr request was redirected and returns correct url depending\n * on `handleManifestRedirects` option\n *\n * @api private\n *\n * @param  {String} url - an url being requested\n * @param  {XMLHttpRequest} req - xhr request result\n *\n * @return {String}\n */\n\n\nvar resolveManifestRedirect = function resolveManifestRedirect(handleManifestRedirect, url, req) {\n  // To understand how the responseURL below is set and generated:\n  // - https://fetch.spec.whatwg.org/#concept-response-url\n  // - https://fetch.spec.whatwg.org/#atomic-http-redirect-handling\n  if (handleManifestRedirect && req.responseURL && url !== req.responseURL) {\n    return req.responseURL;\n  }\n\n  return url;\n};\n\nvar classCallCheck = function classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar get$1 = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nvar inherits = function inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n/**\n * @file playlist-loader.js\n *\n * A state machine that manages the loading, caching, and updating of\n * M3U8 playlists.\n *\n */\n\n\nvar mergeOptions$1 = videojs$1.mergeOptions,\n    EventTarget$1 = videojs$1.EventTarget,\n    log$1 = videojs$1.log;\n/**\n * Loops through all supported media groups in master and calls the provided\n * callback for each group\n *\n * @param {Object} master\n *        The parsed master manifest object\n * @param {Function} callback\n *        Callback to call for each media group\n */\n\nvar forEachMediaGroup = function forEachMediaGroup(master, callback) {\n  ['AUDIO', 'SUBTITLES'].forEach(function (mediaType) {\n    for (var groupKey in master.mediaGroups[mediaType]) {\n      for (var labelKey in master.mediaGroups[mediaType][groupKey]) {\n        var mediaProperties = master.mediaGroups[mediaType][groupKey][labelKey];\n        callback(mediaProperties, mediaType, groupKey, labelKey);\n      }\n    }\n  });\n};\n/**\n  * Returns a new array of segments that is the result of merging\n  * properties from an older list of segments onto an updated\n  * list. No properties on the updated playlist will be overridden.\n  *\n  * @param {Array} original the outdated list of segments\n  * @param {Array} update the updated list of segments\n  * @param {Number=} offset the index of the first update\n  * segment in the original segment list. For non-live playlists,\n  * this should always be zero and does not need to be\n  * specified. For live playlists, it should be the difference\n  * between the media sequence numbers in the original and updated\n  * playlists.\n  * @return a list of merged segment objects\n  */\n\n\nvar updateSegments = function updateSegments(original, update, offset) {\n  var result = update.slice();\n  offset = offset || 0;\n  var length = Math.min(original.length, update.length + offset);\n\n  for (var i = offset; i < length; i++) {\n    result[i - offset] = mergeOptions$1(original[i], result[i - offset]);\n  }\n\n  return result;\n};\n\nvar resolveSegmentUris = function resolveSegmentUris(segment, baseUri) {\n  if (!segment.resolvedUri) {\n    segment.resolvedUri = resolveUrl(baseUri, segment.uri);\n  }\n\n  if (segment.key && !segment.key.resolvedUri) {\n    segment.key.resolvedUri = resolveUrl(baseUri, segment.key.uri);\n  }\n\n  if (segment.map && !segment.map.resolvedUri) {\n    segment.map.resolvedUri = resolveUrl(baseUri, segment.map.uri);\n  }\n};\n/**\n  * Returns a new master playlist that is the result of merging an\n  * updated media playlist into the original version. If the\n  * updated media playlist does not match any of the playlist\n  * entries in the original master playlist, null is returned.\n  *\n  * @param {Object} master a parsed master M3U8 object\n  * @param {Object} media a parsed media M3U8 object\n  * @return {Object} a new object that represents the original\n  * master playlist with the updated media playlist merged in, or\n  * null if the merge produced no change.\n  */\n\n\nvar updateMaster = function updateMaster(master, media) {\n  var result = mergeOptions$1(master, {});\n  var playlist = result.playlists[media.uri];\n\n  if (!playlist) {\n    return null;\n  } // consider the playlist unchanged if the number of segments is equal, the media\n  // sequence number is unchanged, and this playlist hasn't become the end of the playlist\n\n\n  if (playlist.segments && media.segments && playlist.segments.length === media.segments.length && playlist.endList === media.endList && playlist.mediaSequence === media.mediaSequence) {\n    return null;\n  }\n\n  var mergedPlaylist = mergeOptions$1(playlist, media); // if the update could overlap existing segment information, merge the two segment lists\n\n  if (playlist.segments) {\n    mergedPlaylist.segments = updateSegments(playlist.segments, media.segments, media.mediaSequence - playlist.mediaSequence);\n  } // resolve any segment URIs to prevent us from having to do it later\n\n\n  mergedPlaylist.segments.forEach(function (segment) {\n    resolveSegmentUris(segment, mergedPlaylist.resolvedUri);\n  }); // TODO Right now in the playlists array there are two references to each playlist, one\n  // that is referenced by index, and one by URI. The index reference may no longer be\n  // necessary.\n\n  for (var i = 0; i < result.playlists.length; i++) {\n    if (result.playlists[i].uri === media.uri) {\n      result.playlists[i] = mergedPlaylist;\n    }\n  }\n\n  result.playlists[media.uri] = mergedPlaylist;\n  return result;\n};\n\nvar setupMediaPlaylists = function setupMediaPlaylists(master) {\n  // setup by-URI lookups and resolve media playlist URIs\n  var i = master.playlists.length;\n\n  while (i--) {\n    var playlist = master.playlists[i];\n    master.playlists[playlist.uri] = playlist;\n    playlist.resolvedUri = resolveUrl(master.uri, playlist.uri);\n    playlist.id = i;\n\n    if (!playlist.attributes) {\n      // Although the spec states an #EXT-X-STREAM-INF tag MUST have a\n      // BANDWIDTH attribute, we can play the stream without it. This means a poorly\n      // formatted master playlist may not have an attribute list. An attributes\n      // property is added here to prevent undefined references when we encounter\n      // this scenario.\n      playlist.attributes = {};\n      log$1.warn('Invalid playlist STREAM-INF detected. Missing BANDWIDTH attribute.');\n    }\n  }\n};\n\nvar resolveMediaGroupUris = function resolveMediaGroupUris(master) {\n  forEachMediaGroup(master, function (properties) {\n    if (properties.uri) {\n      properties.resolvedUri = resolveUrl(master.uri, properties.uri);\n    }\n  });\n};\n/**\n * Calculates the time to wait before refreshing a live playlist\n *\n * @param {Object} media\n *        The current media\n * @param {Boolean} update\n *        True if there were any updates from the last refresh, false otherwise\n * @return {Number}\n *         The time in ms to wait before refreshing the live playlist\n */\n\n\nvar refreshDelay = function refreshDelay(media, update) {\n  var lastSegment = media.segments[media.segments.length - 1];\n  var delay = void 0;\n\n  if (update && lastSegment && lastSegment.duration) {\n    delay = lastSegment.duration * 1000;\n  } else {\n    // if the playlist is unchanged since the last reload or last segment duration\n    // cannot be determined, try again after half the target duration\n    delay = (media.targetDuration || 10) * 500;\n  }\n\n  return delay;\n};\n/**\n * Load a playlist from a remote location\n *\n * @class PlaylistLoader\n * @extends Stream\n * @param {String} srcUrl the url to start with\n * @param {Boolean} withCredentials the withCredentials xhr option\n * @constructor\n */\n\n\nvar PlaylistLoader = function (_EventTarget) {\n  inherits(PlaylistLoader, _EventTarget);\n\n  function PlaylistLoader(srcUrl, hls) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    classCallCheck(this, PlaylistLoader);\n\n    var _this = possibleConstructorReturn(this, (PlaylistLoader.__proto__ || Object.getPrototypeOf(PlaylistLoader)).call(this));\n\n    var _options$withCredenti = options.withCredentials,\n        withCredentials = _options$withCredenti === undefined ? false : _options$withCredenti,\n        _options$handleManife = options.handleManifestRedirects,\n        handleManifestRedirects = _options$handleManife === undefined ? false : _options$handleManife;\n    _this.srcUrl = srcUrl;\n    _this.hls_ = hls;\n    _this.withCredentials = withCredentials;\n    _this.handleManifestRedirects = handleManifestRedirects;\n    var hlsOptions = hls.options_;\n    _this.customTagParsers = hlsOptions && hlsOptions.customTagParsers || [];\n    _this.customTagMappers = hlsOptions && hlsOptions.customTagMappers || [];\n\n    if (!_this.srcUrl) {\n      throw new Error('A non-empty playlist URL is required');\n    } // initialize the loader state\n\n\n    _this.state = 'HAVE_NOTHING'; // live playlist staleness timeout\n\n    _this.on('mediaupdatetimeout', function () {\n      if (_this.state !== 'HAVE_METADATA') {\n        // only refresh the media playlist if no other activity is going on\n        return;\n      }\n\n      _this.state = 'HAVE_CURRENT_METADATA';\n      _this.request = _this.hls_.xhr({\n        uri: resolveUrl(_this.master.uri, _this.media().uri),\n        withCredentials: _this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this.request) {\n          return;\n        }\n\n        if (error) {\n          return _this.playlistRequestError(_this.request, _this.media().uri, 'HAVE_METADATA');\n        }\n\n        _this.haveMetadata(_this.request, _this.media().uri);\n      });\n    });\n\n    return _this;\n  }\n\n  createClass(PlaylistLoader, [{\n    key: 'playlistRequestError',\n    value: function playlistRequestError(xhr$$1, url, startingState) {\n      // any in-flight request is now finished\n      this.request = null;\n\n      if (startingState) {\n        this.state = startingState;\n      }\n\n      this.error = {\n        playlist: this.master.playlists[url],\n        status: xhr$$1.status,\n        message: 'HLS playlist request error at URL: ' + url,\n        responseText: xhr$$1.responseText,\n        code: xhr$$1.status >= 500 ? 4 : 2\n      };\n      this.trigger('error');\n    } // update the playlist loader's state in response to a new or\n    // updated playlist.\n\n  }, {\n    key: 'haveMetadata',\n    value: function haveMetadata(xhr$$1, url) {\n      var _this2 = this; // any in-flight request is now finished\n\n\n      this.request = null;\n      this.state = 'HAVE_METADATA';\n      var parser = new Parser(); // adding custom tag parsers\n\n      this.customTagParsers.forEach(function (customParser) {\n        return parser.addParser(customParser);\n      }); // adding custom tag mappers\n\n      this.customTagMappers.forEach(function (mapper) {\n        return parser.addTagMapper(mapper);\n      });\n      parser.push(xhr$$1.responseText);\n      parser.end();\n      parser.manifest.uri = url; // m3u8-parser does not attach an attributes property to media playlists so make\n      // sure that the property is attached to avoid undefined reference errors\n\n      parser.manifest.attributes = parser.manifest.attributes || {}; // merge this playlist into the master\n\n      var update = updateMaster(this.master, parser.manifest);\n      this.targetDuration = parser.manifest.targetDuration;\n\n      if (update) {\n        this.master = update;\n        this.media_ = this.master.playlists[parser.manifest.uri];\n      } else {\n        this.trigger('playlistunchanged');\n      } // refresh live playlists after a target duration passes\n\n\n      if (!this.media().endList) {\n        window$1.clearTimeout(this.mediaUpdateTimeout);\n        this.mediaUpdateTimeout = window$1.setTimeout(function () {\n          _this2.trigger('mediaupdatetimeout');\n        }, refreshDelay(this.media(), !!update));\n      }\n\n      this.trigger('loadedplaylist');\n    }\n    /**\n     * Abort any outstanding work and clean up.\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.stopRequest();\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n    }\n  }, {\n    key: 'stopRequest',\n    value: function stopRequest() {\n      if (this.request) {\n        var oldRequest = this.request;\n        this.request = null;\n        oldRequest.onreadystatechange = null;\n        oldRequest.abort();\n      }\n    }\n    /**\n     * When called without any arguments, returns the currently\n     * active media playlist. When called with a single argument,\n     * triggers the playlist loader to asynchronously switch to the\n     * specified media playlist. Calling this method while the\n     * loader is in the HAVE_NOTHING causes an error to be emitted\n     * but otherwise has no effect.\n     *\n     * @param {Object=} playlist the parsed media playlist\n     * object to switch to\n     * @return {Playlist} the current loaded media\n     */\n\n  }, {\n    key: 'media',\n    value: function media(playlist) {\n      var _this3 = this; // getter\n\n\n      if (!playlist) {\n        return this.media_;\n      } // setter\n\n\n      if (this.state === 'HAVE_NOTHING') {\n        throw new Error('Cannot switch media playlist from ' + this.state);\n      }\n\n      var startingState = this.state; // find the playlist object if the target playlist has been\n      // specified by URI\n\n      if (typeof playlist === 'string') {\n        if (!this.master.playlists[playlist]) {\n          throw new Error('Unknown playlist URI: ' + playlist);\n        }\n\n        playlist = this.master.playlists[playlist];\n      }\n\n      var mediaChange = !this.media_ || playlist.uri !== this.media_.uri; // switch to fully loaded playlists immediately\n\n      if (this.master.playlists[playlist.uri].endList) {\n        // abort outstanding playlist requests\n        if (this.request) {\n          this.request.onreadystatechange = null;\n          this.request.abort();\n          this.request = null;\n        }\n\n        this.state = 'HAVE_METADATA';\n        this.media_ = playlist; // trigger media change if the active media has been updated\n\n        if (mediaChange) {\n          this.trigger('mediachanging');\n          this.trigger('mediachange');\n        }\n\n        return;\n      } // switching to the active playlist is a no-op\n\n\n      if (!mediaChange) {\n        return;\n      }\n\n      this.state = 'SWITCHING_MEDIA'; // there is already an outstanding playlist request\n\n      if (this.request) {\n        if (playlist.resolvedUri === this.request.url) {\n          // requesting to switch to the same playlist multiple times\n          // has no effect after the first\n          return;\n        }\n\n        this.request.onreadystatechange = null;\n        this.request.abort();\n        this.request = null;\n      } // request the new playlist\n\n\n      if (this.media_) {\n        this.trigger('mediachanging');\n      }\n\n      this.request = this.hls_.xhr({\n        uri: playlist.resolvedUri,\n        withCredentials: this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this3.request) {\n          return;\n        }\n\n        playlist.resolvedUri = resolveManifestRedirect(_this3.handleManifestRedirects, playlist.resolvedUri, req);\n\n        if (error) {\n          return _this3.playlistRequestError(_this3.request, playlist.uri, startingState);\n        }\n\n        _this3.haveMetadata(req, playlist.uri); // fire loadedmetadata the first time a media playlist is loaded\n\n\n        if (startingState === 'HAVE_MASTER') {\n          _this3.trigger('loadedmetadata');\n        } else {\n          _this3.trigger('mediachange');\n        }\n      });\n    }\n    /**\n     * pause loading of the playlist\n     */\n\n  }, {\n    key: 'pause',\n    value: function pause() {\n      this.stopRequest();\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n\n      if (this.state === 'HAVE_NOTHING') {\n        // If we pause the loader before any data has been retrieved, its as if we never\n        // started, so reset to an unstarted state.\n        this.started = false;\n      } // Need to restore state now that no activity is happening\n\n\n      if (this.state === 'SWITCHING_MEDIA') {\n        // if the loader was in the process of switching media, it should either return to\n        // HAVE_MASTER or HAVE_METADATA depending on if the loader has loaded a media\n        // playlist yet. This is determined by the existence of loader.media_\n        if (this.media_) {\n          this.state = 'HAVE_METADATA';\n        } else {\n          this.state = 'HAVE_MASTER';\n        }\n      } else if (this.state === 'HAVE_CURRENT_METADATA') {\n        this.state = 'HAVE_METADATA';\n      }\n    }\n    /**\n     * start loading of the playlist\n     */\n\n  }, {\n    key: 'load',\n    value: function load(isFinalRendition) {\n      var _this4 = this;\n\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n      var media = this.media();\n\n      if (isFinalRendition) {\n        var delay = media ? media.targetDuration / 2 * 1000 : 5 * 1000;\n        this.mediaUpdateTimeout = window$1.setTimeout(function () {\n          return _this4.load();\n        }, delay);\n        return;\n      }\n\n      if (!this.started) {\n        this.start();\n        return;\n      }\n\n      if (media && !media.endList) {\n        this.trigger('mediaupdatetimeout');\n      } else {\n        this.trigger('loadedplaylist');\n      }\n    }\n    /**\n     * start loading of the playlist\n     */\n\n  }, {\n    key: 'start',\n    value: function start() {\n      var _this5 = this;\n\n      this.started = true; // request the specified URL\n\n      this.request = this.hls_.xhr({\n        uri: this.srcUrl,\n        withCredentials: this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this5.request) {\n          return;\n        } // clear the loader's request reference\n\n\n        _this5.request = null;\n\n        if (error) {\n          _this5.error = {\n            status: req.status,\n            message: 'HLS playlist request error at URL: ' + _this5.srcUrl,\n            responseText: req.responseText,\n            // MEDIA_ERR_NETWORK\n            code: 2\n          };\n\n          if (_this5.state === 'HAVE_NOTHING') {\n            _this5.started = false;\n          }\n\n          return _this5.trigger('error');\n        }\n\n        var parser = new Parser(); // adding custom tag parsers\n\n        _this5.customTagParsers.forEach(function (customParser) {\n          return parser.addParser(customParser);\n        }); // adding custom tag mappers\n\n\n        _this5.customTagMappers.forEach(function (mapper) {\n          return parser.addTagMapper(mapper);\n        });\n\n        parser.push(req.responseText);\n        parser.end();\n        _this5.state = 'HAVE_MASTER';\n        _this5.srcUrl = resolveManifestRedirect(_this5.handleManifestRedirects, _this5.srcUrl, req);\n        parser.manifest.uri = _this5.srcUrl; // loaded a master playlist\n\n        if (parser.manifest.playlists) {\n          _this5.master = parser.manifest;\n          setupMediaPlaylists(_this5.master);\n          resolveMediaGroupUris(_this5.master);\n\n          _this5.trigger('loadedplaylist');\n\n          if (!_this5.request) {\n            // no media playlist was specifically selected so start\n            // from the first listed one\n            _this5.media(parser.manifest.playlists[0]);\n          }\n\n          return;\n        } // loaded a media playlist\n        // infer a master playlist if none was previously requested\n\n\n        _this5.master = {\n          mediaGroups: {\n            'AUDIO': {},\n            'VIDEO': {},\n            'CLOSED-CAPTIONS': {},\n            'SUBTITLES': {}\n          },\n          uri: window$1.location.href,\n          playlists: [{\n            uri: _this5.srcUrl,\n            id: 0,\n            resolvedUri: _this5.srcUrl,\n            // m3u8-parser does not attach an attributes property to media playlists so make\n            // sure that the property is attached to avoid undefined reference errors\n            attributes: {}\n          }]\n        };\n        _this5.master.playlists[_this5.srcUrl] = _this5.master.playlists[0];\n\n        _this5.haveMetadata(req, _this5.srcUrl);\n\n        return _this5.trigger('loadedmetadata');\n      });\n    }\n  }]);\n  return PlaylistLoader;\n}(EventTarget$1);\n/**\n * @file playlist.js\n *\n * Playlist related utilities.\n */\n\n\nvar createTimeRange = videojs$1.createTimeRange;\n/**\n * walk backward until we find a duration we can use\n * or return a failure\n *\n * @param {Playlist} playlist the playlist to walk through\n * @param {Number} endSequence the mediaSequence to stop walking on\n */\n\nvar backwardDuration = function backwardDuration(playlist, endSequence) {\n  var result = 0;\n  var i = endSequence - playlist.mediaSequence; // if a start time is available for segment immediately following\n  // the interval, use it\n\n  var segment = playlist.segments[i]; // Walk backward until we find the latest segment with timeline\n  // information that is earlier than endSequence\n\n  if (segment) {\n    if (typeof segment.start !== 'undefined') {\n      return {\n        result: segment.start,\n        precise: true\n      };\n    }\n\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: segment.end - segment.duration,\n        precise: true\n      };\n    }\n  }\n\n  while (i--) {\n    segment = playlist.segments[i];\n\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: result + segment.end,\n        precise: true\n      };\n    }\n\n    result += segment.duration;\n\n    if (typeof segment.start !== 'undefined') {\n      return {\n        result: result + segment.start,\n        precise: true\n      };\n    }\n  }\n\n  return {\n    result: result,\n    precise: false\n  };\n};\n/**\n * walk forward until we find a duration we can use\n * or return a failure\n *\n * @param {Playlist} playlist the playlist to walk through\n * @param {Number} endSequence the mediaSequence to stop walking on\n */\n\n\nvar forwardDuration = function forwardDuration(playlist, endSequence) {\n  var result = 0;\n  var segment = void 0;\n  var i = endSequence - playlist.mediaSequence; // Walk forward until we find the earliest segment with timeline\n  // information\n\n  for (; i < playlist.segments.length; i++) {\n    segment = playlist.segments[i];\n\n    if (typeof segment.start !== 'undefined') {\n      return {\n        result: segment.start - result,\n        precise: true\n      };\n    }\n\n    result += segment.duration;\n\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: segment.end - result,\n        precise: true\n      };\n    }\n  } // indicate we didn't find a useful duration estimate\n\n\n  return {\n    result: -1,\n    precise: false\n  };\n};\n/**\n  * Calculate the media duration from the segments associated with a\n  * playlist. The duration of a subinterval of the available segments\n  * may be calculated by specifying an end index.\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number=} endSequence an exclusive upper boundary\n  * for the playlist.  Defaults to playlist length.\n  * @param {Number} expired the amount of time that has dropped\n  * off the front of the playlist in a live scenario\n  * @return {Number} the duration between the first available segment\n  * and end index.\n  */\n\n\nvar intervalDuration = function intervalDuration(playlist, endSequence, expired) {\n  var backward = void 0;\n  var forward = void 0;\n\n  if (typeof endSequence === 'undefined') {\n    endSequence = playlist.mediaSequence + playlist.segments.length;\n  }\n\n  if (endSequence < playlist.mediaSequence) {\n    return 0;\n  } // do a backward walk to estimate the duration\n\n\n  backward = backwardDuration(playlist, endSequence);\n\n  if (backward.precise) {\n    // if we were able to base our duration estimate on timing\n    // information provided directly from the Media Source, return\n    // it\n    return backward.result;\n  } // walk forward to see if a precise duration estimate can be made\n  // that way\n\n\n  forward = forwardDuration(playlist, endSequence);\n\n  if (forward.precise) {\n    // we found a segment that has been buffered and so it's\n    // position is known precisely\n    return forward.result;\n  } // return the less-precise, playlist-based duration estimate\n\n\n  return backward.result + expired;\n};\n/**\n  * Calculates the duration of a playlist. If a start and end index\n  * are specified, the duration will be for the subset of the media\n  * timeline between those two indices. The total duration for live\n  * playlists is always Infinity.\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number=} endSequence an exclusive upper\n  * boundary for the playlist. Defaults to the playlist media\n  * sequence number plus its length.\n  * @param {Number=} expired the amount of time that has\n  * dropped off the front of the playlist in a live scenario\n  * @return {Number} the duration between the start index and end\n  * index.\n  */\n\n\nvar duration = function duration(playlist, endSequence, expired) {\n  if (!playlist) {\n    return 0;\n  }\n\n  if (typeof expired !== 'number') {\n    expired = 0;\n  } // if a slice of the total duration is not requested, use\n  // playlist-level duration indicators when they're present\n\n\n  if (typeof endSequence === 'undefined') {\n    // if present, use the duration specified in the playlist\n    if (playlist.totalDuration) {\n      return playlist.totalDuration;\n    } // duration should be Infinity for live playlists\n\n\n    if (!playlist.endList) {\n      return window$1.Infinity;\n    }\n  } // calculate the total duration based on the segment durations\n\n\n  return intervalDuration(playlist, endSequence, expired);\n};\n/**\n  * Calculate the time between two indexes in the current playlist\n  * neight the start- nor the end-index need to be within the current\n  * playlist in which case, the targetDuration of the playlist is used\n  * to approximate the durations of the segments\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number} startIndex\n  * @param {Number} endIndex\n  * @return {Number} the number of seconds between startIndex and endIndex\n  */\n\n\nvar sumDurations = function sumDurations(playlist, startIndex, endIndex) {\n  var durations = 0;\n\n  if (startIndex > endIndex) {\n    var _ref = [endIndex, startIndex];\n    startIndex = _ref[0];\n    endIndex = _ref[1];\n  }\n\n  if (startIndex < 0) {\n    for (var i = startIndex; i < Math.min(0, endIndex); i++) {\n      durations += playlist.targetDuration;\n    }\n\n    startIndex = 0;\n  }\n\n  for (var _i = startIndex; _i < endIndex; _i++) {\n    durations += playlist.segments[_i].duration;\n  }\n\n  return durations;\n};\n/**\n * Determines the media index of the segment corresponding to the safe edge of the live\n * window which is the duration of the last segment plus 2 target durations from the end\n * of the playlist.\n *\n * @param {Object} playlist\n *        a media playlist object\n * @return {Number}\n *         The media index of the segment at the safe live point. 0 if there is no \"safe\"\n *         point.\n * @function safeLiveIndex\n */\n\n\nvar safeLiveIndex = function safeLiveIndex(playlist) {\n  if (!playlist.segments.length) {\n    return 0;\n  }\n\n  var i = playlist.segments.length - 1;\n  var distanceFromEnd = playlist.segments[i].duration || playlist.targetDuration;\n  var safeDistance = distanceFromEnd + playlist.targetDuration * 2;\n\n  while (i--) {\n    distanceFromEnd += playlist.segments[i].duration;\n\n    if (distanceFromEnd >= safeDistance) {\n      break;\n    }\n  }\n\n  return Math.max(0, i);\n};\n/**\n * Calculates the playlist end time\n *\n * @param {Object} playlist a media playlist object\n * @param {Number=} expired the amount of time that has\n *                  dropped off the front of the playlist in a live scenario\n * @param {Boolean|false} useSafeLiveEnd a boolean value indicating whether or not the\n *                        playlist end calculation should consider the safe live end\n *                        (truncate the playlist end by three segments). This is normally\n *                        used for calculating the end of the playlist's seekable range.\n * @returns {Number} the end time of playlist\n * @function playlistEnd\n */\n\n\nvar playlistEnd = function playlistEnd(playlist, expired, useSafeLiveEnd) {\n  if (!playlist || !playlist.segments) {\n    return null;\n  }\n\n  if (playlist.endList) {\n    return duration(playlist);\n  }\n\n  if (expired === null) {\n    return null;\n  }\n\n  expired = expired || 0;\n  var endSequence = useSafeLiveEnd ? safeLiveIndex(playlist) : playlist.segments.length;\n  return intervalDuration(playlist, playlist.mediaSequence + endSequence, expired);\n};\n/**\n  * Calculates the interval of time that is currently seekable in a\n  * playlist. The returned time ranges are relative to the earliest\n  * moment in the specified playlist that is still available. A full\n  * seekable implementation for live streams would need to offset\n  * these values by the duration of content that has expired from the\n  * stream.\n  *\n  * @param {Object} playlist a media playlist object\n  * dropped off the front of the playlist in a live scenario\n  * @param {Number=} expired the amount of time that has\n  * dropped off the front of the playlist in a live scenario\n  * @return {TimeRanges} the periods of time that are valid targets\n  * for seeking\n  */\n\n\nvar seekable = function seekable(playlist, expired) {\n  var useSafeLiveEnd = true;\n  var seekableStart = expired || 0;\n  var seekableEnd = playlistEnd(playlist, expired, useSafeLiveEnd);\n\n  if (seekableEnd === null) {\n    return createTimeRange();\n  }\n\n  return createTimeRange(seekableStart, seekableEnd);\n};\n\nvar isWholeNumber = function isWholeNumber(num) {\n  return num - Math.floor(num) === 0;\n};\n\nvar roundSignificantDigit = function roundSignificantDigit(increment, num) {\n  // If we have a whole number, just add 1 to it\n  if (isWholeNumber(num)) {\n    return num + increment * 0.1;\n  }\n\n  var numDecimalDigits = num.toString().split('.')[1].length;\n\n  for (var i = 1; i <= numDecimalDigits; i++) {\n    var scale = Math.pow(10, i);\n    var temp = num * scale;\n\n    if (isWholeNumber(temp) || i === numDecimalDigits) {\n      return (temp + increment) / scale;\n    }\n  }\n};\n\nvar ceilLeastSignificantDigit = roundSignificantDigit.bind(null, 1);\nvar floorLeastSignificantDigit = roundSignificantDigit.bind(null, -1);\n/**\n * Determine the index and estimated starting time of the segment that\n * contains a specified playback position in a media playlist.\n *\n * @param {Object} playlist the media playlist to query\n * @param {Number} currentTime The number of seconds since the earliest\n * possible position to determine the containing segment for\n * @param {Number} startIndex\n * @param {Number} startTime\n * @return {Object}\n */\n\nvar getMediaInfoForTime = function getMediaInfoForTime(playlist, currentTime, startIndex, startTime) {\n  var i = void 0;\n  var segment = void 0;\n  var numSegments = playlist.segments.length;\n  var time = currentTime - startTime;\n\n  if (time < 0) {\n    // Walk backward from startIndex in the playlist, adding durations\n    // until we find a segment that contains `time` and return it\n    if (startIndex > 0) {\n      for (i = startIndex - 1; i >= 0; i--) {\n        segment = playlist.segments[i];\n        time += floorLeastSignificantDigit(segment.duration);\n\n        if (time > 0) {\n          return {\n            mediaIndex: i,\n            startTime: startTime - sumDurations(playlist, startIndex, i)\n          };\n        }\n      }\n    } // We were unable to find a good segment within the playlist\n    // so select the first segment\n\n\n    return {\n      mediaIndex: 0,\n      startTime: currentTime\n    };\n  } // When startIndex is negative, we first walk forward to first segment\n  // adding target durations. If we \"run out of time\" before getting to\n  // the first segment, return the first segment\n\n\n  if (startIndex < 0) {\n    for (i = startIndex; i < 0; i++) {\n      time -= playlist.targetDuration;\n\n      if (time < 0) {\n        return {\n          mediaIndex: 0,\n          startTime: currentTime\n        };\n      }\n    }\n\n    startIndex = 0;\n  } // Walk forward from startIndex in the playlist, subtracting durations\n  // until we find a segment that contains `time` and return it\n\n\n  for (i = startIndex; i < numSegments; i++) {\n    segment = playlist.segments[i];\n    time -= ceilLeastSignificantDigit(segment.duration);\n\n    if (time < 0) {\n      return {\n        mediaIndex: i,\n        startTime: startTime + sumDurations(playlist, startIndex, i)\n      };\n    }\n  } // We are out of possible candidates so load the last one...\n\n\n  return {\n    mediaIndex: numSegments - 1,\n    startTime: currentTime\n  };\n};\n/**\n * Check whether the playlist is blacklisted or not.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is blacklisted or not\n * @function isBlacklisted\n */\n\n\nvar isBlacklisted = function isBlacklisted(playlist) {\n  return playlist.excludeUntil && playlist.excludeUntil > Date.now();\n};\n/**\n * Check whether the playlist is compatible with current playback configuration or has\n * been blacklisted permanently for being incompatible.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is incompatible or not\n * @function isIncompatible\n */\n\n\nvar isIncompatible = function isIncompatible(playlist) {\n  return playlist.excludeUntil && playlist.excludeUntil === Infinity;\n};\n/**\n * Check whether the playlist is enabled or not.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is enabled or not\n * @function isEnabled\n */\n\n\nvar isEnabled = function isEnabled(playlist) {\n  var blacklisted = isBlacklisted(playlist);\n  return !playlist.disabled && !blacklisted;\n};\n/**\n * Check whether the playlist has been manually disabled through the representations api.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is disabled manually or not\n * @function isDisabled\n */\n\n\nvar isDisabled = function isDisabled(playlist) {\n  return playlist.disabled;\n};\n/**\n * Returns whether the current playlist is an AES encrypted HLS stream\n *\n * @return {Boolean} true if it's an AES encrypted HLS stream\n */\n\n\nvar isAes = function isAes(media) {\n  for (var i = 0; i < media.segments.length; i++) {\n    if (media.segments[i].key) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * Returns whether the current playlist contains fMP4\n *\n * @return {Boolean} true if the playlist contains fMP4\n */\n\n\nvar isFmp4 = function isFmp4(media) {\n  for (var i = 0; i < media.segments.length; i++) {\n    if (media.segments[i].map) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * Checks if the playlist has a value for the specified attribute\n *\n * @param {String} attr\n *        Attribute to check for\n * @param {Object} playlist\n *        The media playlist object\n * @return {Boolean}\n *         Whether the playlist contains a value for the attribute or not\n * @function hasAttribute\n */\n\n\nvar hasAttribute = function hasAttribute(attr, playlist) {\n  return playlist.attributes && playlist.attributes[attr];\n};\n/**\n * Estimates the time required to complete a segment download from the specified playlist\n *\n * @param {Number} segmentDuration\n *        Duration of requested segment\n * @param {Number} bandwidth\n *        Current measured bandwidth of the player\n * @param {Object} playlist\n *        The media playlist object\n * @param {Number=} bytesReceived\n *        Number of bytes already received for the request. Defaults to 0\n * @return {Number|NaN}\n *         The estimated time to request the segment. NaN if bandwidth information for\n *         the given playlist is unavailable\n * @function estimateSegmentRequestTime\n */\n\n\nvar estimateSegmentRequestTime = function estimateSegmentRequestTime(segmentDuration, bandwidth, playlist) {\n  var bytesReceived = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n  if (!hasAttribute('BANDWIDTH', playlist)) {\n    return NaN;\n  }\n\n  var size = segmentDuration * playlist.attributes.BANDWIDTH;\n  return (size - bytesReceived * 8) / bandwidth;\n};\n/*\n * Returns whether the current playlist is the lowest rendition\n *\n * @return {Boolean} true if on lowest rendition\n */\n\n\nvar isLowestEnabledRendition = function isLowestEnabledRendition(master, media) {\n  if (master.playlists.length === 1) {\n    return true;\n  }\n\n  var currentBandwidth = media.attributes.BANDWIDTH || Number.MAX_VALUE;\n  return master.playlists.filter(function (playlist) {\n    if (!isEnabled(playlist)) {\n      return false;\n    }\n\n    return (playlist.attributes.BANDWIDTH || 0) < currentBandwidth;\n  }).length === 0;\n}; // exports\n\n\nvar Playlist = {\n  duration: duration,\n  seekable: seekable,\n  safeLiveIndex: safeLiveIndex,\n  getMediaInfoForTime: getMediaInfoForTime,\n  isEnabled: isEnabled,\n  isDisabled: isDisabled,\n  isBlacklisted: isBlacklisted,\n  isIncompatible: isIncompatible,\n  playlistEnd: playlistEnd,\n  isAes: isAes,\n  isFmp4: isFmp4,\n  hasAttribute: hasAttribute,\n  estimateSegmentRequestTime: estimateSegmentRequestTime,\n  isLowestEnabledRendition: isLowestEnabledRendition\n};\n/**\n * @file xhr.js\n */\n\nvar videojsXHR = videojs$1.xhr,\n    mergeOptions$1$1 = videojs$1.mergeOptions;\n\nvar xhrFactory = function xhrFactory() {\n  var xhr$$1 = function XhrFunction(options, callback) {\n    // Add a default timeout for all hls requests\n    options = mergeOptions$1$1({\n      timeout: 45e3\n    }, options); // Allow an optional user-specified function to modify the option\n    // object before we construct the xhr request\n\n    var beforeRequest = XhrFunction.beforeRequest || videojs$1.Hls.xhr.beforeRequest;\n\n    if (beforeRequest && typeof beforeRequest === 'function') {\n      var newOptions = beforeRequest(options);\n\n      if (newOptions) {\n        options = newOptions;\n      }\n    }\n\n    var request = videojsXHR(options, function (error, response) {\n      var reqResponse = request.response;\n\n      if (!error && reqResponse) {\n        request.responseTime = Date.now();\n        request.roundTripTime = request.responseTime - request.requestTime;\n        request.bytesReceived = reqResponse.byteLength || reqResponse.length;\n\n        if (!request.bandwidth) {\n          request.bandwidth = Math.floor(request.bytesReceived / request.roundTripTime * 8 * 1000);\n        }\n      }\n\n      if (response.headers) {\n        request.responseHeaders = response.headers;\n      } // videojs.xhr now uses a specific code on the error\n      // object to signal that a request has timed out instead\n      // of setting a boolean on the request object\n\n\n      if (error && error.code === 'ETIMEDOUT') {\n        request.timedout = true;\n      } // videojs.xhr no longer considers status codes outside of 200 and 0\n      // (for file uris) to be errors, but the old XHR did, so emulate that\n      // behavior. Status 206 may be used in response to byterange requests.\n\n\n      if (!error && !request.aborted && response.statusCode !== 200 && response.statusCode !== 206 && response.statusCode !== 0) {\n        error = new Error('XHR Failed with a response of: ' + (request && (reqResponse || request.responseText)));\n      }\n\n      callback(error, request);\n    });\n    var originalAbort = request.abort;\n\n    request.abort = function () {\n      request.aborted = true;\n      return originalAbort.apply(request, arguments);\n    };\n\n    request.uri = options.uri;\n    request.requestTime = Date.now();\n    return request;\n  };\n\n  return xhr$$1;\n};\n/**\n * @file bin-utils.js\n */\n\n/**\n * convert a TimeRange to text\n *\n * @param {TimeRange} range the timerange to use for conversion\n * @param {Number} i the iterator on the range to convert\n */\n\n\nvar textRange = function textRange(range, i) {\n  return range.start(i) + '-' + range.end(i);\n};\n/**\n * format a number as hex string\n *\n * @param {Number} e The number\n * @param {Number} i the iterator\n */\n\n\nvar formatHexString = function formatHexString(e, i) {\n  var value = e.toString(16);\n  return '00'.substring(0, 2 - value.length) + value + (i % 2 ? ' ' : '');\n};\n\nvar formatAsciiString = function formatAsciiString(e) {\n  if (e >= 0x20 && e < 0x7e) {\n    return String.fromCharCode(e);\n  }\n\n  return '.';\n};\n/**\n * Creates an object for sending to a web worker modifying properties that are TypedArrays\n * into a new object with seperated properties for the buffer, byteOffset, and byteLength.\n *\n * @param {Object} message\n *        Object of properties and values to send to the web worker\n * @return {Object}\n *         Modified message with TypedArray values expanded\n * @function createTransferableMessage\n */\n\n\nvar createTransferableMessage = function createTransferableMessage(message) {\n  var transferable = {};\n  Object.keys(message).forEach(function (key) {\n    var value = message[key];\n\n    if (ArrayBuffer.isView(value)) {\n      transferable[key] = {\n        bytes: value.buffer,\n        byteOffset: value.byteOffset,\n        byteLength: value.byteLength\n      };\n    } else {\n      transferable[key] = value;\n    }\n  });\n  return transferable;\n};\n/**\n * Returns a unique string identifier for a media initialization\n * segment.\n */\n\n\nvar initSegmentId = function initSegmentId(initSegment) {\n  var byterange = initSegment.byterange || {\n    length: Infinity,\n    offset: 0\n  };\n  return [byterange.length, byterange.offset, initSegment.resolvedUri].join(',');\n};\n/**\n * utils to help dump binary data to the console\n */\n\n\nvar hexDump = function hexDump(data) {\n  var bytes = Array.prototype.slice.call(data);\n  var step = 16;\n  var result = '';\n  var hex = void 0;\n  var ascii = void 0;\n\n  for (var j = 0; j < bytes.length / step; j++) {\n    hex = bytes.slice(j * step, j * step + step).map(formatHexString).join('');\n    ascii = bytes.slice(j * step, j * step + step).map(formatAsciiString).join('');\n    result += hex + ' ' + ascii + '\\n';\n  }\n\n  return result;\n};\n\nvar tagDump = function tagDump(_ref) {\n  var bytes = _ref.bytes;\n  return hexDump(bytes);\n};\n\nvar textRanges = function textRanges(ranges) {\n  var result = '';\n  var i = void 0;\n\n  for (i = 0; i < ranges.length; i++) {\n    result += textRange(ranges, i) + ' ';\n  }\n\n  return result;\n};\n\nvar utils =\n/*#__PURE__*/\nObject.freeze({\n  createTransferableMessage: createTransferableMessage,\n  initSegmentId: initSegmentId,\n  hexDump: hexDump,\n  tagDump: tagDump,\n  textRanges: textRanges\n}); // TODO handle fmp4 case where the timing info is accurate and doesn't involve transmux\n// Add 25% to the segment duration to account for small discrepencies in segment timing.\n// 25% was arbitrarily chosen, and may need to be refined over time.\n\nvar SEGMENT_END_FUDGE_PERCENT = 0.25;\n/**\n * Converts a player time (any time that can be gotten/set from player.currentTime(),\n * e.g., any time within player.seekable().start(0) to player.seekable().end(0)) to a\n * program time (any time referencing the real world (e.g., EXT-X-PROGRAM-DATE-TIME)).\n *\n * The containing segment is required as the EXT-X-PROGRAM-DATE-TIME serves as an \"anchor\n * point\" (a point where we have a mapping from program time to player time, with player\n * time being the post transmux start of the segment).\n *\n * For more details, see [this doc](../../docs/program-time-from-player-time.md).\n *\n * @param {Number} playerTime the player time\n * @param {Object} segment the segment which contains the player time\n * @return {Date} program time\n */\n\nvar playerTimeToProgramTime = function playerTimeToProgramTime(playerTime, segment) {\n  if (!segment.dateTimeObject) {\n    // Can't convert without an \"anchor point\" for the program time (i.e., a time that can\n    // be used to map the start of a segment with a real world time).\n    return null;\n  }\n\n  var transmuxerPrependedSeconds = segment.videoTimingInfo.transmuxerPrependedSeconds;\n  var transmuxedStart = segment.videoTimingInfo.transmuxedPresentationStart; // get the start of the content from before old content is prepended\n\n  var startOfSegment = transmuxedStart + transmuxerPrependedSeconds;\n  var offsetFromSegmentStart = playerTime - startOfSegment;\n  return new Date(segment.dateTimeObject.getTime() + offsetFromSegmentStart * 1000);\n};\n\nvar originalSegmentVideoDuration = function originalSegmentVideoDuration(videoTimingInfo) {\n  return videoTimingInfo.transmuxedPresentationEnd - videoTimingInfo.transmuxedPresentationStart - videoTimingInfo.transmuxerPrependedSeconds;\n};\n/**\n * Finds a segment that contains the time requested given as an ISO-8601 string. The\n * returned segment might be an estimate or an accurate match.\n *\n * @param {String} programTime The ISO-8601 programTime to find a match for\n * @param {Object} playlist A playlist object to search within\n */\n\n\nvar findSegmentForProgramTime = function findSegmentForProgramTime(programTime, playlist) {\n  // Assumptions:\n  //  - verifyProgramDateTimeTags has already been run\n  //  - live streams have been started\n  var dateTimeObject = void 0;\n\n  try {\n    dateTimeObject = new Date(programTime);\n  } catch (e) {\n    return null;\n  }\n\n  if (!playlist || !playlist.segments || playlist.segments.length === 0) {\n    return null;\n  }\n\n  var segment = playlist.segments[0];\n\n  if (dateTimeObject < segment.dateTimeObject) {\n    // Requested time is before stream start.\n    return null;\n  }\n\n  for (var i = 0; i < playlist.segments.length - 1; i++) {\n    segment = playlist.segments[i];\n    var nextSegmentStart = playlist.segments[i + 1].dateTimeObject;\n\n    if (dateTimeObject < nextSegmentStart) {\n      break;\n    }\n  }\n\n  var lastSegment = playlist.segments[playlist.segments.length - 1];\n  var lastSegmentStart = lastSegment.dateTimeObject;\n  var lastSegmentDuration = lastSegment.videoTimingInfo ? originalSegmentVideoDuration(lastSegment.videoTimingInfo) : lastSegment.duration + lastSegment.duration * SEGMENT_END_FUDGE_PERCENT;\n  var lastSegmentEnd = new Date(lastSegmentStart.getTime() + lastSegmentDuration * 1000);\n\n  if (dateTimeObject > lastSegmentEnd) {\n    // Beyond the end of the stream, or our best guess of the end of the stream.\n    return null;\n  }\n\n  if (dateTimeObject > lastSegmentStart) {\n    segment = lastSegment;\n  }\n\n  return {\n    segment: segment,\n    estimatedStart: segment.videoTimingInfo ? segment.videoTimingInfo.transmuxedPresentationStart : Playlist.duration(playlist, playlist.mediaSequence + playlist.segments.indexOf(segment)),\n    // Although, given that all segments have accurate date time objects, the segment\n    // selected should be accurate, unless the video has been transmuxed at some point\n    // (determined by the presence of the videoTimingInfo object), the segment's \"player\n    // time\" (the start time in the player) can't be considered accurate.\n    type: segment.videoTimingInfo ? 'accurate' : 'estimate'\n  };\n};\n/**\n * Finds a segment that contains the given player time(in seconds).\n *\n * @param {Number} time The player time to find a match for\n * @param {Object} playlist A playlist object to search within\n */\n\n\nvar findSegmentForPlayerTime = function findSegmentForPlayerTime(time, playlist) {\n  // Assumptions:\n  // - there will always be a segment.duration\n  // - we can start from zero\n  // - segments are in time order\n  if (!playlist || !playlist.segments || playlist.segments.length === 0) {\n    return null;\n  }\n\n  var segmentEnd = 0;\n  var segment = void 0;\n\n  for (var i = 0; i < playlist.segments.length; i++) {\n    segment = playlist.segments[i]; // videoTimingInfo is set after the segment is downloaded and transmuxed, and\n    // should contain the most accurate values we have for the segment's player times.\n    //\n    // Use the accurate transmuxedPresentationEnd value if it is available, otherwise fall\n    // back to an estimate based on the manifest derived (inaccurate) segment.duration, to\n    // calculate an end value.\n\n    segmentEnd = segment.videoTimingInfo ? segment.videoTimingInfo.transmuxedPresentationEnd : segmentEnd + segment.duration;\n\n    if (time <= segmentEnd) {\n      break;\n    }\n  }\n\n  var lastSegment = playlist.segments[playlist.segments.length - 1];\n\n  if (lastSegment.videoTimingInfo && lastSegment.videoTimingInfo.transmuxedPresentationEnd < time) {\n    // The time requested is beyond the stream end.\n    return null;\n  }\n\n  if (time > segmentEnd) {\n    // The time is within or beyond the last segment.\n    //\n    // Check to see if the time is beyond a reasonable guess of the end of the stream.\n    if (time > segmentEnd + lastSegment.duration * SEGMENT_END_FUDGE_PERCENT) {\n      // Technically, because the duration value is only an estimate, the time may still\n      // exist in the last segment, however, there isn't enough information to make even\n      // a reasonable estimate.\n      return null;\n    }\n\n    segment = lastSegment;\n  }\n\n  return {\n    segment: segment,\n    estimatedStart: segment.videoTimingInfo ? segment.videoTimingInfo.transmuxedPresentationStart : segmentEnd - segment.duration,\n    // Because videoTimingInfo is only set after transmux, it is the only way to get\n    // accurate timing values.\n    type: segment.videoTimingInfo ? 'accurate' : 'estimate'\n  };\n};\n/**\n * Gives the offset of the comparisonTimestamp from the programTime timestamp in seconds.\n * If the offset returned is positive, the programTime occurs after the\n * comparisonTimestamp.\n * If the offset is negative, the programTime occurs before the comparisonTimestamp.\n *\n * @param {String} comparisonTimeStamp An ISO-8601 timestamp to compare against\n * @param {String} programTime The programTime as an ISO-8601 string\n * @return {Number} offset\n */\n\n\nvar getOffsetFromTimestamp = function getOffsetFromTimestamp(comparisonTimeStamp, programTime) {\n  var segmentDateTime = void 0;\n  var programDateTime = void 0;\n\n  try {\n    segmentDateTime = new Date(comparisonTimeStamp);\n    programDateTime = new Date(programTime);\n  } catch (e) {// TODO handle error\n  }\n\n  var segmentTimeEpoch = segmentDateTime.getTime();\n  var programTimeEpoch = programDateTime.getTime();\n  return (programTimeEpoch - segmentTimeEpoch) / 1000;\n};\n/**\n * Checks that all segments in this playlist have programDateTime tags.\n *\n * @param {Object} playlist A playlist object\n */\n\n\nvar verifyProgramDateTimeTags = function verifyProgramDateTimeTags(playlist) {\n  if (!playlist.segments || playlist.segments.length === 0) {\n    return false;\n  }\n\n  for (var i = 0; i < playlist.segments.length; i++) {\n    var segment = playlist.segments[i];\n\n    if (!segment.dateTimeObject) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * Returns the programTime of the media given a playlist and a playerTime.\n * The playlist must have programDateTime tags for a programDateTime tag to be returned.\n * If the segments containing the time requested have not been buffered yet, an estimate\n * may be returned to the callback.\n *\n * @param {Object} args\n * @param {Object} args.playlist A playlist object to search within\n * @param {Number} time A playerTime in seconds\n * @param {Function} callback(err, programTime)\n * @returns {String} err.message A detailed error message\n * @returns {Object} programTime\n * @returns {Number} programTime.mediaSeconds The streamTime in seconds\n * @returns {String} programTime.programDateTime The programTime as an ISO-8601 String\n */\n\n\nvar getProgramTime = function getProgramTime(_ref) {\n  var playlist = _ref.playlist,\n      _ref$time = _ref.time,\n      time = _ref$time === undefined ? undefined : _ref$time,\n      callback = _ref.callback;\n\n  if (!callback) {\n    throw new Error('getProgramTime: callback must be provided');\n  }\n\n  if (!playlist || time === undefined) {\n    return callback({\n      message: 'getProgramTime: playlist and time must be provided'\n    });\n  }\n\n  var matchedSegment = findSegmentForPlayerTime(time, playlist);\n\n  if (!matchedSegment) {\n    return callback({\n      message: 'valid programTime was not found'\n    });\n  }\n\n  if (matchedSegment.type === 'estimate') {\n    return callback({\n      message: 'Accurate programTime could not be determined.' + ' Please seek to e.seekTime and try again',\n      seekTime: matchedSegment.estimatedStart\n    });\n  }\n\n  var programTimeObject = {\n    mediaSeconds: time\n  };\n  var programTime = playerTimeToProgramTime(time, matchedSegment.segment);\n\n  if (programTime) {\n    programTimeObject.programDateTime = programTime.toISOString();\n  }\n\n  return callback(null, programTimeObject);\n};\n/**\n * Seeks in the player to a time that matches the given programTime ISO-8601 string.\n *\n * @param {Object} args\n * @param {String} args.programTime A programTime to seek to as an ISO-8601 String\n * @param {Object} args.playlist A playlist to look within\n * @param {Number} args.retryCount The number of times to try for an accurate seek. Default is 2.\n * @param {Function} args.seekTo A method to perform a seek\n * @param {Boolean} args.pauseAfterSeek Whether to end in a paused state after seeking. Default is true.\n * @param {Object} args.tech The tech to seek on\n * @param {Function} args.callback(err, newTime) A callback to return the new time to\n * @returns {String} err.message A detailed error message\n * @returns {Number} newTime The exact time that was seeked to in seconds\n */\n\n\nvar seekToProgramTime = function seekToProgramTime(_ref2) {\n  var programTime = _ref2.programTime,\n      playlist = _ref2.playlist,\n      _ref2$retryCount = _ref2.retryCount,\n      retryCount = _ref2$retryCount === undefined ? 2 : _ref2$retryCount,\n      seekTo = _ref2.seekTo,\n      _ref2$pauseAfterSeek = _ref2.pauseAfterSeek,\n      pauseAfterSeek = _ref2$pauseAfterSeek === undefined ? true : _ref2$pauseAfterSeek,\n      tech = _ref2.tech,\n      callback = _ref2.callback;\n\n  if (!callback) {\n    throw new Error('seekToProgramTime: callback must be provided');\n  }\n\n  if (typeof programTime === 'undefined' || !playlist || !seekTo) {\n    return callback({\n      message: 'seekToProgramTime: programTime, seekTo and playlist must be provided'\n    });\n  }\n\n  if (!playlist.endList && !tech.hasStarted_) {\n    return callback({\n      message: 'player must be playing a live stream to start buffering'\n    });\n  }\n\n  if (!verifyProgramDateTimeTags(playlist)) {\n    return callback({\n      message: 'programDateTime tags must be provided in the manifest ' + playlist.resolvedUri\n    });\n  }\n\n  var matchedSegment = findSegmentForProgramTime(programTime, playlist); // no match\n\n  if (!matchedSegment) {\n    return callback({\n      message: programTime + ' was not found in the stream'\n    });\n  }\n\n  var segment = matchedSegment.segment;\n  var mediaOffset = getOffsetFromTimestamp(segment.dateTimeObject, programTime);\n\n  if (matchedSegment.type === 'estimate') {\n    // we've run out of retries\n    if (retryCount === 0) {\n      return callback({\n        message: programTime + ' is not buffered yet. Try again'\n      });\n    }\n\n    seekTo(matchedSegment.estimatedStart + mediaOffset);\n    tech.one('seeked', function () {\n      seekToProgramTime({\n        programTime: programTime,\n        playlist: playlist,\n        retryCount: retryCount - 1,\n        seekTo: seekTo,\n        pauseAfterSeek: pauseAfterSeek,\n        tech: tech,\n        callback: callback\n      });\n    });\n    return;\n  } // Since the segment.start value is determined from the buffered end or ending time\n  // of the prior segment, the seekToTime doesn't need to account for any transmuxer\n  // modifications.\n\n\n  var seekToTime = segment.start + mediaOffset;\n\n  var seekedCallback = function seekedCallback() {\n    return callback(null, tech.currentTime());\n  }; // listen for seeked event\n\n\n  tech.one('seeked', seekedCallback); // pause before seeking as video.js will restore this state\n\n  if (pauseAfterSeek) {\n    tech.pause();\n  }\n\n  seekTo(seekToTime);\n};\n/**\n * ranges\n *\n * Utilities for working with TimeRanges.\n *\n */\n// Fudge factor to account for TimeRanges rounding\n\n\nvar TIME_FUDGE_FACTOR = 1 / 30; // Comparisons between time values such as current time and the end of the buffered range\n// can be misleading because of precision differences or when the current media has poorly\n// aligned audio and video, which can cause values to be slightly off from what you would\n// expect. This value is what we consider to be safe to use in such comparisons to account\n// for these scenarios.\n\nvar SAFE_TIME_DELTA = TIME_FUDGE_FACTOR * 3;\n\nvar filterRanges = function filterRanges(timeRanges, predicate) {\n  var results = [];\n  var i = void 0;\n\n  if (timeRanges && timeRanges.length) {\n    // Search for ranges that match the predicate\n    for (i = 0; i < timeRanges.length; i++) {\n      if (predicate(timeRanges.start(i), timeRanges.end(i))) {\n        results.push([timeRanges.start(i), timeRanges.end(i)]);\n      }\n    }\n  }\n\n  return videojs$1.createTimeRanges(results);\n};\n/**\n * Attempts to find the buffered TimeRange that contains the specified\n * time.\n * @param {TimeRanges} buffered - the TimeRanges object to query\n * @param {number} time  - the time to filter on.\n * @returns {TimeRanges} a new TimeRanges object\n */\n\n\nvar findRange = function findRange(buffered, time) {\n  return filterRanges(buffered, function (start, end) {\n    return start - TIME_FUDGE_FACTOR <= time && end + TIME_FUDGE_FACTOR >= time;\n  });\n};\n/**\n * Returns the TimeRanges that begin later than the specified time.\n * @param {TimeRanges} timeRanges - the TimeRanges object to query\n * @param {number} time - the time to filter on.\n * @returns {TimeRanges} a new TimeRanges object.\n */\n\n\nvar findNextRange = function findNextRange(timeRanges, time) {\n  return filterRanges(timeRanges, function (start) {\n    return start - TIME_FUDGE_FACTOR >= time;\n  });\n};\n/**\n * Returns gaps within a list of TimeRanges\n * @param {TimeRanges} buffered - the TimeRanges object\n * @return {TimeRanges} a TimeRanges object of gaps\n */\n\n\nvar findGaps = function findGaps(buffered) {\n  if (buffered.length < 2) {\n    return videojs$1.createTimeRanges();\n  }\n\n  var ranges = [];\n\n  for (var i = 1; i < buffered.length; i++) {\n    var start = buffered.end(i - 1);\n    var end = buffered.start(i);\n    ranges.push([start, end]);\n  }\n\n  return videojs$1.createTimeRanges(ranges);\n};\n/**\n * Gets a human readable string for a TimeRange\n *\n * @param {TimeRange} range\n * @returns {String} a human readable string\n */\n\n\nvar printableRange = function printableRange(range) {\n  var strArr = [];\n\n  if (!range || !range.length) {\n    return '';\n  }\n\n  for (var i = 0; i < range.length; i++) {\n    strArr.push(range.start(i) + ' => ' + range.end(i));\n  }\n\n  return strArr.join(', ');\n};\n/**\n * Calculates the amount of time left in seconds until the player hits the end of the\n * buffer and causes a rebuffer\n *\n * @param {TimeRange} buffered\n *        The state of the buffer\n * @param {Numnber} currentTime\n *        The current time of the player\n * @param {Number} playbackRate\n *        The current playback rate of the player. Defaults to 1.\n * @return {Number}\n *         Time until the player has to start rebuffering in seconds.\n * @function timeUntilRebuffer\n */\n\n\nvar timeUntilRebuffer = function timeUntilRebuffer(buffered, currentTime) {\n  var playbackRate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var bufferedEnd = buffered.length ? buffered.end(buffered.length - 1) : 0;\n  return (bufferedEnd - currentTime) / playbackRate;\n};\n/**\n * Converts a TimeRanges object into an array representation\n * @param {TimeRanges} timeRanges\n * @returns {Array}\n */\n\n\nvar timeRangesToArray = function timeRangesToArray(timeRanges) {\n  var timeRangesList = [];\n\n  for (var i = 0; i < timeRanges.length; i++) {\n    timeRangesList.push({\n      start: timeRanges.start(i),\n      end: timeRanges.end(i)\n    });\n  }\n\n  return timeRangesList;\n};\n/**\n * @file create-text-tracks-if-necessary.js\n */\n\n/**\n * Create text tracks on video.js if they exist on a segment.\n *\n * @param {Object} sourceBuffer the VSB or FSB\n * @param {Object} mediaSource the HTML media source\n * @param {Object} segment the segment that may contain the text track\n * @private\n */\n\n\nvar createTextTracksIfNecessary = function createTextTracksIfNecessary(sourceBuffer, mediaSource, segment) {\n  var player = mediaSource.player_; // create an in-band caption track if one is present in the segment\n\n  if (segment.captions && segment.captions.length) {\n    if (!sourceBuffer.inbandTextTracks_) {\n      sourceBuffer.inbandTextTracks_ = {};\n    }\n\n    for (var trackId in segment.captionStreams) {\n      if (!sourceBuffer.inbandTextTracks_[trackId]) {\n        player.tech_.trigger({\n          type: 'usage',\n          name: 'hls-608'\n        });\n        var track = player.textTracks().getTrackById(trackId);\n\n        if (track) {\n          // Resuse an existing track with a CC# id because this was\n          // very likely created by videojs-contrib-hls from information\n          // in the m3u8 for us to use\n          sourceBuffer.inbandTextTracks_[trackId] = track;\n        } else {\n          // Otherwise, create a track with the default `CC#` label and\n          // without a language\n          sourceBuffer.inbandTextTracks_[trackId] = player.addRemoteTextTrack({\n            kind: 'captions',\n            id: trackId,\n            label: trackId\n          }, false).track;\n        }\n      }\n    }\n  }\n\n  if (segment.metadata && segment.metadata.length && !sourceBuffer.metadataTrack_) {\n    sourceBuffer.metadataTrack_ = player.addRemoteTextTrack({\n      kind: 'metadata',\n      label: 'Timed Metadata'\n    }, false).track;\n    sourceBuffer.metadataTrack_.inBandMetadataTrackDispatchType = segment.metadata.dispatchType;\n  }\n};\n/**\n * @file remove-cues-from-track.js\n */\n\n/**\n * Remove cues from a track on video.js.\n *\n * @param {Double} start start of where we should remove the cue\n * @param {Double} end end of where the we should remove the cue\n * @param {Object} track the text track to remove the cues from\n * @private\n */\n\n\nvar removeCuesFromTrack = function removeCuesFromTrack(start, end, track) {\n  var i = void 0;\n  var cue = void 0;\n\n  if (!track) {\n    return;\n  }\n\n  if (!track.cues) {\n    return;\n  }\n\n  i = track.cues.length;\n\n  while (i--) {\n    cue = track.cues[i]; // Remove any overlapping cue\n\n    if (cue.startTime <= end && cue.endTime >= start) {\n      track.removeCue(cue);\n    }\n  }\n};\n/**\n * @file add-text-track-data.js\n */\n\n/**\n * Define properties on a cue for backwards compatability,\n * but warn the user that the way that they are using it\n * is depricated and will be removed at a later date.\n *\n * @param {Cue} cue the cue to add the properties on\n * @private\n */\n\n\nvar deprecateOldCue = function deprecateOldCue(cue) {\n  Object.defineProperties(cue.frame, {\n    id: {\n      get: function get() {\n        videojs$1.log.warn('cue.frame.id is deprecated. Use cue.value.key instead.');\n        return cue.value.key;\n      }\n    },\n    value: {\n      get: function get() {\n        videojs$1.log.warn('cue.frame.value is deprecated. Use cue.value.data instead.');\n        return cue.value.data;\n      }\n    },\n    privateData: {\n      get: function get() {\n        videojs$1.log.warn('cue.frame.privateData is deprecated. Use cue.value.data instead.');\n        return cue.value.data;\n      }\n    }\n  });\n};\n\nvar durationOfVideo = function durationOfVideo(duration) {\n  var dur = void 0;\n\n  if (isNaN(duration) || Math.abs(duration) === Infinity) {\n    dur = Number.MAX_VALUE;\n  } else {\n    dur = duration;\n  }\n\n  return dur;\n};\n/**\n * Add text track data to a source handler given the captions and\n * metadata from the buffer.\n *\n * @param {Object} sourceHandler the virtual source buffer\n * @param {Array} captionArray an array of caption data\n * @param {Array} metadataArray an array of meta data\n * @private\n */\n\n\nvar addTextTrackData = function addTextTrackData(sourceHandler, captionArray, metadataArray) {\n  var Cue = window$1.WebKitDataCue || window$1.VTTCue;\n\n  if (captionArray) {\n    captionArray.forEach(function (caption) {\n      var track = caption.stream;\n      this.inbandTextTracks_[track].addCue(new Cue(caption.startTime + this.timestampOffset, caption.endTime + this.timestampOffset, caption.text));\n    }, sourceHandler);\n  }\n\n  if (metadataArray) {\n    var videoDuration = durationOfVideo(sourceHandler.mediaSource_.duration);\n    metadataArray.forEach(function (metadata) {\n      var time = metadata.cueTime + this.timestampOffset; // if time isn't a finite number between 0 and Infinity, like NaN,\n      // ignore this bit of metadata.\n      // This likely occurs when you have an non-timed ID3 tag like TIT2,\n      // which is the \"Title/Songname/Content description\" frame\n\n      if (typeof time !== 'number' || window$1.isNaN(time) || time < 0 || !(time < Infinity)) {\n        return;\n      }\n\n      metadata.frames.forEach(function (frame) {\n        var cue = new Cue(time, time, frame.value || frame.url || frame.data || '');\n        cue.frame = frame;\n        cue.value = frame;\n        deprecateOldCue(cue);\n        this.metadataTrack_.addCue(cue);\n      }, this);\n    }, sourceHandler); // Updating the metadeta cues so that\n    // the endTime of each cue is the startTime of the next cue\n    // the endTime of last cue is the duration of the video\n\n    if (sourceHandler.metadataTrack_ && sourceHandler.metadataTrack_.cues && sourceHandler.metadataTrack_.cues.length) {\n      var cues = sourceHandler.metadataTrack_.cues;\n      var cuesArray = []; // Create a copy of the TextTrackCueList...\n      // ...disregarding cues with a falsey value\n\n      for (var i = 0; i < cues.length; i++) {\n        if (cues[i]) {\n          cuesArray.push(cues[i]);\n        }\n      } // Group cues by their startTime value\n\n\n      var cuesGroupedByStartTime = cuesArray.reduce(function (obj, cue) {\n        var timeSlot = obj[cue.startTime] || [];\n        timeSlot.push(cue);\n        obj[cue.startTime] = timeSlot;\n        return obj;\n      }, {}); // Sort startTimes by ascending order\n\n      var sortedStartTimes = Object.keys(cuesGroupedByStartTime).sort(function (a, b) {\n        return Number(a) - Number(b);\n      }); // Map each cue group's endTime to the next group's startTime\n\n      sortedStartTimes.forEach(function (startTime, idx) {\n        var cueGroup = cuesGroupedByStartTime[startTime];\n        var nextTime = Number(sortedStartTimes[idx + 1]) || videoDuration; // Map each cue's endTime the next group's startTime\n\n        cueGroup.forEach(function (cue) {\n          cue.endTime = nextTime;\n        });\n      });\n    }\n  }\n};\n\nvar win = typeof window !== 'undefined' ? window : {},\n    TARGET = typeof Symbol === 'undefined' ? '__target' : Symbol(),\n    SCRIPT_TYPE = 'application/javascript',\n    BlobBuilder = win.BlobBuilder || win.WebKitBlobBuilder || win.MozBlobBuilder || win.MSBlobBuilder,\n    URL = win.URL || win.webkitURL || URL && URL.msURL,\n    Worker = win.Worker;\n/**\n * Returns a wrapper around Web Worker code that is constructible.\n *\n * @function shimWorker\n *\n * @param { String }    filename    The name of the file\n * @param { Function }  fn          Function wrapping the code of the worker\n */\n\nfunction shimWorker(filename, fn) {\n  return function ShimWorker(forceFallback) {\n    var o = this;\n\n    if (!fn) {\n      return new Worker(filename);\n    } else if (Worker && !forceFallback) {\n      // Convert the function's inner code to a string to construct the worker\n      var source = fn.toString().replace(/^function.+?{/, '').slice(0, -1),\n          objURL = createSourceObject(source);\n      this[TARGET] = new Worker(objURL);\n      wrapTerminate(this[TARGET], objURL);\n      return this[TARGET];\n    } else {\n      var selfShim = {\n        postMessage: function postMessage(m) {\n          if (o.onmessage) {\n            setTimeout(function () {\n              o.onmessage({\n                data: m,\n                target: selfShim\n              });\n            });\n          }\n        }\n      };\n      fn.call(selfShim);\n\n      this.postMessage = function (m) {\n        setTimeout(function () {\n          selfShim.onmessage({\n            data: m,\n            target: o\n          });\n        });\n      };\n\n      this.isThisThread = true;\n    }\n  };\n} // Test Worker capabilities\n\n\nif (Worker) {\n  var testWorker,\n      objURL = createSourceObject('self.onmessage = function () {}'),\n      testArray = new Uint8Array(1);\n\n  try {\n    testWorker = new Worker(objURL); // Native browser on some Samsung devices throws for transferables, let's detect it\n\n    testWorker.postMessage(testArray, [testArray.buffer]);\n  } catch (e) {\n    Worker = null;\n  } finally {\n    URL.revokeObjectURL(objURL);\n\n    if (testWorker) {\n      testWorker.terminate();\n    }\n  }\n}\n\nfunction createSourceObject(str) {\n  try {\n    return URL.createObjectURL(new Blob([str], {\n      type: SCRIPT_TYPE\n    }));\n  } catch (e) {\n    var blob = new BlobBuilder();\n    blob.append(str);\n    return URL.createObjectURL(blob.getBlob(type));\n  }\n}\n\nfunction wrapTerminate(worker, objURL) {\n  if (!worker || !objURL) return;\n  var term = worker.terminate;\n  worker.objURL = objURL;\n\n  worker.terminate = function () {\n    if (worker.objURL) URL.revokeObjectURL(worker.objURL);\n    term.call(worker);\n  };\n}\n\nvar TransmuxWorker = new shimWorker(\"./transmuxer-worker.worker.js\", function (window, document$$1) {\n  var self = this;\n\n  var transmuxerWorker = function () {\n    /**\n     * mux.js\n     *\n     * Copyright (c) 2015 Brightcove\n     * All rights reserved.\n     *\n     * Functions that generate fragmented MP4s suitable for use with Media\n     * Source Extensions.\n     */\n    var UINT32_MAX = Math.pow(2, 32) - 1;\n    var box, dinf, esds, ftyp, mdat, mfhd, minf, moof, moov, mvex, mvhd, trak, tkhd, mdia, mdhd, hdlr, sdtp, stbl, stsd, traf, trex, trun, types, MAJOR_BRAND, MINOR_VERSION, AVC1_BRAND, VIDEO_HDLR, AUDIO_HDLR, HDLR_TYPES, VMHD, SMHD, DREF, STCO, STSC, STSZ, STTS; // pre-calculate constants\n\n    (function () {\n      var i;\n      types = {\n        avc1: [],\n        // codingname\n        avcC: [],\n        btrt: [],\n        dinf: [],\n        dref: [],\n        esds: [],\n        ftyp: [],\n        hdlr: [],\n        mdat: [],\n        mdhd: [],\n        mdia: [],\n        mfhd: [],\n        minf: [],\n        moof: [],\n        moov: [],\n        mp4a: [],\n        // codingname\n        mvex: [],\n        mvhd: [],\n        sdtp: [],\n        smhd: [],\n        stbl: [],\n        stco: [],\n        stsc: [],\n        stsd: [],\n        stsz: [],\n        stts: [],\n        styp: [],\n        tfdt: [],\n        tfhd: [],\n        traf: [],\n        trak: [],\n        trun: [],\n        trex: [],\n        tkhd: [],\n        vmhd: []\n      }; // In environments where Uint8Array is undefined (e.g., IE8), skip set up so that we\n      // don't throw an error\n\n      if (typeof Uint8Array === 'undefined') {\n        return;\n      }\n\n      for (i in types) {\n        if (types.hasOwnProperty(i)) {\n          types[i] = [i.charCodeAt(0), i.charCodeAt(1), i.charCodeAt(2), i.charCodeAt(3)];\n        }\n      }\n\n      MAJOR_BRAND = new Uint8Array(['i'.charCodeAt(0), 's'.charCodeAt(0), 'o'.charCodeAt(0), 'm'.charCodeAt(0)]);\n      AVC1_BRAND = new Uint8Array(['a'.charCodeAt(0), 'v'.charCodeAt(0), 'c'.charCodeAt(0), '1'.charCodeAt(0)]);\n      MINOR_VERSION = new Uint8Array([0, 0, 0, 1]);\n      VIDEO_HDLR = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'\n      ]);\n      AUDIO_HDLR = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x53, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'\n      ]);\n      HDLR_TYPES = {\n        video: VIDEO_HDLR,\n        audio: AUDIO_HDLR\n      };\n      DREF = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01, // entry_count\n      0x00, 0x00, 0x00, 0x0c, // entry_size\n      0x75, 0x72, 0x6c, 0x20, // 'url' type\n      0x00, // version 0\n      0x00, 0x00, 0x01 // entry_flags\n      ]);\n      SMHD = new Uint8Array([0x00, // version\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, // balance, 0 means centered\n      0x00, 0x00 // reserved\n      ]);\n      STCO = new Uint8Array([0x00, // version\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00 // entry_count\n      ]);\n      STSC = STCO;\n      STSZ = new Uint8Array([0x00, // version\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00, // sample_size\n      0x00, 0x00, 0x00, 0x00 // sample_count\n      ]);\n      STTS = STCO;\n      VMHD = new Uint8Array([0x00, // version\n      0x00, 0x00, 0x01, // flags\n      0x00, 0x00, // graphicsmode\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // opcolor\n      ]);\n    })();\n\n    box = function box(type) {\n      var payload = [],\n          size = 0,\n          i,\n          result,\n          view;\n\n      for (i = 1; i < arguments.length; i++) {\n        payload.push(arguments[i]);\n      }\n\n      i = payload.length; // calculate the total size we need to allocate\n\n      while (i--) {\n        size += payload[i].byteLength;\n      }\n\n      result = new Uint8Array(size + 8);\n      view = new DataView(result.buffer, result.byteOffset, result.byteLength);\n      view.setUint32(0, result.byteLength);\n      result.set(type, 4); // copy the payload into the result\n\n      for (i = 0, size = 8; i < payload.length; i++) {\n        result.set(payload[i], size);\n        size += payload[i].byteLength;\n      }\n\n      return result;\n    };\n\n    dinf = function dinf() {\n      return box(types.dinf, box(types.dref, DREF));\n    };\n\n    esds = function esds(track) {\n      return box(types.esds, new Uint8Array([0x00, // version\n      0x00, 0x00, 0x00, // flags\n      // ES_Descriptor\n      0x03, // tag, ES_DescrTag\n      0x19, // length\n      0x00, 0x00, // ES_ID\n      0x00, // streamDependenceFlag, URL_flag, reserved, streamPriority\n      // DecoderConfigDescriptor\n      0x04, // tag, DecoderConfigDescrTag\n      0x11, // length\n      0x40, // object type\n      0x15, // streamType\n      0x00, 0x06, 0x00, // bufferSizeDB\n      0x00, 0x00, 0xda, 0xc0, // maxBitrate\n      0x00, 0x00, 0xda, 0xc0, // avgBitrate\n      // DecoderSpecificInfo\n      0x05, // tag, DecoderSpecificInfoTag\n      0x02, // length\n      // ISO/IEC 14496-3, AudioSpecificConfig\n      // for samplingFrequencyIndex see ISO/IEC 13818-7:2006, 8.1.3.2.2, Table 35\n      track.audioobjecttype << 3 | track.samplingfrequencyindex >>> 1, track.samplingfrequencyindex << 7 | track.channelcount << 3, 0x06, 0x01, 0x02 // GASpecificConfig\n      ]));\n    };\n\n    ftyp = function ftyp() {\n      return box(types.ftyp, MAJOR_BRAND, MINOR_VERSION, MAJOR_BRAND, AVC1_BRAND);\n    };\n\n    hdlr = function hdlr(type) {\n      return box(types.hdlr, HDLR_TYPES[type]);\n    };\n\n    mdat = function mdat(data) {\n      return box(types.mdat, data);\n    };\n\n    mdhd = function mdhd(track) {\n      var result = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x02, // creation_time\n      0x00, 0x00, 0x00, 0x03, // modification_time\n      0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n      track.duration >>> 24 & 0xFF, track.duration >>> 16 & 0xFF, track.duration >>> 8 & 0xFF, track.duration & 0xFF, // duration\n      0x55, 0xc4, // 'und' language (undetermined)\n      0x00, 0x00]); // Use the sample rate from the track metadata, when it is\n      // defined. The sample rate can be parsed out of an ADTS header, for\n      // instance.\n\n      if (track.samplerate) {\n        result[12] = track.samplerate >>> 24 & 0xFF;\n        result[13] = track.samplerate >>> 16 & 0xFF;\n        result[14] = track.samplerate >>> 8 & 0xFF;\n        result[15] = track.samplerate & 0xFF;\n      }\n\n      return box(types.mdhd, result);\n    };\n\n    mdia = function mdia(track) {\n      return box(types.mdia, mdhd(track), hdlr(track.type), minf(track));\n    };\n\n    mfhd = function mfhd(sequenceNumber) {\n      return box(types.mfhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // flags\n      (sequenceNumber & 0xFF000000) >> 24, (sequenceNumber & 0xFF0000) >> 16, (sequenceNumber & 0xFF00) >> 8, sequenceNumber & 0xFF // sequence_number\n      ]));\n    };\n\n    minf = function minf(track) {\n      return box(types.minf, track.type === 'video' ? box(types.vmhd, VMHD) : box(types.smhd, SMHD), dinf(), stbl(track));\n    };\n\n    moof = function moof(sequenceNumber, tracks) {\n      var trackFragments = [],\n          i = tracks.length; // build traf boxes for each track fragment\n\n      while (i--) {\n        trackFragments[i] = traf(tracks[i]);\n      }\n\n      return box.apply(null, [types.moof, mfhd(sequenceNumber)].concat(trackFragments));\n    };\n    /**\n     * Returns a movie box.\n     * @param tracks {array} the tracks associated with this movie\n     * @see ISO/IEC 14496-12:2012(E), section 8.2.1\n     */\n\n\n    moov = function moov(tracks) {\n      var i = tracks.length,\n          boxes = [];\n\n      while (i--) {\n        boxes[i] = trak(tracks[i]);\n      }\n\n      return box.apply(null, [types.moov, mvhd(0xffffffff)].concat(boxes).concat(mvex(tracks)));\n    };\n\n    mvex = function mvex(tracks) {\n      var i = tracks.length,\n          boxes = [];\n\n      while (i--) {\n        boxes[i] = trex(tracks[i]);\n      }\n\n      return box.apply(null, [types.mvex].concat(boxes));\n    };\n\n    mvhd = function mvhd(duration) {\n      var bytes = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01, // creation_time\n      0x00, 0x00, 0x00, 0x02, // modification_time\n      0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n      (duration & 0xFF000000) >> 24, (duration & 0xFF0000) >> 16, (duration & 0xFF00) >> 8, duration & 0xFF, // duration\n      0x00, 0x01, 0x00, 0x00, // 1.0 rate\n      0x01, 0x00, // 1.0 volume\n      0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined\n      0xff, 0xff, 0xff, 0xff // next_track_ID\n      ]);\n      return box(types.mvhd, bytes);\n    };\n\n    sdtp = function sdtp(track) {\n      var samples = track.samples || [],\n          bytes = new Uint8Array(4 + samples.length),\n          flags,\n          i; // leave the full box header (4 bytes) all zero\n      // write the sample table\n\n      for (i = 0; i < samples.length; i++) {\n        flags = samples[i].flags;\n        bytes[i + 4] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;\n      }\n\n      return box(types.sdtp, bytes);\n    };\n\n    stbl = function stbl(track) {\n      return box(types.stbl, stsd(track), box(types.stts, STTS), box(types.stsc, STSC), box(types.stsz, STSZ), box(types.stco, STCO));\n    };\n\n    (function () {\n      var videoSample, audioSample;\n\n      stsd = function stsd(track) {\n        return box(types.stsd, new Uint8Array([0x00, // version 0\n        0x00, 0x00, 0x00, // flags\n        0x00, 0x00, 0x00, 0x01]), track.type === 'video' ? videoSample(track) : audioSample(track));\n      };\n\n      videoSample = function videoSample(track) {\n        var sps = track.sps || [],\n            pps = track.pps || [],\n            sequenceParameterSets = [],\n            pictureParameterSets = [],\n            i; // assemble the SPSs\n\n        for (i = 0; i < sps.length; i++) {\n          sequenceParameterSets.push((sps[i].byteLength & 0xFF00) >>> 8);\n          sequenceParameterSets.push(sps[i].byteLength & 0xFF); // sequenceParameterSetLength\n\n          sequenceParameterSets = sequenceParameterSets.concat(Array.prototype.slice.call(sps[i])); // SPS\n        } // assemble the PPSs\n\n\n        for (i = 0; i < pps.length; i++) {\n          pictureParameterSets.push((pps[i].byteLength & 0xFF00) >>> 8);\n          pictureParameterSets.push(pps[i].byteLength & 0xFF);\n          pictureParameterSets = pictureParameterSets.concat(Array.prototype.slice.call(pps[i]));\n        }\n\n        return box(types.avc1, new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n        0x00, 0x01, // data_reference_index\n        0x00, 0x00, // pre_defined\n        0x00, 0x00, // reserved\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined\n        (track.width & 0xff00) >> 8, track.width & 0xff, // width\n        (track.height & 0xff00) >> 8, track.height & 0xff, // height\n        0x00, 0x48, 0x00, 0x00, // horizresolution\n        0x00, 0x48, 0x00, 0x00, // vertresolution\n        0x00, 0x00, 0x00, 0x00, // reserved\n        0x00, 0x01, // frame_count\n        0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x6a, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2d, 0x68, 0x6c, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // compressorname\n        0x00, 0x18, // depth = 24\n        0x11, 0x11 // pre_defined = -1\n        ]), box(types.avcC, new Uint8Array([0x01, // configurationVersion\n        track.profileIdc, // AVCProfileIndication\n        track.profileCompatibility, // profile_compatibility\n        track.levelIdc, // AVCLevelIndication\n        0xff // lengthSizeMinusOne, hard-coded to 4 bytes\n        ].concat([sps.length // numOfSequenceParameterSets\n        ]).concat(sequenceParameterSets).concat([pps.length // numOfPictureParameterSets\n        ]).concat(pictureParameterSets))), // \"PPS\"\n        box(types.btrt, new Uint8Array([0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB\n        0x00, 0x2d, 0xc6, 0xc0, // maxBitrate\n        0x00, 0x2d, 0xc6, 0xc0])) // avgBitrate\n        );\n      };\n\n      audioSample = function audioSample(track) {\n        return box(types.mp4a, new Uint8Array([// SampleEntry, ISO/IEC 14496-12\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n        0x00, 0x01, // data_reference_index\n        // AudioSampleEntry, ISO/IEC 14496-12\n        0x00, 0x00, 0x00, 0x00, // reserved\n        0x00, 0x00, 0x00, 0x00, // reserved\n        (track.channelcount & 0xff00) >> 8, track.channelcount & 0xff, // channelcount\n        (track.samplesize & 0xff00) >> 8, track.samplesize & 0xff, // samplesize\n        0x00, 0x00, // pre_defined\n        0x00, 0x00, // reserved\n        (track.samplerate & 0xff00) >> 8, track.samplerate & 0xff, 0x00, 0x00 // samplerate, 16.16\n        // MP4AudioSampleEntry, ISO/IEC 14496-14\n        ]), esds(track));\n      };\n    })();\n\n    tkhd = function tkhd(track) {\n      var result = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x07, // flags\n      0x00, 0x00, 0x00, 0x00, // creation_time\n      0x00, 0x00, 0x00, 0x00, // modification_time\n      (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF, // track_ID\n      0x00, 0x00, 0x00, 0x00, // reserved\n      (track.duration & 0xFF000000) >> 24, (track.duration & 0xFF0000) >> 16, (track.duration & 0xFF00) >> 8, track.duration & 0xFF, // duration\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, // layer\n      0x00, 0x00, // alternate_group\n      0x01, 0x00, // non-audio track volume\n      0x00, 0x00, // reserved\n      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n      (track.width & 0xFF00) >> 8, track.width & 0xFF, 0x00, 0x00, // width\n      (track.height & 0xFF00) >> 8, track.height & 0xFF, 0x00, 0x00 // height\n      ]);\n      return box(types.tkhd, result);\n    };\n    /**\n     * Generate a track fragment (traf) box. A traf box collects metadata\n     * about tracks in a movie fragment (moof) box.\n     */\n\n\n    traf = function traf(track) {\n      var trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable, dataOffset, upperWordBaseMediaDecodeTime, lowerWordBaseMediaDecodeTime;\n      trackFragmentHeader = box(types.tfhd, new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x3a, // flags\n      (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF, // track_ID\n      0x00, 0x00, 0x00, 0x01, // sample_description_index\n      0x00, 0x00, 0x00, 0x00, // default_sample_duration\n      0x00, 0x00, 0x00, 0x00, // default_sample_size\n      0x00, 0x00, 0x00, 0x00 // default_sample_flags\n      ]));\n      upperWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime / (UINT32_MAX + 1));\n      lowerWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime % (UINT32_MAX + 1));\n      trackFragmentDecodeTime = box(types.tfdt, new Uint8Array([0x01, // version 1\n      0x00, 0x00, 0x00, // flags\n      // baseMediaDecodeTime\n      upperWordBaseMediaDecodeTime >>> 24 & 0xFF, upperWordBaseMediaDecodeTime >>> 16 & 0xFF, upperWordBaseMediaDecodeTime >>> 8 & 0xFF, upperWordBaseMediaDecodeTime & 0xFF, lowerWordBaseMediaDecodeTime >>> 24 & 0xFF, lowerWordBaseMediaDecodeTime >>> 16 & 0xFF, lowerWordBaseMediaDecodeTime >>> 8 & 0xFF, lowerWordBaseMediaDecodeTime & 0xFF])); // the data offset specifies the number of bytes from the start of\n      // the containing moof to the first payload byte of the associated\n      // mdat\n\n      dataOffset = 32 + // tfhd\n      20 + // tfdt\n      8 + // traf header\n      16 + // mfhd\n      8 + // moof header\n      8; // mdat header\n      // audio tracks require less metadata\n\n      if (track.type === 'audio') {\n        trackFragmentRun = trun(track, dataOffset);\n        return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun);\n      } // video tracks should contain an independent and disposable samples\n      // box (sdtp)\n      // generate one and adjust offsets to match\n\n\n      sampleDependencyTable = sdtp(track);\n      trackFragmentRun = trun(track, sampleDependencyTable.length + dataOffset);\n      return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable);\n    };\n    /**\n     * Generate a track box.\n     * @param track {object} a track definition\n     * @return {Uint8Array} the track box\n     */\n\n\n    trak = function trak(track) {\n      track.duration = track.duration || 0xffffffff;\n      return box(types.trak, tkhd(track), mdia(track));\n    };\n\n    trex = function trex(track) {\n      var result = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF, // track_ID\n      0x00, 0x00, 0x00, 0x01, // default_sample_description_index\n      0x00, 0x00, 0x00, 0x00, // default_sample_duration\n      0x00, 0x00, 0x00, 0x00, // default_sample_size\n      0x00, 0x01, 0x00, 0x01 // default_sample_flags\n      ]); // the last two bytes of default_sample_flags is the sample\n      // degradation priority, a hint about the importance of this sample\n      // relative to others. Lower the degradation priority for all sample\n      // types other than video.\n\n      if (track.type !== 'video') {\n        result[result.length - 1] = 0x00;\n      }\n\n      return box(types.trex, result);\n    };\n\n    (function () {\n      var audioTrun, videoTrun, trunHeader; // This method assumes all samples are uniform. That is, if a\n      // duration is present for the first sample, it will be present for\n      // all subsequent samples.\n      // see ISO/IEC 14496-12:2012, Section 8.8.8.1\n\n      trunHeader = function trunHeader(samples, offset) {\n        var durationPresent = 0,\n            sizePresent = 0,\n            flagsPresent = 0,\n            compositionTimeOffset = 0; // trun flag constants\n\n        if (samples.length) {\n          if (samples[0].duration !== undefined) {\n            durationPresent = 0x1;\n          }\n\n          if (samples[0].size !== undefined) {\n            sizePresent = 0x2;\n          }\n\n          if (samples[0].flags !== undefined) {\n            flagsPresent = 0x4;\n          }\n\n          if (samples[0].compositionTimeOffset !== undefined) {\n            compositionTimeOffset = 0x8;\n          }\n        }\n\n        return [0x00, // version 0\n        0x00, durationPresent | sizePresent | flagsPresent | compositionTimeOffset, 0x01, // flags\n        (samples.length & 0xFF000000) >>> 24, (samples.length & 0xFF0000) >>> 16, (samples.length & 0xFF00) >>> 8, samples.length & 0xFF, // sample_count\n        (offset & 0xFF000000) >>> 24, (offset & 0xFF0000) >>> 16, (offset & 0xFF00) >>> 8, offset & 0xFF // data_offset\n        ];\n      };\n\n      videoTrun = function videoTrun(track, offset) {\n        var bytes, samples, sample, i;\n        samples = track.samples || [];\n        offset += 8 + 12 + 16 * samples.length;\n        bytes = trunHeader(samples, offset);\n\n        for (i = 0; i < samples.length; i++) {\n          sample = samples[i];\n          bytes = bytes.concat([(sample.duration & 0xFF000000) >>> 24, (sample.duration & 0xFF0000) >>> 16, (sample.duration & 0xFF00) >>> 8, sample.duration & 0xFF, // sample_duration\n          (sample.size & 0xFF000000) >>> 24, (sample.size & 0xFF0000) >>> 16, (sample.size & 0xFF00) >>> 8, sample.size & 0xFF, // sample_size\n          sample.flags.isLeading << 2 | sample.flags.dependsOn, sample.flags.isDependedOn << 6 | sample.flags.hasRedundancy << 4 | sample.flags.paddingValue << 1 | sample.flags.isNonSyncSample, sample.flags.degradationPriority & 0xF0 << 8, sample.flags.degradationPriority & 0x0F, // sample_flags\n          (sample.compositionTimeOffset & 0xFF000000) >>> 24, (sample.compositionTimeOffset & 0xFF0000) >>> 16, (sample.compositionTimeOffset & 0xFF00) >>> 8, sample.compositionTimeOffset & 0xFF // sample_composition_time_offset\n          ]);\n        }\n\n        return box(types.trun, new Uint8Array(bytes));\n      };\n\n      audioTrun = function audioTrun(track, offset) {\n        var bytes, samples, sample, i;\n        samples = track.samples || [];\n        offset += 8 + 12 + 8 * samples.length;\n        bytes = trunHeader(samples, offset);\n\n        for (i = 0; i < samples.length; i++) {\n          sample = samples[i];\n          bytes = bytes.concat([(sample.duration & 0xFF000000) >>> 24, (sample.duration & 0xFF0000) >>> 16, (sample.duration & 0xFF00) >>> 8, sample.duration & 0xFF, // sample_duration\n          (sample.size & 0xFF000000) >>> 24, (sample.size & 0xFF0000) >>> 16, (sample.size & 0xFF00) >>> 8, sample.size & 0xFF]); // sample_size\n        }\n\n        return box(types.trun, new Uint8Array(bytes));\n      };\n\n      trun = function trun(track, offset) {\n        if (track.type === 'audio') {\n          return audioTrun(track, offset);\n        }\n\n        return videoTrun(track, offset);\n      };\n    })();\n\n    var mp4Generator = {\n      ftyp: ftyp,\n      mdat: mdat,\n      moof: moof,\n      moov: moov,\n      initSegment: function initSegment(tracks) {\n        var fileType = ftyp(),\n            movie = moov(tracks),\n            result;\n        result = new Uint8Array(fileType.byteLength + movie.byteLength);\n        result.set(fileType);\n        result.set(movie, fileType.byteLength);\n        return result;\n      }\n    };\n\n    var toUnsigned = function toUnsigned(value) {\n      return value >>> 0;\n    };\n\n    var bin = {\n      toUnsigned: toUnsigned\n    };\n    var toUnsigned$1 = bin.toUnsigned;\n\n    var _findBox, parseType, timescale, startTime, getVideoTrackIds; // Find the data for a box specified by its path\n\n\n    _findBox = function findBox(data, path) {\n      var results = [],\n          i,\n          size,\n          type,\n          end,\n          subresults;\n\n      if (!path.length) {\n        // short-circuit the search for empty paths\n        return null;\n      }\n\n      for (i = 0; i < data.byteLength;) {\n        size = toUnsigned$1(data[i] << 24 | data[i + 1] << 16 | data[i + 2] << 8 | data[i + 3]);\n        type = parseType(data.subarray(i + 4, i + 8));\n        end = size > 1 ? i + size : data.byteLength;\n\n        if (type === path[0]) {\n          if (path.length === 1) {\n            // this is the end of the path and we've found the box we were\n            // looking for\n            results.push(data.subarray(i + 8, end));\n          } else {\n            // recursively search for the next box along the path\n            subresults = _findBox(data.subarray(i + 8, end), path.slice(1));\n\n            if (subresults.length) {\n              results = results.concat(subresults);\n            }\n          }\n        }\n\n        i = end;\n      } // we've finished searching all of data\n\n\n      return results;\n    };\n    /**\n     * Returns the string representation of an ASCII encoded four byte buffer.\n     * @param buffer {Uint8Array} a four-byte buffer to translate\n     * @return {string} the corresponding string\n     */\n\n\n    parseType = function parseType(buffer) {\n      var result = '';\n      result += String.fromCharCode(buffer[0]);\n      result += String.fromCharCode(buffer[1]);\n      result += String.fromCharCode(buffer[2]);\n      result += String.fromCharCode(buffer[3]);\n      return result;\n    };\n    /**\n     * Parses an MP4 initialization segment and extracts the timescale\n     * values for any declared tracks. Timescale values indicate the\n     * number of clock ticks per second to assume for time-based values\n     * elsewhere in the MP4.\n     *\n     * To determine the start time of an MP4, you need two pieces of\n     * information: the timescale unit and the earliest base media decode\n     * time. Multiple timescales can be specified within an MP4 but the\n     * base media decode time is always expressed in the timescale from\n     * the media header box for the track:\n     * ```\n     * moov > trak > mdia > mdhd.timescale\n     * ```\n     * @param init {Uint8Array} the bytes of the init segment\n     * @return {object} a hash of track ids to timescale values or null if\n     * the init segment is malformed.\n     */\n\n\n    timescale = function timescale(init) {\n      var result = {},\n          traks = _findBox(init, ['moov', 'trak']); // mdhd timescale\n\n\n      return traks.reduce(function (result, trak) {\n        var tkhd, version, index, id, mdhd;\n        tkhd = _findBox(trak, ['tkhd'])[0];\n\n        if (!tkhd) {\n          return null;\n        }\n\n        version = tkhd[0];\n        index = version === 0 ? 12 : 20;\n        id = toUnsigned$1(tkhd[index] << 24 | tkhd[index + 1] << 16 | tkhd[index + 2] << 8 | tkhd[index + 3]);\n        mdhd = _findBox(trak, ['mdia', 'mdhd'])[0];\n\n        if (!mdhd) {\n          return null;\n        }\n\n        version = mdhd[0];\n        index = version === 0 ? 12 : 20;\n        result[id] = toUnsigned$1(mdhd[index] << 24 | mdhd[index + 1] << 16 | mdhd[index + 2] << 8 | mdhd[index + 3]);\n        return result;\n      }, result);\n    };\n    /**\n     * Determine the base media decode start time, in seconds, for an MP4\n     * fragment. If multiple fragments are specified, the earliest time is\n     * returned.\n     *\n     * The base media decode time can be parsed from track fragment\n     * metadata:\n     * ```\n     * moof > traf > tfdt.baseMediaDecodeTime\n     * ```\n     * It requires the timescale value from the mdhd to interpret.\n     *\n     * @param timescale {object} a hash of track ids to timescale values.\n     * @return {number} the earliest base media decode start time for the\n     * fragment, in seconds\n     */\n\n\n    startTime = function startTime(timescale, fragment) {\n      var trafs, baseTimes, result; // we need info from two childrend of each track fragment box\n\n      trafs = _findBox(fragment, ['moof', 'traf']); // determine the start times for each track\n\n      baseTimes = [].concat.apply([], trafs.map(function (traf) {\n        return _findBox(traf, ['tfhd']).map(function (tfhd) {\n          var id, scale, baseTime; // get the track id from the tfhd\n\n          id = toUnsigned$1(tfhd[4] << 24 | tfhd[5] << 16 | tfhd[6] << 8 | tfhd[7]); // assume a 90kHz clock if no timescale was specified\n\n          scale = timescale[id] || 90e3; // get the base media decode time from the tfdt\n\n          baseTime = _findBox(traf, ['tfdt']).map(function (tfdt) {\n            var version, result;\n            version = tfdt[0];\n            result = toUnsigned$1(tfdt[4] << 24 | tfdt[5] << 16 | tfdt[6] << 8 | tfdt[7]);\n\n            if (version === 1) {\n              result *= Math.pow(2, 32);\n              result += toUnsigned$1(tfdt[8] << 24 | tfdt[9] << 16 | tfdt[10] << 8 | tfdt[11]);\n            }\n\n            return result;\n          })[0];\n          baseTime = baseTime || Infinity; // convert base time to seconds\n\n          return baseTime / scale;\n        });\n      })); // return the minimum\n\n      result = Math.min.apply(null, baseTimes);\n      return isFinite(result) ? result : 0;\n    };\n    /**\n      * Find the trackIds of the video tracks in this source.\n      * Found by parsing the Handler Reference and Track Header Boxes:\n      *   moov > trak > mdia > hdlr\n      *   moov > trak > tkhd\n      *\n      * @param {Uint8Array} init - The bytes of the init segment for this source\n      * @return {Number[]} A list of trackIds\n      *\n      * @see ISO-BMFF-12/2015, Section 8.4.3\n     **/\n\n\n    getVideoTrackIds = function getVideoTrackIds(init) {\n      var traks = _findBox(init, ['moov', 'trak']);\n\n      var videoTrackIds = [];\n      traks.forEach(function (trak) {\n        var hdlrs = _findBox(trak, ['mdia', 'hdlr']);\n\n        var tkhds = _findBox(trak, ['tkhd']);\n\n        hdlrs.forEach(function (hdlr, index) {\n          var handlerType = parseType(hdlr.subarray(8, 12));\n          var tkhd = tkhds[index];\n          var view;\n          var version;\n          var trackId;\n\n          if (handlerType === 'vide') {\n            view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);\n            version = view.getUint8(0);\n            trackId = version === 0 ? view.getUint32(12) : view.getUint32(20);\n            videoTrackIds.push(trackId);\n          }\n        });\n      });\n      return videoTrackIds;\n    };\n\n    var probe = {\n      findBox: _findBox,\n      parseType: parseType,\n      timescale: timescale,\n      startTime: startTime,\n      videoTrackIds: getVideoTrackIds\n    };\n    /**\n     * mux.js\n     *\n     * Copyright (c) 2014 Brightcove\n     * All rights reserved.\n     *\n     * A lightweight readable stream implemention that handles event dispatching.\n     * Objects that inherit from streams should call init in their constructors.\n     */\n\n    var Stream = function Stream() {\n      this.init = function () {\n        var listeners = {};\n        /**\n         * Add a listener for a specified event type.\n         * @param type {string} the event name\n         * @param listener {function} the callback to be invoked when an event of\n         * the specified type occurs\n         */\n\n        this.on = function (type, listener) {\n          if (!listeners[type]) {\n            listeners[type] = [];\n          }\n\n          listeners[type] = listeners[type].concat(listener);\n        };\n        /**\n         * Remove a listener for a specified event type.\n         * @param type {string} the event name\n         * @param listener {function} a function previously registered for this\n         * type of event through `on`\n         */\n\n\n        this.off = function (type, listener) {\n          var index;\n\n          if (!listeners[type]) {\n            return false;\n          }\n\n          index = listeners[type].indexOf(listener);\n          listeners[type] = listeners[type].slice();\n          listeners[type].splice(index, 1);\n          return index > -1;\n        };\n        /**\n         * Trigger an event of the specified type on this stream. Any additional\n         * arguments to this function are passed as parameters to event listeners.\n         * @param type {string} the event name\n         */\n\n\n        this.trigger = function (type) {\n          var callbacks, i, length, args;\n          callbacks = listeners[type];\n\n          if (!callbacks) {\n            return;\n          } // Slicing the arguments on every invocation of this method\n          // can add a significant amount of overhead. Avoid the\n          // intermediate object creation for the common case of a\n          // single callback argument\n\n\n          if (arguments.length === 2) {\n            length = callbacks.length;\n\n            for (i = 0; i < length; ++i) {\n              callbacks[i].call(this, arguments[1]);\n            }\n          } else {\n            args = [];\n            i = arguments.length;\n\n            for (i = 1; i < arguments.length; ++i) {\n              args.push(arguments[i]);\n            }\n\n            length = callbacks.length;\n\n            for (i = 0; i < length; ++i) {\n              callbacks[i].apply(this, args);\n            }\n          }\n        };\n        /**\n         * Destroys the stream and cleans up.\n         */\n\n\n        this.dispose = function () {\n          listeners = {};\n        };\n      };\n    };\n    /**\n     * Forwards all `data` events on this stream to the destination stream. The\n     * destination stream should provide a method `push` to receive the data\n     * events as they arrive.\n     * @param destination {stream} the stream that will receive all `data` events\n     * @param autoFlush {boolean} if false, we will not call `flush` on the destination\n     *                            when the current stream emits a 'done' event\n     * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n     */\n\n\n    Stream.prototype.pipe = function (destination) {\n      this.on('data', function (data) {\n        destination.push(data);\n      });\n      this.on('done', function (flushSource) {\n        destination.flush(flushSource);\n      });\n      return destination;\n    }; // Default stream functions that are expected to be overridden to perform\n    // actual work. These are provided by the prototype as a sort of no-op\n    // implementation so that we don't have to check for their existence in the\n    // `pipe` function above.\n\n\n    Stream.prototype.push = function (data) {\n      this.trigger('data', data);\n    };\n\n    Stream.prototype.flush = function (flushSource) {\n      this.trigger('done', flushSource);\n    };\n\n    var stream = Stream; // Convert an array of nal units into an array of frames with each frame being\n    // composed of the nal units that make up that frame\n    // Also keep track of cummulative data about the frame from the nal units such\n    // as the frame duration, starting pts, etc.\n\n    var groupNalsIntoFrames = function groupNalsIntoFrames(nalUnits) {\n      var i,\n          currentNal,\n          currentFrame = [],\n          frames = [];\n      currentFrame.byteLength = 0;\n\n      for (i = 0; i < nalUnits.length; i++) {\n        currentNal = nalUnits[i]; // Split on 'aud'-type nal units\n\n        if (currentNal.nalUnitType === 'access_unit_delimiter_rbsp') {\n          // Since the very first nal unit is expected to be an AUD\n          // only push to the frames array when currentFrame is not empty\n          if (currentFrame.length) {\n            currentFrame.duration = currentNal.dts - currentFrame.dts;\n            frames.push(currentFrame);\n          }\n\n          currentFrame = [currentNal];\n          currentFrame.byteLength = currentNal.data.byteLength;\n          currentFrame.pts = currentNal.pts;\n          currentFrame.dts = currentNal.dts;\n        } else {\n          // Specifically flag key frames for ease of use later\n          if (currentNal.nalUnitType === 'slice_layer_without_partitioning_rbsp_idr') {\n            currentFrame.keyFrame = true;\n          }\n\n          currentFrame.duration = currentNal.dts - currentFrame.dts;\n          currentFrame.byteLength += currentNal.data.byteLength;\n          currentFrame.push(currentNal);\n        }\n      } // For the last frame, use the duration of the previous frame if we\n      // have nothing better to go on\n\n\n      if (frames.length && (!currentFrame.duration || currentFrame.duration <= 0)) {\n        currentFrame.duration = frames[frames.length - 1].duration;\n      } // Push the final frame\n\n\n      frames.push(currentFrame);\n      return frames;\n    }; // Convert an array of frames into an array of Gop with each Gop being composed\n    // of the frames that make up that Gop\n    // Also keep track of cummulative data about the Gop from the frames such as the\n    // Gop duration, starting pts, etc.\n\n\n    var groupFramesIntoGops = function groupFramesIntoGops(frames) {\n      var i,\n          currentFrame,\n          currentGop = [],\n          gops = []; // We must pre-set some of the values on the Gop since we\n      // keep running totals of these values\n\n      currentGop.byteLength = 0;\n      currentGop.nalCount = 0;\n      currentGop.duration = 0;\n      currentGop.pts = frames[0].pts;\n      currentGop.dts = frames[0].dts; // store some metadata about all the Gops\n\n      gops.byteLength = 0;\n      gops.nalCount = 0;\n      gops.duration = 0;\n      gops.pts = frames[0].pts;\n      gops.dts = frames[0].dts;\n\n      for (i = 0; i < frames.length; i++) {\n        currentFrame = frames[i];\n\n        if (currentFrame.keyFrame) {\n          // Since the very first frame is expected to be an keyframe\n          // only push to the gops array when currentGop is not empty\n          if (currentGop.length) {\n            gops.push(currentGop);\n            gops.byteLength += currentGop.byteLength;\n            gops.nalCount += currentGop.nalCount;\n            gops.duration += currentGop.duration;\n          }\n\n          currentGop = [currentFrame];\n          currentGop.nalCount = currentFrame.length;\n          currentGop.byteLength = currentFrame.byteLength;\n          currentGop.pts = currentFrame.pts;\n          currentGop.dts = currentFrame.dts;\n          currentGop.duration = currentFrame.duration;\n        } else {\n          currentGop.duration += currentFrame.duration;\n          currentGop.nalCount += currentFrame.length;\n          currentGop.byteLength += currentFrame.byteLength;\n          currentGop.push(currentFrame);\n        }\n      }\n\n      if (gops.length && currentGop.duration <= 0) {\n        currentGop.duration = gops[gops.length - 1].duration;\n      }\n\n      gops.byteLength += currentGop.byteLength;\n      gops.nalCount += currentGop.nalCount;\n      gops.duration += currentGop.duration; // push the final Gop\n\n      gops.push(currentGop);\n      return gops;\n    };\n    /*\n     * Search for the first keyframe in the GOPs and throw away all frames\n     * until that keyframe. Then extend the duration of the pulled keyframe\n     * and pull the PTS and DTS of the keyframe so that it covers the time\n     * range of the frames that were disposed.\n     *\n     * @param {Array} gops video GOPs\n     * @returns {Array} modified video GOPs\n     */\n\n\n    var extendFirstKeyFrame = function extendFirstKeyFrame(gops) {\n      var currentGop;\n\n      if (!gops[0][0].keyFrame && gops.length > 1) {\n        // Remove the first GOP\n        currentGop = gops.shift();\n        gops.byteLength -= currentGop.byteLength;\n        gops.nalCount -= currentGop.nalCount; // Extend the first frame of what is now the\n        // first gop to cover the time period of the\n        // frames we just removed\n\n        gops[0][0].dts = currentGop.dts;\n        gops[0][0].pts = currentGop.pts;\n        gops[0][0].duration += currentGop.duration;\n      }\n\n      return gops;\n    };\n    /**\n     * Default sample object\n     * see ISO/IEC 14496-12:2012, section 8.6.4.3\n     */\n\n\n    var createDefaultSample = function createDefaultSample() {\n      return {\n        size: 0,\n        flags: {\n          isLeading: 0,\n          dependsOn: 1,\n          isDependedOn: 0,\n          hasRedundancy: 0,\n          degradationPriority: 0,\n          isNonSyncSample: 1\n        }\n      };\n    };\n    /*\n     * Collates information from a video frame into an object for eventual\n     * entry into an MP4 sample table.\n     *\n     * @param {Object} frame the video frame\n     * @param {Number} dataOffset the byte offset to position the sample\n     * @return {Object} object containing sample table info for a frame\n     */\n\n\n    var sampleForFrame = function sampleForFrame(frame, dataOffset) {\n      var sample = createDefaultSample();\n      sample.dataOffset = dataOffset;\n      sample.compositionTimeOffset = frame.pts - frame.dts;\n      sample.duration = frame.duration;\n      sample.size = 4 * frame.length; // Space for nal unit size\n\n      sample.size += frame.byteLength;\n\n      if (frame.keyFrame) {\n        sample.flags.dependsOn = 2;\n        sample.flags.isNonSyncSample = 0;\n      }\n\n      return sample;\n    }; // generate the track's sample table from an array of gops\n\n\n    var generateSampleTable = function generateSampleTable(gops, baseDataOffset) {\n      var h,\n          i,\n          sample,\n          currentGop,\n          currentFrame,\n          dataOffset = baseDataOffset || 0,\n          samples = [];\n\n      for (h = 0; h < gops.length; h++) {\n        currentGop = gops[h];\n\n        for (i = 0; i < currentGop.length; i++) {\n          currentFrame = currentGop[i];\n          sample = sampleForFrame(currentFrame, dataOffset);\n          dataOffset += sample.size;\n          samples.push(sample);\n        }\n      }\n\n      return samples;\n    }; // generate the track's raw mdat data from an array of gops\n\n\n    var concatenateNalData = function concatenateNalData(gops) {\n      var h,\n          i,\n          j,\n          currentGop,\n          currentFrame,\n          currentNal,\n          dataOffset = 0,\n          nalsByteLength = gops.byteLength,\n          numberOfNals = gops.nalCount,\n          totalByteLength = nalsByteLength + 4 * numberOfNals,\n          data = new Uint8Array(totalByteLength),\n          view = new DataView(data.buffer); // For each Gop..\n\n      for (h = 0; h < gops.length; h++) {\n        currentGop = gops[h]; // For each Frame..\n\n        for (i = 0; i < currentGop.length; i++) {\n          currentFrame = currentGop[i]; // For each NAL..\n\n          for (j = 0; j < currentFrame.length; j++) {\n            currentNal = currentFrame[j];\n            view.setUint32(dataOffset, currentNal.data.byteLength);\n            dataOffset += 4;\n            data.set(currentNal.data, dataOffset);\n            dataOffset += currentNal.data.byteLength;\n          }\n        }\n      }\n\n      return data;\n    };\n\n    var frameUtils = {\n      groupNalsIntoFrames: groupNalsIntoFrames,\n      groupFramesIntoGops: groupFramesIntoGops,\n      extendFirstKeyFrame: extendFirstKeyFrame,\n      generateSampleTable: generateSampleTable,\n      concatenateNalData: concatenateNalData\n    };\n    var highPrefix = [33, 16, 5, 32, 164, 27];\n    var lowPrefix = [33, 65, 108, 84, 1, 2, 4, 8, 168, 2, 4, 8, 17, 191, 252];\n\n    var zeroFill = function zeroFill(count) {\n      var a = [];\n\n      while (count--) {\n        a.push(0);\n      }\n\n      return a;\n    };\n\n    var makeTable = function makeTable(metaTable) {\n      return Object.keys(metaTable).reduce(function (obj, key) {\n        obj[key] = new Uint8Array(metaTable[key].reduce(function (arr, part) {\n          return arr.concat(part);\n        }, []));\n        return obj;\n      }, {});\n    }; // Frames-of-silence to use for filling in missing AAC frames\n\n\n    var coneOfSilence = {\n      96000: [highPrefix, [227, 64], zeroFill(154), [56]],\n      88200: [highPrefix, [231], zeroFill(170), [56]],\n      64000: [highPrefix, [248, 192], zeroFill(240), [56]],\n      48000: [highPrefix, [255, 192], zeroFill(268), [55, 148, 128], zeroFill(54), [112]],\n      44100: [highPrefix, [255, 192], zeroFill(268), [55, 163, 128], zeroFill(84), [112]],\n      32000: [highPrefix, [255, 192], zeroFill(268), [55, 234], zeroFill(226), [112]],\n      24000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 112], zeroFill(126), [224]],\n      16000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 255], zeroFill(269), [223, 108], zeroFill(195), [1, 192]],\n      12000: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 253, 128], zeroFill(259), [56]],\n      11025: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 255, 192], zeroFill(268), [55, 175, 128], zeroFill(108), [112]],\n      8000: [lowPrefix, zeroFill(268), [3, 121, 16], zeroFill(47), [7]]\n    };\n    var silence = makeTable(coneOfSilence);\n    var ONE_SECOND_IN_TS = 90000,\n        // 90kHz clock\n    secondsToVideoTs,\n        secondsToAudioTs,\n        videoTsToSeconds,\n        audioTsToSeconds,\n        audioTsToVideoTs,\n        videoTsToAudioTs;\n\n    secondsToVideoTs = function secondsToVideoTs(seconds) {\n      return seconds * ONE_SECOND_IN_TS;\n    };\n\n    secondsToAudioTs = function secondsToAudioTs(seconds, sampleRate) {\n      return seconds * sampleRate;\n    };\n\n    videoTsToSeconds = function videoTsToSeconds(timestamp) {\n      return timestamp / ONE_SECOND_IN_TS;\n    };\n\n    audioTsToSeconds = function audioTsToSeconds(timestamp, sampleRate) {\n      return timestamp / sampleRate;\n    };\n\n    audioTsToVideoTs = function audioTsToVideoTs(timestamp, sampleRate) {\n      return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));\n    };\n\n    videoTsToAudioTs = function videoTsToAudioTs(timestamp, sampleRate) {\n      return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);\n    };\n\n    var clock = {\n      secondsToVideoTs: secondsToVideoTs,\n      secondsToAudioTs: secondsToAudioTs,\n      videoTsToSeconds: videoTsToSeconds,\n      audioTsToSeconds: audioTsToSeconds,\n      audioTsToVideoTs: audioTsToVideoTs,\n      videoTsToAudioTs: videoTsToAudioTs\n    };\n    var ONE_SECOND_IN_TS$1 = 90000; // 90kHz clock\n\n    /**\n     * Sum the `byteLength` properties of the data in each AAC frame\n     */\n\n    var sumFrameByteLengths = function sumFrameByteLengths(array) {\n      var i,\n          currentObj,\n          sum = 0; // sum the byteLength's all each nal unit in the frame\n\n      for (i = 0; i < array.length; i++) {\n        currentObj = array[i];\n        sum += currentObj.data.byteLength;\n      }\n\n      return sum;\n    }; // Possibly pad (prefix) the audio track with silence if appending this track\n    // would lead to the introduction of a gap in the audio buffer\n\n\n    var prefixWithSilence = function prefixWithSilence(track, frames, audioAppendStartTs, videoBaseMediaDecodeTime) {\n      var baseMediaDecodeTimeTs,\n          frameDuration = 0,\n          audioGapDuration = 0,\n          audioFillFrameCount = 0,\n          audioFillDuration = 0,\n          silentFrame,\n          i;\n\n      if (!frames.length) {\n        return;\n      }\n\n      baseMediaDecodeTimeTs = clock.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate); // determine frame clock duration based on sample rate, round up to avoid overfills\n\n      frameDuration = Math.ceil(ONE_SECOND_IN_TS$1 / (track.samplerate / 1024));\n\n      if (audioAppendStartTs && videoBaseMediaDecodeTime) {\n        // insert the shortest possible amount (audio gap or audio to video gap)\n        audioGapDuration = baseMediaDecodeTimeTs - Math.max(audioAppendStartTs, videoBaseMediaDecodeTime); // number of full frames in the audio gap\n\n        audioFillFrameCount = Math.floor(audioGapDuration / frameDuration);\n        audioFillDuration = audioFillFrameCount * frameDuration;\n      } // don't attempt to fill gaps smaller than a single frame or larger\n      // than a half second\n\n\n      if (audioFillFrameCount < 1 || audioFillDuration > ONE_SECOND_IN_TS$1 / 2) {\n        return;\n      }\n\n      silentFrame = silence[track.samplerate];\n\n      if (!silentFrame) {\n        // we don't have a silent frame pregenerated for the sample rate, so use a frame\n        // from the content instead\n        silentFrame = frames[0].data;\n      }\n\n      for (i = 0; i < audioFillFrameCount; i++) {\n        frames.splice(i, 0, {\n          data: silentFrame\n        });\n      }\n\n      track.baseMediaDecodeTime -= Math.floor(clock.videoTsToAudioTs(audioFillDuration, track.samplerate));\n    }; // If the audio segment extends before the earliest allowed dts\n    // value, remove AAC frames until starts at or after the earliest\n    // allowed DTS so that we don't end up with a negative baseMedia-\n    // DecodeTime for the audio track\n\n\n    var trimAdtsFramesByEarliestDts = function trimAdtsFramesByEarliestDts(adtsFrames, track, earliestAllowedDts) {\n      if (track.minSegmentDts >= earliestAllowedDts) {\n        return adtsFrames;\n      } // We will need to recalculate the earliest segment Dts\n\n\n      track.minSegmentDts = Infinity;\n      return adtsFrames.filter(function (currentFrame) {\n        // If this is an allowed frame, keep it and record it's Dts\n        if (currentFrame.dts >= earliestAllowedDts) {\n          track.minSegmentDts = Math.min(track.minSegmentDts, currentFrame.dts);\n          track.minSegmentPts = track.minSegmentDts;\n          return true;\n        } // Otherwise, discard it\n\n\n        return false;\n      });\n    }; // generate the track's raw mdat data from an array of frames\n\n\n    var generateSampleTable$1 = function generateSampleTable(frames) {\n      var i,\n          currentFrame,\n          samples = [];\n\n      for (i = 0; i < frames.length; i++) {\n        currentFrame = frames[i];\n        samples.push({\n          size: currentFrame.data.byteLength,\n          duration: 1024 // For AAC audio, all samples contain 1024 samples\n\n        });\n      }\n\n      return samples;\n    }; // generate the track's sample table from an array of frames\n\n\n    var concatenateFrameData = function concatenateFrameData(frames) {\n      var i,\n          currentFrame,\n          dataOffset = 0,\n          data = new Uint8Array(sumFrameByteLengths(frames));\n\n      for (i = 0; i < frames.length; i++) {\n        currentFrame = frames[i];\n        data.set(currentFrame.data, dataOffset);\n        dataOffset += currentFrame.data.byteLength;\n      }\n\n      return data;\n    };\n\n    var audioFrameUtils = {\n      prefixWithSilence: prefixWithSilence,\n      trimAdtsFramesByEarliestDts: trimAdtsFramesByEarliestDts,\n      generateSampleTable: generateSampleTable$1,\n      concatenateFrameData: concatenateFrameData\n    };\n    var ONE_SECOND_IN_TS$2 = 90000; // 90kHz clock\n\n    /**\n     * Store information about the start and end of the track and the\n     * duration for each frame/sample we process in order to calculate\n     * the baseMediaDecodeTime\n     */\n\n    var collectDtsInfo = function collectDtsInfo(track, data) {\n      if (typeof data.pts === 'number') {\n        if (track.timelineStartInfo.pts === undefined) {\n          track.timelineStartInfo.pts = data.pts;\n        }\n\n        if (track.minSegmentPts === undefined) {\n          track.minSegmentPts = data.pts;\n        } else {\n          track.minSegmentPts = Math.min(track.minSegmentPts, data.pts);\n        }\n\n        if (track.maxSegmentPts === undefined) {\n          track.maxSegmentPts = data.pts;\n        } else {\n          track.maxSegmentPts = Math.max(track.maxSegmentPts, data.pts);\n        }\n      }\n\n      if (typeof data.dts === 'number') {\n        if (track.timelineStartInfo.dts === undefined) {\n          track.timelineStartInfo.dts = data.dts;\n        }\n\n        if (track.minSegmentDts === undefined) {\n          track.minSegmentDts = data.dts;\n        } else {\n          track.minSegmentDts = Math.min(track.minSegmentDts, data.dts);\n        }\n\n        if (track.maxSegmentDts === undefined) {\n          track.maxSegmentDts = data.dts;\n        } else {\n          track.maxSegmentDts = Math.max(track.maxSegmentDts, data.dts);\n        }\n      }\n    };\n    /**\n     * Clear values used to calculate the baseMediaDecodeTime between\n     * tracks\n     */\n\n\n    var clearDtsInfo = function clearDtsInfo(track) {\n      delete track.minSegmentDts;\n      delete track.maxSegmentDts;\n      delete track.minSegmentPts;\n      delete track.maxSegmentPts;\n    };\n    /**\n     * Calculate the track's baseMediaDecodeTime based on the earliest\n     * DTS the transmuxer has ever seen and the minimum DTS for the\n     * current track\n     * @param track {object} track metadata configuration\n     * @param keepOriginalTimestamps {boolean} If true, keep the timestamps\n     *        in the source; false to adjust the first segment to start at 0.\n     */\n\n\n    var calculateTrackBaseMediaDecodeTime = function calculateTrackBaseMediaDecodeTime(track, keepOriginalTimestamps) {\n      var baseMediaDecodeTime,\n          scale,\n          minSegmentDts = track.minSegmentDts; // Optionally adjust the time so the first segment starts at zero.\n\n      if (!keepOriginalTimestamps) {\n        minSegmentDts -= track.timelineStartInfo.dts;\n      } // track.timelineStartInfo.baseMediaDecodeTime is the location, in time, where\n      // we want the start of the first segment to be placed\n\n\n      baseMediaDecodeTime = track.timelineStartInfo.baseMediaDecodeTime; // Add to that the distance this segment is from the very first\n\n      baseMediaDecodeTime += minSegmentDts; // baseMediaDecodeTime must not become negative\n\n      baseMediaDecodeTime = Math.max(0, baseMediaDecodeTime);\n\n      if (track.type === 'audio') {\n        // Audio has a different clock equal to the sampling_rate so we need to\n        // scale the PTS values into the clock rate of the track\n        scale = track.samplerate / ONE_SECOND_IN_TS$2;\n        baseMediaDecodeTime *= scale;\n        baseMediaDecodeTime = Math.floor(baseMediaDecodeTime);\n      }\n\n      return baseMediaDecodeTime;\n    };\n\n    var trackDecodeInfo = {\n      clearDtsInfo: clearDtsInfo,\n      calculateTrackBaseMediaDecodeTime: calculateTrackBaseMediaDecodeTime,\n      collectDtsInfo: collectDtsInfo\n    };\n    /**\n     * mux.js\n     *\n     * Copyright (c) 2015 Brightcove\n     * All rights reserved.\n     *\n     * Reads in-band caption information from a video elementary\n     * stream. Captions must follow the CEA-708 standard for injection\n     * into an MPEG-2 transport streams.\n     * @see https://en.wikipedia.org/wiki/CEA-708\n     * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf\n     */\n    // Supplemental enhancement information (SEI) NAL units have a\n    // payload type field to indicate how they are to be\n    // interpreted. CEAS-708 caption content is always transmitted with\n    // payload type 0x04.\n\n    var USER_DATA_REGISTERED_ITU_T_T35 = 4,\n        RBSP_TRAILING_BITS = 128;\n    /**\n      * Parse a supplemental enhancement information (SEI) NAL unit.\n      * Stops parsing once a message of type ITU T T35 has been found.\n      *\n      * @param bytes {Uint8Array} the bytes of a SEI NAL unit\n      * @return {object} the parsed SEI payload\n      * @see Rec. ITU-T H.264, 7.3.2.3.1\n      */\n\n    var parseSei = function parseSei(bytes) {\n      var i = 0,\n          result = {\n        payloadType: -1,\n        payloadSize: 0\n      },\n          payloadType = 0,\n          payloadSize = 0; // go through the sei_rbsp parsing each each individual sei_message\n\n      while (i < bytes.byteLength) {\n        // stop once we have hit the end of the sei_rbsp\n        if (bytes[i] === RBSP_TRAILING_BITS) {\n          break;\n        } // Parse payload type\n\n\n        while (bytes[i] === 0xFF) {\n          payloadType += 255;\n          i++;\n        }\n\n        payloadType += bytes[i++]; // Parse payload size\n\n        while (bytes[i] === 0xFF) {\n          payloadSize += 255;\n          i++;\n        }\n\n        payloadSize += bytes[i++]; // this sei_message is a 608/708 caption so save it and break\n        // there can only ever be one caption message in a frame's sei\n\n        if (!result.payload && payloadType === USER_DATA_REGISTERED_ITU_T_T35) {\n          result.payloadType = payloadType;\n          result.payloadSize = payloadSize;\n          result.payload = bytes.subarray(i, i + payloadSize);\n          break;\n        } // skip the payload and parse the next message\n\n\n        i += payloadSize;\n        payloadType = 0;\n        payloadSize = 0;\n      }\n\n      return result;\n    }; // see ANSI/SCTE 128-1 (2013), section 8.1\n\n\n    var parseUserData = function parseUserData(sei) {\n      // itu_t_t35_contry_code must be 181 (United States) for\n      // captions\n      if (sei.payload[0] !== 181) {\n        return null;\n      } // itu_t_t35_provider_code should be 49 (ATSC) for captions\n\n\n      if ((sei.payload[1] << 8 | sei.payload[2]) !== 49) {\n        return null;\n      } // the user_identifier should be \"GA94\" to indicate ATSC1 data\n\n\n      if (String.fromCharCode(sei.payload[3], sei.payload[4], sei.payload[5], sei.payload[6]) !== 'GA94') {\n        return null;\n      } // finally, user_data_type_code should be 0x03 for caption data\n\n\n      if (sei.payload[7] !== 0x03) {\n        return null;\n      } // return the user_data_type_structure and strip the trailing\n      // marker bits\n\n\n      return sei.payload.subarray(8, sei.payload.length - 1);\n    }; // see CEA-708-D, section 4.4\n\n\n    var parseCaptionPackets = function parseCaptionPackets(pts, userData) {\n      var results = [],\n          i,\n          count,\n          offset,\n          data; // if this is just filler, return immediately\n\n      if (!(userData[0] & 0x40)) {\n        return results;\n      } // parse out the cc_data_1 and cc_data_2 fields\n\n\n      count = userData[0] & 0x1f;\n\n      for (i = 0; i < count; i++) {\n        offset = i * 3;\n        data = {\n          type: userData[offset + 2] & 0x03,\n          pts: pts\n        }; // capture cc data when cc_valid is 1\n\n        if (userData[offset + 2] & 0x04) {\n          data.ccData = userData[offset + 3] << 8 | userData[offset + 4];\n          results.push(data);\n        }\n      }\n\n      return results;\n    };\n\n    var discardEmulationPreventionBytes = function discardEmulationPreventionBytes(data) {\n      var length = data.byteLength,\n          emulationPreventionBytesPositions = [],\n          i = 1,\n          newLength,\n          newData; // Find all `Emulation Prevention Bytes`\n\n      while (i < length - 2) {\n        if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n          emulationPreventionBytesPositions.push(i + 2);\n          i += 2;\n        } else {\n          i++;\n        }\n      } // If no Emulation Prevention Bytes were found just return the original\n      // array\n\n\n      if (emulationPreventionBytesPositions.length === 0) {\n        return data;\n      } // Create a new array to hold the NAL unit data\n\n\n      newLength = length - emulationPreventionBytesPositions.length;\n      newData = new Uint8Array(newLength);\n      var sourceIndex = 0;\n\n      for (i = 0; i < newLength; sourceIndex++, i++) {\n        if (sourceIndex === emulationPreventionBytesPositions[0]) {\n          // Skip this byte\n          sourceIndex++; // Remove this position index\n\n          emulationPreventionBytesPositions.shift();\n        }\n\n        newData[i] = data[sourceIndex];\n      }\n\n      return newData;\n    }; // exports\n\n\n    var captionPacketParser = {\n      parseSei: parseSei,\n      parseUserData: parseUserData,\n      parseCaptionPackets: parseCaptionPackets,\n      discardEmulationPreventionBytes: discardEmulationPreventionBytes,\n      USER_DATA_REGISTERED_ITU_T_T35: USER_DATA_REGISTERED_ITU_T_T35\n    }; // -----------------\n    // Link To Transport\n    // -----------------\n\n    var CaptionStream = function CaptionStream() {\n      CaptionStream.prototype.init.call(this);\n      this.captionPackets_ = [];\n      this.ccStreams_ = [new Cea608Stream(0, 0), // eslint-disable-line no-use-before-define\n      new Cea608Stream(0, 1), // eslint-disable-line no-use-before-define\n      new Cea608Stream(1, 0), // eslint-disable-line no-use-before-define\n      new Cea608Stream(1, 1) // eslint-disable-line no-use-before-define\n      ];\n      this.reset(); // forward data and done events from CCs to this CaptionStream\n\n      this.ccStreams_.forEach(function (cc) {\n        cc.on('data', this.trigger.bind(this, 'data'));\n        cc.on('done', this.trigger.bind(this, 'done'));\n      }, this);\n    };\n\n    CaptionStream.prototype = new stream();\n\n    CaptionStream.prototype.push = function (event) {\n      var sei, userData, newCaptionPackets; // only examine SEI NALs\n\n      if (event.nalUnitType !== 'sei_rbsp') {\n        return;\n      } // parse the sei\n\n\n      sei = captionPacketParser.parseSei(event.escapedRBSP); // ignore everything but user_data_registered_itu_t_t35\n\n      if (sei.payloadType !== captionPacketParser.USER_DATA_REGISTERED_ITU_T_T35) {\n        return;\n      } // parse out the user data payload\n\n\n      userData = captionPacketParser.parseUserData(sei); // ignore unrecognized userData\n\n      if (!userData) {\n        return;\n      } // Sometimes, the same segment # will be downloaded twice. To stop the\n      // caption data from being processed twice, we track the latest dts we've\n      // received and ignore everything with a dts before that. However, since\n      // data for a specific dts can be split across packets on either side of\n      // a segment boundary, we need to make sure we *don't* ignore the packets\n      // from the *next* segment that have dts === this.latestDts_. By constantly\n      // tracking the number of packets received with dts === this.latestDts_, we\n      // know how many should be ignored once we start receiving duplicates.\n\n\n      if (event.dts < this.latestDts_) {\n        // We've started getting older data, so set the flag.\n        this.ignoreNextEqualDts_ = true;\n        return;\n      } else if (event.dts === this.latestDts_ && this.ignoreNextEqualDts_) {\n        this.numSameDts_--;\n\n        if (!this.numSameDts_) {\n          // We've received the last duplicate packet, time to start processing again\n          this.ignoreNextEqualDts_ = false;\n        }\n\n        return;\n      } // parse out CC data packets and save them for later\n\n\n      newCaptionPackets = captionPacketParser.parseCaptionPackets(event.pts, userData);\n      this.captionPackets_ = this.captionPackets_.concat(newCaptionPackets);\n\n      if (this.latestDts_ !== event.dts) {\n        this.numSameDts_ = 0;\n      }\n\n      this.numSameDts_++;\n      this.latestDts_ = event.dts;\n    };\n\n    CaptionStream.prototype.flush = function () {\n      // make sure we actually parsed captions before proceeding\n      if (!this.captionPackets_.length) {\n        this.ccStreams_.forEach(function (cc) {\n          cc.flush();\n        }, this);\n        return;\n      } // In Chrome, the Array#sort function is not stable so add a\n      // presortIndex that we can use to ensure we get a stable-sort\n\n\n      this.captionPackets_.forEach(function (elem, idx) {\n        elem.presortIndex = idx;\n      }); // sort caption byte-pairs based on their PTS values\n\n      this.captionPackets_.sort(function (a, b) {\n        if (a.pts === b.pts) {\n          return a.presortIndex - b.presortIndex;\n        }\n\n        return a.pts - b.pts;\n      });\n      this.captionPackets_.forEach(function (packet) {\n        if (packet.type < 2) {\n          // Dispatch packet to the right Cea608Stream\n          this.dispatchCea608Packet(packet);\n        } // this is where an 'else' would go for a dispatching packets\n        // to a theoretical Cea708Stream that handles SERVICEn data\n\n      }, this);\n      this.captionPackets_.length = 0;\n      this.ccStreams_.forEach(function (cc) {\n        cc.flush();\n      }, this);\n      return;\n    };\n\n    CaptionStream.prototype.reset = function () {\n      this.latestDts_ = null;\n      this.ignoreNextEqualDts_ = false;\n      this.numSameDts_ = 0;\n      this.activeCea608Channel_ = [null, null];\n      this.ccStreams_.forEach(function (ccStream) {\n        ccStream.reset();\n      });\n    };\n\n    CaptionStream.prototype.dispatchCea608Packet = function (packet) {\n      // NOTE: packet.type is the CEA608 field\n      if (this.setsChannel1Active(packet)) {\n        this.activeCea608Channel_[packet.type] = 0;\n      } else if (this.setsChannel2Active(packet)) {\n        this.activeCea608Channel_[packet.type] = 1;\n      }\n\n      if (this.activeCea608Channel_[packet.type] === null) {\n        // If we haven't received anything to set the active channel, discard the\n        // data; we don't want jumbled captions\n        return;\n      }\n\n      this.ccStreams_[(packet.type << 1) + this.activeCea608Channel_[packet.type]].push(packet);\n    };\n\n    CaptionStream.prototype.setsChannel1Active = function (packet) {\n      return (packet.ccData & 0x7800) === 0x1000;\n    };\n\n    CaptionStream.prototype.setsChannel2Active = function (packet) {\n      return (packet.ccData & 0x7800) === 0x1800;\n    }; // ----------------------\n    // Session to Application\n    // ----------------------\n    // This hash maps non-ASCII, special, and extended character codes to their\n    // proper Unicode equivalent. The first keys that are only a single byte\n    // are the non-standard ASCII characters, which simply map the CEA608 byte\n    // to the standard ASCII/Unicode. The two-byte keys that follow are the CEA608\n    // character codes, but have their MSB bitmasked with 0x03 so that a lookup\n    // can be performed regardless of the field and data channel on which the\n    // character code was received.\n\n\n    var CHARACTER_TRANSLATION = {\n      0x2a: 0xe1,\n      // á\n      0x5c: 0xe9,\n      // é\n      0x5e: 0xed,\n      // í\n      0x5f: 0xf3,\n      // ó\n      0x60: 0xfa,\n      // ú\n      0x7b: 0xe7,\n      // ç\n      0x7c: 0xf7,\n      // ÷\n      0x7d: 0xd1,\n      // Ñ\n      0x7e: 0xf1,\n      // ñ\n      0x7f: 0x2588,\n      // █\n      0x0130: 0xae,\n      // ®\n      0x0131: 0xb0,\n      // °\n      0x0132: 0xbd,\n      // ½\n      0x0133: 0xbf,\n      // ¿\n      0x0134: 0x2122,\n      // ™\n      0x0135: 0xa2,\n      // ¢\n      0x0136: 0xa3,\n      // £\n      0x0137: 0x266a,\n      // ♪\n      0x0138: 0xe0,\n      // à\n      0x0139: 0xa0,\n      //\n      0x013a: 0xe8,\n      // è\n      0x013b: 0xe2,\n      // â\n      0x013c: 0xea,\n      // ê\n      0x013d: 0xee,\n      // î\n      0x013e: 0xf4,\n      // ô\n      0x013f: 0xfb,\n      // û\n      0x0220: 0xc1,\n      // Á\n      0x0221: 0xc9,\n      // É\n      0x0222: 0xd3,\n      // Ó\n      0x0223: 0xda,\n      // Ú\n      0x0224: 0xdc,\n      // Ü\n      0x0225: 0xfc,\n      // ü\n      0x0226: 0x2018,\n      // ‘\n      0x0227: 0xa1,\n      // ¡\n      0x0228: 0x2a,\n      // *\n      0x0229: 0x27,\n      // '\n      0x022a: 0x2014,\n      // —\n      0x022b: 0xa9,\n      // ©\n      0x022c: 0x2120,\n      // ℠\n      0x022d: 0x2022,\n      // •\n      0x022e: 0x201c,\n      // “\n      0x022f: 0x201d,\n      // ”\n      0x0230: 0xc0,\n      // À\n      0x0231: 0xc2,\n      // Â\n      0x0232: 0xc7,\n      // Ç\n      0x0233: 0xc8,\n      // È\n      0x0234: 0xca,\n      // Ê\n      0x0235: 0xcb,\n      // Ë\n      0x0236: 0xeb,\n      // ë\n      0x0237: 0xce,\n      // Î\n      0x0238: 0xcf,\n      // Ï\n      0x0239: 0xef,\n      // ï\n      0x023a: 0xd4,\n      // Ô\n      0x023b: 0xd9,\n      // Ù\n      0x023c: 0xf9,\n      // ù\n      0x023d: 0xdb,\n      // Û\n      0x023e: 0xab,\n      // «\n      0x023f: 0xbb,\n      // »\n      0x0320: 0xc3,\n      // Ã\n      0x0321: 0xe3,\n      // ã\n      0x0322: 0xcd,\n      // Í\n      0x0323: 0xcc,\n      // Ì\n      0x0324: 0xec,\n      // ì\n      0x0325: 0xd2,\n      // Ò\n      0x0326: 0xf2,\n      // ò\n      0x0327: 0xd5,\n      // Õ\n      0x0328: 0xf5,\n      // õ\n      0x0329: 0x7b,\n      // {\n      0x032a: 0x7d,\n      // }\n      0x032b: 0x5c,\n      // \\\n      0x032c: 0x5e,\n      // ^\n      0x032d: 0x5f,\n      // _\n      0x032e: 0x7c,\n      // |\n      0x032f: 0x7e,\n      // ~\n      0x0330: 0xc4,\n      // Ä\n      0x0331: 0xe4,\n      // ä\n      0x0332: 0xd6,\n      // Ö\n      0x0333: 0xf6,\n      // ö\n      0x0334: 0xdf,\n      // ß\n      0x0335: 0xa5,\n      // ¥\n      0x0336: 0xa4,\n      // ¤\n      0x0337: 0x2502,\n      // │\n      0x0338: 0xc5,\n      // Å\n      0x0339: 0xe5,\n      // å\n      0x033a: 0xd8,\n      // Ø\n      0x033b: 0xf8,\n      // ø\n      0x033c: 0x250c,\n      // ┌\n      0x033d: 0x2510,\n      // ┐\n      0x033e: 0x2514,\n      // └\n      0x033f: 0x2518 // ┘\n\n    };\n\n    var getCharFromCode = function getCharFromCode(code) {\n      if (code === null) {\n        return '';\n      }\n\n      code = CHARACTER_TRANSLATION[code] || code;\n      return String.fromCharCode(code);\n    }; // the index of the last row in a CEA-608 display buffer\n\n\n    var BOTTOM_ROW = 14; // This array is used for mapping PACs -> row #, since there's no way of\n    // getting it through bit logic.\n\n    var ROWS = [0x1100, 0x1120, 0x1200, 0x1220, 0x1500, 0x1520, 0x1600, 0x1620, 0x1700, 0x1720, 0x1000, 0x1300, 0x1320, 0x1400, 0x1420]; // CEA-608 captions are rendered onto a 34x15 matrix of character\n    // cells. The \"bottom\" row is the last element in the outer array.\n\n    var createDisplayBuffer = function createDisplayBuffer() {\n      var result = [],\n          i = BOTTOM_ROW + 1;\n\n      while (i--) {\n        result.push('');\n      }\n\n      return result;\n    };\n\n    var Cea608Stream = function Cea608Stream(field, dataChannel) {\n      Cea608Stream.prototype.init.call(this);\n      this.field_ = field || 0;\n      this.dataChannel_ = dataChannel || 0;\n      this.name_ = 'CC' + ((this.field_ << 1 | this.dataChannel_) + 1);\n      this.setConstants();\n      this.reset();\n\n      this.push = function (packet) {\n        var data, swap, char0, char1, text; // remove the parity bits\n\n        data = packet.ccData & 0x7f7f; // ignore duplicate control codes; the spec demands they're sent twice\n\n        if (data === this.lastControlCode_) {\n          this.lastControlCode_ = null;\n          return;\n        } // Store control codes\n\n\n        if ((data & 0xf000) === 0x1000) {\n          this.lastControlCode_ = data;\n        } else if (data !== this.PADDING_) {\n          this.lastControlCode_ = null;\n        }\n\n        char0 = data >>> 8;\n        char1 = data & 0xff;\n\n        if (data === this.PADDING_) {\n          return;\n        } else if (data === this.RESUME_CAPTION_LOADING_) {\n          this.mode_ = 'popOn';\n        } else if (data === this.END_OF_CAPTION_) {\n          // If an EOC is received while in paint-on mode, the displayed caption\n          // text should be swapped to non-displayed memory as if it was a pop-on\n          // caption. Because of that, we should explicitly switch back to pop-on\n          // mode\n          this.mode_ = 'popOn';\n          this.clearFormatting(packet.pts); // if a caption was being displayed, it's gone now\n\n          this.flushDisplayed(packet.pts); // flip memory\n\n          swap = this.displayed_;\n          this.displayed_ = this.nonDisplayed_;\n          this.nonDisplayed_ = swap; // start measuring the time to display the caption\n\n          this.startPts_ = packet.pts;\n        } else if (data === this.ROLL_UP_2_ROWS_) {\n          this.rollUpRows_ = 2;\n          this.setRollUp(packet.pts);\n        } else if (data === this.ROLL_UP_3_ROWS_) {\n          this.rollUpRows_ = 3;\n          this.setRollUp(packet.pts);\n        } else if (data === this.ROLL_UP_4_ROWS_) {\n          this.rollUpRows_ = 4;\n          this.setRollUp(packet.pts);\n        } else if (data === this.CARRIAGE_RETURN_) {\n          this.clearFormatting(packet.pts);\n          this.flushDisplayed(packet.pts);\n          this.shiftRowsUp_();\n          this.startPts_ = packet.pts;\n        } else if (data === this.BACKSPACE_) {\n          if (this.mode_ === 'popOn') {\n            this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);\n          } else {\n            this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);\n          }\n        } else if (data === this.ERASE_DISPLAYED_MEMORY_) {\n          this.flushDisplayed(packet.pts);\n          this.displayed_ = createDisplayBuffer();\n        } else if (data === this.ERASE_NON_DISPLAYED_MEMORY_) {\n          this.nonDisplayed_ = createDisplayBuffer();\n        } else if (data === this.RESUME_DIRECT_CAPTIONING_) {\n          if (this.mode_ !== 'paintOn') {\n            // NOTE: This should be removed when proper caption positioning is\n            // implemented\n            this.flushDisplayed(packet.pts);\n            this.displayed_ = createDisplayBuffer();\n          }\n\n          this.mode_ = 'paintOn';\n          this.startPts_ = packet.pts; // Append special characters to caption text\n        } else if (this.isSpecialCharacter(char0, char1)) {\n          // Bitmask char0 so that we can apply character transformations\n          // regardless of field and data channel.\n          // Then byte-shift to the left and OR with char1 so we can pass the\n          // entire character code to `getCharFromCode`.\n          char0 = (char0 & 0x03) << 8;\n          text = getCharFromCode(char0 | char1);\n          this[this.mode_](packet.pts, text);\n          this.column_++; // Append extended characters to caption text\n        } else if (this.isExtCharacter(char0, char1)) {\n          // Extended characters always follow their \"non-extended\" equivalents.\n          // IE if a \"è\" is desired, you'll always receive \"eè\"; non-compliant\n          // decoders are supposed to drop the \"è\", while compliant decoders\n          // backspace the \"e\" and insert \"è\".\n          // Delete the previous character\n          if (this.mode_ === 'popOn') {\n            this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);\n          } else {\n            this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);\n          } // Bitmask char0 so that we can apply character transformations\n          // regardless of field and data channel.\n          // Then byte-shift to the left and OR with char1 so we can pass the\n          // entire character code to `getCharFromCode`.\n\n\n          char0 = (char0 & 0x03) << 8;\n          text = getCharFromCode(char0 | char1);\n          this[this.mode_](packet.pts, text);\n          this.column_++; // Process mid-row codes\n        } else if (this.isMidRowCode(char0, char1)) {\n          // Attributes are not additive, so clear all formatting\n          this.clearFormatting(packet.pts); // According to the standard, mid-row codes\n          // should be replaced with spaces, so add one now\n\n          this[this.mode_](packet.pts, ' ');\n          this.column_++;\n\n          if ((char1 & 0xe) === 0xe) {\n            this.addFormatting(packet.pts, ['i']);\n          }\n\n          if ((char1 & 0x1) === 0x1) {\n            this.addFormatting(packet.pts, ['u']);\n          } // Detect offset control codes and adjust cursor\n\n        } else if (this.isOffsetControlCode(char0, char1)) {\n          // Cursor position is set by indent PAC (see below) in 4-column\n          // increments, with an additional offset code of 1-3 to reach any\n          // of the 32 columns specified by CEA-608. So all we need to do\n          // here is increment the column cursor by the given offset.\n          this.column_ += char1 & 0x03; // Detect PACs (Preamble Address Codes)\n        } else if (this.isPAC(char0, char1)) {\n          // There's no logic for PAC -> row mapping, so we have to just\n          // find the row code in an array and use its index :(\n          var row = ROWS.indexOf(data & 0x1f20); // Configure the caption window if we're in roll-up mode\n\n          if (this.mode_ === 'rollUp') {\n            // This implies that the base row is incorrectly set.\n            // As per the recommendation in CEA-608(Base Row Implementation), defer to the number\n            // of roll-up rows set.\n            if (row - this.rollUpRows_ + 1 < 0) {\n              row = this.rollUpRows_ - 1;\n            }\n\n            this.setRollUp(packet.pts, row);\n          }\n\n          if (row !== this.row_) {\n            // formatting is only persistent for current row\n            this.clearFormatting(packet.pts);\n            this.row_ = row;\n          } // All PACs can apply underline, so detect and apply\n          // (All odd-numbered second bytes set underline)\n\n\n          if (char1 & 0x1 && this.formatting_.indexOf('u') === -1) {\n            this.addFormatting(packet.pts, ['u']);\n          }\n\n          if ((data & 0x10) === 0x10) {\n            // We've got an indent level code. Each successive even number\n            // increments the column cursor by 4, so we can get the desired\n            // column position by bit-shifting to the right (to get n/2)\n            // and multiplying by 4.\n            this.column_ = ((data & 0xe) >> 1) * 4;\n          }\n\n          if (this.isColorPAC(char1)) {\n            // it's a color code, though we only support white, which\n            // can be either normal or italicized. white italics can be\n            // either 0x4e or 0x6e depending on the row, so we just\n            // bitwise-and with 0xe to see if italics should be turned on\n            if ((char1 & 0xe) === 0xe) {\n              this.addFormatting(packet.pts, ['i']);\n            }\n          } // We have a normal character in char0, and possibly one in char1\n\n        } else if (this.isNormalChar(char0)) {\n          if (char1 === 0x00) {\n            char1 = null;\n          }\n\n          text = getCharFromCode(char0);\n          text += getCharFromCode(char1);\n          this[this.mode_](packet.pts, text);\n          this.column_ += text.length;\n        } // finish data processing\n\n      };\n    };\n\n    Cea608Stream.prototype = new stream(); // Trigger a cue point that captures the current state of the\n    // display buffer\n\n    Cea608Stream.prototype.flushDisplayed = function (pts) {\n      var content = this.displayed_ // remove spaces from the start and end of the string\n      .map(function (row) {\n        try {\n          return row.trim();\n        } catch (e) {\n          // Ordinarily, this shouldn't happen. However, caption\n          // parsing errors should not throw exceptions and\n          // break playback.\n          // eslint-disable-next-line no-console\n          console.error('Skipping malformed caption.');\n          return '';\n        }\n      }) // combine all text rows to display in one cue\n      .join('\\n') // and remove blank rows from the start and end, but not the middle\n      .replace(/^\\n+|\\n+$/g, '');\n\n      if (content.length) {\n        this.trigger('data', {\n          startPts: this.startPts_,\n          endPts: pts,\n          text: content,\n          stream: this.name_\n        });\n      }\n    };\n    /**\n     * Zero out the data, used for startup and on seek\n     */\n\n\n    Cea608Stream.prototype.reset = function () {\n      this.mode_ = 'popOn'; // When in roll-up mode, the index of the last row that will\n      // actually display captions. If a caption is shifted to a row\n      // with a lower index than this, it is cleared from the display\n      // buffer\n\n      this.topRow_ = 0;\n      this.startPts_ = 0;\n      this.displayed_ = createDisplayBuffer();\n      this.nonDisplayed_ = createDisplayBuffer();\n      this.lastControlCode_ = null; // Track row and column for proper line-breaking and spacing\n\n      this.column_ = 0;\n      this.row_ = BOTTOM_ROW;\n      this.rollUpRows_ = 2; // This variable holds currently-applied formatting\n\n      this.formatting_ = [];\n    };\n    /**\n     * Sets up control code and related constants for this instance\n     */\n\n\n    Cea608Stream.prototype.setConstants = function () {\n      // The following attributes have these uses:\n      // ext_ :    char0 for mid-row codes, and the base for extended\n      //           chars (ext_+0, ext_+1, and ext_+2 are char0s for\n      //           extended codes)\n      // control_: char0 for control codes, except byte-shifted to the\n      //           left so that we can do this.control_ | CONTROL_CODE\n      // offset_:  char0 for tab offset codes\n      //\n      // It's also worth noting that control codes, and _only_ control codes,\n      // differ between field 1 and field2. Field 2 control codes are always\n      // their field 1 value plus 1. That's why there's the \"| field\" on the\n      // control value.\n      if (this.dataChannel_ === 0) {\n        this.BASE_ = 0x10;\n        this.EXT_ = 0x11;\n        this.CONTROL_ = (0x14 | this.field_) << 8;\n        this.OFFSET_ = 0x17;\n      } else if (this.dataChannel_ === 1) {\n        this.BASE_ = 0x18;\n        this.EXT_ = 0x19;\n        this.CONTROL_ = (0x1c | this.field_) << 8;\n        this.OFFSET_ = 0x1f;\n      } // Constants for the LSByte command codes recognized by Cea608Stream. This\n      // list is not exhaustive. For a more comprehensive listing and semantics see\n      // http://www.gpo.gov/fdsys/pkg/CFR-2010-title47-vol1/pdf/CFR-2010-title47-vol1-sec15-119.pdf\n      // Padding\n\n\n      this.PADDING_ = 0x0000; // Pop-on Mode\n\n      this.RESUME_CAPTION_LOADING_ = this.CONTROL_ | 0x20;\n      this.END_OF_CAPTION_ = this.CONTROL_ | 0x2f; // Roll-up Mode\n\n      this.ROLL_UP_2_ROWS_ = this.CONTROL_ | 0x25;\n      this.ROLL_UP_3_ROWS_ = this.CONTROL_ | 0x26;\n      this.ROLL_UP_4_ROWS_ = this.CONTROL_ | 0x27;\n      this.CARRIAGE_RETURN_ = this.CONTROL_ | 0x2d; // paint-on mode\n\n      this.RESUME_DIRECT_CAPTIONING_ = this.CONTROL_ | 0x29; // Erasure\n\n      this.BACKSPACE_ = this.CONTROL_ | 0x21;\n      this.ERASE_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2c;\n      this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2e;\n    };\n    /**\n     * Detects if the 2-byte packet data is a special character\n     *\n     * Special characters have a second byte in the range 0x30 to 0x3f,\n     * with the first byte being 0x11 (for data channel 1) or 0x19 (for\n     * data channel 2).\n     *\n     * @param  {Integer} char0 The first byte\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the 2 bytes are an special character\n     */\n\n\n    Cea608Stream.prototype.isSpecialCharacter = function (char0, char1) {\n      return char0 === this.EXT_ && char1 >= 0x30 && char1 <= 0x3f;\n    };\n    /**\n     * Detects if the 2-byte packet data is an extended character\n     *\n     * Extended characters have a second byte in the range 0x20 to 0x3f,\n     * with the first byte being 0x12 or 0x13 (for data channel 1) or\n     * 0x1a or 0x1b (for data channel 2).\n     *\n     * @param  {Integer} char0 The first byte\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the 2 bytes are an extended character\n     */\n\n\n    Cea608Stream.prototype.isExtCharacter = function (char0, char1) {\n      return (char0 === this.EXT_ + 1 || char0 === this.EXT_ + 2) && char1 >= 0x20 && char1 <= 0x3f;\n    };\n    /**\n     * Detects if the 2-byte packet is a mid-row code\n     *\n     * Mid-row codes have a second byte in the range 0x20 to 0x2f, with\n     * the first byte being 0x11 (for data channel 1) or 0x19 (for data\n     * channel 2).\n     *\n     * @param  {Integer} char0 The first byte\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the 2 bytes are a mid-row code\n     */\n\n\n    Cea608Stream.prototype.isMidRowCode = function (char0, char1) {\n      return char0 === this.EXT_ && char1 >= 0x20 && char1 <= 0x2f;\n    };\n    /**\n     * Detects if the 2-byte packet is an offset control code\n     *\n     * Offset control codes have a second byte in the range 0x21 to 0x23,\n     * with the first byte being 0x17 (for data channel 1) or 0x1f (for\n     * data channel 2).\n     *\n     * @param  {Integer} char0 The first byte\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the 2 bytes are an offset control code\n     */\n\n\n    Cea608Stream.prototype.isOffsetControlCode = function (char0, char1) {\n      return char0 === this.OFFSET_ && char1 >= 0x21 && char1 <= 0x23;\n    };\n    /**\n     * Detects if the 2-byte packet is a Preamble Address Code\n     *\n     * PACs have a first byte in the range 0x10 to 0x17 (for data channel 1)\n     * or 0x18 to 0x1f (for data channel 2), with the second byte in the\n     * range 0x40 to 0x7f.\n     *\n     * @param  {Integer} char0 The first byte\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the 2 bytes are a PAC\n     */\n\n\n    Cea608Stream.prototype.isPAC = function (char0, char1) {\n      return char0 >= this.BASE_ && char0 < this.BASE_ + 8 && char1 >= 0x40 && char1 <= 0x7f;\n    };\n    /**\n     * Detects if a packet's second byte is in the range of a PAC color code\n     *\n     * PAC color codes have the second byte be in the range 0x40 to 0x4f, or\n     * 0x60 to 0x6f.\n     *\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the byte is a color PAC\n     */\n\n\n    Cea608Stream.prototype.isColorPAC = function (char1) {\n      return char1 >= 0x40 && char1 <= 0x4f || char1 >= 0x60 && char1 <= 0x7f;\n    };\n    /**\n     * Detects if a single byte is in the range of a normal character\n     *\n     * Normal text bytes are in the range 0x20 to 0x7f.\n     *\n     * @param  {Integer} char  The byte\n     * @return {Boolean}       Whether the byte is a normal character\n     */\n\n\n    Cea608Stream.prototype.isNormalChar = function (char) {\n      return char >= 0x20 && char <= 0x7f;\n    };\n    /**\n     * Configures roll-up\n     *\n     * @param  {Integer} pts         Current PTS\n     * @param  {Integer} newBaseRow  Used by PACs to slide the current window to\n     *                               a new position\n     */\n\n\n    Cea608Stream.prototype.setRollUp = function (pts, newBaseRow) {\n      // Reset the base row to the bottom row when switching modes\n      if (this.mode_ !== 'rollUp') {\n        this.row_ = BOTTOM_ROW;\n        this.mode_ = 'rollUp'; // Spec says to wipe memories when switching to roll-up\n\n        this.flushDisplayed(pts);\n        this.nonDisplayed_ = createDisplayBuffer();\n        this.displayed_ = createDisplayBuffer();\n      }\n\n      if (newBaseRow !== undefined && newBaseRow !== this.row_) {\n        // move currently displayed captions (up or down) to the new base row\n        for (var i = 0; i < this.rollUpRows_; i++) {\n          this.displayed_[newBaseRow - i] = this.displayed_[this.row_ - i];\n          this.displayed_[this.row_ - i] = '';\n        }\n      }\n\n      if (newBaseRow === undefined) {\n        newBaseRow = this.row_;\n      }\n\n      this.topRow_ = newBaseRow - this.rollUpRows_ + 1;\n    }; // Adds the opening HTML tag for the passed character to the caption text,\n    // and keeps track of it for later closing\n\n\n    Cea608Stream.prototype.addFormatting = function (pts, format) {\n      this.formatting_ = this.formatting_.concat(format);\n      var text = format.reduce(function (text, format) {\n        return text + '<' + format + '>';\n      }, '');\n      this[this.mode_](pts, text);\n    }; // Adds HTML closing tags for current formatting to caption text and\n    // clears remembered formatting\n\n\n    Cea608Stream.prototype.clearFormatting = function (pts) {\n      if (!this.formatting_.length) {\n        return;\n      }\n\n      var text = this.formatting_.reverse().reduce(function (text, format) {\n        return text + '</' + format + '>';\n      }, '');\n      this.formatting_ = [];\n      this[this.mode_](pts, text);\n    }; // Mode Implementations\n\n\n    Cea608Stream.prototype.popOn = function (pts, text) {\n      var baseRow = this.nonDisplayed_[this.row_]; // buffer characters\n\n      baseRow += text;\n      this.nonDisplayed_[this.row_] = baseRow;\n    };\n\n    Cea608Stream.prototype.rollUp = function (pts, text) {\n      var baseRow = this.displayed_[this.row_];\n      baseRow += text;\n      this.displayed_[this.row_] = baseRow;\n    };\n\n    Cea608Stream.prototype.shiftRowsUp_ = function () {\n      var i; // clear out inactive rows\n\n      for (i = 0; i < this.topRow_; i++) {\n        this.displayed_[i] = '';\n      }\n\n      for (i = this.row_ + 1; i < BOTTOM_ROW + 1; i++) {\n        this.displayed_[i] = '';\n      } // shift displayed rows up\n\n\n      for (i = this.topRow_; i < this.row_; i++) {\n        this.displayed_[i] = this.displayed_[i + 1];\n      } // clear out the bottom row\n\n\n      this.displayed_[this.row_] = '';\n    };\n\n    Cea608Stream.prototype.paintOn = function (pts, text) {\n      var baseRow = this.displayed_[this.row_];\n      baseRow += text;\n      this.displayed_[this.row_] = baseRow;\n    }; // exports\n\n\n    var captionStream = {\n      CaptionStream: CaptionStream,\n      Cea608Stream: Cea608Stream\n    };\n    var streamTypes = {\n      H264_STREAM_TYPE: 0x1B,\n      ADTS_STREAM_TYPE: 0x0F,\n      METADATA_STREAM_TYPE: 0x15\n    };\n    var MAX_TS = 8589934592;\n    var RO_THRESH = 4294967296;\n\n    var handleRollover = function handleRollover(value, reference) {\n      var direction = 1;\n\n      if (value > reference) {\n        // If the current timestamp value is greater than our reference timestamp and we detect a\n        // timestamp rollover, this means the roll over is happening in the opposite direction.\n        // Example scenario: Enter a long stream/video just after a rollover occurred. The reference\n        // point will be set to a small number, e.g. 1. The user then seeks backwards over the\n        // rollover point. In loading this segment, the timestamp values will be very large,\n        // e.g. 2^33 - 1. Since this comes before the data we loaded previously, we want to adjust\n        // the time stamp to be `value - 2^33`.\n        direction = -1;\n      } // Note: A seek forwards or back that is greater than the RO_THRESH (2^32, ~13 hours) will\n      // cause an incorrect adjustment.\n\n\n      while (Math.abs(reference - value) > RO_THRESH) {\n        value += direction * MAX_TS;\n      }\n\n      return value;\n    };\n\n    var TimestampRolloverStream = function TimestampRolloverStream(type) {\n      var lastDTS, referenceDTS;\n      TimestampRolloverStream.prototype.init.call(this);\n      this.type_ = type;\n\n      this.push = function (data) {\n        if (data.type !== this.type_) {\n          return;\n        }\n\n        if (referenceDTS === undefined) {\n          referenceDTS = data.dts;\n        }\n\n        data.dts = handleRollover(data.dts, referenceDTS);\n        data.pts = handleRollover(data.pts, referenceDTS);\n        lastDTS = data.dts;\n        this.trigger('data', data);\n      };\n\n      this.flush = function () {\n        referenceDTS = lastDTS;\n        this.trigger('done');\n      };\n\n      this.discontinuity = function () {\n        referenceDTS = void 0;\n        lastDTS = void 0;\n      };\n    };\n\n    TimestampRolloverStream.prototype = new stream();\n    var timestampRolloverStream = {\n      TimestampRolloverStream: TimestampRolloverStream,\n      handleRollover: handleRollover\n    };\n\n    var percentEncode = function percentEncode(bytes, start, end) {\n      var i,\n          result = '';\n\n      for (i = start; i < end; i++) {\n        result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n      }\n\n      return result;\n    },\n        // return the string representation of the specified byte range,\n    // interpreted as UTf-8.\n    parseUtf8 = function parseUtf8(bytes, start, end) {\n      return decodeURIComponent(percentEncode(bytes, start, end));\n    },\n        // return the string representation of the specified byte range,\n    // interpreted as ISO-8859-1.\n    parseIso88591 = function parseIso88591(bytes, start, end) {\n      return unescape(percentEncode(bytes, start, end)); // jshint ignore:line\n    },\n        parseSyncSafeInteger = function parseSyncSafeInteger(data) {\n      return data[0] << 21 | data[1] << 14 | data[2] << 7 | data[3];\n    },\n        tagParsers = {\n      TXXX: function TXXX(tag) {\n        var i;\n\n        if (tag.data[0] !== 3) {\n          // ignore frames with unrecognized character encodings\n          return;\n        }\n\n        for (i = 1; i < tag.data.length; i++) {\n          if (tag.data[i] === 0) {\n            // parse the text fields\n            tag.description = parseUtf8(tag.data, 1, i); // do not include the null terminator in the tag value\n\n            tag.value = parseUtf8(tag.data, i + 1, tag.data.length).replace(/\\0*$/, '');\n            break;\n          }\n        }\n\n        tag.data = tag.value;\n      },\n      WXXX: function WXXX(tag) {\n        var i;\n\n        if (tag.data[0] !== 3) {\n          // ignore frames with unrecognized character encodings\n          return;\n        }\n\n        for (i = 1; i < tag.data.length; i++) {\n          if (tag.data[i] === 0) {\n            // parse the description and URL fields\n            tag.description = parseUtf8(tag.data, 1, i);\n            tag.url = parseUtf8(tag.data, i + 1, tag.data.length);\n            break;\n          }\n        }\n      },\n      PRIV: function PRIV(tag) {\n        var i;\n\n        for (i = 0; i < tag.data.length; i++) {\n          if (tag.data[i] === 0) {\n            // parse the description and URL fields\n            tag.owner = parseIso88591(tag.data, 0, i);\n            break;\n          }\n        }\n\n        tag.privateData = tag.data.subarray(i + 1);\n        tag.data = tag.privateData;\n      }\n    },\n        _MetadataStream;\n\n    _MetadataStream = function MetadataStream(options) {\n      var settings = {\n        debug: !!(options && options.debug),\n        // the bytes of the program-level descriptor field in MP2T\n        // see ISO/IEC 13818-1:2013 (E), section 2.6 \"Program and\n        // program element descriptors\"\n        descriptor: options && options.descriptor\n      },\n          // the total size in bytes of the ID3 tag being parsed\n      tagSize = 0,\n          // tag data that is not complete enough to be parsed\n      buffer = [],\n          // the total number of bytes currently in the buffer\n      bufferSize = 0,\n          i;\n\n      _MetadataStream.prototype.init.call(this); // calculate the text track in-band metadata track dispatch type\n      // https://html.spec.whatwg.org/multipage/embedded-content.html#steps-to-expose-a-media-resource-specific-text-track\n\n\n      this.dispatchType = streamTypes.METADATA_STREAM_TYPE.toString(16);\n\n      if (settings.descriptor) {\n        for (i = 0; i < settings.descriptor.length; i++) {\n          this.dispatchType += ('00' + settings.descriptor[i].toString(16)).slice(-2);\n        }\n      }\n\n      this.push = function (chunk) {\n        var tag, frameStart, frameSize, frame, i, frameHeader;\n\n        if (chunk.type !== 'timed-metadata') {\n          return;\n        } // if data_alignment_indicator is set in the PES header,\n        // we must have the start of a new ID3 tag. Assume anything\n        // remaining in the buffer was malformed and throw it out\n\n\n        if (chunk.dataAlignmentIndicator) {\n          bufferSize = 0;\n          buffer.length = 0;\n        } // ignore events that don't look like ID3 data\n\n\n        if (buffer.length === 0 && (chunk.data.length < 10 || chunk.data[0] !== 'I'.charCodeAt(0) || chunk.data[1] !== 'D'.charCodeAt(0) || chunk.data[2] !== '3'.charCodeAt(0))) {\n          if (settings.debug) {\n            // eslint-disable-next-line no-console\n            console.log('Skipping unrecognized metadata packet');\n          }\n\n          return;\n        } // add this chunk to the data we've collected so far\n\n\n        buffer.push(chunk);\n        bufferSize += chunk.data.byteLength; // grab the size of the entire frame from the ID3 header\n\n        if (buffer.length === 1) {\n          // the frame size is transmitted as a 28-bit integer in the\n          // last four bytes of the ID3 header.\n          // The most significant bit of each byte is dropped and the\n          // results concatenated to recover the actual value.\n          tagSize = parseSyncSafeInteger(chunk.data.subarray(6, 10)); // ID3 reports the tag size excluding the header but it's more\n          // convenient for our comparisons to include it\n\n          tagSize += 10;\n        } // if the entire frame has not arrived, wait for more data\n\n\n        if (bufferSize < tagSize) {\n          return;\n        } // collect the entire frame so it can be parsed\n\n\n        tag = {\n          data: new Uint8Array(tagSize),\n          frames: [],\n          pts: buffer[0].pts,\n          dts: buffer[0].dts\n        };\n\n        for (i = 0; i < tagSize;) {\n          tag.data.set(buffer[0].data.subarray(0, tagSize - i), i);\n          i += buffer[0].data.byteLength;\n          bufferSize -= buffer[0].data.byteLength;\n          buffer.shift();\n        } // find the start of the first frame and the end of the tag\n\n\n        frameStart = 10;\n\n        if (tag.data[5] & 0x40) {\n          // advance the frame start past the extended header\n          frameStart += 4; // header size field\n\n          frameStart += parseSyncSafeInteger(tag.data.subarray(10, 14)); // clip any padding off the end\n\n          tagSize -= parseSyncSafeInteger(tag.data.subarray(16, 20));\n        } // parse one or more ID3 frames\n        // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n\n\n        do {\n          // determine the number of bytes in this frame\n          frameSize = parseSyncSafeInteger(tag.data.subarray(frameStart + 4, frameStart + 8));\n\n          if (frameSize < 1) {\n            // eslint-disable-next-line no-console\n            return console.log('Malformed ID3 frame encountered. Skipping metadata parsing.');\n          }\n\n          frameHeader = String.fromCharCode(tag.data[frameStart], tag.data[frameStart + 1], tag.data[frameStart + 2], tag.data[frameStart + 3]);\n          frame = {\n            id: frameHeader,\n            data: tag.data.subarray(frameStart + 10, frameStart + frameSize + 10)\n          };\n          frame.key = frame.id;\n\n          if (tagParsers[frame.id]) {\n            tagParsers[frame.id](frame); // handle the special PRIV frame used to indicate the start\n            // time for raw AAC data\n\n            if (frame.owner === 'com.apple.streaming.transportStreamTimestamp') {\n              var d = frame.data,\n                  size = (d[3] & 0x01) << 30 | d[4] << 22 | d[5] << 14 | d[6] << 6 | d[7] >>> 2;\n              size *= 4;\n              size += d[7] & 0x03;\n              frame.timeStamp = size; // in raw AAC, all subsequent data will be timestamped based\n              // on the value of this frame\n              // we couldn't have known the appropriate pts and dts before\n              // parsing this ID3 tag so set those values now\n\n              if (tag.pts === undefined && tag.dts === undefined) {\n                tag.pts = frame.timeStamp;\n                tag.dts = frame.timeStamp;\n              }\n\n              this.trigger('timestamp', frame);\n            }\n          }\n\n          tag.frames.push(frame);\n          frameStart += 10; // advance past the frame header\n\n          frameStart += frameSize; // advance past the frame body\n        } while (frameStart < tagSize);\n\n        this.trigger('data', tag);\n      };\n    };\n\n    _MetadataStream.prototype = new stream();\n    var metadataStream = _MetadataStream;\n    var TimestampRolloverStream$1 = timestampRolloverStream.TimestampRolloverStream; // object types\n\n    var _TransportPacketStream, _TransportParseStream, _ElementaryStream; // constants\n\n\n    var MP2T_PACKET_LENGTH = 188,\n        // bytes\n    SYNC_BYTE = 0x47;\n    /**\n     * Splits an incoming stream of binary data into MPEG-2 Transport\n     * Stream packets.\n     */\n\n    _TransportPacketStream = function TransportPacketStream() {\n      var buffer = new Uint8Array(MP2T_PACKET_LENGTH),\n          bytesInBuffer = 0;\n\n      _TransportPacketStream.prototype.init.call(this); // Deliver new bytes to the stream.\n\n      /**\n       * Split a stream of data into M2TS packets\n      **/\n\n\n      this.push = function (bytes) {\n        var startIndex = 0,\n            endIndex = MP2T_PACKET_LENGTH,\n            everything; // If there are bytes remaining from the last segment, prepend them to the\n        // bytes that were pushed in\n\n        if (bytesInBuffer) {\n          everything = new Uint8Array(bytes.byteLength + bytesInBuffer);\n          everything.set(buffer.subarray(0, bytesInBuffer));\n          everything.set(bytes, bytesInBuffer);\n          bytesInBuffer = 0;\n        } else {\n          everything = bytes;\n        } // While we have enough data for a packet\n\n\n        while (endIndex < everything.byteLength) {\n          // Look for a pair of start and end sync bytes in the data..\n          if (everything[startIndex] === SYNC_BYTE && everything[endIndex] === SYNC_BYTE) {\n            // We found a packet so emit it and jump one whole packet forward in\n            // the stream\n            this.trigger('data', everything.subarray(startIndex, endIndex));\n            startIndex += MP2T_PACKET_LENGTH;\n            endIndex += MP2T_PACKET_LENGTH;\n            continue;\n          } // If we get here, we have somehow become de-synchronized and we need to step\n          // forward one byte at a time until we find a pair of sync bytes that denote\n          // a packet\n\n\n          startIndex++;\n          endIndex++;\n        } // If there was some data left over at the end of the segment that couldn't\n        // possibly be a whole packet, keep it because it might be the start of a packet\n        // that continues in the next segment\n\n\n        if (startIndex < everything.byteLength) {\n          buffer.set(everything.subarray(startIndex), 0);\n          bytesInBuffer = everything.byteLength - startIndex;\n        }\n      };\n      /**\n       * Passes identified M2TS packets to the TransportParseStream to be parsed\n      **/\n\n\n      this.flush = function () {\n        // If the buffer contains a whole packet when we are being flushed, emit it\n        // and empty the buffer. Otherwise hold onto the data because it may be\n        // important for decoding the next segment\n        if (bytesInBuffer === MP2T_PACKET_LENGTH && buffer[0] === SYNC_BYTE) {\n          this.trigger('data', buffer);\n          bytesInBuffer = 0;\n        }\n\n        this.trigger('done');\n      };\n    };\n\n    _TransportPacketStream.prototype = new stream();\n    /**\n     * Accepts an MP2T TransportPacketStream and emits data events with parsed\n     * forms of the individual transport stream packets.\n     */\n\n    _TransportParseStream = function TransportParseStream() {\n      var parsePsi, parsePat, parsePmt, self;\n\n      _TransportParseStream.prototype.init.call(this);\n\n      self = this;\n      this.packetsWaitingForPmt = [];\n      this.programMapTable = undefined;\n\n      parsePsi = function parsePsi(payload, psi) {\n        var offset = 0; // PSI packets may be split into multiple sections and those\n        // sections may be split into multiple packets. If a PSI\n        // section starts in this packet, the payload_unit_start_indicator\n        // will be true and the first byte of the payload will indicate\n        // the offset from the current position to the start of the\n        // section.\n\n        if (psi.payloadUnitStartIndicator) {\n          offset += payload[offset] + 1;\n        }\n\n        if (psi.type === 'pat') {\n          parsePat(payload.subarray(offset), psi);\n        } else {\n          parsePmt(payload.subarray(offset), psi);\n        }\n      };\n\n      parsePat = function parsePat(payload, pat) {\n        pat.section_number = payload[7]; // eslint-disable-line camelcase\n\n        pat.last_section_number = payload[8]; // eslint-disable-line camelcase\n        // skip the PSI header and parse the first PMT entry\n\n        self.pmtPid = (payload[10] & 0x1F) << 8 | payload[11];\n        pat.pmtPid = self.pmtPid;\n      };\n      /**\n       * Parse out the relevant fields of a Program Map Table (PMT).\n       * @param payload {Uint8Array} the PMT-specific portion of an MP2T\n       * packet. The first byte in this array should be the table_id\n       * field.\n       * @param pmt {object} the object that should be decorated with\n       * fields parsed from the PMT.\n       */\n\n\n      parsePmt = function parsePmt(payload, pmt) {\n        var sectionLength, tableEnd, programInfoLength, offset; // PMTs can be sent ahead of the time when they should actually\n        // take effect. We don't believe this should ever be the case\n        // for HLS but we'll ignore \"forward\" PMT declarations if we see\n        // them. Future PMT declarations have the current_next_indicator\n        // set to zero.\n\n        if (!(payload[5] & 0x01)) {\n          return;\n        } // overwrite any existing program map table\n\n\n        self.programMapTable = {\n          video: null,\n          audio: null,\n          'timed-metadata': {}\n        }; // the mapping table ends at the end of the current section\n\n        sectionLength = (payload[1] & 0x0f) << 8 | payload[2];\n        tableEnd = 3 + sectionLength - 4; // to determine where the table is, we have to figure out how\n        // long the program info descriptors are\n\n        programInfoLength = (payload[10] & 0x0f) << 8 | payload[11]; // advance the offset to the first entry in the mapping table\n\n        offset = 12 + programInfoLength;\n\n        while (offset < tableEnd) {\n          var streamType = payload[offset];\n          var pid = (payload[offset + 1] & 0x1F) << 8 | payload[offset + 2]; // only map a single elementary_pid for audio and video stream types\n          // TODO: should this be done for metadata too? for now maintain behavior of\n          //       multiple metadata streams\n\n          if (streamType === streamTypes.H264_STREAM_TYPE && self.programMapTable.video === null) {\n            self.programMapTable.video = pid;\n          } else if (streamType === streamTypes.ADTS_STREAM_TYPE && self.programMapTable.audio === null) {\n            self.programMapTable.audio = pid;\n          } else if (streamType === streamTypes.METADATA_STREAM_TYPE) {\n            // map pid to stream type for metadata streams\n            self.programMapTable['timed-metadata'][pid] = streamType;\n          } // move to the next table entry\n          // skip past the elementary stream descriptors, if present\n\n\n          offset += ((payload[offset + 3] & 0x0F) << 8 | payload[offset + 4]) + 5;\n        } // record the map on the packet as well\n\n\n        pmt.programMapTable = self.programMapTable;\n      };\n      /**\n       * Deliver a new MP2T packet to the next stream in the pipeline.\n       */\n\n\n      this.push = function (packet) {\n        var result = {},\n            offset = 4;\n        result.payloadUnitStartIndicator = !!(packet[1] & 0x40); // pid is a 13-bit field starting at the last bit of packet[1]\n\n        result.pid = packet[1] & 0x1f;\n        result.pid <<= 8;\n        result.pid |= packet[2]; // if an adaption field is present, its length is specified by the\n        // fifth byte of the TS packet header. The adaptation field is\n        // used to add stuffing to PES packets that don't fill a complete\n        // TS packet, and to specify some forms of timing and control data\n        // that we do not currently use.\n\n        if ((packet[3] & 0x30) >>> 4 > 0x01) {\n          offset += packet[offset] + 1;\n        } // parse the rest of the packet based on the type\n\n\n        if (result.pid === 0) {\n          result.type = 'pat';\n          parsePsi(packet.subarray(offset), result);\n          this.trigger('data', result);\n        } else if (result.pid === this.pmtPid) {\n          result.type = 'pmt';\n          parsePsi(packet.subarray(offset), result);\n          this.trigger('data', result); // if there are any packets waiting for a PMT to be found, process them now\n\n          while (this.packetsWaitingForPmt.length) {\n            this.processPes_.apply(this, this.packetsWaitingForPmt.shift());\n          }\n        } else if (this.programMapTable === undefined) {\n          // When we have not seen a PMT yet, defer further processing of\n          // PES packets until one has been parsed\n          this.packetsWaitingForPmt.push([packet, offset, result]);\n        } else {\n          this.processPes_(packet, offset, result);\n        }\n      };\n\n      this.processPes_ = function (packet, offset, result) {\n        // set the appropriate stream type\n        if (result.pid === this.programMapTable.video) {\n          result.streamType = streamTypes.H264_STREAM_TYPE;\n        } else if (result.pid === this.programMapTable.audio) {\n          result.streamType = streamTypes.ADTS_STREAM_TYPE;\n        } else {\n          // if not video or audio, it is timed-metadata or unknown\n          // if unknown, streamType will be undefined\n          result.streamType = this.programMapTable['timed-metadata'][result.pid];\n        }\n\n        result.type = 'pes';\n        result.data = packet.subarray(offset);\n        this.trigger('data', result);\n      };\n    };\n\n    _TransportParseStream.prototype = new stream();\n    _TransportParseStream.STREAM_TYPES = {\n      h264: 0x1b,\n      adts: 0x0f\n    };\n    /**\n     * Reconsistutes program elementary stream (PES) packets from parsed\n     * transport stream packets. That is, if you pipe an\n     * mp2t.TransportParseStream into a mp2t.ElementaryStream, the output\n     * events will be events which capture the bytes for individual PES\n     * packets plus relevant metadata that has been extracted from the\n     * container.\n     */\n\n    _ElementaryStream = function ElementaryStream() {\n      var self = this,\n          // PES packet fragments\n      video = {\n        data: [],\n        size: 0\n      },\n          audio = {\n        data: [],\n        size: 0\n      },\n          timedMetadata = {\n        data: [],\n        size: 0\n      },\n          parsePes = function parsePes(payload, pes) {\n        var ptsDtsFlags; // get the packet length, this will be 0 for video\n\n        pes.packetLength = 6 + (payload[4] << 8 | payload[5]); // find out if this packets starts a new keyframe\n\n        pes.dataAlignmentIndicator = (payload[6] & 0x04) !== 0; // PES packets may be annotated with a PTS value, or a PTS value\n        // and a DTS value. Determine what combination of values is\n        // available to work with.\n\n        ptsDtsFlags = payload[7]; // PTS and DTS are normally stored as a 33-bit number.  Javascript\n        // performs all bitwise operations on 32-bit integers but javascript\n        // supports a much greater range (52-bits) of integer using standard\n        // mathematical operations.\n        // We construct a 31-bit value using bitwise operators over the 31\n        // most significant bits and then multiply by 4 (equal to a left-shift\n        // of 2) before we add the final 2 least significant bits of the\n        // timestamp (equal to an OR.)\n\n        if (ptsDtsFlags & 0xC0) {\n          // the PTS and DTS are not written out directly. For information\n          // on how they are encoded, see\n          // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n          pes.pts = (payload[9] & 0x0E) << 27 | (payload[10] & 0xFF) << 20 | (payload[11] & 0xFE) << 12 | (payload[12] & 0xFF) << 5 | (payload[13] & 0xFE) >>> 3;\n          pes.pts *= 4; // Left shift by 2\n\n          pes.pts += (payload[13] & 0x06) >>> 1; // OR by the two LSBs\n\n          pes.dts = pes.pts;\n\n          if (ptsDtsFlags & 0x40) {\n            pes.dts = (payload[14] & 0x0E) << 27 | (payload[15] & 0xFF) << 20 | (payload[16] & 0xFE) << 12 | (payload[17] & 0xFF) << 5 | (payload[18] & 0xFE) >>> 3;\n            pes.dts *= 4; // Left shift by 2\n\n            pes.dts += (payload[18] & 0x06) >>> 1; // OR by the two LSBs\n          }\n        } // the data section starts immediately after the PES header.\n        // pes_header_data_length specifies the number of header bytes\n        // that follow the last byte of the field.\n\n\n        pes.data = payload.subarray(9 + payload[8]);\n      },\n\n      /**\n        * Pass completely parsed PES packets to the next stream in the pipeline\n       **/\n      flushStream = function flushStream(stream$$1, type, forceFlush) {\n        var packetData = new Uint8Array(stream$$1.size),\n            event = {\n          type: type\n        },\n            i = 0,\n            offset = 0,\n            packetFlushable = false,\n            fragment; // do nothing if there is not enough buffered data for a complete\n        // PES header\n\n        if (!stream$$1.data.length || stream$$1.size < 9) {\n          return;\n        }\n\n        event.trackId = stream$$1.data[0].pid; // reassemble the packet\n\n        for (i = 0; i < stream$$1.data.length; i++) {\n          fragment = stream$$1.data[i];\n          packetData.set(fragment.data, offset);\n          offset += fragment.data.byteLength;\n        } // parse assembled packet's PES header\n\n\n        parsePes(packetData, event); // non-video PES packets MUST have a non-zero PES_packet_length\n        // check that there is enough stream data to fill the packet\n\n        packetFlushable = type === 'video' || event.packetLength <= stream$$1.size; // flush pending packets if the conditions are right\n\n        if (forceFlush || packetFlushable) {\n          stream$$1.size = 0;\n          stream$$1.data.length = 0;\n        } // only emit packets that are complete. this is to avoid assembling\n        // incomplete PES packets due to poor segmentation\n\n\n        if (packetFlushable) {\n          self.trigger('data', event);\n        }\n      };\n\n      _ElementaryStream.prototype.init.call(this);\n      /**\n       * Identifies M2TS packet types and parses PES packets using metadata\n       * parsed from the PMT\n       **/\n\n\n      this.push = function (data) {\n        ({\n          pat: function pat() {// we have to wait for the PMT to arrive as well before we\n            // have any meaningful metadata\n          },\n          pes: function pes() {\n            var stream$$1, streamType;\n\n            switch (data.streamType) {\n              case streamTypes.H264_STREAM_TYPE:\n              case streamTypes.H264_STREAM_TYPE:\n                stream$$1 = video;\n                streamType = 'video';\n                break;\n\n              case streamTypes.ADTS_STREAM_TYPE:\n                stream$$1 = audio;\n                streamType = 'audio';\n                break;\n\n              case streamTypes.METADATA_STREAM_TYPE:\n                stream$$1 = timedMetadata;\n                streamType = 'timed-metadata';\n                break;\n\n              default:\n                // ignore unknown stream types\n                return;\n            } // if a new packet is starting, we can flush the completed\n            // packet\n\n\n            if (data.payloadUnitStartIndicator) {\n              flushStream(stream$$1, streamType, true);\n            } // buffer this fragment until we are sure we've received the\n            // complete payload\n\n\n            stream$$1.data.push(data);\n            stream$$1.size += data.data.byteLength;\n          },\n          pmt: function pmt() {\n            var event = {\n              type: 'metadata',\n              tracks: []\n            },\n                programMapTable = data.programMapTable; // translate audio and video streams to tracks\n\n            if (programMapTable.video !== null) {\n              event.tracks.push({\n                timelineStartInfo: {\n                  baseMediaDecodeTime: 0\n                },\n                id: +programMapTable.video,\n                codec: 'avc',\n                type: 'video'\n              });\n            }\n\n            if (programMapTable.audio !== null) {\n              event.tracks.push({\n                timelineStartInfo: {\n                  baseMediaDecodeTime: 0\n                },\n                id: +programMapTable.audio,\n                codec: 'adts',\n                type: 'audio'\n              });\n            }\n\n            self.trigger('data', event);\n          }\n        })[data.type]();\n      };\n      /**\n       * Flush any remaining input. Video PES packets may be of variable\n       * length. Normally, the start of a new video packet can trigger the\n       * finalization of the previous packet. That is not possible if no\n       * more video is forthcoming, however. In that case, some other\n       * mechanism (like the end of the file) has to be employed. When it is\n       * clear that no additional data is forthcoming, calling this method\n       * will flush the buffered packets.\n       */\n\n\n      this.flush = function () {\n        // !!THIS ORDER IS IMPORTANT!!\n        // video first then audio\n        flushStream(video, 'video');\n        flushStream(audio, 'audio');\n        flushStream(timedMetadata, 'timed-metadata');\n        this.trigger('done');\n      };\n    };\n\n    _ElementaryStream.prototype = new stream();\n    var m2ts = {\n      PAT_PID: 0x0000,\n      MP2T_PACKET_LENGTH: MP2T_PACKET_LENGTH,\n      TransportPacketStream: _TransportPacketStream,\n      TransportParseStream: _TransportParseStream,\n      ElementaryStream: _ElementaryStream,\n      TimestampRolloverStream: TimestampRolloverStream$1,\n      CaptionStream: captionStream.CaptionStream,\n      Cea608Stream: captionStream.Cea608Stream,\n      MetadataStream: metadataStream\n    };\n\n    for (var type in streamTypes) {\n      if (streamTypes.hasOwnProperty(type)) {\n        m2ts[type] = streamTypes[type];\n      }\n    }\n\n    var m2ts_1 = m2ts;\n\n    var _AdtsStream;\n\n    var ADTS_SAMPLING_FREQUENCIES = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];\n    /*\n     * Accepts a ElementaryStream and emits data events with parsed\n     * AAC Audio Frames of the individual packets. Input audio in ADTS\n     * format is unpacked and re-emitted as AAC frames.\n     *\n     * @see http://wiki.multimedia.cx/index.php?title=ADTS\n     * @see http://wiki.multimedia.cx/?title=Understanding_AAC\n     */\n\n    _AdtsStream = function AdtsStream() {\n      var buffer;\n\n      _AdtsStream.prototype.init.call(this);\n\n      this.push = function (packet) {\n        var i = 0,\n            frameNum = 0,\n            frameLength,\n            protectionSkipBytes,\n            frameEnd,\n            oldBuffer,\n            sampleCount,\n            adtsFrameDuration;\n\n        if (packet.type !== 'audio') {\n          // ignore non-audio data\n          return;\n        } // Prepend any data in the buffer to the input data so that we can parse\n        // aac frames the cross a PES packet boundary\n\n\n        if (buffer) {\n          oldBuffer = buffer;\n          buffer = new Uint8Array(oldBuffer.byteLength + packet.data.byteLength);\n          buffer.set(oldBuffer);\n          buffer.set(packet.data, oldBuffer.byteLength);\n        } else {\n          buffer = packet.data;\n        } // unpack any ADTS frames which have been fully received\n        // for details on the ADTS header, see http://wiki.multimedia.cx/index.php?title=ADTS\n\n\n        while (i + 5 < buffer.length) {\n          // Loook for the start of an ADTS header..\n          if (buffer[i] !== 0xFF || (buffer[i + 1] & 0xF6) !== 0xF0) {\n            // If a valid header was not found,  jump one forward and attempt to\n            // find a valid ADTS header starting at the next byte\n            i++;\n            continue;\n          } // The protection skip bit tells us if we have 2 bytes of CRC data at the\n          // end of the ADTS header\n\n\n          protectionSkipBytes = (~buffer[i + 1] & 0x01) * 2; // Frame length is a 13 bit integer starting 16 bits from the\n          // end of the sync sequence\n\n          frameLength = (buffer[i + 3] & 0x03) << 11 | buffer[i + 4] << 3 | (buffer[i + 5] & 0xe0) >> 5;\n          sampleCount = ((buffer[i + 6] & 0x03) + 1) * 1024;\n          adtsFrameDuration = sampleCount * 90000 / ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2];\n          frameEnd = i + frameLength; // If we don't have enough data to actually finish this ADTS frame, return\n          // and wait for more data\n\n          if (buffer.byteLength < frameEnd) {\n            return;\n          } // Otherwise, deliver the complete AAC frame\n\n\n          this.trigger('data', {\n            pts: packet.pts + frameNum * adtsFrameDuration,\n            dts: packet.dts + frameNum * adtsFrameDuration,\n            sampleCount: sampleCount,\n            audioobjecttype: (buffer[i + 2] >>> 6 & 0x03) + 1,\n            channelcount: (buffer[i + 2] & 1) << 2 | (buffer[i + 3] & 0xc0) >>> 6,\n            samplerate: ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2],\n            samplingfrequencyindex: (buffer[i + 2] & 0x3c) >>> 2,\n            // assume ISO/IEC 14496-12 AudioSampleEntry default of 16\n            samplesize: 16,\n            data: buffer.subarray(i + 7 + protectionSkipBytes, frameEnd)\n          }); // If the buffer is empty, clear it and return\n\n          if (buffer.byteLength === frameEnd) {\n            buffer = undefined;\n            return;\n          }\n\n          frameNum++; // Remove the finished frame from the buffer and start the process again\n\n          buffer = buffer.subarray(frameEnd);\n        }\n      };\n\n      this.flush = function () {\n        this.trigger('done');\n      };\n    };\n\n    _AdtsStream.prototype = new stream();\n    var adts = _AdtsStream;\n    var ExpGolomb;\n    /**\n     * Parser for exponential Golomb codes, a variable-bitwidth number encoding\n     * scheme used by h264.\n     */\n\n    ExpGolomb = function ExpGolomb(workingData) {\n      var // the number of bytes left to examine in workingData\n      workingBytesAvailable = workingData.byteLength,\n          // the current word being examined\n      workingWord = 0,\n          // :uint\n      // the number of bits left to examine in the current word\n      workingBitsAvailable = 0; // :uint;\n      // ():uint\n\n      this.length = function () {\n        return 8 * workingBytesAvailable;\n      }; // ():uint\n\n\n      this.bitsAvailable = function () {\n        return 8 * workingBytesAvailable + workingBitsAvailable;\n      }; // ():void\n\n\n      this.loadWord = function () {\n        var position = workingData.byteLength - workingBytesAvailable,\n            workingBytes = new Uint8Array(4),\n            availableBytes = Math.min(4, workingBytesAvailable);\n\n        if (availableBytes === 0) {\n          throw new Error('no bytes available');\n        }\n\n        workingBytes.set(workingData.subarray(position, position + availableBytes));\n        workingWord = new DataView(workingBytes.buffer).getUint32(0); // track the amount of workingData that has been processed\n\n        workingBitsAvailable = availableBytes * 8;\n        workingBytesAvailable -= availableBytes;\n      }; // (count:int):void\n\n\n      this.skipBits = function (count) {\n        var skipBytes; // :int\n\n        if (workingBitsAvailable > count) {\n          workingWord <<= count;\n          workingBitsAvailable -= count;\n        } else {\n          count -= workingBitsAvailable;\n          skipBytes = Math.floor(count / 8);\n          count -= skipBytes * 8;\n          workingBytesAvailable -= skipBytes;\n          this.loadWord();\n          workingWord <<= count;\n          workingBitsAvailable -= count;\n        }\n      }; // (size:int):uint\n\n\n      this.readBits = function (size) {\n        var bits = Math.min(workingBitsAvailable, size),\n            // :uint\n        valu = workingWord >>> 32 - bits; // :uint\n        // if size > 31, handle error\n\n        workingBitsAvailable -= bits;\n\n        if (workingBitsAvailable > 0) {\n          workingWord <<= bits;\n        } else if (workingBytesAvailable > 0) {\n          this.loadWord();\n        }\n\n        bits = size - bits;\n\n        if (bits > 0) {\n          return valu << bits | this.readBits(bits);\n        }\n\n        return valu;\n      }; // ():uint\n\n\n      this.skipLeadingZeros = function () {\n        var leadingZeroCount; // :uint\n\n        for (leadingZeroCount = 0; leadingZeroCount < workingBitsAvailable; ++leadingZeroCount) {\n          if ((workingWord & 0x80000000 >>> leadingZeroCount) !== 0) {\n            // the first bit of working word is 1\n            workingWord <<= leadingZeroCount;\n            workingBitsAvailable -= leadingZeroCount;\n            return leadingZeroCount;\n          }\n        } // we exhausted workingWord and still have not found a 1\n\n\n        this.loadWord();\n        return leadingZeroCount + this.skipLeadingZeros();\n      }; // ():void\n\n\n      this.skipUnsignedExpGolomb = function () {\n        this.skipBits(1 + this.skipLeadingZeros());\n      }; // ():void\n\n\n      this.skipExpGolomb = function () {\n        this.skipBits(1 + this.skipLeadingZeros());\n      }; // ():uint\n\n\n      this.readUnsignedExpGolomb = function () {\n        var clz = this.skipLeadingZeros(); // :uint\n\n        return this.readBits(clz + 1) - 1;\n      }; // ():int\n\n\n      this.readExpGolomb = function () {\n        var valu = this.readUnsignedExpGolomb(); // :int\n\n        if (0x01 & valu) {\n          // the number is odd if the low order bit is set\n          return 1 + valu >>> 1; // add 1 to make it even, and divide by 2\n        }\n\n        return -1 * (valu >>> 1); // divide by two then make it negative\n      }; // Some convenience functions\n      // :Boolean\n\n\n      this.readBoolean = function () {\n        return this.readBits(1) === 1;\n      }; // ():int\n\n\n      this.readUnsignedByte = function () {\n        return this.readBits(8);\n      };\n\n      this.loadWord();\n    };\n\n    var expGolomb = ExpGolomb;\n\n    var _H264Stream, _NalByteStream;\n\n    var PROFILES_WITH_OPTIONAL_SPS_DATA;\n    /**\n     * Accepts a NAL unit byte stream and unpacks the embedded NAL units.\n     */\n\n    _NalByteStream = function NalByteStream() {\n      var syncPoint = 0,\n          i,\n          buffer;\n\n      _NalByteStream.prototype.init.call(this);\n      /*\n       * Scans a byte stream and triggers a data event with the NAL units found.\n       * @param {Object} data Event received from H264Stream\n       * @param {Uint8Array} data.data The h264 byte stream to be scanned\n       *\n       * @see H264Stream.push\n       */\n\n\n      this.push = function (data) {\n        var swapBuffer;\n\n        if (!buffer) {\n          buffer = data.data;\n        } else {\n          swapBuffer = new Uint8Array(buffer.byteLength + data.data.byteLength);\n          swapBuffer.set(buffer);\n          swapBuffer.set(data.data, buffer.byteLength);\n          buffer = swapBuffer;\n        } // Rec. ITU-T H.264, Annex B\n        // scan for NAL unit boundaries\n        // a match looks like this:\n        // 0 0 1 .. NAL .. 0 0 1\n        // ^ sync point        ^ i\n        // or this:\n        // 0 0 1 .. NAL .. 0 0 0\n        // ^ sync point        ^ i\n        // advance the sync point to a NAL start, if necessary\n\n\n        for (; syncPoint < buffer.byteLength - 3; syncPoint++) {\n          if (buffer[syncPoint + 2] === 1) {\n            // the sync point is properly aligned\n            i = syncPoint + 5;\n            break;\n          }\n        }\n\n        while (i < buffer.byteLength) {\n          // look at the current byte to determine if we've hit the end of\n          // a NAL unit boundary\n          switch (buffer[i]) {\n            case 0:\n              // skip past non-sync sequences\n              if (buffer[i - 1] !== 0) {\n                i += 2;\n                break;\n              } else if (buffer[i - 2] !== 0) {\n                i++;\n                break;\n              } // deliver the NAL unit if it isn't empty\n\n\n              if (syncPoint + 3 !== i - 2) {\n                this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n              } // drop trailing zeroes\n\n\n              do {\n                i++;\n              } while (buffer[i] !== 1 && i < buffer.length);\n\n              syncPoint = i - 2;\n              i += 3;\n              break;\n\n            case 1:\n              // skip past non-sync sequences\n              if (buffer[i - 1] !== 0 || buffer[i - 2] !== 0) {\n                i += 3;\n                break;\n              } // deliver the NAL unit\n\n\n              this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n              syncPoint = i - 2;\n              i += 3;\n              break;\n\n            default:\n              // the current byte isn't a one or zero, so it cannot be part\n              // of a sync sequence\n              i += 3;\n              break;\n          }\n        } // filter out the NAL units that were delivered\n\n\n        buffer = buffer.subarray(syncPoint);\n        i -= syncPoint;\n        syncPoint = 0;\n      };\n\n      this.flush = function () {\n        // deliver the last buffered NAL unit\n        if (buffer && buffer.byteLength > 3) {\n          this.trigger('data', buffer.subarray(syncPoint + 3));\n        } // reset the stream state\n\n\n        buffer = null;\n        syncPoint = 0;\n        this.trigger('done');\n      };\n    };\n\n    _NalByteStream.prototype = new stream(); // values of profile_idc that indicate additional fields are included in the SPS\n    // see Recommendation ITU-T H.264 (4/2013),\n    // 7.3.2.1.1 Sequence parameter set data syntax\n\n    PROFILES_WITH_OPTIONAL_SPS_DATA = {\n      100: true,\n      110: true,\n      122: true,\n      244: true,\n      44: true,\n      83: true,\n      86: true,\n      118: true,\n      128: true,\n      138: true,\n      139: true,\n      134: true\n    };\n    /**\n     * Accepts input from a ElementaryStream and produces H.264 NAL unit data\n     * events.\n     */\n\n    _H264Stream = function H264Stream() {\n      var nalByteStream = new _NalByteStream(),\n          self,\n          trackId,\n          currentPts,\n          currentDts,\n          discardEmulationPreventionBytes,\n          readSequenceParameterSet,\n          skipScalingList;\n\n      _H264Stream.prototype.init.call(this);\n\n      self = this;\n      /*\n       * Pushes a packet from a stream onto the NalByteStream\n       *\n       * @param {Object} packet - A packet received from a stream\n       * @param {Uint8Array} packet.data - The raw bytes of the packet\n       * @param {Number} packet.dts - Decode timestamp of the packet\n       * @param {Number} packet.pts - Presentation timestamp of the packet\n       * @param {Number} packet.trackId - The id of the h264 track this packet came from\n       * @param {('video'|'audio')} packet.type - The type of packet\n       *\n       */\n\n      this.push = function (packet) {\n        if (packet.type !== 'video') {\n          return;\n        }\n\n        trackId = packet.trackId;\n        currentPts = packet.pts;\n        currentDts = packet.dts;\n        nalByteStream.push(packet);\n      };\n      /*\n       * Identify NAL unit types and pass on the NALU, trackId, presentation and decode timestamps\n       * for the NALUs to the next stream component.\n       * Also, preprocess caption and sequence parameter NALUs.\n       *\n       * @param {Uint8Array} data - A NAL unit identified by `NalByteStream.push`\n       * @see NalByteStream.push\n       */\n\n\n      nalByteStream.on('data', function (data) {\n        var event = {\n          trackId: trackId,\n          pts: currentPts,\n          dts: currentDts,\n          data: data\n        };\n\n        switch (data[0] & 0x1f) {\n          case 0x05:\n            event.nalUnitType = 'slice_layer_without_partitioning_rbsp_idr';\n            break;\n\n          case 0x06:\n            event.nalUnitType = 'sei_rbsp';\n            event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n            break;\n\n          case 0x07:\n            event.nalUnitType = 'seq_parameter_set_rbsp';\n            event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n            event.config = readSequenceParameterSet(event.escapedRBSP);\n            break;\n\n          case 0x08:\n            event.nalUnitType = 'pic_parameter_set_rbsp';\n            break;\n\n          case 0x09:\n            event.nalUnitType = 'access_unit_delimiter_rbsp';\n            break;\n\n          default:\n            break;\n        } // This triggers data on the H264Stream\n\n\n        self.trigger('data', event);\n      });\n      nalByteStream.on('done', function () {\n        self.trigger('done');\n      });\n\n      this.flush = function () {\n        nalByteStream.flush();\n      };\n      /**\n       * Advance the ExpGolomb decoder past a scaling list. The scaling\n       * list is optionally transmitted as part of a sequence parameter\n       * set and is not relevant to transmuxing.\n       * @param count {number} the number of entries in this scaling list\n       * @param expGolombDecoder {object} an ExpGolomb pointed to the\n       * start of a scaling list\n       * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n       */\n\n\n      skipScalingList = function skipScalingList(count, expGolombDecoder) {\n        var lastScale = 8,\n            nextScale = 8,\n            j,\n            deltaScale;\n\n        for (j = 0; j < count; j++) {\n          if (nextScale !== 0) {\n            deltaScale = expGolombDecoder.readExpGolomb();\n            nextScale = (lastScale + deltaScale + 256) % 256;\n          }\n\n          lastScale = nextScale === 0 ? lastScale : nextScale;\n        }\n      };\n      /**\n       * Expunge any \"Emulation Prevention\" bytes from a \"Raw Byte\n       * Sequence Payload\"\n       * @param data {Uint8Array} the bytes of a RBSP from a NAL\n       * unit\n       * @return {Uint8Array} the RBSP without any Emulation\n       * Prevention Bytes\n       */\n\n\n      discardEmulationPreventionBytes = function discardEmulationPreventionBytes(data) {\n        var length = data.byteLength,\n            emulationPreventionBytesPositions = [],\n            i = 1,\n            newLength,\n            newData; // Find all `Emulation Prevention Bytes`\n\n        while (i < length - 2) {\n          if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n            emulationPreventionBytesPositions.push(i + 2);\n            i += 2;\n          } else {\n            i++;\n          }\n        } // If no Emulation Prevention Bytes were found just return the original\n        // array\n\n\n        if (emulationPreventionBytesPositions.length === 0) {\n          return data;\n        } // Create a new array to hold the NAL unit data\n\n\n        newLength = length - emulationPreventionBytesPositions.length;\n        newData = new Uint8Array(newLength);\n        var sourceIndex = 0;\n\n        for (i = 0; i < newLength; sourceIndex++, i++) {\n          if (sourceIndex === emulationPreventionBytesPositions[0]) {\n            // Skip this byte\n            sourceIndex++; // Remove this position index\n\n            emulationPreventionBytesPositions.shift();\n          }\n\n          newData[i] = data[sourceIndex];\n        }\n\n        return newData;\n      };\n      /**\n       * Read a sequence parameter set and return some interesting video\n       * properties. A sequence parameter set is the H264 metadata that\n       * describes the properties of upcoming video frames.\n       * @param data {Uint8Array} the bytes of a sequence parameter set\n       * @return {object} an object with configuration parsed from the\n       * sequence parameter set, including the dimensions of the\n       * associated video frames.\n       */\n\n\n      readSequenceParameterSet = function readSequenceParameterSet(data) {\n        var frameCropLeftOffset = 0,\n            frameCropRightOffset = 0,\n            frameCropTopOffset = 0,\n            frameCropBottomOffset = 0,\n            sarScale = 1,\n            expGolombDecoder,\n            profileIdc,\n            levelIdc,\n            profileCompatibility,\n            chromaFormatIdc,\n            picOrderCntType,\n            numRefFramesInPicOrderCntCycle,\n            picWidthInMbsMinus1,\n            picHeightInMapUnitsMinus1,\n            frameMbsOnlyFlag,\n            scalingListCount,\n            sarRatio,\n            aspectRatioIdc,\n            i;\n        expGolombDecoder = new expGolomb(data);\n        profileIdc = expGolombDecoder.readUnsignedByte(); // profile_idc\n\n        profileCompatibility = expGolombDecoder.readUnsignedByte(); // constraint_set[0-5]_flag\n\n        levelIdc = expGolombDecoder.readUnsignedByte(); // level_idc u(8)\n\n        expGolombDecoder.skipUnsignedExpGolomb(); // seq_parameter_set_id\n        // some profiles have more optional data we don't need\n\n        if (PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc]) {\n          chromaFormatIdc = expGolombDecoder.readUnsignedExpGolomb();\n\n          if (chromaFormatIdc === 3) {\n            expGolombDecoder.skipBits(1); // separate_colour_plane_flag\n          }\n\n          expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_luma_minus8\n\n          expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_chroma_minus8\n\n          expGolombDecoder.skipBits(1); // qpprime_y_zero_transform_bypass_flag\n\n          if (expGolombDecoder.readBoolean()) {\n            // seq_scaling_matrix_present_flag\n            scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;\n\n            for (i = 0; i < scalingListCount; i++) {\n              if (expGolombDecoder.readBoolean()) {\n                // seq_scaling_list_present_flag[ i ]\n                if (i < 6) {\n                  skipScalingList(16, expGolombDecoder);\n                } else {\n                  skipScalingList(64, expGolombDecoder);\n                }\n              }\n            }\n          }\n        }\n\n        expGolombDecoder.skipUnsignedExpGolomb(); // log2_max_frame_num_minus4\n\n        picOrderCntType = expGolombDecoder.readUnsignedExpGolomb();\n\n        if (picOrderCntType === 0) {\n          expGolombDecoder.readUnsignedExpGolomb(); // log2_max_pic_order_cnt_lsb_minus4\n        } else if (picOrderCntType === 1) {\n          expGolombDecoder.skipBits(1); // delta_pic_order_always_zero_flag\n\n          expGolombDecoder.skipExpGolomb(); // offset_for_non_ref_pic\n\n          expGolombDecoder.skipExpGolomb(); // offset_for_top_to_bottom_field\n\n          numRefFramesInPicOrderCntCycle = expGolombDecoder.readUnsignedExpGolomb();\n\n          for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n            expGolombDecoder.skipExpGolomb(); // offset_for_ref_frame[ i ]\n          }\n        }\n\n        expGolombDecoder.skipUnsignedExpGolomb(); // max_num_ref_frames\n\n        expGolombDecoder.skipBits(1); // gaps_in_frame_num_value_allowed_flag\n\n        picWidthInMbsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n        picHeightInMapUnitsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n        frameMbsOnlyFlag = expGolombDecoder.readBits(1);\n\n        if (frameMbsOnlyFlag === 0) {\n          expGolombDecoder.skipBits(1); // mb_adaptive_frame_field_flag\n        }\n\n        expGolombDecoder.skipBits(1); // direct_8x8_inference_flag\n\n        if (expGolombDecoder.readBoolean()) {\n          // frame_cropping_flag\n          frameCropLeftOffset = expGolombDecoder.readUnsignedExpGolomb();\n          frameCropRightOffset = expGolombDecoder.readUnsignedExpGolomb();\n          frameCropTopOffset = expGolombDecoder.readUnsignedExpGolomb();\n          frameCropBottomOffset = expGolombDecoder.readUnsignedExpGolomb();\n        }\n\n        if (expGolombDecoder.readBoolean()) {\n          // vui_parameters_present_flag\n          if (expGolombDecoder.readBoolean()) {\n            // aspect_ratio_info_present_flag\n            aspectRatioIdc = expGolombDecoder.readUnsignedByte();\n\n            switch (aspectRatioIdc) {\n              case 1:\n                sarRatio = [1, 1];\n                break;\n\n              case 2:\n                sarRatio = [12, 11];\n                break;\n\n              case 3:\n                sarRatio = [10, 11];\n                break;\n\n              case 4:\n                sarRatio = [16, 11];\n                break;\n\n              case 5:\n                sarRatio = [40, 33];\n                break;\n\n              case 6:\n                sarRatio = [24, 11];\n                break;\n\n              case 7:\n                sarRatio = [20, 11];\n                break;\n\n              case 8:\n                sarRatio = [32, 11];\n                break;\n\n              case 9:\n                sarRatio = [80, 33];\n                break;\n\n              case 10:\n                sarRatio = [18, 11];\n                break;\n\n              case 11:\n                sarRatio = [15, 11];\n                break;\n\n              case 12:\n                sarRatio = [64, 33];\n                break;\n\n              case 13:\n                sarRatio = [160, 99];\n                break;\n\n              case 14:\n                sarRatio = [4, 3];\n                break;\n\n              case 15:\n                sarRatio = [3, 2];\n                break;\n\n              case 16:\n                sarRatio = [2, 1];\n                break;\n\n              case 255:\n                {\n                  sarRatio = [expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte(), expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte()];\n                  break;\n                }\n            }\n\n            if (sarRatio) {\n              sarScale = sarRatio[0] / sarRatio[1];\n            }\n          }\n        }\n\n        return {\n          profileIdc: profileIdc,\n          levelIdc: levelIdc,\n          profileCompatibility: profileCompatibility,\n          width: Math.ceil(((picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2) * sarScale),\n          height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - frameCropTopOffset * 2 - frameCropBottomOffset * 2\n        };\n      };\n    };\n\n    _H264Stream.prototype = new stream();\n    var h264 = {\n      H264Stream: _H264Stream,\n      NalByteStream: _NalByteStream\n    };\n    /**\n     * mux.js\n     *\n     * Copyright (c) 2016 Brightcove\n     * All rights reserved.\n     *\n     * Utilities to detect basic properties and metadata about Aac data.\n     */\n\n    var ADTS_SAMPLING_FREQUENCIES$1 = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];\n\n    var isLikelyAacData = function isLikelyAacData(data) {\n      if (data[0] === 'I'.charCodeAt(0) && data[1] === 'D'.charCodeAt(0) && data[2] === '3'.charCodeAt(0)) {\n        return true;\n      }\n\n      return false;\n    };\n\n    var parseSyncSafeInteger$1 = function parseSyncSafeInteger(data) {\n      return data[0] << 21 | data[1] << 14 | data[2] << 7 | data[3];\n    }; // return a percent-encoded representation of the specified byte range\n    // @see http://en.wikipedia.org/wiki/Percent-encoding\n\n\n    var percentEncode$1 = function percentEncode(bytes, start, end) {\n      var i,\n          result = '';\n\n      for (i = start; i < end; i++) {\n        result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n      }\n\n      return result;\n    }; // return the string representation of the specified byte range,\n    // interpreted as ISO-8859-1.\n\n\n    var parseIso88591$1 = function parseIso88591(bytes, start, end) {\n      return unescape(percentEncode$1(bytes, start, end)); // jshint ignore:line\n    };\n\n    var parseId3TagSize = function parseId3TagSize(header, byteIndex) {\n      var returnSize = header[byteIndex + 6] << 21 | header[byteIndex + 7] << 14 | header[byteIndex + 8] << 7 | header[byteIndex + 9],\n          flags = header[byteIndex + 5],\n          footerPresent = (flags & 16) >> 4;\n\n      if (footerPresent) {\n        return returnSize + 20;\n      }\n\n      return returnSize + 10;\n    };\n\n    var parseAdtsSize = function parseAdtsSize(header, byteIndex) {\n      var lowThree = (header[byteIndex + 5] & 0xE0) >> 5,\n          middle = header[byteIndex + 4] << 3,\n          highTwo = header[byteIndex + 3] & 0x3 << 11;\n      return highTwo | middle | lowThree;\n    };\n\n    var parseType$1 = function parseType(header, byteIndex) {\n      if (header[byteIndex] === 'I'.charCodeAt(0) && header[byteIndex + 1] === 'D'.charCodeAt(0) && header[byteIndex + 2] === '3'.charCodeAt(0)) {\n        return 'timed-metadata';\n      } else if (header[byteIndex] & 0xff === 0xff && (header[byteIndex + 1] & 0xf0) === 0xf0) {\n        return 'audio';\n      }\n\n      return null;\n    };\n\n    var parseSampleRate = function parseSampleRate(packet) {\n      var i = 0;\n\n      while (i + 5 < packet.length) {\n        if (packet[i] !== 0xFF || (packet[i + 1] & 0xF6) !== 0xF0) {\n          // If a valid header was not found,  jump one forward and attempt to\n          // find a valid ADTS header starting at the next byte\n          i++;\n          continue;\n        }\n\n        return ADTS_SAMPLING_FREQUENCIES$1[(packet[i + 2] & 0x3c) >>> 2];\n      }\n\n      return null;\n    };\n\n    var parseAacTimestamp = function parseAacTimestamp(packet) {\n      var frameStart, frameSize, frame, frameHeader; // find the start of the first frame and the end of the tag\n\n      frameStart = 10;\n\n      if (packet[5] & 0x40) {\n        // advance the frame start past the extended header\n        frameStart += 4; // header size field\n\n        frameStart += parseSyncSafeInteger$1(packet.subarray(10, 14));\n      } // parse one or more ID3 frames\n      // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n\n\n      do {\n        // determine the number of bytes in this frame\n        frameSize = parseSyncSafeInteger$1(packet.subarray(frameStart + 4, frameStart + 8));\n\n        if (frameSize < 1) {\n          return null;\n        }\n\n        frameHeader = String.fromCharCode(packet[frameStart], packet[frameStart + 1], packet[frameStart + 2], packet[frameStart + 3]);\n\n        if (frameHeader === 'PRIV') {\n          frame = packet.subarray(frameStart + 10, frameStart + frameSize + 10);\n\n          for (var i = 0; i < frame.byteLength; i++) {\n            if (frame[i] === 0) {\n              var owner = parseIso88591$1(frame, 0, i);\n\n              if (owner === 'com.apple.streaming.transportStreamTimestamp') {\n                var d = frame.subarray(i + 1);\n                var size = (d[3] & 0x01) << 30 | d[4] << 22 | d[5] << 14 | d[6] << 6 | d[7] >>> 2;\n                size *= 4;\n                size += d[7] & 0x03;\n                return size;\n              }\n\n              break;\n            }\n          }\n        }\n\n        frameStart += 10; // advance past the frame header\n\n        frameStart += frameSize; // advance past the frame body\n      } while (frameStart < packet.byteLength);\n\n      return null;\n    };\n\n    var utils = {\n      isLikelyAacData: isLikelyAacData,\n      parseId3TagSize: parseId3TagSize,\n      parseAdtsSize: parseAdtsSize,\n      parseType: parseType$1,\n      parseSampleRate: parseSampleRate,\n      parseAacTimestamp: parseAacTimestamp\n    }; // Constants\n\n    var _AacStream;\n    /**\n     * Splits an incoming stream of binary data into ADTS and ID3 Frames.\n     */\n\n\n    _AacStream = function AacStream() {\n      var everything = new Uint8Array(),\n          timeStamp = 0;\n\n      _AacStream.prototype.init.call(this);\n\n      this.setTimestamp = function (timestamp) {\n        timeStamp = timestamp;\n      };\n\n      this.push = function (bytes) {\n        var frameSize = 0,\n            byteIndex = 0,\n            bytesLeft,\n            chunk,\n            packet,\n            tempLength; // If there are bytes remaining from the last segment, prepend them to the\n        // bytes that were pushed in\n\n        if (everything.length) {\n          tempLength = everything.length;\n          everything = new Uint8Array(bytes.byteLength + tempLength);\n          everything.set(everything.subarray(0, tempLength));\n          everything.set(bytes, tempLength);\n        } else {\n          everything = bytes;\n        }\n\n        while (everything.length - byteIndex >= 3) {\n          if (everything[byteIndex] === 'I'.charCodeAt(0) && everything[byteIndex + 1] === 'D'.charCodeAt(0) && everything[byteIndex + 2] === '3'.charCodeAt(0)) {\n            // Exit early because we don't have enough to parse\n            // the ID3 tag header\n            if (everything.length - byteIndex < 10) {\n              break;\n            } // check framesize\n\n\n            frameSize = utils.parseId3TagSize(everything, byteIndex); // Exit early if we don't have enough in the buffer\n            // to emit a full packet\n            // Add to byteIndex to support multiple ID3 tags in sequence\n\n            if (byteIndex + frameSize > everything.length) {\n              break;\n            }\n\n            chunk = {\n              type: 'timed-metadata',\n              data: everything.subarray(byteIndex, byteIndex + frameSize)\n            };\n            this.trigger('data', chunk);\n            byteIndex += frameSize;\n            continue;\n          } else if ((everything[byteIndex] & 0xff) === 0xff && (everything[byteIndex + 1] & 0xf0) === 0xf0) {\n            // Exit early because we don't have enough to parse\n            // the ADTS frame header\n            if (everything.length - byteIndex < 7) {\n              break;\n            }\n\n            frameSize = utils.parseAdtsSize(everything, byteIndex); // Exit early if we don't have enough in the buffer\n            // to emit a full packet\n\n            if (byteIndex + frameSize > everything.length) {\n              break;\n            }\n\n            packet = {\n              type: 'audio',\n              data: everything.subarray(byteIndex, byteIndex + frameSize),\n              pts: timeStamp,\n              dts: timeStamp\n            };\n            this.trigger('data', packet);\n            byteIndex += frameSize;\n            continue;\n          }\n\n          byteIndex++;\n        }\n\n        bytesLeft = everything.length - byteIndex;\n\n        if (bytesLeft > 0) {\n          everything = everything.subarray(byteIndex);\n        } else {\n          everything = new Uint8Array();\n        }\n      };\n    };\n\n    _AacStream.prototype = new stream();\n    var aac = _AacStream;\n    var H264Stream = h264.H264Stream;\n    var isLikelyAacData$1 = utils.isLikelyAacData; // constants\n\n    var AUDIO_PROPERTIES = ['audioobjecttype', 'channelcount', 'samplerate', 'samplingfrequencyindex', 'samplesize'];\n    var VIDEO_PROPERTIES = ['width', 'height', 'profileIdc', 'levelIdc', 'profileCompatibility']; // object types\n\n    var _VideoSegmentStream, _AudioSegmentStream, _Transmuxer, _CoalesceStream;\n    /**\n     * Compare two arrays (even typed) for same-ness\n     */\n\n\n    var arrayEquals = function arrayEquals(a, b) {\n      var i;\n\n      if (a.length !== b.length) {\n        return false;\n      } // compare the value of each element in the array\n\n\n      for (i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    var generateVideoSegmentTimingInfo = function generateVideoSegmentTimingInfo(baseMediaDecodeTime, startDts, startPts, endDts, endPts, prependedContentDuration) {\n      var ptsOffsetFromDts = startPts - startDts,\n          decodeDuration = endDts - startDts,\n          presentationDuration = endPts - startPts; // The PTS and DTS values are based on the actual stream times from the segment,\n      // however, the player time values will reflect a start from the baseMediaDecodeTime.\n      // In order to provide relevant values for the player times, base timing info on the\n      // baseMediaDecodeTime and the DTS and PTS durations of the segment.\n\n      return {\n        start: {\n          dts: baseMediaDecodeTime,\n          pts: baseMediaDecodeTime + ptsOffsetFromDts\n        },\n        end: {\n          dts: baseMediaDecodeTime + decodeDuration,\n          pts: baseMediaDecodeTime + presentationDuration\n        },\n        prependedContentDuration: prependedContentDuration,\n        baseMediaDecodeTime: baseMediaDecodeTime\n      };\n    };\n    /**\n     * Constructs a single-track, ISO BMFF media segment from AAC data\n     * events. The output of this stream can be fed to a SourceBuffer\n     * configured with a suitable initialization segment.\n     * @param track {object} track metadata configuration\n     * @param options {object} transmuxer options object\n     * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n     *        in the source; false to adjust the first segment to start at 0.\n     */\n\n\n    _AudioSegmentStream = function AudioSegmentStream(track, options) {\n      var adtsFrames = [],\n          sequenceNumber = 0,\n          earliestAllowedDts = 0,\n          audioAppendStartTs = 0,\n          videoBaseMediaDecodeTime = Infinity;\n      options = options || {};\n\n      _AudioSegmentStream.prototype.init.call(this);\n\n      this.push = function (data) {\n        trackDecodeInfo.collectDtsInfo(track, data);\n\n        if (track) {\n          AUDIO_PROPERTIES.forEach(function (prop) {\n            track[prop] = data[prop];\n          });\n        } // buffer audio data until end() is called\n\n\n        adtsFrames.push(data);\n      };\n\n      this.setEarliestDts = function (earliestDts) {\n        earliestAllowedDts = earliestDts - track.timelineStartInfo.baseMediaDecodeTime;\n      };\n\n      this.setVideoBaseMediaDecodeTime = function (baseMediaDecodeTime) {\n        videoBaseMediaDecodeTime = baseMediaDecodeTime;\n      };\n\n      this.setAudioAppendStart = function (timestamp) {\n        audioAppendStartTs = timestamp;\n      };\n\n      this.flush = function () {\n        var frames, moof, mdat, boxes; // return early if no audio data has been observed\n\n        if (adtsFrames.length === 0) {\n          this.trigger('done', 'AudioSegmentStream');\n          return;\n        }\n\n        frames = audioFrameUtils.trimAdtsFramesByEarliestDts(adtsFrames, track, earliestAllowedDts);\n        track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps);\n        audioFrameUtils.prefixWithSilence(track, frames, audioAppendStartTs, videoBaseMediaDecodeTime); // we have to build the index from byte locations to\n        // samples (that is, adts frames) in the audio data\n\n        track.samples = audioFrameUtils.generateSampleTable(frames); // concatenate the audio data to constuct the mdat\n\n        mdat = mp4Generator.mdat(audioFrameUtils.concatenateFrameData(frames));\n        adtsFrames = [];\n        moof = mp4Generator.moof(sequenceNumber, [track]);\n        boxes = new Uint8Array(moof.byteLength + mdat.byteLength); // bump the sequence number for next time\n\n        sequenceNumber++;\n        boxes.set(moof);\n        boxes.set(mdat, moof.byteLength);\n        trackDecodeInfo.clearDtsInfo(track);\n        this.trigger('data', {\n          track: track,\n          boxes: boxes\n        });\n        this.trigger('done', 'AudioSegmentStream');\n      };\n    };\n\n    _AudioSegmentStream.prototype = new stream();\n    /**\n     * Constructs a single-track, ISO BMFF media segment from H264 data\n     * events. The output of this stream can be fed to a SourceBuffer\n     * configured with a suitable initialization segment.\n     * @param track {object} track metadata configuration\n     * @param options {object} transmuxer options object\n     * @param options.alignGopsAtEnd {boolean} If true, start from the end of the\n     *        gopsToAlignWith list when attempting to align gop pts\n     * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n     *        in the source; false to adjust the first segment to start at 0.\n     */\n\n    _VideoSegmentStream = function VideoSegmentStream(track, options) {\n      var sequenceNumber = 0,\n          nalUnits = [],\n          gopsToAlignWith = [],\n          config,\n          pps;\n      options = options || {};\n\n      _VideoSegmentStream.prototype.init.call(this);\n\n      delete track.minPTS;\n      this.gopCache_ = [];\n      /**\n        * Constructs a ISO BMFF segment given H264 nalUnits\n        * @param {Object} nalUnit A data event representing a nalUnit\n        * @param {String} nalUnit.nalUnitType\n        * @param {Object} nalUnit.config Properties for a mp4 track\n        * @param {Uint8Array} nalUnit.data The nalUnit bytes\n        * @see lib/codecs/h264.js\n       **/\n\n      this.push = function (nalUnit) {\n        trackDecodeInfo.collectDtsInfo(track, nalUnit); // record the track config\n\n        if (nalUnit.nalUnitType === 'seq_parameter_set_rbsp' && !config) {\n          config = nalUnit.config;\n          track.sps = [nalUnit.data];\n          VIDEO_PROPERTIES.forEach(function (prop) {\n            track[prop] = config[prop];\n          }, this);\n        }\n\n        if (nalUnit.nalUnitType === 'pic_parameter_set_rbsp' && !pps) {\n          pps = nalUnit.data;\n          track.pps = [nalUnit.data];\n        } // buffer video until flush() is called\n\n\n        nalUnits.push(nalUnit);\n      };\n      /**\n        * Pass constructed ISO BMFF track and boxes on to the\n        * next stream in the pipeline\n       **/\n\n\n      this.flush = function () {\n        var frames,\n            gopForFusion,\n            gops,\n            moof,\n            mdat,\n            boxes,\n            prependedContentDuration = 0,\n            firstGop,\n            lastGop; // Throw away nalUnits at the start of the byte stream until\n        // we find the first AUD\n\n        while (nalUnits.length) {\n          if (nalUnits[0].nalUnitType === 'access_unit_delimiter_rbsp') {\n            break;\n          }\n\n          nalUnits.shift();\n        } // Return early if no video data has been observed\n\n\n        if (nalUnits.length === 0) {\n          this.resetStream_();\n          this.trigger('done', 'VideoSegmentStream');\n          return;\n        } // Organize the raw nal-units into arrays that represent\n        // higher-level constructs such as frames and gops\n        // (group-of-pictures)\n\n\n        frames = frameUtils.groupNalsIntoFrames(nalUnits);\n        gops = frameUtils.groupFramesIntoGops(frames); // If the first frame of this fragment is not a keyframe we have\n        // a problem since MSE (on Chrome) requires a leading keyframe.\n        //\n        // We have two approaches to repairing this situation:\n        // 1) GOP-FUSION:\n        //    This is where we keep track of the GOPS (group-of-pictures)\n        //    from previous fragments and attempt to find one that we can\n        //    prepend to the current fragment in order to create a valid\n        //    fragment.\n        // 2) KEYFRAME-PULLING:\n        //    Here we search for the first keyframe in the fragment and\n        //    throw away all the frames between the start of the fragment\n        //    and that keyframe. We then extend the duration and pull the\n        //    PTS of the keyframe forward so that it covers the time range\n        //    of the frames that were disposed of.\n        //\n        // #1 is far prefereable over #2 which can cause \"stuttering\" but\n        // requires more things to be just right.\n\n        if (!gops[0][0].keyFrame) {\n          // Search for a gop for fusion from our gopCache\n          gopForFusion = this.getGopForFusion_(nalUnits[0], track);\n\n          if (gopForFusion) {\n            // in order to provide more accurate timing information about the segment, save\n            // the number of seconds prepended to the original segment due to GOP fusion\n            prependedContentDuration = gopForFusion.duration;\n            gops.unshift(gopForFusion); // Adjust Gops' metadata to account for the inclusion of the\n            // new gop at the beginning\n\n            gops.byteLength += gopForFusion.byteLength;\n            gops.nalCount += gopForFusion.nalCount;\n            gops.pts = gopForFusion.pts;\n            gops.dts = gopForFusion.dts;\n            gops.duration += gopForFusion.duration;\n          } else {\n            // If we didn't find a candidate gop fall back to keyframe-pulling\n            gops = frameUtils.extendFirstKeyFrame(gops);\n          }\n        } // Trim gops to align with gopsToAlignWith\n\n\n        if (gopsToAlignWith.length) {\n          var alignedGops;\n\n          if (options.alignGopsAtEnd) {\n            alignedGops = this.alignGopsAtEnd_(gops);\n          } else {\n            alignedGops = this.alignGopsAtStart_(gops);\n          }\n\n          if (!alignedGops) {\n            // save all the nals in the last GOP into the gop cache\n            this.gopCache_.unshift({\n              gop: gops.pop(),\n              pps: track.pps,\n              sps: track.sps\n            }); // Keep a maximum of 6 GOPs in the cache\n\n            this.gopCache_.length = Math.min(6, this.gopCache_.length); // Clear nalUnits\n\n            nalUnits = []; // return early no gops can be aligned with desired gopsToAlignWith\n\n            this.resetStream_();\n            this.trigger('done', 'VideoSegmentStream');\n            return;\n          } // Some gops were trimmed. clear dts info so minSegmentDts and pts are correct\n          // when recalculated before sending off to CoalesceStream\n\n\n          trackDecodeInfo.clearDtsInfo(track);\n          gops = alignedGops;\n        }\n\n        trackDecodeInfo.collectDtsInfo(track, gops); // First, we have to build the index from byte locations to\n        // samples (that is, frames) in the video data\n\n        track.samples = frameUtils.generateSampleTable(gops); // Concatenate the video data and construct the mdat\n\n        mdat = mp4Generator.mdat(frameUtils.concatenateNalData(gops));\n        track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps);\n        this.trigger('processedGopsInfo', gops.map(function (gop) {\n          return {\n            pts: gop.pts,\n            dts: gop.dts,\n            byteLength: gop.byteLength\n          };\n        }));\n        firstGop = gops[0];\n        lastGop = gops[gops.length - 1];\n        this.trigger('segmentTimingInfo', generateVideoSegmentTimingInfo(track.baseMediaDecodeTime, firstGop.dts, firstGop.pts, lastGop.dts + lastGop.duration, lastGop.pts + lastGop.duration, prependedContentDuration)); // save all the nals in the last GOP into the gop cache\n\n        this.gopCache_.unshift({\n          gop: gops.pop(),\n          pps: track.pps,\n          sps: track.sps\n        }); // Keep a maximum of 6 GOPs in the cache\n\n        this.gopCache_.length = Math.min(6, this.gopCache_.length); // Clear nalUnits\n\n        nalUnits = [];\n        this.trigger('baseMediaDecodeTime', track.baseMediaDecodeTime);\n        this.trigger('timelineStartInfo', track.timelineStartInfo);\n        moof = mp4Generator.moof(sequenceNumber, [track]); // it would be great to allocate this array up front instead of\n        // throwing away hundreds of media segment fragments\n\n        boxes = new Uint8Array(moof.byteLength + mdat.byteLength); // Bump the sequence number for next time\n\n        sequenceNumber++;\n        boxes.set(moof);\n        boxes.set(mdat, moof.byteLength);\n        this.trigger('data', {\n          track: track,\n          boxes: boxes\n        });\n        this.resetStream_(); // Continue with the flush process now\n\n        this.trigger('done', 'VideoSegmentStream');\n      };\n\n      this.resetStream_ = function () {\n        trackDecodeInfo.clearDtsInfo(track); // reset config and pps because they may differ across segments\n        // for instance, when we are rendition switching\n\n        config = undefined;\n        pps = undefined;\n      }; // Search for a candidate Gop for gop-fusion from the gop cache and\n      // return it or return null if no good candidate was found\n\n\n      this.getGopForFusion_ = function (nalUnit) {\n        var halfSecond = 45000,\n            // Half-a-second in a 90khz clock\n        allowableOverlap = 10000,\n            // About 3 frames @ 30fps\n        nearestDistance = Infinity,\n            dtsDistance,\n            nearestGopObj,\n            currentGop,\n            currentGopObj,\n            i; // Search for the GOP nearest to the beginning of this nal unit\n\n        for (i = 0; i < this.gopCache_.length; i++) {\n          currentGopObj = this.gopCache_[i];\n          currentGop = currentGopObj.gop; // Reject Gops with different SPS or PPS\n\n          if (!(track.pps && arrayEquals(track.pps[0], currentGopObj.pps[0])) || !(track.sps && arrayEquals(track.sps[0], currentGopObj.sps[0]))) {\n            continue;\n          } // Reject Gops that would require a negative baseMediaDecodeTime\n\n\n          if (currentGop.dts < track.timelineStartInfo.dts) {\n            continue;\n          } // The distance between the end of the gop and the start of the nalUnit\n\n\n          dtsDistance = nalUnit.dts - currentGop.dts - currentGop.duration; // Only consider GOPS that start before the nal unit and end within\n          // a half-second of the nal unit\n\n          if (dtsDistance >= -allowableOverlap && dtsDistance <= halfSecond) {\n            // Always use the closest GOP we found if there is more than\n            // one candidate\n            if (!nearestGopObj || nearestDistance > dtsDistance) {\n              nearestGopObj = currentGopObj;\n              nearestDistance = dtsDistance;\n            }\n          }\n        }\n\n        if (nearestGopObj) {\n          return nearestGopObj.gop;\n        }\n\n        return null;\n      }; // trim gop list to the first gop found that has a matching pts with a gop in the list\n      // of gopsToAlignWith starting from the START of the list\n\n\n      this.alignGopsAtStart_ = function (gops) {\n        var alignIndex, gopIndex, align, gop, byteLength, nalCount, duration, alignedGops;\n        byteLength = gops.byteLength;\n        nalCount = gops.nalCount;\n        duration = gops.duration;\n        alignIndex = gopIndex = 0;\n\n        while (alignIndex < gopsToAlignWith.length && gopIndex < gops.length) {\n          align = gopsToAlignWith[alignIndex];\n          gop = gops[gopIndex];\n\n          if (align.pts === gop.pts) {\n            break;\n          }\n\n          if (gop.pts > align.pts) {\n            // this current gop starts after the current gop we want to align on, so increment\n            // align index\n            alignIndex++;\n            continue;\n          } // current gop starts before the current gop we want to align on. so increment gop\n          // index\n\n\n          gopIndex++;\n          byteLength -= gop.byteLength;\n          nalCount -= gop.nalCount;\n          duration -= gop.duration;\n        }\n\n        if (gopIndex === 0) {\n          // no gops to trim\n          return gops;\n        }\n\n        if (gopIndex === gops.length) {\n          // all gops trimmed, skip appending all gops\n          return null;\n        }\n\n        alignedGops = gops.slice(gopIndex);\n        alignedGops.byteLength = byteLength;\n        alignedGops.duration = duration;\n        alignedGops.nalCount = nalCount;\n        alignedGops.pts = alignedGops[0].pts;\n        alignedGops.dts = alignedGops[0].dts;\n        return alignedGops;\n      }; // trim gop list to the first gop found that has a matching pts with a gop in the list\n      // of gopsToAlignWith starting from the END of the list\n\n\n      this.alignGopsAtEnd_ = function (gops) {\n        var alignIndex, gopIndex, align, gop, alignEndIndex, matchFound;\n        alignIndex = gopsToAlignWith.length - 1;\n        gopIndex = gops.length - 1;\n        alignEndIndex = null;\n        matchFound = false;\n\n        while (alignIndex >= 0 && gopIndex >= 0) {\n          align = gopsToAlignWith[alignIndex];\n          gop = gops[gopIndex];\n\n          if (align.pts === gop.pts) {\n            matchFound = true;\n            break;\n          }\n\n          if (align.pts > gop.pts) {\n            alignIndex--;\n            continue;\n          }\n\n          if (alignIndex === gopsToAlignWith.length - 1) {\n            // gop.pts is greater than the last alignment candidate. If no match is found\n            // by the end of this loop, we still want to append gops that come after this\n            // point\n            alignEndIndex = gopIndex;\n          }\n\n          gopIndex--;\n        }\n\n        if (!matchFound && alignEndIndex === null) {\n          return null;\n        }\n\n        var trimIndex;\n\n        if (matchFound) {\n          trimIndex = gopIndex;\n        } else {\n          trimIndex = alignEndIndex;\n        }\n\n        if (trimIndex === 0) {\n          return gops;\n        }\n\n        var alignedGops = gops.slice(trimIndex);\n        var metadata = alignedGops.reduce(function (total, gop) {\n          total.byteLength += gop.byteLength;\n          total.duration += gop.duration;\n          total.nalCount += gop.nalCount;\n          return total;\n        }, {\n          byteLength: 0,\n          duration: 0,\n          nalCount: 0\n        });\n        alignedGops.byteLength = metadata.byteLength;\n        alignedGops.duration = metadata.duration;\n        alignedGops.nalCount = metadata.nalCount;\n        alignedGops.pts = alignedGops[0].pts;\n        alignedGops.dts = alignedGops[0].dts;\n        return alignedGops;\n      };\n\n      this.alignGopsWith = function (newGopsToAlignWith) {\n        gopsToAlignWith = newGopsToAlignWith;\n      };\n    };\n\n    _VideoSegmentStream.prototype = new stream();\n    /**\n     * A Stream that can combine multiple streams (ie. audio & video)\n     * into a single output segment for MSE. Also supports audio-only\n     * and video-only streams.\n     * @param options {object} transmuxer options object\n     * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n     *        in the source; false to adjust the first segment to start at media timeline start.\n     */\n\n    _CoalesceStream = function CoalesceStream(options, metadataStream) {\n      // Number of Tracks per output segment\n      // If greater than 1, we combine multiple\n      // tracks into a single segment\n      this.numberOfTracks = 0;\n      this.metadataStream = metadataStream;\n      options = options || {};\n\n      if (typeof options.remux !== 'undefined') {\n        this.remuxTracks = !!options.remux;\n      } else {\n        this.remuxTracks = true;\n      }\n\n      if (typeof options.keepOriginalTimestamps === 'boolean') {\n        this.keepOriginalTimestamps = options.keepOriginalTimestamps;\n      }\n\n      this.pendingTracks = [];\n      this.videoTrack = null;\n      this.pendingBoxes = [];\n      this.pendingCaptions = [];\n      this.pendingMetadata = [];\n      this.pendingBytes = 0;\n      this.emittedTracks = 0;\n\n      _CoalesceStream.prototype.init.call(this); // Take output from multiple\n\n\n      this.push = function (output) {\n        // buffer incoming captions until the associated video segment\n        // finishes\n        if (output.text) {\n          return this.pendingCaptions.push(output);\n        } // buffer incoming id3 tags until the final flush\n\n\n        if (output.frames) {\n          return this.pendingMetadata.push(output);\n        } // Add this track to the list of pending tracks and store\n        // important information required for the construction of\n        // the final segment\n\n\n        this.pendingTracks.push(output.track);\n        this.pendingBoxes.push(output.boxes);\n        this.pendingBytes += output.boxes.byteLength;\n\n        if (output.track.type === 'video') {\n          this.videoTrack = output.track;\n        }\n\n        if (output.track.type === 'audio') {\n          this.audioTrack = output.track;\n        }\n      };\n    };\n\n    _CoalesceStream.prototype = new stream();\n\n    _CoalesceStream.prototype.flush = function (flushSource) {\n      var offset = 0,\n          event = {\n        captions: [],\n        captionStreams: {},\n        metadata: [],\n        info: {}\n      },\n          caption,\n          id3,\n          initSegment,\n          timelineStartPts = 0,\n          i;\n\n      if (this.pendingTracks.length < this.numberOfTracks) {\n        if (flushSource !== 'VideoSegmentStream' && flushSource !== 'AudioSegmentStream') {\n          // Return because we haven't received a flush from a data-generating\n          // portion of the segment (meaning that we have only recieved meta-data\n          // or captions.)\n          return;\n        } else if (this.remuxTracks) {\n          // Return until we have enough tracks from the pipeline to remux (if we\n          // are remuxing audio and video into a single MP4)\n          return;\n        } else if (this.pendingTracks.length === 0) {\n          // In the case where we receive a flush without any data having been\n          // received we consider it an emitted track for the purposes of coalescing\n          // `done` events.\n          // We do this for the case where there is an audio and video track in the\n          // segment but no audio data. (seen in several playlists with alternate\n          // audio tracks and no audio present in the main TS segments.)\n          this.emittedTracks++;\n\n          if (this.emittedTracks >= this.numberOfTracks) {\n            this.trigger('done');\n            this.emittedTracks = 0;\n          }\n\n          return;\n        }\n      }\n\n      if (this.videoTrack) {\n        timelineStartPts = this.videoTrack.timelineStartInfo.pts;\n        VIDEO_PROPERTIES.forEach(function (prop) {\n          event.info[prop] = this.videoTrack[prop];\n        }, this);\n      } else if (this.audioTrack) {\n        timelineStartPts = this.audioTrack.timelineStartInfo.pts;\n        AUDIO_PROPERTIES.forEach(function (prop) {\n          event.info[prop] = this.audioTrack[prop];\n        }, this);\n      }\n\n      if (this.pendingTracks.length === 1) {\n        event.type = this.pendingTracks[0].type;\n      } else {\n        event.type = 'combined';\n      }\n\n      this.emittedTracks += this.pendingTracks.length;\n      initSegment = mp4Generator.initSegment(this.pendingTracks); // Create a new typed array to hold the init segment\n\n      event.initSegment = new Uint8Array(initSegment.byteLength); // Create an init segment containing a moov\n      // and track definitions\n\n      event.initSegment.set(initSegment); // Create a new typed array to hold the moof+mdats\n\n      event.data = new Uint8Array(this.pendingBytes); // Append each moof+mdat (one per track) together\n\n      for (i = 0; i < this.pendingBoxes.length; i++) {\n        event.data.set(this.pendingBoxes[i], offset);\n        offset += this.pendingBoxes[i].byteLength;\n      } // Translate caption PTS times into second offsets to match the\n      // video timeline for the segment, and add track info\n\n\n      for (i = 0; i < this.pendingCaptions.length; i++) {\n        caption = this.pendingCaptions[i];\n        caption.startTime = caption.startPts;\n\n        if (!this.keepOriginalTimestamps) {\n          caption.startTime -= timelineStartPts;\n        }\n\n        caption.startTime /= 90e3;\n        caption.endTime = caption.endPts;\n\n        if (!this.keepOriginalTimestamps) {\n          caption.endTime -= timelineStartPts;\n        }\n\n        caption.endTime /= 90e3;\n        event.captionStreams[caption.stream] = true;\n        event.captions.push(caption);\n      } // Translate ID3 frame PTS times into second offsets to match the\n      // video timeline for the segment\n\n\n      for (i = 0; i < this.pendingMetadata.length; i++) {\n        id3 = this.pendingMetadata[i];\n        id3.cueTime = id3.pts;\n\n        if (!this.keepOriginalTimestamps) {\n          id3.cueTime -= timelineStartPts;\n        }\n\n        id3.cueTime /= 90e3;\n        event.metadata.push(id3);\n      } // We add this to every single emitted segment even though we only need\n      // it for the first\n\n\n      event.metadata.dispatchType = this.metadataStream.dispatchType; // Reset stream state\n\n      this.pendingTracks.length = 0;\n      this.videoTrack = null;\n      this.pendingBoxes.length = 0;\n      this.pendingCaptions.length = 0;\n      this.pendingBytes = 0;\n      this.pendingMetadata.length = 0; // Emit the built segment\n\n      this.trigger('data', event); // Only emit `done` if all tracks have been flushed and emitted\n\n      if (this.emittedTracks >= this.numberOfTracks) {\n        this.trigger('done');\n        this.emittedTracks = 0;\n      }\n    };\n    /**\n     * A Stream that expects MP2T binary data as input and produces\n     * corresponding media segments, suitable for use with Media Source\n     * Extension (MSE) implementations that support the ISO BMFF byte\n     * stream format, like Chrome.\n     */\n\n\n    _Transmuxer = function Transmuxer(options) {\n      var self = this,\n          hasFlushed = true,\n          videoTrack,\n          audioTrack;\n\n      _Transmuxer.prototype.init.call(this);\n\n      options = options || {};\n      this.baseMediaDecodeTime = options.baseMediaDecodeTime || 0;\n      this.transmuxPipeline_ = {};\n\n      this.setupAacPipeline = function () {\n        var pipeline = {};\n        this.transmuxPipeline_ = pipeline;\n        pipeline.type = 'aac';\n        pipeline.metadataStream = new m2ts_1.MetadataStream(); // set up the parsing pipeline\n\n        pipeline.aacStream = new aac();\n        pipeline.audioTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('audio');\n        pipeline.timedMetadataTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('timed-metadata');\n        pipeline.adtsStream = new adts();\n        pipeline.coalesceStream = new _CoalesceStream(options, pipeline.metadataStream);\n        pipeline.headOfPipeline = pipeline.aacStream;\n        pipeline.aacStream.pipe(pipeline.audioTimestampRolloverStream).pipe(pipeline.adtsStream);\n        pipeline.aacStream.pipe(pipeline.timedMetadataTimestampRolloverStream).pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream);\n        pipeline.metadataStream.on('timestamp', function (frame) {\n          pipeline.aacStream.setTimestamp(frame.timeStamp);\n        });\n        pipeline.aacStream.on('data', function (data) {\n          if (data.type === 'timed-metadata' && !pipeline.audioSegmentStream) {\n            audioTrack = audioTrack || {\n              timelineStartInfo: {\n                baseMediaDecodeTime: self.baseMediaDecodeTime\n              },\n              codec: 'adts',\n              type: 'audio'\n            }; // hook up the audio segment stream to the first track with aac data\n\n            pipeline.coalesceStream.numberOfTracks++;\n            pipeline.audioSegmentStream = new _AudioSegmentStream(audioTrack, options); // Set up the final part of the audio pipeline\n\n            pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream);\n          }\n        }); // Re-emit any data coming from the coalesce stream to the outside world\n\n        pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data')); // Let the consumer know we have finished flushing the entire pipeline\n\n        pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n      };\n\n      this.setupTsPipeline = function () {\n        var pipeline = {};\n        this.transmuxPipeline_ = pipeline;\n        pipeline.type = 'ts';\n        pipeline.metadataStream = new m2ts_1.MetadataStream(); // set up the parsing pipeline\n\n        pipeline.packetStream = new m2ts_1.TransportPacketStream();\n        pipeline.parseStream = new m2ts_1.TransportParseStream();\n        pipeline.elementaryStream = new m2ts_1.ElementaryStream();\n        pipeline.videoTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('video');\n        pipeline.audioTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('audio');\n        pipeline.timedMetadataTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('timed-metadata');\n        pipeline.adtsStream = new adts();\n        pipeline.h264Stream = new H264Stream();\n        pipeline.captionStream = new m2ts_1.CaptionStream();\n        pipeline.coalesceStream = new _CoalesceStream(options, pipeline.metadataStream);\n        pipeline.headOfPipeline = pipeline.packetStream; // disassemble MPEG2-TS packets into elementary streams\n\n        pipeline.packetStream.pipe(pipeline.parseStream).pipe(pipeline.elementaryStream); // !!THIS ORDER IS IMPORTANT!!\n        // demux the streams\n\n        pipeline.elementaryStream.pipe(pipeline.videoTimestampRolloverStream).pipe(pipeline.h264Stream);\n        pipeline.elementaryStream.pipe(pipeline.audioTimestampRolloverStream).pipe(pipeline.adtsStream);\n        pipeline.elementaryStream.pipe(pipeline.timedMetadataTimestampRolloverStream).pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream); // Hook up CEA-608/708 caption stream\n\n        pipeline.h264Stream.pipe(pipeline.captionStream).pipe(pipeline.coalesceStream);\n        pipeline.elementaryStream.on('data', function (data) {\n          var i;\n\n          if (data.type === 'metadata') {\n            i = data.tracks.length; // scan the tracks listed in the metadata\n\n            while (i--) {\n              if (!videoTrack && data.tracks[i].type === 'video') {\n                videoTrack = data.tracks[i];\n                videoTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n              } else if (!audioTrack && data.tracks[i].type === 'audio') {\n                audioTrack = data.tracks[i];\n                audioTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n              }\n            } // hook up the video segment stream to the first track with h264 data\n\n\n            if (videoTrack && !pipeline.videoSegmentStream) {\n              pipeline.coalesceStream.numberOfTracks++;\n              pipeline.videoSegmentStream = new _VideoSegmentStream(videoTrack, options);\n              pipeline.videoSegmentStream.on('timelineStartInfo', function (timelineStartInfo) {\n                // When video emits timelineStartInfo data after a flush, we forward that\n                // info to the AudioSegmentStream, if it exists, because video timeline\n                // data takes precedence.\n                if (audioTrack) {\n                  audioTrack.timelineStartInfo = timelineStartInfo; // On the first segment we trim AAC frames that exist before the\n                  // very earliest DTS we have seen in video because Chrome will\n                  // interpret any video track with a baseMediaDecodeTime that is\n                  // non-zero as a gap.\n\n                  pipeline.audioSegmentStream.setEarliestDts(timelineStartInfo.dts);\n                }\n              });\n              pipeline.videoSegmentStream.on('processedGopsInfo', self.trigger.bind(self, 'gopInfo'));\n              pipeline.videoSegmentStream.on('segmentTimingInfo', self.trigger.bind(self, 'videoSegmentTimingInfo'));\n              pipeline.videoSegmentStream.on('baseMediaDecodeTime', function (baseMediaDecodeTime) {\n                if (audioTrack) {\n                  pipeline.audioSegmentStream.setVideoBaseMediaDecodeTime(baseMediaDecodeTime);\n                }\n              }); // Set up the final part of the video pipeline\n\n              pipeline.h264Stream.pipe(pipeline.videoSegmentStream).pipe(pipeline.coalesceStream);\n            }\n\n            if (audioTrack && !pipeline.audioSegmentStream) {\n              // hook up the audio segment stream to the first track with aac data\n              pipeline.coalesceStream.numberOfTracks++;\n              pipeline.audioSegmentStream = new _AudioSegmentStream(audioTrack, options); // Set up the final part of the audio pipeline\n\n              pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream);\n            }\n          }\n        }); // Re-emit any data coming from the coalesce stream to the outside world\n\n        pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data')); // Let the consumer know we have finished flushing the entire pipeline\n\n        pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n      }; // hook up the segment streams once track metadata is delivered\n\n\n      this.setBaseMediaDecodeTime = function (baseMediaDecodeTime) {\n        var pipeline = this.transmuxPipeline_;\n\n        if (!options.keepOriginalTimestamps) {\n          this.baseMediaDecodeTime = baseMediaDecodeTime;\n        }\n\n        if (audioTrack) {\n          audioTrack.timelineStartInfo.dts = undefined;\n          audioTrack.timelineStartInfo.pts = undefined;\n          trackDecodeInfo.clearDtsInfo(audioTrack);\n\n          if (!options.keepOriginalTimestamps) {\n            audioTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;\n          }\n\n          if (pipeline.audioTimestampRolloverStream) {\n            pipeline.audioTimestampRolloverStream.discontinuity();\n          }\n        }\n\n        if (videoTrack) {\n          if (pipeline.videoSegmentStream) {\n            pipeline.videoSegmentStream.gopCache_ = [];\n            pipeline.videoTimestampRolloverStream.discontinuity();\n          }\n\n          videoTrack.timelineStartInfo.dts = undefined;\n          videoTrack.timelineStartInfo.pts = undefined;\n          trackDecodeInfo.clearDtsInfo(videoTrack);\n          pipeline.captionStream.reset();\n\n          if (!options.keepOriginalTimestamps) {\n            videoTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;\n          }\n        }\n\n        if (pipeline.timedMetadataTimestampRolloverStream) {\n          pipeline.timedMetadataTimestampRolloverStream.discontinuity();\n        }\n      };\n\n      this.setAudioAppendStart = function (timestamp) {\n        if (audioTrack) {\n          this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(timestamp);\n        }\n      };\n\n      this.alignGopsWith = function (gopsToAlignWith) {\n        if (videoTrack && this.transmuxPipeline_.videoSegmentStream) {\n          this.transmuxPipeline_.videoSegmentStream.alignGopsWith(gopsToAlignWith);\n        }\n      }; // feed incoming data to the front of the parsing pipeline\n\n\n      this.push = function (data) {\n        if (hasFlushed) {\n          var isAac = isLikelyAacData$1(data);\n\n          if (isAac && this.transmuxPipeline_.type !== 'aac') {\n            this.setupAacPipeline();\n          } else if (!isAac && this.transmuxPipeline_.type !== 'ts') {\n            this.setupTsPipeline();\n          }\n\n          hasFlushed = false;\n        }\n\n        this.transmuxPipeline_.headOfPipeline.push(data);\n      }; // flush any buffered data\n\n\n      this.flush = function () {\n        hasFlushed = true; // Start at the top of the pipeline and flush all pending work\n\n        this.transmuxPipeline_.headOfPipeline.flush();\n      }; // Caption data has to be reset when seeking outside buffered range\n\n\n      this.resetCaptions = function () {\n        if (this.transmuxPipeline_.captionStream) {\n          this.transmuxPipeline_.captionStream.reset();\n        }\n      };\n    };\n\n    _Transmuxer.prototype = new stream();\n    var transmuxer = {\n      Transmuxer: _Transmuxer,\n      VideoSegmentStream: _VideoSegmentStream,\n      AudioSegmentStream: _AudioSegmentStream,\n      AUDIO_PROPERTIES: AUDIO_PROPERTIES,\n      VIDEO_PROPERTIES: VIDEO_PROPERTIES,\n      // exported for testing\n      generateVideoSegmentTimingInfo: generateVideoSegmentTimingInfo\n    };\n\n    var inspectMp4,\n        _textifyMp,\n        parseType$2 = probe.parseType,\n        parseMp4Date = function parseMp4Date(seconds) {\n      return new Date(seconds * 1000 - 2082844800000);\n    },\n        parseSampleFlags = function parseSampleFlags(flags) {\n      return {\n        isLeading: (flags[0] & 0x0c) >>> 2,\n        dependsOn: flags[0] & 0x03,\n        isDependedOn: (flags[1] & 0xc0) >>> 6,\n        hasRedundancy: (flags[1] & 0x30) >>> 4,\n        paddingValue: (flags[1] & 0x0e) >>> 1,\n        isNonSyncSample: flags[1] & 0x01,\n        degradationPriority: flags[2] << 8 | flags[3]\n      };\n    },\n        nalParse = function nalParse(avcStream) {\n      var avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),\n          result = [],\n          i,\n          length;\n\n      for (i = 0; i + 4 < avcStream.length; i += length) {\n        length = avcView.getUint32(i);\n        i += 4; // bail if this doesn't appear to be an H264 stream\n\n        if (length <= 0) {\n          result.push('<span style=\\'color:red;\\'>MALFORMED DATA</span>');\n          continue;\n        }\n\n        switch (avcStream[i] & 0x1F) {\n          case 0x01:\n            result.push('slice_layer_without_partitioning_rbsp');\n            break;\n\n          case 0x05:\n            result.push('slice_layer_without_partitioning_rbsp_idr');\n            break;\n\n          case 0x06:\n            result.push('sei_rbsp');\n            break;\n\n          case 0x07:\n            result.push('seq_parameter_set_rbsp');\n            break;\n\n          case 0x08:\n            result.push('pic_parameter_set_rbsp');\n            break;\n\n          case 0x09:\n            result.push('access_unit_delimiter_rbsp');\n            break;\n\n          default:\n            result.push('UNKNOWN NAL - ' + avcStream[i] & 0x1F);\n            break;\n        }\n      }\n\n      return result;\n    },\n        // registry of handlers for individual mp4 box types\n    parse$$1 = {\n      // codingname, not a first-class box type. stsd entries share the\n      // same format as real boxes so the parsing infrastructure can be\n      // shared\n      avc1: function avc1(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        return {\n          dataReferenceIndex: view.getUint16(6),\n          width: view.getUint16(24),\n          height: view.getUint16(26),\n          horizresolution: view.getUint16(28) + view.getUint16(30) / 16,\n          vertresolution: view.getUint16(32) + view.getUint16(34) / 16,\n          frameCount: view.getUint16(40),\n          depth: view.getUint16(74),\n          config: inspectMp4(data.subarray(78, data.byteLength))\n        };\n      },\n      avcC: function avcC(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          configurationVersion: data[0],\n          avcProfileIndication: data[1],\n          profileCompatibility: data[2],\n          avcLevelIndication: data[3],\n          lengthSizeMinusOne: data[4] & 0x03,\n          sps: [],\n          pps: []\n        },\n            numOfSequenceParameterSets = data[5] & 0x1f,\n            numOfPictureParameterSets,\n            nalSize,\n            offset,\n            i; // iterate past any SPSs\n\n        offset = 6;\n\n        for (i = 0; i < numOfSequenceParameterSets; i++) {\n          nalSize = view.getUint16(offset);\n          offset += 2;\n          result.sps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));\n          offset += nalSize;\n        } // iterate past any PPSs\n\n\n        numOfPictureParameterSets = data[offset];\n        offset++;\n\n        for (i = 0; i < numOfPictureParameterSets; i++) {\n          nalSize = view.getUint16(offset);\n          offset += 2;\n          result.pps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));\n          offset += nalSize;\n        }\n\n        return result;\n      },\n      btrt: function btrt(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        return {\n          bufferSizeDB: view.getUint32(0),\n          maxBitrate: view.getUint32(4),\n          avgBitrate: view.getUint32(8)\n        };\n      },\n      esds: function esds(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          esId: data[6] << 8 | data[7],\n          streamPriority: data[8] & 0x1f,\n          decoderConfig: {\n            objectProfileIndication: data[11],\n            streamType: data[12] >>> 2 & 0x3f,\n            bufferSize: data[13] << 16 | data[14] << 8 | data[15],\n            maxBitrate: data[16] << 24 | data[17] << 16 | data[18] << 8 | data[19],\n            avgBitrate: data[20] << 24 | data[21] << 16 | data[22] << 8 | data[23],\n            decoderConfigDescriptor: {\n              tag: data[24],\n              length: data[25],\n              audioObjectType: data[26] >>> 3 & 0x1f,\n              samplingFrequencyIndex: (data[26] & 0x07) << 1 | data[27] >>> 7 & 0x01,\n              channelConfiguration: data[27] >>> 3 & 0x0f\n            }\n          }\n        };\n      },\n      ftyp: function ftyp(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          majorBrand: parseType$2(data.subarray(0, 4)),\n          minorVersion: view.getUint32(4),\n          compatibleBrands: []\n        },\n            i = 8;\n\n        while (i < data.byteLength) {\n          result.compatibleBrands.push(parseType$2(data.subarray(i, i + 4)));\n          i += 4;\n        }\n\n        return result;\n      },\n      dinf: function dinf(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      dref: function dref(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          dataReferences: inspectMp4(data.subarray(8))\n        };\n      },\n      hdlr: function hdlr(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4)),\n          handlerType: parseType$2(data.subarray(8, 12)),\n          name: ''\n        },\n            i = 8; // parse out the name field\n\n        for (i = 24; i < data.byteLength; i++) {\n          if (data[i] === 0x00) {\n            // the name field is null-terminated\n            i++;\n            break;\n          }\n\n          result.name += String.fromCharCode(data[i]);\n        } // decode UTF-8 to javascript's internal representation\n        // see http://ecmanaut.blogspot.com/2006/07/encoding-decoding-utf8-in-javascript.html\n\n\n        result.name = decodeURIComponent(escape(result.name));\n        return result;\n      },\n      mdat: function mdat(data) {\n        return {\n          byteLength: data.byteLength,\n          nals: nalParse(data)\n        };\n      },\n      mdhd: function mdhd(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            i = 4,\n            language,\n            result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4)),\n          language: ''\n        };\n\n        if (result.version === 1) {\n          i += 4;\n          result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n\n          i += 8;\n          result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n\n          i += 4;\n          result.timescale = view.getUint32(i);\n          i += 8;\n          result.duration = view.getUint32(i); // truncating top 4 bytes\n        } else {\n          result.creationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.modificationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.timescale = view.getUint32(i);\n          i += 4;\n          result.duration = view.getUint32(i);\n        }\n\n        i += 4; // language is stored as an ISO-639-2/T code in an array of three 5-bit fields\n        // each field is the packed difference between its ASCII value and 0x60\n\n        language = view.getUint16(i);\n        result.language += String.fromCharCode((language >> 10) + 0x60);\n        result.language += String.fromCharCode(((language & 0x03e0) >> 5) + 0x60);\n        result.language += String.fromCharCode((language & 0x1f) + 0x60);\n        return result;\n      },\n      mdia: function mdia(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      mfhd: function mfhd(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sequenceNumber: data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7]\n        };\n      },\n      minf: function minf(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      // codingname, not a first-class box type. stsd entries share the\n      // same format as real boxes so the parsing infrastructure can be\n      // shared\n      mp4a: function mp4a(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          // 6 bytes reserved\n          dataReferenceIndex: view.getUint16(6),\n          // 4 + 4 bytes reserved\n          channelcount: view.getUint16(16),\n          samplesize: view.getUint16(18),\n          // 2 bytes pre_defined\n          // 2 bytes reserved\n          samplerate: view.getUint16(24) + view.getUint16(26) / 65536\n        }; // if there are more bytes to process, assume this is an ISO/IEC\n        // 14496-14 MP4AudioSampleEntry and parse the ESDBox\n\n        if (data.byteLength > 28) {\n          result.streamDescriptor = inspectMp4(data.subarray(28))[0];\n        }\n\n        return result;\n      },\n      moof: function moof(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      moov: function moov(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      mvex: function mvex(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      mvhd: function mvhd(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            i = 4,\n            result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4))\n        };\n\n        if (result.version === 1) {\n          i += 4;\n          result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n\n          i += 8;\n          result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n\n          i += 4;\n          result.timescale = view.getUint32(i);\n          i += 8;\n          result.duration = view.getUint32(i); // truncating top 4 bytes\n        } else {\n          result.creationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.modificationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.timescale = view.getUint32(i);\n          i += 4;\n          result.duration = view.getUint32(i);\n        }\n\n        i += 4; // convert fixed-point, base 16 back to a number\n\n        result.rate = view.getUint16(i) + view.getUint16(i + 2) / 16;\n        i += 4;\n        result.volume = view.getUint8(i) + view.getUint8(i + 1) / 8;\n        i += 2;\n        i += 2;\n        i += 2 * 4;\n        result.matrix = new Uint32Array(data.subarray(i, i + 9 * 4));\n        i += 9 * 4;\n        i += 6 * 4;\n        result.nextTrackId = view.getUint32(i);\n        return result;\n      },\n      pdin: function pdin(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        return {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4)),\n          rate: view.getUint32(4),\n          initialDelay: view.getUint32(8)\n        };\n      },\n      sdtp: function sdtp(data) {\n        var result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          samples: []\n        },\n            i;\n\n        for (i = 4; i < data.byteLength; i++) {\n          result.samples.push({\n            dependsOn: (data[i] & 0x30) >> 4,\n            isDependedOn: (data[i] & 0x0c) >> 2,\n            hasRedundancy: data[i] & 0x03\n          });\n        }\n\n        return result;\n      },\n      sidx: function sidx(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          references: [],\n          referenceId: view.getUint32(4),\n          timescale: view.getUint32(8),\n          earliestPresentationTime: view.getUint32(12),\n          firstOffset: view.getUint32(16)\n        },\n            referenceCount = view.getUint16(22),\n            i;\n\n        for (i = 24; referenceCount; i += 12, referenceCount--) {\n          result.references.push({\n            referenceType: (data[i] & 0x80) >>> 7,\n            referencedSize: view.getUint32(i) & 0x7FFFFFFF,\n            subsegmentDuration: view.getUint32(i + 4),\n            startsWithSap: !!(data[i + 8] & 0x80),\n            sapType: (data[i + 8] & 0x70) >>> 4,\n            sapDeltaTime: view.getUint32(i + 8) & 0x0FFFFFFF\n          });\n        }\n\n        return result;\n      },\n      smhd: function smhd(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          balance: data[4] + data[5] / 256\n        };\n      },\n      stbl: function stbl(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      stco: function stco(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          chunkOffsets: []\n        },\n            entryCount = view.getUint32(4),\n            i;\n\n        for (i = 8; entryCount; i += 4, entryCount--) {\n          result.chunkOffsets.push(view.getUint32(i));\n        }\n\n        return result;\n      },\n      stsc: function stsc(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            entryCount = view.getUint32(4),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sampleToChunks: []\n        },\n            i;\n\n        for (i = 8; entryCount; i += 12, entryCount--) {\n          result.sampleToChunks.push({\n            firstChunk: view.getUint32(i),\n            samplesPerChunk: view.getUint32(i + 4),\n            sampleDescriptionIndex: view.getUint32(i + 8)\n          });\n        }\n\n        return result;\n      },\n      stsd: function stsd(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sampleDescriptions: inspectMp4(data.subarray(8))\n        };\n      },\n      stsz: function stsz(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sampleSize: view.getUint32(4),\n          entries: []\n        },\n            i;\n\n        for (i = 12; i < data.byteLength; i += 4) {\n          result.entries.push(view.getUint32(i));\n        }\n\n        return result;\n      },\n      stts: function stts(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          timeToSamples: []\n        },\n            entryCount = view.getUint32(4),\n            i;\n\n        for (i = 8; entryCount; i += 8, entryCount--) {\n          result.timeToSamples.push({\n            sampleCount: view.getUint32(i),\n            sampleDelta: view.getUint32(i + 4)\n          });\n        }\n\n        return result;\n      },\n      styp: function styp(data) {\n        return parse$$1.ftyp(data);\n      },\n      tfdt: function tfdt(data) {\n        var result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          baseMediaDecodeTime: data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7]\n        };\n\n        if (result.version === 1) {\n          result.baseMediaDecodeTime *= Math.pow(2, 32);\n          result.baseMediaDecodeTime += data[8] << 24 | data[9] << 16 | data[10] << 8 | data[11];\n        }\n\n        return result;\n      },\n      tfhd: function tfhd(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          trackId: view.getUint32(4)\n        },\n            baseDataOffsetPresent = result.flags[2] & 0x01,\n            sampleDescriptionIndexPresent = result.flags[2] & 0x02,\n            defaultSampleDurationPresent = result.flags[2] & 0x08,\n            defaultSampleSizePresent = result.flags[2] & 0x10,\n            defaultSampleFlagsPresent = result.flags[2] & 0x20,\n            durationIsEmpty = result.flags[0] & 0x010000,\n            defaultBaseIsMoof = result.flags[0] & 0x020000,\n            i;\n        i = 8;\n\n        if (baseDataOffsetPresent) {\n          i += 4; // truncate top 4 bytes\n          // FIXME: should we read the full 64 bits?\n\n          result.baseDataOffset = view.getUint32(12);\n          i += 4;\n        }\n\n        if (sampleDescriptionIndexPresent) {\n          result.sampleDescriptionIndex = view.getUint32(i);\n          i += 4;\n        }\n\n        if (defaultSampleDurationPresent) {\n          result.defaultSampleDuration = view.getUint32(i);\n          i += 4;\n        }\n\n        if (defaultSampleSizePresent) {\n          result.defaultSampleSize = view.getUint32(i);\n          i += 4;\n        }\n\n        if (defaultSampleFlagsPresent) {\n          result.defaultSampleFlags = view.getUint32(i);\n        }\n\n        if (durationIsEmpty) {\n          result.durationIsEmpty = true;\n        }\n\n        if (!baseDataOffsetPresent && defaultBaseIsMoof) {\n          result.baseDataOffsetIsMoof = true;\n        }\n\n        return result;\n      },\n      tkhd: function tkhd(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            i = 4,\n            result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4))\n        };\n\n        if (result.version === 1) {\n          i += 4;\n          result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n\n          i += 8;\n          result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n\n          i += 4;\n          result.trackId = view.getUint32(i);\n          i += 4;\n          i += 8;\n          result.duration = view.getUint32(i); // truncating top 4 bytes\n        } else {\n          result.creationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.modificationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.trackId = view.getUint32(i);\n          i += 4;\n          i += 4;\n          result.duration = view.getUint32(i);\n        }\n\n        i += 4;\n        i += 2 * 4;\n        result.layer = view.getUint16(i);\n        i += 2;\n        result.alternateGroup = view.getUint16(i);\n        i += 2; // convert fixed-point, base 16 back to a number\n\n        result.volume = view.getUint8(i) + view.getUint8(i + 1) / 8;\n        i += 2;\n        i += 2;\n        result.matrix = new Uint32Array(data.subarray(i, i + 9 * 4));\n        i += 9 * 4;\n        result.width = view.getUint16(i) + view.getUint16(i + 2) / 16;\n        i += 4;\n        result.height = view.getUint16(i) + view.getUint16(i + 2) / 16;\n        return result;\n      },\n      traf: function traf(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      trak: function trak(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      trex: function trex(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          trackId: view.getUint32(4),\n          defaultSampleDescriptionIndex: view.getUint32(8),\n          defaultSampleDuration: view.getUint32(12),\n          defaultSampleSize: view.getUint32(16),\n          sampleDependsOn: data[20] & 0x03,\n          sampleIsDependedOn: (data[21] & 0xc0) >> 6,\n          sampleHasRedundancy: (data[21] & 0x30) >> 4,\n          samplePaddingValue: (data[21] & 0x0e) >> 1,\n          sampleIsDifferenceSample: !!(data[21] & 0x01),\n          sampleDegradationPriority: view.getUint16(22)\n        };\n      },\n      trun: function trun(data) {\n        var result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          samples: []\n        },\n            view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            // Flag interpretation\n        dataOffsetPresent = result.flags[2] & 0x01,\n            // compare with 2nd byte of 0x1\n        firstSampleFlagsPresent = result.flags[2] & 0x04,\n            // compare with 2nd byte of 0x4\n        sampleDurationPresent = result.flags[1] & 0x01,\n            // compare with 2nd byte of 0x100\n        sampleSizePresent = result.flags[1] & 0x02,\n            // compare with 2nd byte of 0x200\n        sampleFlagsPresent = result.flags[1] & 0x04,\n            // compare with 2nd byte of 0x400\n        sampleCompositionTimeOffsetPresent = result.flags[1] & 0x08,\n            // compare with 2nd byte of 0x800\n        sampleCount = view.getUint32(4),\n            offset = 8,\n            sample;\n\n        if (dataOffsetPresent) {\n          // 32 bit signed integer\n          result.dataOffset = view.getInt32(offset);\n          offset += 4;\n        } // Overrides the flags for the first sample only. The order of\n        // optional values will be: duration, size, compositionTimeOffset\n\n\n        if (firstSampleFlagsPresent && sampleCount) {\n          sample = {\n            flags: parseSampleFlags(data.subarray(offset, offset + 4))\n          };\n          offset += 4;\n\n          if (sampleDurationPresent) {\n            sample.duration = view.getUint32(offset);\n            offset += 4;\n          }\n\n          if (sampleSizePresent) {\n            sample.size = view.getUint32(offset);\n            offset += 4;\n          }\n\n          if (sampleCompositionTimeOffsetPresent) {\n            // Note: this should be a signed int if version is 1\n            sample.compositionTimeOffset = view.getUint32(offset);\n            offset += 4;\n          }\n\n          result.samples.push(sample);\n          sampleCount--;\n        }\n\n        while (sampleCount--) {\n          sample = {};\n\n          if (sampleDurationPresent) {\n            sample.duration = view.getUint32(offset);\n            offset += 4;\n          }\n\n          if (sampleSizePresent) {\n            sample.size = view.getUint32(offset);\n            offset += 4;\n          }\n\n          if (sampleFlagsPresent) {\n            sample.flags = parseSampleFlags(data.subarray(offset, offset + 4));\n            offset += 4;\n          }\n\n          if (sampleCompositionTimeOffsetPresent) {\n            // Note: this should be a signed int if version is 1\n            sample.compositionTimeOffset = view.getUint32(offset);\n            offset += 4;\n          }\n\n          result.samples.push(sample);\n        }\n\n        return result;\n      },\n      'url ': function url(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4))\n        };\n      },\n      vmhd: function vmhd(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          graphicsmode: view.getUint16(4),\n          opcolor: new Uint16Array([view.getUint16(6), view.getUint16(8), view.getUint16(10)])\n        };\n      }\n    };\n    /**\n     * Return a javascript array of box objects parsed from an ISO base\n     * media file.\n     * @param data {Uint8Array} the binary data of the media to be inspected\n     * @return {array} a javascript array of potentially nested box objects\n     */\n\n\n    inspectMp4 = function inspectMp4(data) {\n      var i = 0,\n          result = [],\n          view,\n          size,\n          type,\n          end,\n          box; // Convert data from Uint8Array to ArrayBuffer, to follow Dataview API\n\n      var ab = new ArrayBuffer(data.length);\n      var v = new Uint8Array(ab);\n\n      for (var z = 0; z < data.length; ++z) {\n        v[z] = data[z];\n      }\n\n      view = new DataView(ab);\n\n      while (i < data.byteLength) {\n        // parse box data\n        size = view.getUint32(i);\n        type = parseType$2(data.subarray(i + 4, i + 8));\n        end = size > 1 ? i + size : data.byteLength; // parse type-specific data\n\n        box = (parse$$1[type] || function (data) {\n          return {\n            data: data\n          };\n        })(data.subarray(i + 8, end));\n\n        box.size = size;\n        box.type = type; // store this box and move to the next\n\n        result.push(box);\n        i = end;\n      }\n\n      return result;\n    };\n    /**\n     * Returns a textual representation of the javascript represtentation\n     * of an MP4 file. You can use it as an alternative to\n     * JSON.stringify() to compare inspected MP4s.\n     * @param inspectedMp4 {array} the parsed array of boxes in an MP4\n     * file\n     * @param depth {number} (optional) the number of ancestor boxes of\n     * the elements of inspectedMp4. Assumed to be zero if unspecified.\n     * @return {string} a text representation of the parsed MP4\n     */\n\n\n    _textifyMp = function textifyMp4(inspectedMp4, depth) {\n      var indent;\n      depth = depth || 0;\n      indent = new Array(depth * 2 + 1).join(' '); // iterate over all the boxes\n\n      return inspectedMp4.map(function (box, index) {\n        // list the box type first at the current indentation level\n        return indent + box.type + '\\n' + // the type is already included and handle child boxes separately\n        Object.keys(box).filter(function (key) {\n          return key !== 'type' && key !== 'boxes'; // output all the box properties\n        }).map(function (key) {\n          var prefix = indent + '  ' + key + ': ',\n              value = box[key]; // print out raw bytes as hexademical\n\n          if (value instanceof Uint8Array || value instanceof Uint32Array) {\n            var bytes = Array.prototype.slice.call(new Uint8Array(value.buffer, value.byteOffset, value.byteLength)).map(function (byte) {\n              return ' ' + ('00' + byte.toString(16)).slice(-2);\n            }).join('').match(/.{1,24}/g);\n\n            if (!bytes) {\n              return prefix + '<>';\n            }\n\n            if (bytes.length === 1) {\n              return prefix + '<' + bytes.join('').slice(1) + '>';\n            }\n\n            return prefix + '<\\n' + bytes.map(function (line) {\n              return indent + '  ' + line;\n            }).join('\\n') + '\\n' + indent + '  >';\n          } // stringify generic objects\n\n\n          return prefix + JSON.stringify(value, null, 2).split('\\n').map(function (line, index) {\n            if (index === 0) {\n              return line;\n            }\n\n            return indent + '  ' + line;\n          }).join('\\n');\n        }).join('\\n') + ( // recursively textify the child boxes\n        box.boxes ? '\\n' + _textifyMp(box.boxes, depth + 1) : '');\n      }).join('\\n');\n    };\n\n    var mp4Inspector = {\n      inspect: inspectMp4,\n      textify: _textifyMp,\n      parseTfdt: parse$$1.tfdt,\n      parseHdlr: parse$$1.hdlr,\n      parseTfhd: parse$$1.tfhd,\n      parseTrun: parse$$1.trun,\n      parseSidx: parse$$1.sidx\n    };\n    var discardEmulationPreventionBytes$1 = captionPacketParser.discardEmulationPreventionBytes;\n    var CaptionStream$1 = captionStream.CaptionStream;\n    /**\n      * Maps an offset in the mdat to a sample based on the the size of the samples.\n      * Assumes that `parseSamples` has been called first.\n      *\n      * @param {Number} offset - The offset into the mdat\n      * @param {Object[]} samples - An array of samples, parsed using `parseSamples`\n      * @return {?Object} The matching sample, or null if no match was found.\n      *\n      * @see ISO-BMFF-12/2015, Section 8.8.8\n     **/\n\n    var mapToSample = function mapToSample(offset, samples) {\n      var approximateOffset = offset;\n\n      for (var i = 0; i < samples.length; i++) {\n        var sample = samples[i];\n\n        if (approximateOffset < sample.size) {\n          return sample;\n        }\n\n        approximateOffset -= sample.size;\n      }\n\n      return null;\n    };\n    /**\n      * Finds SEI nal units contained in a Media Data Box.\n      * Assumes that `parseSamples` has been called first.\n      *\n      * @param {Uint8Array} avcStream - The bytes of the mdat\n      * @param {Object[]} samples - The samples parsed out by `parseSamples`\n      * @param {Number} trackId - The trackId of this video track\n      * @return {Object[]} seiNals - the parsed SEI NALUs found.\n      *   The contents of the seiNal should match what is expected by\n      *   CaptionStream.push (nalUnitType, size, data, escapedRBSP, pts, dts)\n      *\n      * @see ISO-BMFF-12/2015, Section 8.1.1\n      * @see Rec. ITU-T H.264, 7.3.2.3.1\n     **/\n\n\n    var findSeiNals = function findSeiNals(avcStream, samples, trackId) {\n      var avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),\n          result = [],\n          seiNal,\n          i,\n          length,\n          lastMatchedSample;\n\n      for (i = 0; i + 4 < avcStream.length; i += length) {\n        length = avcView.getUint32(i);\n        i += 4; // Bail if this doesn't appear to be an H264 stream\n\n        if (length <= 0) {\n          continue;\n        }\n\n        switch (avcStream[i] & 0x1F) {\n          case 0x06:\n            var data = avcStream.subarray(i + 1, i + 1 + length);\n            var matchingSample = mapToSample(i, samples);\n            seiNal = {\n              nalUnitType: 'sei_rbsp',\n              size: length,\n              data: data,\n              escapedRBSP: discardEmulationPreventionBytes$1(data),\n              trackId: trackId\n            };\n\n            if (matchingSample) {\n              seiNal.pts = matchingSample.pts;\n              seiNal.dts = matchingSample.dts;\n              lastMatchedSample = matchingSample;\n            } else {\n              // If a matching sample cannot be found, use the last\n              // sample's values as they should be as close as possible\n              seiNal.pts = lastMatchedSample.pts;\n              seiNal.dts = lastMatchedSample.dts;\n            }\n\n            result.push(seiNal);\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      return result;\n    };\n    /**\n      * Parses sample information out of Track Run Boxes and calculates\n      * the absolute presentation and decode timestamps of each sample.\n      *\n      * @param {Array<Uint8Array>} truns - The Trun Run boxes to be parsed\n      * @param {Number} baseMediaDecodeTime - base media decode time from tfdt\n          @see ISO-BMFF-12/2015, Section 8.8.12\n      * @param {Object} tfhd - The parsed Track Fragment Header\n      *   @see inspect.parseTfhd\n      * @return {Object[]} the parsed samples\n      *\n      * @see ISO-BMFF-12/2015, Section 8.8.8\n     **/\n\n\n    var parseSamples = function parseSamples(truns, baseMediaDecodeTime, tfhd) {\n      var currentDts = baseMediaDecodeTime;\n      var defaultSampleDuration = tfhd.defaultSampleDuration || 0;\n      var defaultSampleSize = tfhd.defaultSampleSize || 0;\n      var trackId = tfhd.trackId;\n      var allSamples = [];\n      truns.forEach(function (trun) {\n        // Note: We currently do not parse the sample table as well\n        // as the trun. It's possible some sources will require this.\n        // moov > trak > mdia > minf > stbl\n        var trackRun = mp4Inspector.parseTrun(trun);\n        var samples = trackRun.samples;\n        samples.forEach(function (sample) {\n          if (sample.duration === undefined) {\n            sample.duration = defaultSampleDuration;\n          }\n\n          if (sample.size === undefined) {\n            sample.size = defaultSampleSize;\n          }\n\n          sample.trackId = trackId;\n          sample.dts = currentDts;\n\n          if (sample.compositionTimeOffset === undefined) {\n            sample.compositionTimeOffset = 0;\n          }\n\n          sample.pts = currentDts + sample.compositionTimeOffset;\n          currentDts += sample.duration;\n        });\n        allSamples = allSamples.concat(samples);\n      });\n      return allSamples;\n    };\n    /**\n      * Parses out caption nals from an FMP4 segment's video tracks.\n      *\n      * @param {Uint8Array} segment - The bytes of a single segment\n      * @param {Number} videoTrackId - The trackId of a video track in the segment\n      * @return {Object.<Number, Object[]>} A mapping of video trackId to\n      *   a list of seiNals found in that track\n     **/\n\n\n    var parseCaptionNals = function parseCaptionNals(segment, videoTrackId) {\n      // To get the samples\n      var trafs = probe.findBox(segment, ['moof', 'traf']); // To get SEI NAL units\n\n      var mdats = probe.findBox(segment, ['mdat']);\n      var captionNals = {};\n      var mdatTrafPairs = []; // Pair up each traf with a mdat as moofs and mdats are in pairs\n\n      mdats.forEach(function (mdat, index) {\n        var matchingTraf = trafs[index];\n        mdatTrafPairs.push({\n          mdat: mdat,\n          traf: matchingTraf\n        });\n      });\n      mdatTrafPairs.forEach(function (pair) {\n        var mdat = pair.mdat;\n        var traf = pair.traf;\n        var tfhd = probe.findBox(traf, ['tfhd']); // Exactly 1 tfhd per traf\n\n        var headerInfo = mp4Inspector.parseTfhd(tfhd[0]);\n        var trackId = headerInfo.trackId;\n        var tfdt = probe.findBox(traf, ['tfdt']); // Either 0 or 1 tfdt per traf\n\n        var baseMediaDecodeTime = tfdt.length > 0 ? mp4Inspector.parseTfdt(tfdt[0]).baseMediaDecodeTime : 0;\n        var truns = probe.findBox(traf, ['trun']);\n        var samples;\n        var seiNals; // Only parse video data for the chosen video track\n\n        if (videoTrackId === trackId && truns.length > 0) {\n          samples = parseSamples(truns, baseMediaDecodeTime, headerInfo);\n          seiNals = findSeiNals(mdat, samples, trackId);\n\n          if (!captionNals[trackId]) {\n            captionNals[trackId] = [];\n          }\n\n          captionNals[trackId] = captionNals[trackId].concat(seiNals);\n        }\n      });\n      return captionNals;\n    };\n    /**\n      * Parses out inband captions from an MP4 container and returns\n      * caption objects that can be used by WebVTT and the TextTrack API.\n      * @see https://developer.mozilla.org/en-US/docs/Web/API/VTTCue\n      * @see https://developer.mozilla.org/en-US/docs/Web/API/TextTrack\n      * Assumes that `probe.getVideoTrackIds` and `probe.timescale` have been called first\n      *\n      * @param {Uint8Array} segment - The fmp4 segment containing embedded captions\n      * @param {Number} trackId - The id of the video track to parse\n      * @param {Number} timescale - The timescale for the video track from the init segment\n      *\n      * @return {?Object[]} parsedCaptions - A list of captions or null if no video tracks\n      * @return {Number} parsedCaptions[].startTime - The time to show the caption in seconds\n      * @return {Number} parsedCaptions[].endTime - The time to stop showing the caption in seconds\n      * @return {String} parsedCaptions[].text - The visible content of the caption\n     **/\n\n\n    var parseEmbeddedCaptions = function parseEmbeddedCaptions(segment, trackId, timescale) {\n      var seiNals;\n\n      if (!trackId) {\n        return null;\n      }\n\n      seiNals = parseCaptionNals(segment, trackId);\n      return {\n        seiNals: seiNals[trackId],\n        timescale: timescale\n      };\n    };\n    /**\n      * Converts SEI NALUs into captions that can be used by video.js\n     **/\n\n\n    var CaptionParser$$1 = function CaptionParser$$1() {\n      var isInitialized = false;\n      var captionStream$$1; // Stores segments seen before trackId and timescale are set\n\n      var segmentCache; // Stores video track ID of the track being parsed\n\n      var trackId; // Stores the timescale of the track being parsed\n\n      var timescale; // Stores captions parsed so far\n\n      var parsedCaptions;\n      /**\n        * A method to indicate whether a CaptionParser has been initalized\n        * @returns {Boolean}\n       **/\n\n      this.isInitialized = function () {\n        return isInitialized;\n      };\n      /**\n        * Initializes the underlying CaptionStream, SEI NAL parsing\n        * and management, and caption collection\n       **/\n\n\n      this.init = function () {\n        captionStream$$1 = new CaptionStream$1();\n        isInitialized = true; // Collect dispatched captions\n\n        captionStream$$1.on('data', function (event) {\n          // Convert to seconds in the source's timescale\n          event.startTime = event.startPts / timescale;\n          event.endTime = event.endPts / timescale;\n          parsedCaptions.captions.push(event);\n          parsedCaptions.captionStreams[event.stream] = true;\n        });\n      };\n      /**\n        * Determines if a new video track will be selected\n        * or if the timescale changed\n        * @return {Boolean}\n       **/\n\n\n      this.isNewInit = function (videoTrackIds, timescales) {\n        if (videoTrackIds && videoTrackIds.length === 0 || timescales && typeof timescales === 'object' && Object.keys(timescales).length === 0) {\n          return false;\n        }\n\n        return trackId !== videoTrackIds[0] || timescale !== timescales[trackId];\n      };\n      /**\n        * Parses out SEI captions and interacts with underlying\n        * CaptionStream to return dispatched captions\n        *\n        * @param {Uint8Array} segment - The fmp4 segment containing embedded captions\n        * @param {Number[]} videoTrackIds - A list of video tracks found in the init segment\n        * @param {Object.<Number, Number>} timescales - The timescales found in the init segment\n        * @see parseEmbeddedCaptions\n        * @see m2ts/caption-stream.js\n       **/\n\n\n      this.parse = function (segment, videoTrackIds, timescales) {\n        var parsedData;\n\n        if (!this.isInitialized()) {\n          return null; // This is not likely to be a video segment\n        } else if (!videoTrackIds || !timescales) {\n          return null;\n        } else if (this.isNewInit(videoTrackIds, timescales)) {\n          // Use the first video track only as there is no\n          // mechanism to switch to other video tracks\n          trackId = videoTrackIds[0];\n          timescale = timescales[trackId]; // If an init segment has not been seen yet, hold onto segment\n          // data until we have one\n        } else if (!trackId || !timescale) {\n          segmentCache.push(segment);\n          return null;\n        } // Now that a timescale and trackId is set, parse cached segments\n\n\n        while (segmentCache.length > 0) {\n          var cachedSegment = segmentCache.shift();\n          this.parse(cachedSegment, videoTrackIds, timescales);\n        }\n\n        parsedData = parseEmbeddedCaptions(segment, trackId, timescale);\n\n        if (parsedData === null || !parsedData.seiNals) {\n          return null;\n        }\n\n        this.pushNals(parsedData.seiNals); // Force the parsed captions to be dispatched\n\n        this.flushStream();\n        return parsedCaptions;\n      };\n      /**\n        * Pushes SEI NALUs onto CaptionStream\n        * @param {Object[]} nals - A list of SEI nals parsed using `parseCaptionNals`\n        * Assumes that `parseCaptionNals` has been called first\n        * @see m2ts/caption-stream.js\n        **/\n\n\n      this.pushNals = function (nals) {\n        if (!this.isInitialized() || !nals || nals.length === 0) {\n          return null;\n        }\n\n        nals.forEach(function (nal) {\n          captionStream$$1.push(nal);\n        });\n      };\n      /**\n        * Flushes underlying CaptionStream to dispatch processed, displayable captions\n        * @see m2ts/caption-stream.js\n       **/\n\n\n      this.flushStream = function () {\n        if (!this.isInitialized()) {\n          return null;\n        }\n\n        captionStream$$1.flush();\n      };\n      /**\n        * Reset caption buckets for new data\n       **/\n\n\n      this.clearParsedCaptions = function () {\n        parsedCaptions.captions = [];\n        parsedCaptions.captionStreams = {};\n      };\n      /**\n        * Resets underlying CaptionStream\n        * @see m2ts/caption-stream.js\n       **/\n\n\n      this.resetCaptionStream = function () {\n        if (!this.isInitialized()) {\n          return null;\n        }\n\n        captionStream$$1.reset();\n      };\n      /**\n        * Convenience method to clear all captions flushed from the\n        * CaptionStream and still being parsed\n        * @see m2ts/caption-stream.js\n       **/\n\n\n      this.clearAllCaptions = function () {\n        this.clearParsedCaptions();\n        this.resetCaptionStream();\n      };\n      /**\n        * Reset caption parser\n       **/\n\n\n      this.reset = function () {\n        segmentCache = [];\n        trackId = null;\n        timescale = null;\n\n        if (!parsedCaptions) {\n          parsedCaptions = {\n            captions: [],\n            // CC1, CC2, CC3, CC4\n            captionStreams: {}\n          };\n        } else {\n          this.clearParsedCaptions();\n        }\n\n        this.resetCaptionStream();\n      };\n\n      this.reset();\n    };\n\n    var captionParser = CaptionParser$$1;\n    var mp4 = {\n      generator: mp4Generator,\n      probe: probe,\n      Transmuxer: transmuxer.Transmuxer,\n      AudioSegmentStream: transmuxer.AudioSegmentStream,\n      VideoSegmentStream: transmuxer.VideoSegmentStream,\n      CaptionParser: captionParser\n    };\n\n    var classCallCheck = function classCallCheck(instance, Constructor) {\n      if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n      }\n    };\n\n    var createClass = function () {\n      function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) defineProperties(Constructor, staticProps);\n        return Constructor;\n      };\n    }();\n    /**\n     * @file transmuxer-worker.js\n     */\n\n    /**\n     * Re-emits transmuxer events by converting them into messages to the\n     * world outside the worker.\n     *\n     * @param {Object} transmuxer the transmuxer to wire events on\n     * @private\n     */\n\n\n    var wireTransmuxerEvents = function wireTransmuxerEvents(self, transmuxer) {\n      transmuxer.on('data', function (segment) {\n        // transfer ownership of the underlying ArrayBuffer\n        // instead of doing a copy to save memory\n        // ArrayBuffers are transferable but generic TypedArrays are not\n        // @link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers#Passing_data_by_transferring_ownership_(transferable_objects)\n        var initArray = segment.initSegment;\n        segment.initSegment = {\n          data: initArray.buffer,\n          byteOffset: initArray.byteOffset,\n          byteLength: initArray.byteLength\n        };\n        var typedArray = segment.data;\n        segment.data = typedArray.buffer;\n        self.postMessage({\n          action: 'data',\n          segment: segment,\n          byteOffset: typedArray.byteOffset,\n          byteLength: typedArray.byteLength\n        }, [segment.data]);\n      });\n\n      if (transmuxer.captionStream) {\n        transmuxer.captionStream.on('data', function (caption) {\n          self.postMessage({\n            action: 'caption',\n            data: caption\n          });\n        });\n      }\n\n      transmuxer.on('done', function (data) {\n        self.postMessage({\n          action: 'done'\n        });\n      });\n      transmuxer.on('gopInfo', function (gopInfo) {\n        self.postMessage({\n          action: 'gopInfo',\n          gopInfo: gopInfo\n        });\n      });\n      transmuxer.on('videoSegmentTimingInfo', function (videoSegmentTimingInfo) {\n        self.postMessage({\n          action: 'videoSegmentTimingInfo',\n          videoSegmentTimingInfo: videoSegmentTimingInfo\n        });\n      });\n    };\n    /**\n     * All incoming messages route through this hash. If no function exists\n     * to handle an incoming message, then we ignore the message.\n     *\n     * @class MessageHandlers\n     * @param {Object} options the options to initialize with\n     */\n\n\n    var MessageHandlers = function () {\n      function MessageHandlers(self, options) {\n        classCallCheck(this, MessageHandlers);\n        this.options = options || {};\n        this.self = self;\n        this.init();\n      }\n      /**\n       * initialize our web worker and wire all the events.\n       */\n\n\n      createClass(MessageHandlers, [{\n        key: 'init',\n        value: function init() {\n          if (this.transmuxer) {\n            this.transmuxer.dispose();\n          }\n\n          this.transmuxer = new mp4.Transmuxer(this.options);\n          wireTransmuxerEvents(this.self, this.transmuxer);\n        }\n        /**\n         * Adds data (a ts segment) to the start of the transmuxer pipeline for\n         * processing.\n         *\n         * @param {ArrayBuffer} data data to push into the muxer\n         */\n\n      }, {\n        key: 'push',\n        value: function push(data) {\n          // Cast array buffer to correct type for transmuxer\n          var segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);\n          this.transmuxer.push(segment);\n        }\n        /**\n         * Recreate the transmuxer so that the next segment added via `push`\n         * start with a fresh transmuxer.\n         */\n\n      }, {\n        key: 'reset',\n        value: function reset() {\n          this.init();\n        }\n        /**\n         * Set the value that will be used as the `baseMediaDecodeTime` time for the\n         * next segment pushed in. Subsequent segments will have their `baseMediaDecodeTime`\n         * set relative to the first based on the PTS values.\n         *\n         * @param {Object} data used to set the timestamp offset in the muxer\n         */\n\n      }, {\n        key: 'setTimestampOffset',\n        value: function setTimestampOffset(data) {\n          var timestampOffset = data.timestampOffset || 0;\n          this.transmuxer.setBaseMediaDecodeTime(Math.round(timestampOffset * 90000));\n        }\n      }, {\n        key: 'setAudioAppendStart',\n        value: function setAudioAppendStart(data) {\n          this.transmuxer.setAudioAppendStart(Math.ceil(data.appendStart * 90000));\n        }\n        /**\n         * Forces the pipeline to finish processing the last segment and emit it's\n         * results.\n         *\n         * @param {Object} data event data, not really used\n         */\n\n      }, {\n        key: 'flush',\n        value: function flush(data) {\n          this.transmuxer.flush();\n        }\n      }, {\n        key: 'resetCaptions',\n        value: function resetCaptions() {\n          this.transmuxer.resetCaptions();\n        }\n      }, {\n        key: 'alignGopsWith',\n        value: function alignGopsWith(data) {\n          this.transmuxer.alignGopsWith(data.gopsToAlignWith.slice());\n        }\n      }]);\n      return MessageHandlers;\n    }();\n    /**\n     * Our web wroker interface so that things can talk to mux.js\n     * that will be running in a web worker. the scope is passed to this by\n     * webworkify.\n     *\n     * @param {Object} self the scope for the web worker\n     */\n\n\n    var TransmuxerWorker = function TransmuxerWorker(self) {\n      self.onmessage = function (event) {\n        if (event.data.action === 'init' && event.data.options) {\n          this.messageHandlers = new MessageHandlers(self, event.data.options);\n          return;\n        }\n\n        if (!this.messageHandlers) {\n          this.messageHandlers = new MessageHandlers(self);\n        }\n\n        if (event.data && event.data.action && event.data.action !== 'init') {\n          if (this.messageHandlers[event.data.action]) {\n            this.messageHandlers[event.data.action](event.data);\n          }\n        }\n      };\n    };\n\n    var transmuxerWorker = new TransmuxerWorker(self);\n    return transmuxerWorker;\n  }();\n});\n/**\n * @file - codecs.js - Handles tasks regarding codec strings such as translating them to\n * codec strings, or translating codec strings into objects that can be examined.\n */\n// Default codec parameters if none were provided for video and/or audio\n\nvar defaultCodecs = {\n  videoCodec: 'avc1',\n  videoObjectTypeIndicator: '.4d400d',\n  // AAC-LC\n  audioProfile: '2'\n};\n/**\n * Replace the old apple-style `avc1.<dd>.<dd>` codec string with the standard\n * `avc1.<hhhhhh>`\n *\n * @param {Array} codecs an array of codec strings to fix\n * @return {Array} the translated codec array\n * @private\n */\n\nvar translateLegacyCodecs = function translateLegacyCodecs(codecs) {\n  return codecs.map(function (codec) {\n    return codec.replace(/avc1\\.(\\d+)\\.(\\d+)/i, function (orig, profile, avcLevel) {\n      var profileHex = ('00' + Number(profile).toString(16)).slice(-2);\n      var avcLevelHex = ('00' + Number(avcLevel).toString(16)).slice(-2);\n      return 'avc1.' + profileHex + '00' + avcLevelHex;\n    });\n  });\n};\n/**\n * Parses a codec string to retrieve the number of codecs specified,\n * the video codec and object type indicator, and the audio profile.\n */\n\n\nvar parseCodecs = function parseCodecs() {\n  var codecs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var result = {\n    codecCount: 0\n  };\n  var parsed = void 0;\n  result.codecCount = codecs.split(',').length;\n  result.codecCount = result.codecCount || 2; // parse the video codec\n\n  parsed = /(^|\\s|,)+(avc[13])([^ ,]*)/i.exec(codecs);\n\n  if (parsed) {\n    result.videoCodec = parsed[2];\n    result.videoObjectTypeIndicator = parsed[3];\n  } // parse the last field of the audio codec\n\n\n  result.audioProfile = /(^|\\s|,)+mp4a.[0-9A-Fa-f]+\\.([0-9A-Fa-f]+)/i.exec(codecs);\n  result.audioProfile = result.audioProfile && result.audioProfile[2];\n  return result;\n};\n/**\n * Replace codecs in the codec string with the old apple-style `avc1.<dd>.<dd>` to the\n * standard `avc1.<hhhhhh>`.\n *\n * @param codecString {String} the codec string\n * @return {String} the codec string with old apple-style codecs replaced\n *\n * @private\n */\n\n\nvar mapLegacyAvcCodecs = function mapLegacyAvcCodecs(codecString) {\n  return codecString.replace(/avc1\\.(\\d+)\\.(\\d+)/i, function (match) {\n    return translateLegacyCodecs([match])[0];\n  });\n};\n/**\n * Build a media mime-type string from a set of parameters\n * @param {String} type either 'audio' or 'video'\n * @param {String} container either 'mp2t' or 'mp4'\n * @param {Array} codecs an array of codec strings to add\n * @return {String} a valid media mime-type\n */\n\n\nvar makeMimeTypeString = function makeMimeTypeString(type, container, codecs) {\n  // The codecs array is filtered so that falsey values are\n  // dropped and don't cause Array#join to create spurious\n  // commas\n  return type + '/' + container + '; codecs=\"' + codecs.filter(function (c) {\n    return !!c;\n  }).join(', ') + '\"';\n};\n/**\n * Returns the type container based on information in the playlist\n * @param {Playlist} media the current media playlist\n * @return {String} a valid media container type\n */\n\n\nvar getContainerType = function getContainerType(media) {\n  // An initialization segment means the media playlist is an iframe\n  // playlist or is using the mp4 container. We don't currently\n  // support iframe playlists, so assume this is signalling mp4\n  // fragments.\n  if (media.segments && media.segments.length && media.segments[0].map) {\n    return 'mp4';\n  }\n\n  return 'mp2t';\n};\n/**\n * Returns a set of codec strings parsed from the playlist or the default\n * codec strings if no codecs were specified in the playlist\n * @param {Playlist} media the current media playlist\n * @return {Object} an object with the video and audio codecs\n */\n\n\nvar getCodecs = function getCodecs(media) {\n  // if the codecs were explicitly specified, use them instead of the\n  // defaults\n  var mediaAttributes = media.attributes || {};\n\n  if (mediaAttributes.CODECS) {\n    return parseCodecs(mediaAttributes.CODECS);\n  }\n\n  return defaultCodecs;\n};\n\nvar audioProfileFromDefault = function audioProfileFromDefault(master, audioGroupId) {\n  if (!master.mediaGroups.AUDIO || !audioGroupId) {\n    return null;\n  }\n\n  var audioGroup = master.mediaGroups.AUDIO[audioGroupId];\n\n  if (!audioGroup) {\n    return null;\n  }\n\n  for (var name in audioGroup) {\n    var audioType = audioGroup[name];\n\n    if (audioType.default && audioType.playlists) {\n      // codec should be the same for all playlists within the audio type\n      return parseCodecs(audioType.playlists[0].attributes.CODECS).audioProfile;\n    }\n  }\n\n  return null;\n};\n/**\n * Calculates the MIME type strings for a working configuration of\n * SourceBuffers to play variant streams in a master playlist. If\n * there is no possible working configuration, an empty array will be\n * returned.\n *\n * @param master {Object} the m3u8 object for the master playlist\n * @param media {Object} the m3u8 object for the variant playlist\n * @return {Array} the MIME type strings. If the array has more than\n * one entry, the first element should be applied to the video\n * SourceBuffer and the second to the audio SourceBuffer.\n *\n * @private\n */\n\n\nvar mimeTypesForPlaylist = function mimeTypesForPlaylist(master, media) {\n  var containerType = getContainerType(media);\n  var codecInfo = getCodecs(media);\n  var mediaAttributes = media.attributes || {}; // Default condition for a traditional HLS (no demuxed audio/video)\n\n  var isMuxed = true;\n  var isMaat = false;\n\n  if (!media) {\n    // Not enough information\n    return [];\n  }\n\n  if (master.mediaGroups.AUDIO && mediaAttributes.AUDIO) {\n    var audioGroup = master.mediaGroups.AUDIO[mediaAttributes.AUDIO]; // Handle the case where we are in a multiple-audio track scenario\n\n    if (audioGroup) {\n      isMaat = true; // Start with the everything demuxed then...\n\n      isMuxed = false; // ...check to see if any audio group tracks are muxed (ie. lacking a uri)\n\n      for (var groupId in audioGroup) {\n        // either a uri is present (if the case of HLS and an external playlist), or\n        // playlists is present (in the case of DASH where we don't have external audio\n        // playlists)\n        if (!audioGroup[groupId].uri && !audioGroup[groupId].playlists) {\n          isMuxed = true;\n          break;\n        }\n      }\n    }\n  } // HLS with multiple-audio tracks must always get an audio codec.\n  // Put another way, there is no way to have a video-only multiple-audio HLS!\n\n\n  if (isMaat && !codecInfo.audioProfile) {\n    if (!isMuxed) {\n      // It is possible for codecs to be specified on the audio media group playlist but\n      // not on the rendition playlist. This is mostly the case for DASH, where audio and\n      // video are always separate (and separately specified).\n      codecInfo.audioProfile = audioProfileFromDefault(master, mediaAttributes.AUDIO);\n    }\n\n    if (!codecInfo.audioProfile) {\n      videojs$1.log.warn('Multiple audio tracks present but no audio codec string is specified. ' + 'Attempting to use the default audio codec (mp4a.40.2)');\n      codecInfo.audioProfile = defaultCodecs.audioProfile;\n    }\n  } // Generate the final codec strings from the codec object generated above\n\n\n  var codecStrings = {};\n\n  if (codecInfo.videoCodec) {\n    codecStrings.video = '' + codecInfo.videoCodec + codecInfo.videoObjectTypeIndicator;\n  }\n\n  if (codecInfo.audioProfile) {\n    codecStrings.audio = 'mp4a.40.' + codecInfo.audioProfile;\n  } // Finally, make and return an array with proper mime-types depending on\n  // the configuration\n\n\n  var justAudio = makeMimeTypeString('audio', containerType, [codecStrings.audio]);\n  var justVideo = makeMimeTypeString('video', containerType, [codecStrings.video]);\n  var bothVideoAudio = makeMimeTypeString('video', containerType, [codecStrings.video, codecStrings.audio]);\n\n  if (isMaat) {\n    if (!isMuxed && codecStrings.video) {\n      return [justVideo, justAudio];\n    }\n\n    if (!isMuxed && !codecStrings.video) {\n      // There is no muxed content and no video codec string, so this is an audio only\n      // stream with alternate audio.\n      return [justAudio, justAudio];\n    } // There exists the possiblity that this will return a `video/container`\n    // mime-type for the first entry in the array even when there is only audio.\n    // This doesn't appear to be a problem and simplifies the code.\n\n\n    return [bothVideoAudio, justAudio];\n  } // If there is no video codec at all, always just return a single\n  // audio/<container> mime-type\n\n\n  if (!codecStrings.video) {\n    return [justAudio];\n  } // When not using separate audio media groups, audio and video is\n  // *always* muxed\n\n\n  return [bothVideoAudio];\n};\n/**\n * Parse a content type header into a type and parameters\n * object\n *\n * @param {String} type the content type header\n * @return {Object} the parsed content-type\n * @private\n */\n\n\nvar parseContentType = function parseContentType(type) {\n  var object = {\n    type: '',\n    parameters: {}\n  };\n  var parameters = type.trim().split(';'); // first parameter should always be content-type\n\n  object.type = parameters.shift().trim();\n  parameters.forEach(function (parameter) {\n    var pair = parameter.trim().split('=');\n\n    if (pair.length > 1) {\n      var name = pair[0].replace(/\"/g, '').trim();\n      var value = pair[1].replace(/\"/g, '').trim();\n      object.parameters[name] = value;\n    }\n  });\n  return object;\n};\n/**\n * Check if a codec string refers to an audio codec.\n *\n * @param {String} codec codec string to check\n * @return {Boolean} if this is an audio codec\n * @private\n */\n\n\nvar isAudioCodec = function isAudioCodec(codec) {\n  return /mp4a\\.\\d+.\\d+/i.test(codec);\n};\n/**\n * Check if a codec string refers to a video codec.\n *\n * @param {String} codec codec string to check\n * @return {Boolean} if this is a video codec\n * @private\n */\n\n\nvar isVideoCodec = function isVideoCodec(codec) {\n  return /avc1\\.[\\da-f]+/i.test(codec);\n};\n/**\n * Returns a list of gops in the buffer that have a pts value of 3 seconds or more in\n * front of current time.\n *\n * @param {Array} buffer\n *        The current buffer of gop information\n * @param {Number} currentTime\n *        The current time\n * @param {Double} mapping\n *        Offset to map display time to stream presentation time\n * @return {Array}\n *         List of gops considered safe to append over\n */\n\n\nvar gopsSafeToAlignWith = function gopsSafeToAlignWith(buffer, currentTime, mapping) {\n  if (typeof currentTime === 'undefined' || currentTime === null || !buffer.length) {\n    return [];\n  } // pts value for current time + 3 seconds to give a bit more wiggle room\n\n\n  var currentTimePts = Math.ceil((currentTime - mapping + 3) * 90000);\n  var i = void 0;\n\n  for (i = 0; i < buffer.length; i++) {\n    if (buffer[i].pts > currentTimePts) {\n      break;\n    }\n  }\n\n  return buffer.slice(i);\n};\n/**\n * Appends gop information (timing and byteLength) received by the transmuxer for the\n * gops appended in the last call to appendBuffer\n *\n * @param {Array} buffer\n *        The current buffer of gop information\n * @param {Array} gops\n *        List of new gop information\n * @param {boolean} replace\n *        If true, replace the buffer with the new gop information. If false, append the\n *        new gop information to the buffer in the right location of time.\n * @return {Array}\n *         Updated list of gop information\n */\n\n\nvar updateGopBuffer = function updateGopBuffer(buffer, gops, replace) {\n  if (!gops.length) {\n    return buffer;\n  }\n\n  if (replace) {\n    // If we are in safe append mode, then completely overwrite the gop buffer\n    // with the most recent appeneded data. This will make sure that when appending\n    // future segments, we only try to align with gops that are both ahead of current\n    // time and in the last segment appended.\n    return gops.slice();\n  }\n\n  var start = gops[0].pts;\n  var i = 0;\n\n  for (i; i < buffer.length; i++) {\n    if (buffer[i].pts >= start) {\n      break;\n    }\n  }\n\n  return buffer.slice(0, i).concat(gops);\n};\n/**\n * Removes gop information in buffer that overlaps with provided start and end\n *\n * @param {Array} buffer\n *        The current buffer of gop information\n * @param {Double} start\n *        position to start the remove at\n * @param {Double} end\n *        position to end the remove at\n * @param {Double} mapping\n *        Offset to map display time to stream presentation time\n */\n\n\nvar removeGopBuffer = function removeGopBuffer(buffer, start, end, mapping) {\n  var startPts = Math.ceil((start - mapping) * 90000);\n  var endPts = Math.ceil((end - mapping) * 90000);\n  var updatedBuffer = buffer.slice();\n  var i = buffer.length;\n\n  while (i--) {\n    if (buffer[i].pts <= endPts) {\n      break;\n    }\n  }\n\n  if (i === -1) {\n    // no removal because end of remove range is before start of buffer\n    return updatedBuffer;\n  }\n\n  var j = i + 1;\n\n  while (j--) {\n    if (buffer[j].pts <= startPts) {\n      break;\n    }\n  } // clamp remove range start to 0 index\n\n\n  j = Math.max(j, 0);\n  updatedBuffer.splice(j, i - j + 1);\n  return updatedBuffer;\n};\n\nvar buffered = function buffered(videoBuffer, audioBuffer, audioDisabled) {\n  var start = null;\n  var end = null;\n  var arity = 0;\n  var extents = [];\n  var ranges = []; // neither buffer has been created yet\n\n  if (!videoBuffer && !audioBuffer) {\n    return videojs$1.createTimeRange();\n  } // only one buffer is configured\n\n\n  if (!videoBuffer) {\n    return audioBuffer.buffered;\n  }\n\n  if (!audioBuffer) {\n    return videoBuffer.buffered;\n  } // both buffers are configured\n\n\n  if (audioDisabled) {\n    return videoBuffer.buffered;\n  } // both buffers are empty\n\n\n  if (videoBuffer.buffered.length === 0 && audioBuffer.buffered.length === 0) {\n    return videojs$1.createTimeRange();\n  } // Handle the case where we have both buffers and create an\n  // intersection of the two\n\n\n  var videoBuffered = videoBuffer.buffered;\n  var audioBuffered = audioBuffer.buffered;\n  var count = videoBuffered.length; // A) Gather up all start and end times\n\n  while (count--) {\n    extents.push({\n      time: videoBuffered.start(count),\n      type: 'start'\n    });\n    extents.push({\n      time: videoBuffered.end(count),\n      type: 'end'\n    });\n  }\n\n  count = audioBuffered.length;\n\n  while (count--) {\n    extents.push({\n      time: audioBuffered.start(count),\n      type: 'start'\n    });\n    extents.push({\n      time: audioBuffered.end(count),\n      type: 'end'\n    });\n  } // B) Sort them by time\n\n\n  extents.sort(function (a, b) {\n    return a.time - b.time;\n  }); // C) Go along one by one incrementing arity for start and decrementing\n  //    arity for ends\n\n  for (count = 0; count < extents.length; count++) {\n    if (extents[count].type === 'start') {\n      arity++; // D) If arity is ever incremented to 2 we are entering an\n      //    overlapping range\n\n      if (arity === 2) {\n        start = extents[count].time;\n      }\n    } else if (extents[count].type === 'end') {\n      arity--; // E) If arity is ever decremented to 1 we leaving an\n      //    overlapping range\n\n      if (arity === 1) {\n        end = extents[count].time;\n      }\n    } // F) Record overlapping ranges\n\n\n    if (start !== null && end !== null) {\n      ranges.push([start, end]);\n      start = null;\n      end = null;\n    }\n  }\n\n  return videojs$1.createTimeRanges(ranges);\n};\n/**\n * @file virtual-source-buffer.js\n */\n\n\nvar ONE_SECOND_IN_TS = 90000; // We create a wrapper around the SourceBuffer so that we can manage the\n// state of the `updating` property manually. We have to do this because\n// Firefox changes `updating` to false long before triggering `updateend`\n// events and that was causing strange problems in videojs-contrib-hls\n\nvar makeWrappedSourceBuffer = function makeWrappedSourceBuffer(mediaSource, mimeType) {\n  var sourceBuffer = mediaSource.addSourceBuffer(mimeType);\n  var wrapper = Object.create(null);\n  wrapper.updating = false;\n  wrapper.realBuffer_ = sourceBuffer;\n\n  var _loop = function _loop(key) {\n    if (typeof sourceBuffer[key] === 'function') {\n      wrapper[key] = function () {\n        return sourceBuffer[key].apply(sourceBuffer, arguments);\n      };\n    } else if (typeof wrapper[key] === 'undefined') {\n      Object.defineProperty(wrapper, key, {\n        get: function get$$1() {\n          return sourceBuffer[key];\n        },\n        set: function set$$1(v) {\n          return sourceBuffer[key] = v;\n        }\n      });\n    }\n  };\n\n  for (var key in sourceBuffer) {\n    _loop(key);\n  }\n\n  return wrapper;\n};\n/**\n * VirtualSourceBuffers exist so that we can transmux non native formats\n * into a native format, but keep the same api as a native source buffer.\n * It creates a transmuxer, that works in its own thread (a web worker) and\n * that transmuxer muxes the data into a native format. VirtualSourceBuffer will\n * then send all of that data to the naive sourcebuffer so that it is\n * indestinguishable from a natively supported format.\n *\n * @param {HtmlMediaSource} mediaSource the parent mediaSource\n * @param {Array} codecs array of codecs that we will be dealing with\n * @class VirtualSourceBuffer\n * @extends video.js.EventTarget\n */\n\n\nvar VirtualSourceBuffer = function (_videojs$EventTarget) {\n  inherits(VirtualSourceBuffer, _videojs$EventTarget);\n\n  function VirtualSourceBuffer(mediaSource, codecs) {\n    classCallCheck(this, VirtualSourceBuffer);\n\n    var _this = possibleConstructorReturn(this, (VirtualSourceBuffer.__proto__ || Object.getPrototypeOf(VirtualSourceBuffer)).call(this, videojs$1.EventTarget));\n\n    _this.timestampOffset_ = 0;\n    _this.pendingBuffers_ = [];\n    _this.bufferUpdating_ = false;\n    _this.mediaSource_ = mediaSource;\n    _this.codecs_ = codecs;\n    _this.audioCodec_ = null;\n    _this.videoCodec_ = null;\n    _this.audioDisabled_ = false;\n    _this.appendAudioInitSegment_ = true;\n    _this.gopBuffer_ = [];\n    _this.timeMapping_ = 0;\n    _this.safeAppend_ = videojs$1.browser.IE_VERSION >= 11;\n    var options = {\n      remux: false,\n      alignGopsAtEnd: _this.safeAppend_\n    };\n\n    _this.codecs_.forEach(function (codec) {\n      if (isAudioCodec(codec)) {\n        _this.audioCodec_ = codec;\n      } else if (isVideoCodec(codec)) {\n        _this.videoCodec_ = codec;\n      }\n    }); // append muxed segments to their respective native buffers as\n    // soon as they are available\n\n\n    _this.transmuxer_ = new TransmuxWorker();\n\n    _this.transmuxer_.postMessage({\n      action: 'init',\n      options: options\n    });\n\n    _this.transmuxer_.onmessage = function (event) {\n      if (event.data.action === 'data') {\n        return _this.data_(event);\n      }\n\n      if (event.data.action === 'done') {\n        return _this.done_(event);\n      }\n\n      if (event.data.action === 'gopInfo') {\n        return _this.appendGopInfo_(event);\n      }\n\n      if (event.data.action === 'videoSegmentTimingInfo') {\n        return _this.videoSegmentTimingInfo_(event.data.videoSegmentTimingInfo);\n      }\n    }; // this timestampOffset is a property with the side-effect of resetting\n    // baseMediaDecodeTime in the transmuxer on the setter\n\n\n    Object.defineProperty(_this, 'timestampOffset', {\n      get: function get$$1() {\n        return this.timestampOffset_;\n      },\n      set: function set$$1(val) {\n        if (typeof val === 'number' && val >= 0) {\n          this.timestampOffset_ = val;\n          this.appendAudioInitSegment_ = true; // reset gop buffer on timestampoffset as this signals a change in timeline\n\n          this.gopBuffer_.length = 0;\n          this.timeMapping_ = 0; // We have to tell the transmuxer to set the baseMediaDecodeTime to\n          // the desired timestampOffset for the next segment\n\n          this.transmuxer_.postMessage({\n            action: 'setTimestampOffset',\n            timestampOffset: val\n          });\n        }\n      }\n    }); // setting the append window affects both source buffers\n\n    Object.defineProperty(_this, 'appendWindowStart', {\n      get: function get$$1() {\n        return (this.videoBuffer_ || this.audioBuffer_).appendWindowStart;\n      },\n      set: function set$$1(start) {\n        if (this.videoBuffer_) {\n          this.videoBuffer_.appendWindowStart = start;\n        }\n\n        if (this.audioBuffer_) {\n          this.audioBuffer_.appendWindowStart = start;\n        }\n      }\n    }); // this buffer is \"updating\" if either of its native buffers are\n\n    Object.defineProperty(_this, 'updating', {\n      get: function get$$1() {\n        return !!(this.bufferUpdating_ || !this.audioDisabled_ && this.audioBuffer_ && this.audioBuffer_.updating || this.videoBuffer_ && this.videoBuffer_.updating);\n      }\n    }); // the buffered property is the intersection of the buffered\n    // ranges of the native source buffers\n\n    Object.defineProperty(_this, 'buffered', {\n      get: function get$$1() {\n        return buffered(this.videoBuffer_, this.audioBuffer_, this.audioDisabled_);\n      }\n    });\n    return _this;\n  }\n  /**\n   * When we get a data event from the transmuxer\n   * we call this function and handle the data that\n   * was sent to us\n   *\n   * @private\n   * @param {Event} event the data event from the transmuxer\n   */\n\n\n  createClass(VirtualSourceBuffer, [{\n    key: 'data_',\n    value: function data_(event) {\n      var segment = event.data.segment; // Cast ArrayBuffer to TypedArray\n\n      segment.data = new Uint8Array(segment.data, event.data.byteOffset, event.data.byteLength);\n      segment.initSegment = new Uint8Array(segment.initSegment.data, segment.initSegment.byteOffset, segment.initSegment.byteLength);\n      createTextTracksIfNecessary(this, this.mediaSource_, segment); // Add the segments to the pendingBuffers array\n\n      this.pendingBuffers_.push(segment);\n      return;\n    }\n    /**\n     * When we get a done event from the transmuxer\n     * we call this function and we process all\n     * of the pending data that we have been saving in the\n     * data_ function\n     *\n     * @private\n     * @param {Event} event the done event from the transmuxer\n     */\n\n  }, {\n    key: 'done_',\n    value: function done_(event) {\n      // Don't process and append data if the mediaSource is closed\n      if (this.mediaSource_.readyState === 'closed') {\n        this.pendingBuffers_.length = 0;\n        return;\n      } // All buffers should have been flushed from the muxer\n      // start processing anything we have received\n\n\n      this.processPendingSegments_();\n      return;\n    }\n  }, {\n    key: 'videoSegmentTimingInfo_',\n    value: function videoSegmentTimingInfo_(timingInfo) {\n      var timingInfoInSeconds = {\n        start: {\n          decode: timingInfo.start.dts / ONE_SECOND_IN_TS,\n          presentation: timingInfo.start.pts / ONE_SECOND_IN_TS\n        },\n        end: {\n          decode: timingInfo.end.dts / ONE_SECOND_IN_TS,\n          presentation: timingInfo.end.pts / ONE_SECOND_IN_TS\n        },\n        baseMediaDecodeTime: timingInfo.baseMediaDecodeTime / ONE_SECOND_IN_TS\n      };\n\n      if (timingInfo.prependedContentDuration) {\n        timingInfoInSeconds.prependedContentDuration = timingInfo.prependedContentDuration / ONE_SECOND_IN_TS;\n      }\n\n      this.trigger({\n        type: 'videoSegmentTimingInfo',\n        videoSegmentTimingInfo: timingInfoInSeconds\n      });\n    }\n    /**\n     * Create our internal native audio/video source buffers and add\n     * event handlers to them with the following conditions:\n     * 1. they do not already exist on the mediaSource\n     * 2. this VSB has a codec for them\n     *\n     * @private\n     */\n\n  }, {\n    key: 'createRealSourceBuffers_',\n    value: function createRealSourceBuffers_() {\n      var _this2 = this;\n\n      var types = ['audio', 'video'];\n      types.forEach(function (type) {\n        // Don't create a SourceBuffer of this type if we don't have a\n        // codec for it\n        if (!_this2[type + 'Codec_']) {\n          return;\n        } // Do nothing if a SourceBuffer of this type already exists\n\n\n        if (_this2[type + 'Buffer_']) {\n          return;\n        }\n\n        var buffer = null; // If the mediasource already has a SourceBuffer for the codec\n        // use that\n\n        if (_this2.mediaSource_[type + 'Buffer_']) {\n          buffer = _this2.mediaSource_[type + 'Buffer_']; // In multiple audio track cases, the audio source buffer is disabled\n          // on the main VirtualSourceBuffer by the HTMLMediaSource much earlier\n          // than createRealSourceBuffers_ is called to create the second\n          // VirtualSourceBuffer because that happens as a side-effect of\n          // videojs-contrib-hls starting the audioSegmentLoader. As a result,\n          // the audioBuffer is essentially \"ownerless\" and no one will toggle\n          // the `updating` state back to false once the `updateend` event is received\n          //\n          // Setting `updating` to false manually will work around this\n          // situation and allow work to continue\n\n          buffer.updating = false;\n        } else {\n          var codecProperty = type + 'Codec_';\n          var mimeType = type + '/mp4;codecs=\"' + _this2[codecProperty] + '\"';\n          buffer = makeWrappedSourceBuffer(_this2.mediaSource_.nativeMediaSource_, mimeType);\n          _this2.mediaSource_[type + 'Buffer_'] = buffer;\n        }\n\n        _this2[type + 'Buffer_'] = buffer; // Wire up the events to the SourceBuffer\n\n        ['update', 'updatestart', 'updateend'].forEach(function (event) {\n          buffer.addEventListener(event, function () {\n            // if audio is disabled\n            if (type === 'audio' && _this2.audioDisabled_) {\n              return;\n            }\n\n            if (event === 'updateend') {\n              _this2[type + 'Buffer_'].updating = false;\n            }\n\n            var shouldTrigger = types.every(function (t) {\n              // skip checking audio's updating status if audio\n              // is not enabled\n              if (t === 'audio' && _this2.audioDisabled_) {\n                return true;\n              } // if the other type if updating we don't trigger\n\n\n              if (type !== t && _this2[t + 'Buffer_'] && _this2[t + 'Buffer_'].updating) {\n                return false;\n              }\n\n              return true;\n            });\n\n            if (shouldTrigger) {\n              return _this2.trigger(event);\n            }\n          });\n        });\n      });\n    }\n    /**\n     * Emulate the native mediasource function, but our function will\n     * send all of the proposed segments to the transmuxer so that we\n     * can transmux them before we append them to our internal\n     * native source buffers in the correct format.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendBuffer\n     * @param {Uint8Array} segment the segment to append to the buffer\n     */\n\n  }, {\n    key: 'appendBuffer',\n    value: function appendBuffer(segment) {\n      // Start the internal \"updating\" state\n      this.bufferUpdating_ = true;\n\n      if (this.audioBuffer_ && this.audioBuffer_.buffered.length) {\n        var audioBuffered = this.audioBuffer_.buffered;\n        this.transmuxer_.postMessage({\n          action: 'setAudioAppendStart',\n          appendStart: audioBuffered.end(audioBuffered.length - 1)\n        });\n      }\n\n      if (this.videoBuffer_) {\n        this.transmuxer_.postMessage({\n          action: 'alignGopsWith',\n          gopsToAlignWith: gopsSafeToAlignWith(this.gopBuffer_, this.mediaSource_.player_ ? this.mediaSource_.player_.currentTime() : null, this.timeMapping_)\n        });\n      }\n\n      this.transmuxer_.postMessage({\n        action: 'push',\n        // Send the typed-array of data as an ArrayBuffer so that\n        // it can be sent as a \"Transferable\" and avoid the costly\n        // memory copy\n        data: segment.buffer,\n        // To recreate the original typed-array, we need information\n        // about what portion of the ArrayBuffer it was a view into\n        byteOffset: segment.byteOffset,\n        byteLength: segment.byteLength\n      }, [segment.buffer]);\n      this.transmuxer_.postMessage({\n        action: 'flush'\n      });\n    }\n    /**\n     * Appends gop information (timing and byteLength) received by the transmuxer for the\n     * gops appended in the last call to appendBuffer\n     *\n     * @param {Event} event\n     *        The gopInfo event from the transmuxer\n     * @param {Array} event.data.gopInfo\n     *        List of gop info to append\n     */\n\n  }, {\n    key: 'appendGopInfo_',\n    value: function appendGopInfo_(event) {\n      this.gopBuffer_ = updateGopBuffer(this.gopBuffer_, event.data.gopInfo, this.safeAppend_);\n    }\n    /**\n     * Emulate the native mediasource function and remove parts\n     * of the buffer from any of our internal buffers that exist\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/remove\n     * @param {Double} start position to start the remove at\n     * @param {Double} end position to end the remove at\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      if (this.videoBuffer_) {\n        this.videoBuffer_.updating = true;\n        this.videoBuffer_.remove(start, end);\n        this.gopBuffer_ = removeGopBuffer(this.gopBuffer_, start, end, this.timeMapping_);\n      }\n\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.audioBuffer_.updating = true;\n        this.audioBuffer_.remove(start, end);\n      } // Remove Metadata Cues (id3)\n\n\n      removeCuesFromTrack(start, end, this.metadataTrack_); // Remove Any Captions\n\n      if (this.inbandTextTracks_) {\n        for (var track in this.inbandTextTracks_) {\n          removeCuesFromTrack(start, end, this.inbandTextTracks_[track]);\n        }\n      }\n    }\n    /**\n     * Process any segments that the muxer has output\n     * Concatenate segments together based on type and append them into\n     * their respective sourceBuffers\n     *\n     * @private\n     */\n\n  }, {\n    key: 'processPendingSegments_',\n    value: function processPendingSegments_() {\n      var sortedSegments = {\n        video: {\n          segments: [],\n          bytes: 0\n        },\n        audio: {\n          segments: [],\n          bytes: 0\n        },\n        captions: [],\n        metadata: []\n      }; // Sort segments into separate video/audio arrays and\n      // keep track of their total byte lengths\n\n      sortedSegments = this.pendingBuffers_.reduce(function (segmentObj, segment) {\n        var type = segment.type;\n        var data = segment.data;\n        var initSegment = segment.initSegment;\n        segmentObj[type].segments.push(data);\n        segmentObj[type].bytes += data.byteLength;\n        segmentObj[type].initSegment = initSegment; // Gather any captions into a single array\n\n        if (segment.captions) {\n          segmentObj.captions = segmentObj.captions.concat(segment.captions);\n        }\n\n        if (segment.info) {\n          segmentObj[type].info = segment.info;\n        } // Gather any metadata into a single array\n\n\n        if (segment.metadata) {\n          segmentObj.metadata = segmentObj.metadata.concat(segment.metadata);\n        }\n\n        return segmentObj;\n      }, sortedSegments); // Create the real source buffers if they don't exist by now since we\n      // finally are sure what tracks are contained in the source\n\n      if (!this.videoBuffer_ && !this.audioBuffer_) {\n        // Remove any codecs that may have been specified by default but\n        // are no longer applicable now\n        if (sortedSegments.video.bytes === 0) {\n          this.videoCodec_ = null;\n        }\n\n        if (sortedSegments.audio.bytes === 0) {\n          this.audioCodec_ = null;\n        }\n\n        this.createRealSourceBuffers_();\n      }\n\n      if (sortedSegments.audio.info) {\n        this.mediaSource_.trigger({\n          type: 'audioinfo',\n          info: sortedSegments.audio.info\n        });\n      }\n\n      if (sortedSegments.video.info) {\n        this.mediaSource_.trigger({\n          type: 'videoinfo',\n          info: sortedSegments.video.info\n        });\n      }\n\n      if (this.appendAudioInitSegment_) {\n        if (!this.audioDisabled_ && this.audioBuffer_) {\n          sortedSegments.audio.segments.unshift(sortedSegments.audio.initSegment);\n          sortedSegments.audio.bytes += sortedSegments.audio.initSegment.byteLength;\n        }\n\n        this.appendAudioInitSegment_ = false;\n      }\n\n      var triggerUpdateend = false; // Merge multiple video and audio segments into one and append\n\n      if (this.videoBuffer_ && sortedSegments.video.bytes) {\n        sortedSegments.video.segments.unshift(sortedSegments.video.initSegment);\n        sortedSegments.video.bytes += sortedSegments.video.initSegment.byteLength;\n        this.concatAndAppendSegments_(sortedSegments.video, this.videoBuffer_);\n      } else if (this.videoBuffer_ && (this.audioDisabled_ || !this.audioBuffer_)) {\n        // The transmuxer did not return any bytes of video, meaning it was all trimmed\n        // for gop alignment. Since we have a video buffer and audio is disabled, updateend\n        // will never be triggered by this source buffer, which will cause contrib-hls\n        // to be stuck forever waiting for updateend. If audio is not disabled, updateend\n        // will be triggered by the audio buffer, which will be sent upwards since the video\n        // buffer will not be in an updating state.\n        triggerUpdateend = true;\n      } // Add text-track data for all\n\n\n      addTextTrackData(this, sortedSegments.captions, sortedSegments.metadata);\n\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.concatAndAppendSegments_(sortedSegments.audio, this.audioBuffer_);\n      }\n\n      this.pendingBuffers_.length = 0;\n\n      if (triggerUpdateend) {\n        this.trigger('updateend');\n      } // We are no longer in the internal \"updating\" state\n\n\n      this.bufferUpdating_ = false;\n    }\n    /**\n     * Combine all segments into a single Uint8Array and then append them\n     * to the destination buffer\n     *\n     * @param {Object} segmentObj\n     * @param {SourceBuffer} destinationBuffer native source buffer to append data to\n     * @private\n     */\n\n  }, {\n    key: 'concatAndAppendSegments_',\n    value: function concatAndAppendSegments_(segmentObj, destinationBuffer) {\n      var offset = 0;\n      var tempBuffer = void 0;\n\n      if (segmentObj.bytes) {\n        tempBuffer = new Uint8Array(segmentObj.bytes); // Combine the individual segments into one large typed-array\n\n        segmentObj.segments.forEach(function (segment) {\n          tempBuffer.set(segment, offset);\n          offset += segment.byteLength;\n        });\n\n        try {\n          destinationBuffer.updating = true;\n          destinationBuffer.appendBuffer(tempBuffer);\n        } catch (error) {\n          if (this.mediaSource_.player_) {\n            this.mediaSource_.player_.error({\n              code: -3,\n              type: 'APPEND_BUFFER_ERR',\n              message: error.message,\n              originalError: error\n            });\n          }\n        }\n      }\n    }\n    /**\n     * Emulate the native mediasource function. abort any soureBuffer\n     * actions and throw out any un-appended data.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/abort\n     */\n\n  }, {\n    key: 'abort',\n    value: function abort() {\n      if (this.videoBuffer_) {\n        this.videoBuffer_.abort();\n      }\n\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.audioBuffer_.abort();\n      }\n\n      if (this.transmuxer_) {\n        this.transmuxer_.postMessage({\n          action: 'reset'\n        });\n      }\n\n      this.pendingBuffers_.length = 0;\n      this.bufferUpdating_ = false;\n    }\n  }]);\n  return VirtualSourceBuffer;\n}(videojs$1.EventTarget);\n/**\n * @file html-media-source.js\n */\n\n/**\n * Our MediaSource implementation in HTML, mimics native\n * MediaSource where/if possible.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource\n * @class HtmlMediaSource\n * @extends videojs.EventTarget\n */\n\n\nvar HtmlMediaSource = function (_videojs$EventTarget) {\n  inherits(HtmlMediaSource, _videojs$EventTarget);\n\n  function HtmlMediaSource() {\n    classCallCheck(this, HtmlMediaSource);\n\n    var _this = possibleConstructorReturn(this, (HtmlMediaSource.__proto__ || Object.getPrototypeOf(HtmlMediaSource)).call(this));\n\n    var property = void 0;\n    _this.nativeMediaSource_ = new window$1.MediaSource(); // delegate to the native MediaSource's methods by default\n\n    for (property in _this.nativeMediaSource_) {\n      if (!(property in HtmlMediaSource.prototype) && typeof _this.nativeMediaSource_[property] === 'function') {\n        _this[property] = _this.nativeMediaSource_[property].bind(_this.nativeMediaSource_);\n      }\n    } // emulate `duration` and `seekable` until seeking can be\n    // handled uniformly for live streams\n    // see https://github.com/w3c/media-source/issues/5\n\n\n    _this.duration_ = NaN;\n    Object.defineProperty(_this, 'duration', {\n      get: function get$$1() {\n        if (this.duration_ === Infinity) {\n          return this.duration_;\n        }\n\n        return this.nativeMediaSource_.duration;\n      },\n      set: function set$$1(duration) {\n        this.duration_ = duration;\n\n        if (duration !== Infinity) {\n          this.nativeMediaSource_.duration = duration;\n          return;\n        }\n      }\n    });\n    Object.defineProperty(_this, 'seekable', {\n      get: function get$$1() {\n        if (this.duration_ === Infinity) {\n          return videojs$1.createTimeRanges([[0, this.nativeMediaSource_.duration]]);\n        }\n\n        return this.nativeMediaSource_.seekable;\n      }\n    });\n    Object.defineProperty(_this, 'readyState', {\n      get: function get$$1() {\n        return this.nativeMediaSource_.readyState;\n      }\n    });\n    Object.defineProperty(_this, 'activeSourceBuffers', {\n      get: function get$$1() {\n        return this.activeSourceBuffers_;\n      }\n    }); // the list of virtual and native SourceBuffers created by this\n    // MediaSource\n\n    _this.sourceBuffers = [];\n    _this.activeSourceBuffers_ = [];\n    /**\n     * update the list of active source buffers based upon various\n     * imformation from HLS and video.js\n     *\n     * @private\n     */\n\n    _this.updateActiveSourceBuffers_ = function () {\n      // Retain the reference but empty the array\n      _this.activeSourceBuffers_.length = 0; // If there is only one source buffer, then it will always be active and audio will\n      // be disabled based on the codec of the source buffer\n\n      if (_this.sourceBuffers.length === 1) {\n        var sourceBuffer = _this.sourceBuffers[0];\n        sourceBuffer.appendAudioInitSegment_ = true;\n        sourceBuffer.audioDisabled_ = !sourceBuffer.audioCodec_;\n\n        _this.activeSourceBuffers_.push(sourceBuffer);\n\n        return;\n      } // There are 2 source buffers, a combined (possibly video only) source buffer and\n      // and an audio only source buffer.\n      // By default, the audio in the combined virtual source buffer is enabled\n      // and the audio-only source buffer (if it exists) is disabled.\n\n\n      var disableCombined = false;\n      var disableAudioOnly = true; // TODO: maybe we can store the sourcebuffers on the track objects?\n      // safari may do something like this\n\n      for (var i = 0; i < _this.player_.audioTracks().length; i++) {\n        var track = _this.player_.audioTracks()[i];\n\n        if (track.enabled && track.kind !== 'main') {\n          // The enabled track is an alternate audio track so disable the audio in\n          // the combined source buffer and enable the audio-only source buffer.\n          disableCombined = true;\n          disableAudioOnly = false;\n          break;\n        }\n      }\n\n      _this.sourceBuffers.forEach(function (sourceBuffer, index) {\n        /* eslinst-disable */\n        // TODO once codecs are required, we can switch to using the codecs to determine\n        //      what stream is the video stream, rather than relying on videoTracks\n\n        /* eslinst-enable */\n        sourceBuffer.appendAudioInitSegment_ = true;\n\n        if (sourceBuffer.videoCodec_ && sourceBuffer.audioCodec_) {\n          // combined\n          sourceBuffer.audioDisabled_ = disableCombined;\n        } else if (sourceBuffer.videoCodec_ && !sourceBuffer.audioCodec_) {\n          // If the \"combined\" source buffer is video only, then we do not want\n          // disable the audio-only source buffer (this is mostly for demuxed\n          // audio and video hls)\n          sourceBuffer.audioDisabled_ = true;\n          disableAudioOnly = false;\n        } else if (!sourceBuffer.videoCodec_ && sourceBuffer.audioCodec_) {\n          // audio only\n          // In the case of audio only with alternate audio and disableAudioOnly is true\n          // this means we want to disable the audio on the alternate audio sourcebuffer\n          // but not the main \"combined\" source buffer. The \"combined\" source buffer is\n          // always at index 0, so this ensures audio won't be disabled in both source\n          // buffers.\n          sourceBuffer.audioDisabled_ = index ? disableAudioOnly : !disableAudioOnly;\n\n          if (sourceBuffer.audioDisabled_) {\n            return;\n          }\n        }\n\n        _this.activeSourceBuffers_.push(sourceBuffer);\n      });\n    };\n\n    _this.onPlayerMediachange_ = function () {\n      _this.sourceBuffers.forEach(function (sourceBuffer) {\n        sourceBuffer.appendAudioInitSegment_ = true;\n      });\n    };\n\n    _this.onHlsReset_ = function () {\n      _this.sourceBuffers.forEach(function (sourceBuffer) {\n        if (sourceBuffer.transmuxer_) {\n          sourceBuffer.transmuxer_.postMessage({\n            action: 'resetCaptions'\n          });\n        }\n      });\n    };\n\n    _this.onHlsSegmentTimeMapping_ = function (event) {\n      _this.sourceBuffers.forEach(function (buffer) {\n        return buffer.timeMapping_ = event.mapping;\n      });\n    }; // Re-emit MediaSource events on the polyfill\n\n\n    ['sourceopen', 'sourceclose', 'sourceended'].forEach(function (eventName) {\n      this.nativeMediaSource_.addEventListener(eventName, this.trigger.bind(this));\n    }, _this); // capture the associated player when the MediaSource is\n    // successfully attached\n\n    _this.on('sourceopen', function (event) {\n      // Get the player this MediaSource is attached to\n      var video = document.querySelector('[src=\"' + _this.url_ + '\"]');\n\n      if (!video) {\n        return;\n      }\n\n      _this.player_ = videojs$1(video.parentNode);\n\n      if (!_this.player_) {\n        return;\n      } // hls-reset is fired by videojs.Hls on to the tech after the main SegmentLoader\n      // resets its state and flushes the buffer\n\n\n      _this.player_.tech_.on('hls-reset', _this.onHlsReset_); // hls-segment-time-mapping is fired by videojs.Hls on to the tech after the main\n      // SegmentLoader inspects an MTS segment and has an accurate stream to display\n      // time mapping\n\n\n      _this.player_.tech_.on('hls-segment-time-mapping', _this.onHlsSegmentTimeMapping_);\n\n      if (_this.player_.audioTracks && _this.player_.audioTracks()) {\n        _this.player_.audioTracks().on('change', _this.updateActiveSourceBuffers_);\n\n        _this.player_.audioTracks().on('addtrack', _this.updateActiveSourceBuffers_);\n\n        _this.player_.audioTracks().on('removetrack', _this.updateActiveSourceBuffers_);\n      }\n\n      _this.player_.on('mediachange', _this.onPlayerMediachange_);\n    });\n\n    _this.on('sourceended', function (event) {\n      var duration = durationOfVideo(_this.duration);\n\n      for (var i = 0; i < _this.sourceBuffers.length; i++) {\n        var sourcebuffer = _this.sourceBuffers[i];\n        var cues = sourcebuffer.metadataTrack_ && sourcebuffer.metadataTrack_.cues;\n\n        if (cues && cues.length) {\n          cues[cues.length - 1].endTime = duration;\n        }\n      }\n    }); // explicitly terminate any WebWorkers that were created\n    // by SourceHandlers\n\n\n    _this.on('sourceclose', function (event) {\n      this.sourceBuffers.forEach(function (sourceBuffer) {\n        if (sourceBuffer.transmuxer_) {\n          sourceBuffer.transmuxer_.terminate();\n        }\n      });\n      this.sourceBuffers.length = 0;\n\n      if (!this.player_) {\n        return;\n      }\n\n      if (this.player_.audioTracks && this.player_.audioTracks()) {\n        this.player_.audioTracks().off('change', this.updateActiveSourceBuffers_);\n        this.player_.audioTracks().off('addtrack', this.updateActiveSourceBuffers_);\n        this.player_.audioTracks().off('removetrack', this.updateActiveSourceBuffers_);\n      } // We can only change this if the player hasn't been disposed of yet\n      // because `off` eventually tries to use the el_ property. If it has\n      // been disposed of, then don't worry about it because there are no\n      // event handlers left to unbind anyway\n\n\n      if (this.player_.el_) {\n        this.player_.off('mediachange', this.onPlayerMediachange_);\n      }\n\n      if (this.player_.tech_ && this.player_.tech_.el_) {\n        this.player_.tech_.off('hls-reset', this.onHlsReset_);\n        this.player_.tech_.off('hls-segment-time-mapping', this.onHlsSegmentTimeMapping_);\n      }\n    });\n\n    return _this;\n  }\n  /**\n   * Add a range that that can now be seeked to.\n   *\n   * @param {Double} start where to start the addition\n   * @param {Double} end where to end the addition\n   * @private\n   */\n\n\n  createClass(HtmlMediaSource, [{\n    key: 'addSeekableRange_',\n    value: function addSeekableRange_(start, end) {\n      var error = void 0;\n\n      if (this.duration !== Infinity) {\n        error = new Error('MediaSource.addSeekableRange() can only be invoked ' + 'when the duration is Infinity');\n        error.name = 'InvalidStateError';\n        error.code = 11;\n        throw error;\n      }\n\n      if (end > this.nativeMediaSource_.duration || isNaN(this.nativeMediaSource_.duration)) {\n        this.nativeMediaSource_.duration = end;\n      }\n    }\n    /**\n     * Add a source buffer to the media source.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/addSourceBuffer\n     * @param {String} type the content-type of the content\n     * @return {Object} the created source buffer\n     */\n\n  }, {\n    key: 'addSourceBuffer',\n    value: function addSourceBuffer(type) {\n      var buffer = void 0;\n      var parsedType = parseContentType(type); // Create a VirtualSourceBuffer to transmux MPEG-2 transport\n      // stream segments into fragmented MP4s\n\n      if (/^(video|audio)\\/mp2t$/i.test(parsedType.type)) {\n        var codecs = [];\n\n        if (parsedType.parameters && parsedType.parameters.codecs) {\n          codecs = parsedType.parameters.codecs.split(',');\n          codecs = translateLegacyCodecs(codecs);\n          codecs = codecs.filter(function (codec) {\n            return isAudioCodec(codec) || isVideoCodec(codec);\n          });\n        }\n\n        if (codecs.length === 0) {\n          codecs = ['avc1.4d400d', 'mp4a.40.2'];\n        }\n\n        buffer = new VirtualSourceBuffer(this, codecs);\n\n        if (this.sourceBuffers.length !== 0) {\n          // If another VirtualSourceBuffer already exists, then we are creating a\n          // SourceBuffer for an alternate audio track and therefore we know that\n          // the source has both an audio and video track.\n          // That means we should trigger the manual creation of the real\n          // SourceBuffers instead of waiting for the transmuxer to return data\n          this.sourceBuffers[0].createRealSourceBuffers_();\n          buffer.createRealSourceBuffers_(); // Automatically disable the audio on the first source buffer if\n          // a second source buffer is ever created\n\n          this.sourceBuffers[0].audioDisabled_ = true;\n        }\n      } else {\n        // delegate to the native implementation\n        buffer = this.nativeMediaSource_.addSourceBuffer(type);\n      }\n\n      this.sourceBuffers.push(buffer);\n      return buffer;\n    }\n  }]);\n  return HtmlMediaSource;\n}(videojs$1.EventTarget);\n/**\n * @file videojs-contrib-media-sources.js\n */\n\n\nvar urlCount = 0; // ------------\n// Media Source\n// ------------\n// store references to the media sources so they can be connected\n// to a video element (a swf object)\n// TODO: can we store this somewhere local to this module?\n\nvideojs$1.mediaSources = {};\n/**\n * Provide a method for a swf object to notify JS that a\n * media source is now open.\n *\n * @param {String} msObjectURL string referencing the MSE Object URL\n * @param {String} swfId the swf id\n */\n\nvar open = function open(msObjectURL, swfId) {\n  var mediaSource = videojs$1.mediaSources[msObjectURL];\n\n  if (mediaSource) {\n    mediaSource.trigger({\n      type: 'sourceopen',\n      swfId: swfId\n    });\n  } else {\n    throw new Error('Media Source not found (Video.js)');\n  }\n};\n/**\n * Check to see if the native MediaSource object exists and supports\n * an MP4 container with both H.264 video and AAC-LC audio.\n *\n * @return {Boolean} if  native media sources are supported\n */\n\n\nvar supportsNativeMediaSources = function supportsNativeMediaSources() {\n  return !!window$1.MediaSource && !!window$1.MediaSource.isTypeSupported && window$1.MediaSource.isTypeSupported('video/mp4;codecs=\"avc1.4d400d,mp4a.40.2\"');\n};\n/**\n * An emulation of the MediaSource API so that we can support\n * native and non-native functionality. returns an instance of\n * HtmlMediaSource.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/MediaSource\n */\n\n\nvar MediaSource = function MediaSource() {\n  this.MediaSource = {\n    open: open,\n    supportsNativeMediaSources: supportsNativeMediaSources\n  };\n\n  if (supportsNativeMediaSources()) {\n    return new HtmlMediaSource();\n  }\n\n  throw new Error('Cannot use create a virtual MediaSource for this video');\n};\n\nMediaSource.open = open;\nMediaSource.supportsNativeMediaSources = supportsNativeMediaSources;\n/**\n * A wrapper around the native URL for our MSE object\n * implementation, this object is exposed under videojs.URL\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/URL/URL\n */\n\nvar URL$1 = {\n  /**\n   * A wrapper around the native createObjectURL for our objects.\n   * This function maps a native or emulated mediaSource to a blob\n   * url so that it can be loaded into video.js\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL\n   * @param {MediaSource} object the object to create a blob url to\n   */\n  createObjectURL: function createObjectURL(object) {\n    var objectUrlPrefix = 'blob:vjs-media-source/';\n    var url = void 0; // use the native MediaSource to generate an object URL\n\n    if (object instanceof HtmlMediaSource) {\n      url = window$1.URL.createObjectURL(object.nativeMediaSource_);\n      object.url_ = url;\n      return url;\n    } // if the object isn't an emulated MediaSource, delegate to the\n    // native implementation\n\n\n    if (!(object instanceof HtmlMediaSource)) {\n      url = window$1.URL.createObjectURL(object);\n      object.url_ = url;\n      return url;\n    } // build a URL that can be used to map back to the emulated\n    // MediaSource\n\n\n    url = objectUrlPrefix + urlCount;\n    urlCount++; // setup the mapping back to object\n\n    videojs$1.mediaSources[url] = object;\n    return url;\n  }\n};\nvideojs$1.MediaSource = MediaSource;\nvideojs$1.URL = URL$1;\nvar EventTarget$1$1 = videojs$1.EventTarget,\n    mergeOptions$2 = videojs$1.mergeOptions;\n/**\n * Returns a new master manifest that is the result of merging an updated master manifest\n * into the original version.\n *\n * @param {Object} oldMaster\n *        The old parsed mpd object\n * @param {Object} newMaster\n *        The updated parsed mpd object\n * @return {Object}\n *         A new object representing the original master manifest with the updated media\n *         playlists merged in\n */\n\nvar updateMaster$1 = function updateMaster$$1(oldMaster, newMaster) {\n  var noChanges = void 0;\n  var update = mergeOptions$2(oldMaster, {\n    // These are top level properties that can be updated\n    duration: newMaster.duration,\n    minimumUpdatePeriod: newMaster.minimumUpdatePeriod\n  }); // First update the playlists in playlist list\n\n  for (var i = 0; i < newMaster.playlists.length; i++) {\n    var playlistUpdate = updateMaster(update, newMaster.playlists[i]);\n\n    if (playlistUpdate) {\n      update = playlistUpdate;\n    } else {\n      noChanges = true;\n    }\n  } // Then update media group playlists\n\n\n  forEachMediaGroup(newMaster, function (properties, type, group, label) {\n    if (properties.playlists && properties.playlists.length) {\n      var uri = properties.playlists[0].uri;\n\n      var _playlistUpdate = updateMaster(update, properties.playlists[0]);\n\n      if (_playlistUpdate) {\n        update = _playlistUpdate; // update the playlist reference within media groups\n\n        update.mediaGroups[type][group][label].playlists[0] = update.playlists[uri];\n        noChanges = false;\n      }\n    }\n  });\n\n  if (noChanges) {\n    return null;\n  }\n\n  return update;\n};\n\nvar DashPlaylistLoader = function (_EventTarget) {\n  inherits(DashPlaylistLoader, _EventTarget); // DashPlaylistLoader must accept either a src url or a playlist because subsequent\n  // playlist loader setups from media groups will expect to be able to pass a playlist\n  // (since there aren't external URLs to media playlists with DASH)\n\n  function DashPlaylistLoader(srcUrlOrPlaylist, hls) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var masterPlaylistLoader = arguments[3];\n    classCallCheck(this, DashPlaylistLoader);\n\n    var _this = possibleConstructorReturn(this, (DashPlaylistLoader.__proto__ || Object.getPrototypeOf(DashPlaylistLoader)).call(this));\n\n    var _options$withCredenti = options.withCredentials,\n        withCredentials = _options$withCredenti === undefined ? false : _options$withCredenti,\n        _options$handleManife = options.handleManifestRedirects,\n        handleManifestRedirects = _options$handleManife === undefined ? false : _options$handleManife;\n    _this.hls_ = hls;\n    _this.withCredentials = withCredentials;\n    _this.handleManifestRedirects = handleManifestRedirects;\n\n    if (!srcUrlOrPlaylist) {\n      throw new Error('A non-empty playlist URL or playlist is required');\n    } // event naming?\n\n\n    _this.on('minimumUpdatePeriod', function () {\n      _this.refreshXml_();\n    }); // live playlist staleness timeout\n\n\n    _this.on('mediaupdatetimeout', function () {\n      _this.refreshMedia_();\n    });\n\n    _this.state = 'HAVE_NOTHING';\n    _this.loadedPlaylists_ = {}; // initialize the loader state\n    // The masterPlaylistLoader will be created with a string\n\n    if (typeof srcUrlOrPlaylist === 'string') {\n      _this.srcUrl = srcUrlOrPlaylist;\n      return possibleConstructorReturn(_this);\n    }\n\n    _this.setupChildLoader(masterPlaylistLoader, srcUrlOrPlaylist);\n\n    return _this;\n  }\n\n  createClass(DashPlaylistLoader, [{\n    key: 'setupChildLoader',\n    value: function setupChildLoader(masterPlaylistLoader, playlist) {\n      this.masterPlaylistLoader_ = masterPlaylistLoader;\n      this.childPlaylist_ = playlist;\n    }\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.stopRequest();\n      this.loadedPlaylists_ = {};\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n    }\n  }, {\n    key: 'hasPendingRequest',\n    value: function hasPendingRequest() {\n      return this.request || this.mediaRequest_;\n    }\n  }, {\n    key: 'stopRequest',\n    value: function stopRequest() {\n      if (this.request) {\n        var oldRequest = this.request;\n        this.request = null;\n        oldRequest.onreadystatechange = null;\n        oldRequest.abort();\n      }\n    }\n  }, {\n    key: 'media',\n    value: function media(playlist) {\n      // getter\n      if (!playlist) {\n        return this.media_;\n      } // setter\n\n\n      if (this.state === 'HAVE_NOTHING') {\n        throw new Error('Cannot switch media playlist from ' + this.state);\n      }\n\n      var startingState = this.state; // find the playlist object if the target playlist has been specified by URI\n\n      if (typeof playlist === 'string') {\n        if (!this.master.playlists[playlist]) {\n          throw new Error('Unknown playlist URI: ' + playlist);\n        }\n\n        playlist = this.master.playlists[playlist];\n      }\n\n      var mediaChange = !this.media_ || playlist.uri !== this.media_.uri; // switch to previously loaded playlists immediately\n\n      if (mediaChange && this.loadedPlaylists_[playlist.uri] && this.loadedPlaylists_[playlist.uri].endList) {\n        this.state = 'HAVE_METADATA';\n        this.media_ = playlist; // trigger media change if the active media has been updated\n\n        if (mediaChange) {\n          this.trigger('mediachanging');\n          this.trigger('mediachange');\n        }\n\n        return;\n      } // switching to the active playlist is a no-op\n\n\n      if (!mediaChange) {\n        return;\n      } // switching from an already loaded playlist\n\n\n      if (this.media_) {\n        this.trigger('mediachanging');\n      } // TODO: check for sidx here\n      // Continue asynchronously if there is no sidx\n      // wait one tick to allow haveMaster to run first on a child loader\n\n\n      this.mediaRequest_ = window$1.setTimeout(this.haveMetadata.bind(this, {\n        startingState: startingState,\n        playlist: playlist\n      }), 0);\n    }\n  }, {\n    key: 'haveMetadata',\n    value: function haveMetadata(_ref) {\n      var startingState = _ref.startingState,\n          playlist = _ref.playlist;\n      this.state = 'HAVE_METADATA';\n      this.media_ = playlist;\n      this.loadedPlaylists_[playlist.uri] = playlist;\n      this.mediaRequest_ = null; // This will trigger loadedplaylist\n\n      this.refreshMedia_(); // fire loadedmetadata the first time a media playlist is loaded\n      // to resolve setup of media groups\n\n      if (startingState === 'HAVE_MASTER') {\n        this.trigger('loadedmetadata');\n      } else {\n        // trigger media change if the active media has been updated\n        this.trigger('mediachange');\n      }\n    }\n  }, {\n    key: 'pause',\n    value: function pause() {\n      this.stopRequest();\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n\n      if (this.state === 'HAVE_NOTHING') {\n        // If we pause the loader before any data has been retrieved, its as if we never\n        // started, so reset to an unstarted state.\n        this.started = false;\n      }\n    }\n  }, {\n    key: 'load',\n    value: function load(isFinalRendition) {\n      var _this2 = this;\n\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n      var media = this.media();\n\n      if (isFinalRendition) {\n        var delay = media ? media.targetDuration / 2 * 1000 : 5 * 1000;\n        this.mediaUpdateTimeout = window$1.setTimeout(function () {\n          return _this2.load();\n        }, delay);\n        return;\n      } // because the playlists are internal to the manifest, load should either load the\n      // main manifest, or do nothing but trigger an event\n\n\n      if (!this.started) {\n        this.start();\n        return;\n      }\n\n      this.trigger('loadedplaylist');\n    }\n    /**\n     * Parses the master xml string and updates playlist uri references\n     *\n     * @return {Object}\n     *         The parsed mpd manifest object\n     */\n\n  }, {\n    key: 'parseMasterXml',\n    value: function parseMasterXml() {\n      var master = parse(this.masterXml_, {\n        manifestUri: this.srcUrl,\n        clientOffset: this.clientOffset_\n      });\n      master.uri = this.srcUrl; // Set up phony URIs for the playlists since we won't have external URIs for DASH\n      // but reference playlists by their URI throughout the project\n      // TODO: Should we create the dummy uris in mpd-parser as well (leaning towards yes).\n\n      for (var i = 0; i < master.playlists.length; i++) {\n        var phonyUri = 'placeholder-uri-' + i;\n        master.playlists[i].uri = phonyUri; // set up by URI references\n\n        master.playlists[phonyUri] = master.playlists[i];\n      } // set up phony URIs for the media group playlists since we won't have external\n      // URIs for DASH but reference playlists by their URI throughout the project\n\n\n      forEachMediaGroup(master, function (properties, mediaType, groupKey, labelKey) {\n        if (properties.playlists && properties.playlists.length) {\n          var _phonyUri = 'placeholder-uri-' + mediaType + '-' + groupKey + '-' + labelKey;\n\n          properties.playlists[0].uri = _phonyUri; // setup URI references\n\n          master.playlists[_phonyUri] = properties.playlists[0];\n        }\n      });\n      setupMediaPlaylists(master);\n      resolveMediaGroupUris(master);\n      return master;\n    }\n  }, {\n    key: 'start',\n    value: function start() {\n      var _this3 = this;\n\n      this.started = true; // We don't need to request the master manifest again\n      // Call this asynchronously to match the xhr request behavior below\n\n      if (this.masterPlaylistLoader_) {\n        this.mediaRequest_ = window$1.setTimeout(this.haveMaster_.bind(this), 0);\n        return;\n      } // request the specified URL\n\n\n      this.request = this.hls_.xhr({\n        uri: this.srcUrl,\n        withCredentials: this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this3.request) {\n          return;\n        } // clear the loader's request reference\n\n\n        _this3.request = null;\n\n        if (error) {\n          _this3.error = {\n            status: req.status,\n            message: 'DASH playlist request error at URL: ' + _this3.srcUrl,\n            responseText: req.responseText,\n            // MEDIA_ERR_NETWORK\n            code: 2\n          };\n\n          if (_this3.state === 'HAVE_NOTHING') {\n            _this3.started = false;\n          }\n\n          return _this3.trigger('error');\n        }\n\n        _this3.masterXml_ = req.responseText;\n\n        if (req.responseHeaders && req.responseHeaders.date) {\n          _this3.masterLoaded_ = Date.parse(req.responseHeaders.date);\n        } else {\n          _this3.masterLoaded_ = Date.now();\n        }\n\n        _this3.srcUrl = resolveManifestRedirect(_this3.handleManifestRedirects, _this3.srcUrl, req);\n\n        _this3.syncClientServerClock_(_this3.onClientServerClockSync_.bind(_this3));\n      });\n    }\n    /**\n     * Parses the master xml for UTCTiming node to sync the client clock to the server\n     * clock. If the UTCTiming node requires a HEAD or GET request, that request is made.\n     *\n     * @param {Function} done\n     *        Function to call when clock sync has completed\n     */\n\n  }, {\n    key: 'syncClientServerClock_',\n    value: function syncClientServerClock_(done) {\n      var _this4 = this;\n\n      var utcTiming = parseUTCTiming(this.masterXml_); // No UTCTiming element found in the mpd. Use Date header from mpd request as the\n      // server clock\n\n      if (utcTiming === null) {\n        this.clientOffset_ = this.masterLoaded_ - Date.now();\n        return done();\n      }\n\n      if (utcTiming.method === 'DIRECT') {\n        this.clientOffset_ = utcTiming.value - Date.now();\n        return done();\n      }\n\n      this.request = this.hls_.xhr({\n        uri: resolveUrl(this.srcUrl, utcTiming.value),\n        method: utcTiming.method,\n        withCredentials: this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this4.request) {\n          return;\n        }\n\n        if (error) {\n          // sync request failed, fall back to using date header from mpd\n          // TODO: log warning\n          _this4.clientOffset_ = _this4.masterLoaded_ - Date.now();\n          return done();\n        }\n\n        var serverTime = void 0;\n\n        if (utcTiming.method === 'HEAD') {\n          if (!req.responseHeaders || !req.responseHeaders.date) {\n            // expected date header not preset, fall back to using date header from mpd\n            // TODO: log warning\n            serverTime = _this4.masterLoaded_;\n          } else {\n            serverTime = Date.parse(req.responseHeaders.date);\n          }\n        } else {\n          serverTime = Date.parse(req.responseText);\n        }\n\n        _this4.clientOffset_ = serverTime - Date.now();\n        done();\n      });\n    }\n  }, {\n    key: 'haveMaster_',\n    value: function haveMaster_() {\n      this.state = 'HAVE_MASTER'; // clear media request\n\n      this.mediaRequest_ = null;\n\n      if (!this.masterPlaylistLoader_) {\n        this.master = this.parseMasterXml(); // We have the master playlist at this point, so\n        // trigger this to allow MasterPlaylistController\n        // to make an initial playlist selection\n\n        this.trigger('loadedplaylist');\n      } else if (!this.media_) {\n        // no media playlist was specifically selected so select\n        // the one the child playlist loader was created with\n        this.media(this.childPlaylist_);\n      }\n    }\n    /**\n     * Handler for after client/server clock synchronization has happened. Sets up\n     * xml refresh timer if specificed by the manifest.\n     */\n\n  }, {\n    key: 'onClientServerClockSync_',\n    value: function onClientServerClockSync_() {\n      var _this5 = this;\n\n      this.haveMaster_();\n\n      if (!this.hasPendingRequest() && !this.media_) {\n        this.media(this.master.playlists[0]);\n      } // TODO: minimumUpdatePeriod can have a value of 0. Currently the manifest will not\n      // be refreshed when this is the case. The inter-op guide says that when the\n      // minimumUpdatePeriod is 0, the manifest should outline all currently available\n      // segments, but future segments may require an update. I think a good solution\n      // would be to update the manifest at the same rate that the media playlists\n      // are \"refreshed\", i.e. every targetDuration.\n\n\n      if (this.master && this.master.minimumUpdatePeriod) {\n        window$1.setTimeout(function () {\n          _this5.trigger('minimumUpdatePeriod');\n        }, this.master.minimumUpdatePeriod);\n      }\n    }\n    /**\n     * Sends request to refresh the master xml and updates the parsed master manifest\n     * TODO: Does the client offset need to be recalculated when the xml is refreshed?\n     */\n\n  }, {\n    key: 'refreshXml_',\n    value: function refreshXml_() {\n      var _this6 = this; // The srcUrl here *may* need to pass through handleManifestsRedirects when\n      // sidx is implemented\n\n\n      this.request = this.hls_.xhr({\n        uri: this.srcUrl,\n        withCredentials: this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this6.request) {\n          return;\n        } // clear the loader's request reference\n\n\n        _this6.request = null;\n\n        if (error) {\n          _this6.error = {\n            status: req.status,\n            message: 'DASH playlist request error at URL: ' + _this6.srcUrl,\n            responseText: req.responseText,\n            // MEDIA_ERR_NETWORK\n            code: 2\n          };\n\n          if (_this6.state === 'HAVE_NOTHING') {\n            _this6.started = false;\n          }\n\n          return _this6.trigger('error');\n        }\n\n        _this6.masterXml_ = req.responseText;\n\n        var newMaster = _this6.parseMasterXml();\n\n        var updatedMaster = updateMaster$1(_this6.master, newMaster);\n\n        if (updatedMaster) {\n          _this6.master = updatedMaster;\n        }\n\n        window$1.setTimeout(function () {\n          _this6.trigger('minimumUpdatePeriod');\n        }, _this6.master.minimumUpdatePeriod);\n      });\n    }\n    /**\n     * Refreshes the media playlist by re-parsing the master xml and updating playlist\n     * references. If this is an alternate loader, the updated parsed manifest is retrieved\n     * from the master loader.\n     */\n\n  }, {\n    key: 'refreshMedia_',\n    value: function refreshMedia_() {\n      var _this7 = this;\n\n      var oldMaster = void 0;\n      var newMaster = void 0;\n\n      if (this.masterPlaylistLoader_) {\n        oldMaster = this.masterPlaylistLoader_.master;\n        newMaster = this.masterPlaylistLoader_.parseMasterXml();\n      } else {\n        oldMaster = this.master;\n        newMaster = this.parseMasterXml();\n      }\n\n      var updatedMaster = updateMaster$1(oldMaster, newMaster);\n\n      if (updatedMaster) {\n        if (this.masterPlaylistLoader_) {\n          this.masterPlaylistLoader_.master = updatedMaster;\n        } else {\n          this.master = updatedMaster;\n        }\n\n        this.media_ = updatedMaster.playlists[this.media_.uri];\n      } else {\n        this.trigger('playlistunchanged');\n      }\n\n      if (!this.media().endList) {\n        this.mediaUpdateTimeout = window$1.setTimeout(function () {\n          _this7.trigger('mediaupdatetimeout');\n        }, refreshDelay(this.media(), !!updatedMaster));\n      }\n\n      this.trigger('loadedplaylist');\n    }\n  }]);\n  return DashPlaylistLoader;\n}(EventTarget$1$1);\n\nvar logger = function logger(source) {\n  if (videojs$1.log.debug) {\n    return videojs$1.log.debug.bind(videojs$1, 'VHS:', source + ' >');\n  }\n\n  return function () {};\n};\n\nfunction noop() {}\n/**\n * @file source-updater.js\n */\n\n/**\n * A queue of callbacks to be serialized and applied when a\n * MediaSource and its associated SourceBuffers are not in the\n * updating state. It is used by the segment loader to update the\n * underlying SourceBuffers when new data is loaded, for instance.\n *\n * @class SourceUpdater\n * @param {MediaSource} mediaSource the MediaSource to create the\n * SourceBuffer from\n * @param {String} mimeType the desired MIME type of the underlying\n * SourceBuffer\n * @param {Object} sourceBufferEmitter an event emitter that fires when a source buffer is\n * added to the media source\n */\n\n\nvar SourceUpdater = function () {\n  function SourceUpdater(mediaSource, mimeType, type, sourceBufferEmitter) {\n    classCallCheck(this, SourceUpdater);\n    this.callbacks_ = [];\n    this.pendingCallback_ = null;\n    this.timestampOffset_ = 0;\n    this.mediaSource = mediaSource;\n    this.processedAppend_ = false;\n    this.type_ = type;\n    this.mimeType_ = mimeType;\n    this.logger_ = logger('SourceUpdater[' + type + '][' + mimeType + ']');\n\n    if (mediaSource.readyState === 'closed') {\n      mediaSource.addEventListener('sourceopen', this.createSourceBuffer_.bind(this, mimeType, sourceBufferEmitter));\n    } else {\n      this.createSourceBuffer_(mimeType, sourceBufferEmitter);\n    }\n  }\n\n  createClass(SourceUpdater, [{\n    key: 'createSourceBuffer_',\n    value: function createSourceBuffer_(mimeType, sourceBufferEmitter) {\n      var _this = this;\n\n      this.sourceBuffer_ = this.mediaSource.addSourceBuffer(mimeType);\n      this.logger_('created SourceBuffer');\n\n      if (sourceBufferEmitter) {\n        sourceBufferEmitter.trigger('sourcebufferadded');\n\n        if (this.mediaSource.sourceBuffers.length < 2) {\n          // There's another source buffer we must wait for before we can start updating\n          // our own (or else we can get into a bad state, i.e., appending video/audio data\n          // before the other video/audio source buffer is available and leading to a video\n          // or audio only buffer).\n          sourceBufferEmitter.on('sourcebufferadded', function () {\n            _this.start_();\n          });\n          return;\n        }\n      }\n\n      this.start_();\n    }\n  }, {\n    key: 'start_',\n    value: function start_() {\n      var _this2 = this;\n\n      this.started_ = true; // run completion handlers and process callbacks as updateend\n      // events fire\n\n      this.onUpdateendCallback_ = function () {\n        var pendingCallback = _this2.pendingCallback_;\n        _this2.pendingCallback_ = null;\n\n        _this2.logger_('buffered [' + printableRange(_this2.buffered()) + ']');\n\n        if (pendingCallback) {\n          pendingCallback();\n        }\n\n        _this2.runCallback_();\n      };\n\n      this.sourceBuffer_.addEventListener('updateend', this.onUpdateendCallback_);\n      this.runCallback_();\n    }\n    /**\n     * Aborts the current segment and resets the segment parser.\n     *\n     * @param {Function} done function to call when done\n     * @see http://w3c.github.io/media-source/#widl-SourceBuffer-abort-void\n     */\n\n  }, {\n    key: 'abort',\n    value: function abort(done) {\n      var _this3 = this;\n\n      if (this.processedAppend_) {\n        this.queueCallback_(function () {\n          _this3.sourceBuffer_.abort();\n        }, done);\n      }\n    }\n    /**\n     * Queue an update to append an ArrayBuffer.\n     *\n     * @param {ArrayBuffer} bytes\n     * @param {Function} done the function to call when done\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-appendBuffer-void-ArrayBuffer-data\n     */\n\n  }, {\n    key: 'appendBuffer',\n    value: function appendBuffer(config, done) {\n      var _this4 = this;\n\n      this.processedAppend_ = true;\n      this.queueCallback_(function () {\n        if (config.videoSegmentTimingInfoCallback) {\n          _this4.sourceBuffer_.addEventListener('videoSegmentTimingInfo', config.videoSegmentTimingInfoCallback);\n        }\n\n        _this4.sourceBuffer_.appendBuffer(config.bytes);\n      }, function () {\n        if (config.videoSegmentTimingInfoCallback) {\n          _this4.sourceBuffer_.removeEventListener('videoSegmentTimingInfo', config.videoSegmentTimingInfoCallback);\n        }\n\n        done();\n      });\n    }\n    /**\n     * Indicates what TimeRanges are buffered in the managed SourceBuffer.\n     *\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-buffered\n     */\n\n  }, {\n    key: 'buffered',\n    value: function buffered() {\n      if (!this.sourceBuffer_) {\n        return videojs$1.createTimeRanges();\n      }\n\n      return this.sourceBuffer_.buffered;\n    }\n    /**\n     * Queue an update to remove a time range from the buffer.\n     *\n     * @param {Number} start where to start the removal\n     * @param {Number} end where to end the removal\n     * @param {Function} [done=noop] optional callback to be executed when the remove\n     * operation is complete\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-remove-void-double-start-unrestricted-double-end\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      var _this5 = this;\n\n      var done = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;\n\n      if (this.processedAppend_) {\n        this.queueCallback_(function () {\n          _this5.logger_('remove [' + start + ' => ' + end + ']');\n\n          _this5.sourceBuffer_.remove(start, end);\n        }, done);\n      }\n    }\n    /**\n     * Whether the underlying sourceBuffer is updating or not\n     *\n     * @return {Boolean} the updating status of the SourceBuffer\n     */\n\n  }, {\n    key: 'updating',\n    value: function updating() {\n      // we are updating if the sourcebuffer is updating or\n      return !this.sourceBuffer_ || this.sourceBuffer_.updating || // if we have a pending callback that is not our internal noop\n      !!this.pendingCallback_ && this.pendingCallback_ !== noop;\n    }\n    /**\n     * Set/get the timestampoffset on the SourceBuffer\n     *\n     * @return {Number} the timestamp offset\n     */\n\n  }, {\n    key: 'timestampOffset',\n    value: function timestampOffset(offset) {\n      var _this6 = this;\n\n      if (typeof offset !== 'undefined') {\n        this.queueCallback_(function () {\n          _this6.sourceBuffer_.timestampOffset = offset;\n        });\n        this.timestampOffset_ = offset;\n      }\n\n      return this.timestampOffset_;\n    }\n    /**\n     * Queue a callback to run\n     */\n\n  }, {\n    key: 'queueCallback_',\n    value: function queueCallback_(callback, done) {\n      this.callbacks_.push([callback.bind(this), done]);\n      this.runCallback_();\n    }\n    /**\n     * Run a queued callback\n     */\n\n  }, {\n    key: 'runCallback_',\n    value: function runCallback_() {\n      var callbacks = void 0;\n\n      if (!this.updating() && this.callbacks_.length && this.started_) {\n        callbacks = this.callbacks_.shift();\n        this.pendingCallback_ = callbacks[1];\n        callbacks[0]();\n      }\n    }\n    /**\n     * dispose of the source updater and the underlying sourceBuffer\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.sourceBuffer_.removeEventListener('updateend', this.onUpdateendCallback_);\n\n      if (this.sourceBuffer_ && this.mediaSource.readyState === 'open') {\n        this.sourceBuffer_.abort();\n      }\n    }\n  }]);\n  return SourceUpdater;\n}();\n\nvar Config = {\n  GOAL_BUFFER_LENGTH: 30,\n  MAX_GOAL_BUFFER_LENGTH: 60,\n  GOAL_BUFFER_LENGTH_RATE: 1,\n  // 0.5 MB/s\n  INITIAL_BANDWIDTH: 4194304,\n  // A fudge factor to apply to advertised playlist bitrates to account for\n  // temporary flucations in client bandwidth\n  BANDWIDTH_VARIANCE: 1.2,\n  // How much of the buffer must be filled before we consider upswitching\n  BUFFER_LOW_WATER_LINE: 0,\n  MAX_BUFFER_LOW_WATER_LINE: 30,\n  BUFFER_LOW_WATER_LINE_RATE: 1\n};\nvar REQUEST_ERRORS = {\n  FAILURE: 2,\n  TIMEOUT: -101,\n  ABORTED: -102\n};\n/**\n * Turns segment byterange into a string suitable for use in\n * HTTP Range requests\n *\n * @param {Object} byterange - an object with two values defining the start and end\n *                             of a byte-range\n */\n\nvar byterangeStr = function byterangeStr(byterange) {\n  var byterangeStart = void 0;\n  var byterangeEnd = void 0; // `byterangeEnd` is one less than `offset + length` because the HTTP range\n  // header uses inclusive ranges\n\n  byterangeEnd = byterange.offset + byterange.length - 1;\n  byterangeStart = byterange.offset;\n  return 'bytes=' + byterangeStart + '-' + byterangeEnd;\n};\n/**\n * Defines headers for use in the xhr request for a particular segment.\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n */\n\n\nvar segmentXhrHeaders = function segmentXhrHeaders(segment) {\n  var headers = {};\n\n  if (segment.byterange) {\n    headers.Range = byterangeStr(segment.byterange);\n  }\n\n  return headers;\n};\n/**\n * Abort all requests\n *\n * @param {Object} activeXhrs - an object that tracks all XHR requests\n */\n\n\nvar abortAll = function abortAll(activeXhrs) {\n  activeXhrs.forEach(function (xhr$$1) {\n    xhr$$1.abort();\n  });\n};\n/**\n * Gather important bandwidth stats once a request has completed\n *\n * @param {Object} request - the XHR request from which to gather stats\n */\n\n\nvar getRequestStats = function getRequestStats(request) {\n  return {\n    bandwidth: request.bandwidth,\n    bytesReceived: request.bytesReceived || 0,\n    roundTripTime: request.roundTripTime || 0\n  };\n};\n/**\n * If possible gather bandwidth stats as a request is in\n * progress\n *\n * @param {Event} progressEvent - an event object from an XHR's progress event\n */\n\n\nvar getProgressStats = function getProgressStats(progressEvent) {\n  var request = progressEvent.target;\n  var roundTripTime = Date.now() - request.requestTime;\n  var stats = {\n    bandwidth: Infinity,\n    bytesReceived: 0,\n    roundTripTime: roundTripTime || 0\n  };\n  stats.bytesReceived = progressEvent.loaded; // This can result in Infinity if stats.roundTripTime is 0 but that is ok\n  // because we should only use bandwidth stats on progress to determine when\n  // abort a request early due to insufficient bandwidth\n\n  stats.bandwidth = Math.floor(stats.bytesReceived / stats.roundTripTime * 8 * 1000);\n  return stats;\n};\n/**\n * Handle all error conditions in one place and return an object\n * with all the information\n *\n * @param {Error|null} error - if non-null signals an error occured with the XHR\n * @param {Object} request -  the XHR request that possibly generated the error\n */\n\n\nvar handleErrors = function handleErrors(error, request) {\n  if (request.timedout) {\n    return {\n      status: request.status,\n      message: 'HLS request timed-out at URL: ' + request.uri,\n      code: REQUEST_ERRORS.TIMEOUT,\n      xhr: request\n    };\n  }\n\n  if (request.aborted) {\n    return {\n      status: request.status,\n      message: 'HLS request aborted at URL: ' + request.uri,\n      code: REQUEST_ERRORS.ABORTED,\n      xhr: request\n    };\n  }\n\n  if (error) {\n    return {\n      status: request.status,\n      message: 'HLS request errored at URL: ' + request.uri,\n      code: REQUEST_ERRORS.FAILURE,\n      xhr: request\n    };\n  }\n\n  return null;\n};\n/**\n * Handle responses for key data and convert the key data to the correct format\n * for the decryption step later\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\n\n\nvar handleKeyResponse = function handleKeyResponse(segment, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    }\n\n    if (response.byteLength !== 16) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Invalid HLS key at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    var view = new DataView(response);\n    segment.key.bytes = new Uint32Array([view.getUint32(0), view.getUint32(4), view.getUint32(8), view.getUint32(12)]);\n    return finishProcessingFn(null, segment);\n  };\n};\n/**\n * Handle init-segment responses\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\n\n\nvar handleInitSegmentResponse = function handleInitSegmentResponse(segment, captionParser, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    } // stop processing if received empty content\n\n\n    if (response.byteLength === 0) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Empty HLS segment content at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    segment.map.bytes = new Uint8Array(request.response); // Initialize CaptionParser if it hasn't been yet\n\n    if (!captionParser.isInitialized()) {\n      captionParser.init();\n    }\n\n    segment.map.timescales = mp4probe.timescale(segment.map.bytes);\n    segment.map.videoTrackIds = mp4probe.videoTrackIds(segment.map.bytes);\n    return finishProcessingFn(null, segment);\n  };\n};\n/**\n * Response handler for segment-requests being sure to set the correct\n * property depending on whether the segment is encryped or not\n * Also records and keeps track of stats that are used for ABR purposes\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\n\n\nvar handleSegmentResponse = function handleSegmentResponse(segment, captionParser, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n    var parsed = void 0;\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    } // stop processing if received empty content\n\n\n    if (response.byteLength === 0) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Empty HLS segment content at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    segment.stats = getRequestStats(request);\n\n    if (segment.key) {\n      segment.encryptedBytes = new Uint8Array(request.response);\n    } else {\n      segment.bytes = new Uint8Array(request.response);\n    } // This is likely an FMP4 and has the init segment.\n    // Run through the CaptionParser in case there are captions.\n\n\n    if (segment.map && segment.map.bytes) {\n      // Initialize CaptionParser if it hasn't been yet\n      if (!captionParser.isInitialized()) {\n        captionParser.init();\n      }\n\n      parsed = captionParser.parse(segment.bytes, segment.map.videoTrackIds, segment.map.timescales);\n\n      if (parsed && parsed.captions) {\n        segment.captionStreams = parsed.captionStreams;\n        segment.fmp4Captions = parsed.captions;\n      }\n    }\n\n    return finishProcessingFn(null, segment);\n  };\n};\n/**\n * Decrypt the segment via the decryption web worker\n *\n * @param {WebWorker} decrypter - a WebWorker interface to AES-128 decryption routines\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} doneFn - a callback that is executed after decryption has completed\n */\n\n\nvar decryptSegment = function decryptSegment(decrypter, segment, doneFn) {\n  var decryptionHandler = function decryptionHandler(event) {\n    if (event.data.source === segment.requestId) {\n      decrypter.removeEventListener('message', decryptionHandler);\n      var decrypted = event.data.decrypted;\n      segment.bytes = new Uint8Array(decrypted.bytes, decrypted.byteOffset, decrypted.byteLength);\n      return doneFn(null, segment);\n    }\n  };\n\n  decrypter.addEventListener('message', decryptionHandler); // this is an encrypted segment\n  // incrementally decrypt the segment\n\n  decrypter.postMessage(createTransferableMessage({\n    source: segment.requestId,\n    encrypted: segment.encryptedBytes,\n    key: segment.key.bytes,\n    iv: segment.key.iv\n  }), [segment.encryptedBytes.buffer, segment.key.bytes.buffer]);\n};\n/**\n * This function waits for all XHRs to finish (with either success or failure)\n * before continueing processing via it's callback. The function gathers errors\n * from each request into a single errors array so that the error status for\n * each request can be examined later.\n *\n * @param {Object} activeXhrs - an object that tracks all XHR requests\n * @param {WebWorker} decrypter - a WebWorker interface to AES-128 decryption routines\n * @param {Function} doneFn - a callback that is executed after all resources have been\n *                            downloaded and any decryption completed\n */\n\n\nvar waitForCompletion = function waitForCompletion(activeXhrs, decrypter, doneFn) {\n  var count = 0;\n  var didError = false;\n  return function (error, segment) {\n    if (didError) {\n      return;\n    }\n\n    if (error) {\n      didError = true; // If there are errors, we have to abort any outstanding requests\n\n      abortAll(activeXhrs); // Even though the requests above are aborted, and in theory we could wait until we\n      // handle the aborted events from those requests, there are some cases where we may\n      // never get an aborted event. For instance, if the network connection is lost and\n      // there were two requests, the first may have triggered an error immediately, while\n      // the second request remains unsent. In that case, the aborted algorithm will not\n      // trigger an abort: see https://xhr.spec.whatwg.org/#the-abort()-method\n      //\n      // We also can't rely on the ready state of the XHR, since the request that\n      // triggered the connection error may also show as a ready state of 0 (unsent).\n      // Therefore, we have to finish this group of requests immediately after the first\n      // seen error.\n\n      return doneFn(error, segment);\n    }\n\n    count += 1;\n\n    if (count === activeXhrs.length) {\n      // Keep track of when *all* of the requests have completed\n      segment.endOfAllRequests = Date.now();\n\n      if (segment.encryptedBytes) {\n        return decryptSegment(decrypter, segment, doneFn);\n      } // Otherwise, everything is ready just continue\n\n\n      return doneFn(null, segment);\n    }\n  };\n};\n/**\n * Simple progress event callback handler that gathers some stats before\n * executing a provided callback with the `segment` object\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} progressFn - a callback that is executed each time a progress event\n *                                is received\n * @param {Event} event - the progress event object from XMLHttpRequest\n */\n\n\nvar handleProgress = function handleProgress(segment, progressFn) {\n  return function (event) {\n    segment.stats = videojs$1.mergeOptions(segment.stats, getProgressStats(event)); // record the time that we receive the first byte of data\n\n    if (!segment.stats.firstBytesReceivedAt && segment.stats.bytesReceived) {\n      segment.stats.firstBytesReceivedAt = Date.now();\n    }\n\n    return progressFn(event, segment);\n  };\n};\n/**\n * Load all resources and does any processing necessary for a media-segment\n *\n * Features:\n *   decrypts the media-segment if it has a key uri and an iv\n *   aborts *all* requests if *any* one request fails\n *\n * The segment object, at minimum, has the following format:\n * {\n *   resolvedUri: String,\n *   [byterange]: {\n *     offset: Number,\n *     length: Number\n *   },\n *   [key]: {\n *     resolvedUri: String\n *     [byterange]: {\n *       offset: Number,\n *       length: Number\n *     },\n *     iv: {\n *       bytes: Uint32Array\n *     }\n *   },\n *   [map]: {\n *     resolvedUri: String,\n *     [byterange]: {\n *       offset: Number,\n *       length: Number\n *     },\n *     [bytes]: Uint8Array\n *   }\n * }\n * ...where [name] denotes optional properties\n *\n * @param {Function} xhr - an instance of the xhr wrapper in xhr.js\n * @param {Object} xhrOptions - the base options to provide to all xhr requests\n * @param {WebWorker} decryptionWorker - a WebWorker interface to AES-128\n *                                       decryption routines\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} progressFn - a callback that receives progress events from the main\n *                                segment's xhr request\n * @param {Function} doneFn - a callback that is executed only once all requests have\n *                            succeeded or failed\n * @returns {Function} a function that, when invoked, immediately aborts all\n *                     outstanding requests\n */\n\n\nvar mediaSegmentRequest = function mediaSegmentRequest(xhr$$1, xhrOptions, decryptionWorker, captionParser, segment, progressFn, doneFn) {\n  var activeXhrs = [];\n  var finishProcessingFn = waitForCompletion(activeXhrs, decryptionWorker, doneFn); // optionally, request the decryption key\n\n  if (segment.key) {\n    var keyRequestOptions = videojs$1.mergeOptions(xhrOptions, {\n      uri: segment.key.resolvedUri,\n      responseType: 'arraybuffer'\n    });\n    var keyRequestCallback = handleKeyResponse(segment, finishProcessingFn);\n    var keyXhr = xhr$$1(keyRequestOptions, keyRequestCallback);\n    activeXhrs.push(keyXhr);\n  } // optionally, request the associated media init segment\n\n\n  if (segment.map && !segment.map.bytes) {\n    var initSegmentOptions = videojs$1.mergeOptions(xhrOptions, {\n      uri: segment.map.resolvedUri,\n      responseType: 'arraybuffer',\n      headers: segmentXhrHeaders(segment.map)\n    });\n    var initSegmentRequestCallback = handleInitSegmentResponse(segment, captionParser, finishProcessingFn);\n    var initSegmentXhr = xhr$$1(initSegmentOptions, initSegmentRequestCallback);\n    activeXhrs.push(initSegmentXhr);\n  }\n\n  var segmentRequestOptions = videojs$1.mergeOptions(xhrOptions, {\n    uri: segment.resolvedUri,\n    responseType: 'arraybuffer',\n    headers: segmentXhrHeaders(segment)\n  });\n  var segmentRequestCallback = handleSegmentResponse(segment, captionParser, finishProcessingFn);\n  var segmentXhr = xhr$$1(segmentRequestOptions, segmentRequestCallback);\n  segmentXhr.addEventListener('progress', handleProgress(segment, progressFn));\n  activeXhrs.push(segmentXhr);\n  return function () {\n    return abortAll(activeXhrs);\n  };\n}; // Utilities\n\n/**\n * Returns the CSS value for the specified property on an element\n * using `getComputedStyle`. Firefox has a long-standing issue where\n * getComputedStyle() may return null when running in an iframe with\n * `display: none`.\n *\n * @see https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n * @param {HTMLElement} el the htmlelement to work on\n * @param {string} the proprety to get the style for\n */\n\n\nvar safeGetComputedStyle = function safeGetComputedStyle(el, property) {\n  var result = void 0;\n\n  if (!el) {\n    return '';\n  }\n\n  result = window$1.getComputedStyle(el);\n\n  if (!result) {\n    return '';\n  }\n\n  return result[property];\n};\n/**\n * Resuable stable sort function\n *\n * @param {Playlists} array\n * @param {Function} sortFn Different comparators\n * @function stableSort\n */\n\n\nvar stableSort = function stableSort(array, sortFn) {\n  var newArray = array.slice();\n  array.sort(function (left, right) {\n    var cmp = sortFn(left, right);\n\n    if (cmp === 0) {\n      return newArray.indexOf(left) - newArray.indexOf(right);\n    }\n\n    return cmp;\n  });\n};\n/**\n * A comparator function to sort two playlist object by bandwidth.\n *\n * @param {Object} left a media playlist object\n * @param {Object} right a media playlist object\n * @return {Number} Greater than zero if the bandwidth attribute of\n * left is greater than the corresponding attribute of right. Less\n * than zero if the bandwidth of right is greater than left and\n * exactly zero if the two are equal.\n */\n\n\nvar comparePlaylistBandwidth = function comparePlaylistBandwidth(left, right) {\n  var leftBandwidth = void 0;\n  var rightBandwidth = void 0;\n\n  if (left.attributes.BANDWIDTH) {\n    leftBandwidth = left.attributes.BANDWIDTH;\n  }\n\n  leftBandwidth = leftBandwidth || window$1.Number.MAX_VALUE;\n\n  if (right.attributes.BANDWIDTH) {\n    rightBandwidth = right.attributes.BANDWIDTH;\n  }\n\n  rightBandwidth = rightBandwidth || window$1.Number.MAX_VALUE;\n  return leftBandwidth - rightBandwidth;\n};\n/**\n * A comparator function to sort two playlist object by resolution (width).\n * @param {Object} left a media playlist object\n * @param {Object} right a media playlist object\n * @return {Number} Greater than zero if the resolution.width attribute of\n * left is greater than the corresponding attribute of right. Less\n * than zero if the resolution.width of right is greater than left and\n * exactly zero if the two are equal.\n */\n\n\nvar comparePlaylistResolution = function comparePlaylistResolution(left, right) {\n  var leftWidth = void 0;\n  var rightWidth = void 0;\n\n  if (left.attributes.RESOLUTION && left.attributes.RESOLUTION.width) {\n    leftWidth = left.attributes.RESOLUTION.width;\n  }\n\n  leftWidth = leftWidth || window$1.Number.MAX_VALUE;\n\n  if (right.attributes.RESOLUTION && right.attributes.RESOLUTION.width) {\n    rightWidth = right.attributes.RESOLUTION.width;\n  }\n\n  rightWidth = rightWidth || window$1.Number.MAX_VALUE; // NOTE - Fallback to bandwidth sort as appropriate in cases where multiple renditions\n  // have the same media dimensions/ resolution\n\n  if (leftWidth === rightWidth && left.attributes.BANDWIDTH && right.attributes.BANDWIDTH) {\n    return left.attributes.BANDWIDTH - right.attributes.BANDWIDTH;\n  }\n\n  return leftWidth - rightWidth;\n};\n/**\n * Chooses the appropriate media playlist based on bandwidth and player size\n *\n * @param {Object} master\n *        Object representation of the master manifest\n * @param {Number} playerBandwidth\n *        Current calculated bandwidth of the player\n * @param {Number} playerWidth\n *        Current width of the player element\n * @param {Number} playerHeight\n *        Current height of the player element\n * @param {Boolean} limitRenditionByPlayerDimensions\n *        True if the player width and height should be used during the selection, false otherwise\n * @return {Playlist} the highest bitrate playlist less than the\n * currently detected bandwidth, accounting for some amount of\n * bandwidth variance\n */\n\n\nvar simpleSelector = function simpleSelector(master, playerBandwidth, playerWidth, playerHeight, limitRenditionByPlayerDimensions) {\n  // convert the playlists to an intermediary representation to make comparisons easier\n  var sortedPlaylistReps = master.playlists.map(function (playlist) {\n    var width = void 0;\n    var height = void 0;\n    var bandwidth = void 0;\n    width = playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.width;\n    height = playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.height;\n    bandwidth = playlist.attributes.BANDWIDTH;\n    bandwidth = bandwidth || window$1.Number.MAX_VALUE;\n    return {\n      bandwidth: bandwidth,\n      width: width,\n      height: height,\n      playlist: playlist\n    };\n  });\n  stableSort(sortedPlaylistReps, function (left, right) {\n    return left.bandwidth - right.bandwidth;\n  }); // filter out any playlists that have been excluded due to\n  // incompatible configurations\n\n  sortedPlaylistReps = sortedPlaylistReps.filter(function (rep) {\n    return !Playlist.isIncompatible(rep.playlist);\n  }); // filter out any playlists that have been disabled manually through the representations\n  // api or blacklisted temporarily due to playback errors.\n\n  var enabledPlaylistReps = sortedPlaylistReps.filter(function (rep) {\n    return Playlist.isEnabled(rep.playlist);\n  });\n\n  if (!enabledPlaylistReps.length) {\n    // if there are no enabled playlists, then they have all been blacklisted or disabled\n    // by the user through the representations api. In this case, ignore blacklisting and\n    // fallback to what the user wants by using playlists the user has not disabled.\n    enabledPlaylistReps = sortedPlaylistReps.filter(function (rep) {\n      return !Playlist.isDisabled(rep.playlist);\n    });\n  } // filter out any variant that has greater effective bitrate\n  // than the current estimated bandwidth\n\n\n  var bandwidthPlaylistReps = enabledPlaylistReps.filter(function (rep) {\n    return rep.bandwidth * Config.BANDWIDTH_VARIANCE < playerBandwidth;\n  });\n  var highestRemainingBandwidthRep = bandwidthPlaylistReps[bandwidthPlaylistReps.length - 1]; // get all of the renditions with the same (highest) bandwidth\n  // and then taking the very first element\n\n  var bandwidthBestRep = bandwidthPlaylistReps.filter(function (rep) {\n    return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n  })[0]; // if we're not going to limit renditions by player size, make an early decision.\n\n  if (limitRenditionByPlayerDimensions === false) {\n    var _chosenRep = bandwidthBestRep || enabledPlaylistReps[0] || sortedPlaylistReps[0];\n\n    return _chosenRep ? _chosenRep.playlist : null;\n  } // filter out playlists without resolution information\n\n\n  var haveResolution = bandwidthPlaylistReps.filter(function (rep) {\n    return rep.width && rep.height;\n  }); // sort variants by resolution\n\n  stableSort(haveResolution, function (left, right) {\n    return left.width - right.width;\n  }); // if we have the exact resolution as the player use it\n\n  var resolutionBestRepList = haveResolution.filter(function (rep) {\n    return rep.width === playerWidth && rep.height === playerHeight;\n  });\n  highestRemainingBandwidthRep = resolutionBestRepList[resolutionBestRepList.length - 1]; // ensure that we pick the highest bandwidth variant that have exact resolution\n\n  var resolutionBestRep = resolutionBestRepList.filter(function (rep) {\n    return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n  })[0];\n  var resolutionPlusOneList = void 0;\n  var resolutionPlusOneSmallest = void 0;\n  var resolutionPlusOneRep = void 0; // find the smallest variant that is larger than the player\n  // if there is no match of exact resolution\n\n  if (!resolutionBestRep) {\n    resolutionPlusOneList = haveResolution.filter(function (rep) {\n      return rep.width > playerWidth || rep.height > playerHeight;\n    }); // find all the variants have the same smallest resolution\n\n    resolutionPlusOneSmallest = resolutionPlusOneList.filter(function (rep) {\n      return rep.width === resolutionPlusOneList[0].width && rep.height === resolutionPlusOneList[0].height;\n    }); // ensure that we also pick the highest bandwidth variant that\n    // is just-larger-than the video player\n\n    highestRemainingBandwidthRep = resolutionPlusOneSmallest[resolutionPlusOneSmallest.length - 1];\n    resolutionPlusOneRep = resolutionPlusOneSmallest.filter(function (rep) {\n      return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n    })[0];\n  } // fallback chain of variants\n\n\n  var chosenRep = resolutionPlusOneRep || resolutionBestRep || bandwidthBestRep || enabledPlaylistReps[0] || sortedPlaylistReps[0];\n  return chosenRep ? chosenRep.playlist : null;\n}; // Playlist Selectors\n\n/**\n * Chooses the appropriate media playlist based on the most recent\n * bandwidth estimate and the player size.\n *\n * Expects to be called within the context of an instance of HlsHandler\n *\n * @return {Playlist} the highest bitrate playlist less than the\n * currently detected bandwidth, accounting for some amount of\n * bandwidth variance\n */\n\n\nvar lastBandwidthSelector = function lastBandwidthSelector() {\n  return simpleSelector(this.playlists.master, this.systemBandwidth, parseInt(safeGetComputedStyle(this.tech_.el(), 'width'), 10), parseInt(safeGetComputedStyle(this.tech_.el(), 'height'), 10), this.limitRenditionByPlayerDimensions);\n};\n/**\n * Chooses the appropriate media playlist based on the potential to rebuffer\n *\n * @param {Object} settings\n *        Object of information required to use this selector\n * @param {Object} settings.master\n *        Object representation of the master manifest\n * @param {Number} settings.currentTime\n *        The current time of the player\n * @param {Number} settings.bandwidth\n *        Current measured bandwidth\n * @param {Number} settings.duration\n *        Duration of the media\n * @param {Number} settings.segmentDuration\n *        Segment duration to be used in round trip time calculations\n * @param {Number} settings.timeUntilRebuffer\n *        Time left in seconds until the player has to rebuffer\n * @param {Number} settings.currentTimeline\n *        The current timeline segments are being loaded from\n * @param {SyncController} settings.syncController\n *        SyncController for determining if we have a sync point for a given playlist\n * @return {Object|null}\n *         {Object} return.playlist\n *         The highest bandwidth playlist with the least amount of rebuffering\n *         {Number} return.rebufferingImpact\n *         The amount of time in seconds switching to this playlist will rebuffer. A\n *         negative value means that switching will cause zero rebuffering.\n */\n\n\nvar minRebufferMaxBandwidthSelector = function minRebufferMaxBandwidthSelector(settings) {\n  var master = settings.master,\n      currentTime = settings.currentTime,\n      bandwidth = settings.bandwidth,\n      duration$$1 = settings.duration,\n      segmentDuration = settings.segmentDuration,\n      timeUntilRebuffer = settings.timeUntilRebuffer,\n      currentTimeline = settings.currentTimeline,\n      syncController = settings.syncController; // filter out any playlists that have been excluded due to\n  // incompatible configurations\n\n  var compatiblePlaylists = master.playlists.filter(function (playlist) {\n    return !Playlist.isIncompatible(playlist);\n  }); // filter out any playlists that have been disabled manually through the representations\n  // api or blacklisted temporarily due to playback errors.\n\n  var enabledPlaylists = compatiblePlaylists.filter(Playlist.isEnabled);\n\n  if (!enabledPlaylists.length) {\n    // if there are no enabled playlists, then they have all been blacklisted or disabled\n    // by the user through the representations api. In this case, ignore blacklisting and\n    // fallback to what the user wants by using playlists the user has not disabled.\n    enabledPlaylists = compatiblePlaylists.filter(function (playlist) {\n      return !Playlist.isDisabled(playlist);\n    });\n  }\n\n  var bandwidthPlaylists = enabledPlaylists.filter(Playlist.hasAttribute.bind(null, 'BANDWIDTH'));\n  var rebufferingEstimates = bandwidthPlaylists.map(function (playlist) {\n    var syncPoint = syncController.getSyncPoint(playlist, duration$$1, currentTimeline, currentTime); // If there is no sync point for this playlist, switching to it will require a\n    // sync request first. This will double the request time\n\n    var numRequests = syncPoint ? 1 : 2;\n    var requestTimeEstimate = Playlist.estimateSegmentRequestTime(segmentDuration, bandwidth, playlist);\n    var rebufferingImpact = requestTimeEstimate * numRequests - timeUntilRebuffer;\n    return {\n      playlist: playlist,\n      rebufferingImpact: rebufferingImpact\n    };\n  });\n  var noRebufferingPlaylists = rebufferingEstimates.filter(function (estimate) {\n    return estimate.rebufferingImpact <= 0;\n  }); // Sort by bandwidth DESC\n\n  stableSort(noRebufferingPlaylists, function (a, b) {\n    return comparePlaylistBandwidth(b.playlist, a.playlist);\n  });\n\n  if (noRebufferingPlaylists.length) {\n    return noRebufferingPlaylists[0];\n  }\n\n  stableSort(rebufferingEstimates, function (a, b) {\n    return a.rebufferingImpact - b.rebufferingImpact;\n  });\n  return rebufferingEstimates[0] || null;\n};\n/**\n * Chooses the appropriate media playlist, which in this case is the lowest bitrate\n * one with video.  If no renditions with video exist, return the lowest audio rendition.\n *\n * Expects to be called within the context of an instance of HlsHandler\n *\n * @return {Object|null}\n *         {Object} return.playlist\n *         The lowest bitrate playlist that contains a video codec.  If no such rendition\n *         exists pick the lowest audio rendition.\n */\n\n\nvar lowestBitrateCompatibleVariantSelector = function lowestBitrateCompatibleVariantSelector() {\n  // filter out any playlists that have been excluded due to\n  // incompatible configurations or playback errors\n  var playlists = this.playlists.master.playlists.filter(Playlist.isEnabled); // Sort ascending by bitrate\n\n  stableSort(playlists, function (a, b) {\n    return comparePlaylistBandwidth(a, b);\n  }); // Parse and assume that playlists with no video codec have no video\n  // (this is not necessarily true, although it is generally true).\n  //\n  // If an entire manifest has no valid videos everything will get filtered\n  // out.\n\n  var playlistsWithVideo = playlists.filter(function (playlist) {\n    return parseCodecs(playlist.attributes.CODECS).videoCodec;\n  });\n  return playlistsWithVideo[0] || null;\n};\n/**\n * Create captions text tracks on video.js if they do not exist\n *\n * @param {Object} inbandTextTracks a reference to current inbandTextTracks\n * @param {Object} tech the video.js tech\n * @param {Object} captionStreams the caption streams to create\n * @private\n */\n\n\nvar createCaptionsTrackIfNotExists = function createCaptionsTrackIfNotExists(inbandTextTracks, tech, captionStreams) {\n  for (var trackId in captionStreams) {\n    if (!inbandTextTracks[trackId]) {\n      tech.trigger({\n        type: 'usage',\n        name: 'hls-608'\n      });\n      var track = tech.textTracks().getTrackById(trackId);\n\n      if (track) {\n        // Resuse an existing track with a CC# id because this was\n        // very likely created by videojs-contrib-hls from information\n        // in the m3u8 for us to use\n        inbandTextTracks[trackId] = track;\n      } else {\n        // Otherwise, create a track with the default `CC#` label and\n        // without a language\n        inbandTextTracks[trackId] = tech.addRemoteTextTrack({\n          kind: 'captions',\n          id: trackId,\n          label: trackId\n        }, false).track;\n      }\n    }\n  }\n};\n\nvar addCaptionData = function addCaptionData(_ref) {\n  var inbandTextTracks = _ref.inbandTextTracks,\n      captionArray = _ref.captionArray,\n      timestampOffset = _ref.timestampOffset;\n\n  if (!captionArray) {\n    return;\n  }\n\n  var Cue = window.WebKitDataCue || window.VTTCue;\n  captionArray.forEach(function (caption) {\n    var track = caption.stream;\n    var startTime = caption.startTime;\n    var endTime = caption.endTime;\n\n    if (!inbandTextTracks[track]) {\n      return;\n    }\n\n    startTime += timestampOffset;\n    endTime += timestampOffset;\n    inbandTextTracks[track].addCue(new Cue(startTime, endTime, caption.text));\n  });\n};\n/**\n * @file segment-loader.js\n */\n// in ms\n\n\nvar CHECK_BUFFER_DELAY = 500;\n/**\n * Determines if we should call endOfStream on the media source based\n * on the state of the buffer or if appened segment was the final\n * segment in the playlist.\n *\n * @param {Object} playlist a media playlist object\n * @param {Object} mediaSource the MediaSource object\n * @param {Number} segmentIndex the index of segment we last appended\n * @returns {Boolean} do we need to call endOfStream on the MediaSource\n */\n\nvar detectEndOfStream = function detectEndOfStream(playlist, mediaSource, segmentIndex) {\n  if (!playlist || !mediaSource) {\n    return false;\n  }\n\n  var segments = playlist.segments; // determine a few boolean values to help make the branch below easier\n  // to read\n\n  var appendedLastSegment = segmentIndex === segments.length; // if we've buffered to the end of the video, we need to call endOfStream\n  // so that MediaSources can trigger the `ended` event when it runs out of\n  // buffered data instead of waiting for me\n\n  return playlist.endList && mediaSource.readyState === 'open' && appendedLastSegment;\n};\n\nvar finite = function finite(num) {\n  return typeof num === 'number' && isFinite(num);\n};\n\nvar illegalMediaSwitch = function illegalMediaSwitch(loaderType, startingMedia, newSegmentMedia) {\n  // Although these checks should most likely cover non 'main' types, for now it narrows\n  // the scope of our checks.\n  if (loaderType !== 'main' || !startingMedia || !newSegmentMedia) {\n    return null;\n  }\n\n  if (!newSegmentMedia.containsAudio && !newSegmentMedia.containsVideo) {\n    return 'Neither audio nor video found in segment.';\n  }\n\n  if (startingMedia.containsVideo && !newSegmentMedia.containsVideo) {\n    return 'Only audio found in segment when we expected video.' + ' We can\\'t switch to audio only from a stream that had video.' + ' To get rid of this message, please add codec information to the manifest.';\n  }\n\n  if (!startingMedia.containsVideo && newSegmentMedia.containsVideo) {\n    return 'Video found in segment when we expected only audio.' + ' We can\\'t switch to a stream with video from an audio only stream.' + ' To get rid of this message, please add codec information to the manifest.';\n  }\n\n  return null;\n};\n/**\n * Calculates a time value that is safe to remove from the back buffer without interupting\n * playback.\n *\n * @param {TimeRange} seekable\n *        The current seekable range\n * @param {Number} currentTime\n *        The current time of the player\n * @param {Number} targetDuration\n *        The target duration of the current playlist\n * @return {Number}\n *         Time that is safe to remove from the back buffer without interupting playback\n */\n\n\nvar safeBackBufferTrimTime = function safeBackBufferTrimTime(seekable$$1, currentTime, targetDuration) {\n  var removeToTime = void 0;\n\n  if (seekable$$1.length && seekable$$1.start(0) > 0 && seekable$$1.start(0) < currentTime) {\n    // If we have a seekable range use that as the limit for what can be removed safely\n    removeToTime = seekable$$1.start(0);\n  } else {\n    // otherwise remove anything older than 30 seconds before the current play head\n    removeToTime = currentTime - 30;\n  } // Don't allow removing from the buffer within target duration of current time\n  // to avoid the possibility of removing the GOP currently being played which could\n  // cause playback stalls.\n\n\n  return Math.min(removeToTime, currentTime - targetDuration);\n};\n\nvar segmentInfoString = function segmentInfoString(segmentInfo) {\n  var _segmentInfo$segment = segmentInfo.segment,\n      start = _segmentInfo$segment.start,\n      end = _segmentInfo$segment.end,\n      _segmentInfo$playlist = segmentInfo.playlist,\n      seq = _segmentInfo$playlist.mediaSequence,\n      id = _segmentInfo$playlist.id,\n      _segmentInfo$playlist2 = _segmentInfo$playlist.segments,\n      segments = _segmentInfo$playlist2 === undefined ? [] : _segmentInfo$playlist2,\n      index = segmentInfo.mediaIndex,\n      timeline = segmentInfo.timeline;\n  return ['appending [' + index + '] of [' + seq + ', ' + (seq + segments.length) + '] from playlist [' + id + ']', '[' + start + ' => ' + end + '] in timeline [' + timeline + ']'].join(' ');\n};\n/**\n * An object that manages segment loading and appending.\n *\n * @class SegmentLoader\n * @param {Object} options required and optional options\n * @extends videojs.EventTarget\n */\n\n\nvar SegmentLoader = function (_videojs$EventTarget) {\n  inherits(SegmentLoader, _videojs$EventTarget);\n\n  function SegmentLoader(settings) {\n    classCallCheck(this, SegmentLoader); // check pre-conditions\n\n    var _this = possibleConstructorReturn(this, (SegmentLoader.__proto__ || Object.getPrototypeOf(SegmentLoader)).call(this));\n\n    if (!settings) {\n      throw new TypeError('Initialization settings are required');\n    }\n\n    if (typeof settings.currentTime !== 'function') {\n      throw new TypeError('No currentTime getter specified');\n    }\n\n    if (!settings.mediaSource) {\n      throw new TypeError('No MediaSource specified');\n    } // public properties\n\n\n    _this.bandwidth = settings.bandwidth;\n    _this.throughput = {\n      rate: 0,\n      count: 0\n    };\n    _this.roundTrip = NaN;\n\n    _this.resetStats_();\n\n    _this.mediaIndex = null; // private settings\n\n    _this.hasPlayed_ = settings.hasPlayed;\n    _this.currentTime_ = settings.currentTime;\n    _this.seekable_ = settings.seekable;\n    _this.seeking_ = settings.seeking;\n    _this.duration_ = settings.duration;\n    _this.mediaSource_ = settings.mediaSource;\n    _this.hls_ = settings.hls;\n    _this.loaderType_ = settings.loaderType;\n    _this.startingMedia_ = void 0;\n    _this.segmentMetadataTrack_ = settings.segmentMetadataTrack;\n    _this.goalBufferLength_ = settings.goalBufferLength;\n    _this.sourceType_ = settings.sourceType;\n    _this.inbandTextTracks_ = settings.inbandTextTracks;\n    _this.state_ = 'INIT'; // private instance variables\n\n    _this.checkBufferTimeout_ = null;\n    _this.error_ = void 0;\n    _this.currentTimeline_ = -1;\n    _this.pendingSegment_ = null;\n    _this.mimeType_ = null;\n    _this.sourceUpdater_ = null;\n    _this.xhrOptions_ = null; // Fragmented mp4 playback\n\n    _this.activeInitSegmentId_ = null;\n    _this.initSegments_ = {}; // Fmp4 CaptionParser\n\n    _this.captionParser_ = new CaptionParser();\n    _this.decrypter_ = settings.decrypter; // Manages the tracking and generation of sync-points, mappings\n    // between a time in the display time and a segment index within\n    // a playlist\n\n    _this.syncController_ = settings.syncController;\n    _this.syncPoint_ = {\n      segmentIndex: 0,\n      time: 0\n    };\n\n    _this.syncController_.on('syncinfoupdate', function () {\n      return _this.trigger('syncinfoupdate');\n    });\n\n    _this.mediaSource_.addEventListener('sourceopen', function () {\n      return _this.ended_ = false;\n    }); // ...for determining the fetch location\n\n\n    _this.fetchAtBuffer_ = false;\n    _this.logger_ = logger('SegmentLoader[' + _this.loaderType_ + ']');\n    Object.defineProperty(_this, 'state', {\n      get: function get$$1() {\n        return this.state_;\n      },\n      set: function set$$1(newState) {\n        if (newState !== this.state_) {\n          this.logger_(this.state_ + ' -> ' + newState);\n          this.state_ = newState;\n        }\n      }\n    });\n    return _this;\n  }\n  /**\n   * reset all of our media stats\n   *\n   * @private\n   */\n\n\n  createClass(SegmentLoader, [{\n    key: 'resetStats_',\n    value: function resetStats_() {\n      this.mediaBytesTransferred = 0;\n      this.mediaRequests = 0;\n      this.mediaRequestsAborted = 0;\n      this.mediaRequestsTimedout = 0;\n      this.mediaRequestsErrored = 0;\n      this.mediaTransferDuration = 0;\n      this.mediaSecondsLoaded = 0;\n    }\n    /**\n     * dispose of the SegmentLoader and reset to the default state\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.state = 'DISPOSED';\n      this.pause();\n      this.abort_();\n\n      if (this.sourceUpdater_) {\n        this.sourceUpdater_.dispose();\n      }\n\n      this.resetStats_();\n      this.captionParser_.reset();\n    }\n    /**\n     * abort anything that is currently doing on with the SegmentLoader\n     * and reset to a default state\n     */\n\n  }, {\n    key: 'abort',\n    value: function abort() {\n      if (this.state !== 'WAITING') {\n        if (this.pendingSegment_) {\n          this.pendingSegment_ = null;\n        }\n\n        return;\n      }\n\n      this.abort_(); // We aborted the requests we were waiting on, so reset the loader's state to READY\n      // since we are no longer \"waiting\" on any requests. XHR callback is not always run\n      // when the request is aborted. This will prevent the loader from being stuck in the\n      // WAITING state indefinitely.\n\n      this.state = 'READY'; // don't wait for buffer check timeouts to begin fetching the\n      // next segment\n\n      if (!this.paused()) {\n        this.monitorBuffer_();\n      }\n    }\n    /**\n     * abort all pending xhr requests and null any pending segements\n     *\n     * @private\n     */\n\n  }, {\n    key: 'abort_',\n    value: function abort_() {\n      if (this.pendingSegment_) {\n        this.pendingSegment_.abortRequests();\n      } // clear out the segment being processed\n\n\n      this.pendingSegment_ = null;\n    }\n    /**\n     * set an error on the segment loader and null out any pending segements\n     *\n     * @param {Error} error the error to set on the SegmentLoader\n     * @return {Error} the error that was set or that is currently set\n     */\n\n  }, {\n    key: 'error',\n    value: function error(_error) {\n      if (typeof _error !== 'undefined') {\n        this.error_ = _error;\n      }\n\n      this.pendingSegment_ = null;\n      return this.error_;\n    }\n  }, {\n    key: 'endOfStream',\n    value: function endOfStream() {\n      this.ended_ = true;\n      this.pause();\n      this.trigger('ended');\n    }\n    /**\n     * Indicates which time ranges are buffered\n     *\n     * @return {TimeRange}\n     *         TimeRange object representing the current buffered ranges\n     */\n\n  }, {\n    key: 'buffered_',\n    value: function buffered_() {\n      if (!this.sourceUpdater_) {\n        return videojs$1.createTimeRanges();\n      }\n\n      return this.sourceUpdater_.buffered();\n    }\n    /**\n     * Gets and sets init segment for the provided map\n     *\n     * @param {Object} map\n     *        The map object representing the init segment to get or set\n     * @param {Boolean=} set\n     *        If true, the init segment for the provided map should be saved\n     * @return {Object}\n     *         map object for desired init segment\n     */\n\n  }, {\n    key: 'initSegment',\n    value: function initSegment(map) {\n      var set$$1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!map) {\n        return null;\n      }\n\n      var id = initSegmentId(map);\n      var storedMap = this.initSegments_[id];\n\n      if (set$$1 && !storedMap && map.bytes) {\n        this.initSegments_[id] = storedMap = {\n          resolvedUri: map.resolvedUri,\n          byterange: map.byterange,\n          bytes: map.bytes,\n          timescales: map.timescales,\n          videoTrackIds: map.videoTrackIds\n        };\n      }\n\n      return storedMap || map;\n    }\n    /**\n     * Returns true if all configuration required for loading is present, otherwise false.\n     *\n     * @return {Boolean} True if the all configuration is ready for loading\n     * @private\n     */\n\n  }, {\n    key: 'couldBeginLoading_',\n    value: function couldBeginLoading_() {\n      return this.playlist_ && ( // the source updater is created when init_ is called, so either having a\n      // source updater or being in the INIT state with a mimeType is enough\n      // to say we have all the needed configuration to start loading.\n      this.sourceUpdater_ || this.mimeType_ && this.state === 'INIT') && !this.paused();\n    }\n    /**\n     * load a playlist and start to fill the buffer\n     */\n\n  }, {\n    key: 'load',\n    value: function load() {\n      // un-pause\n      this.monitorBuffer_(); // if we don't have a playlist yet, keep waiting for one to be\n      // specified\n\n      if (!this.playlist_) {\n        return;\n      } // not sure if this is the best place for this\n\n\n      this.syncController_.setDateTimeMapping(this.playlist_); // if all the configuration is ready, initialize and begin loading\n\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        return this.init_();\n      } // if we're in the middle of processing a segment already, don't\n      // kick off an additional segment request\n\n\n      if (!this.couldBeginLoading_() || this.state !== 'READY' && this.state !== 'INIT') {\n        return;\n      }\n\n      this.state = 'READY';\n    }\n    /**\n     * Once all the starting parameters have been specified, begin\n     * operation. This method should only be invoked from the INIT\n     * state.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'init_',\n    value: function init_() {\n      this.state = 'READY';\n      this.sourceUpdater_ = new SourceUpdater(this.mediaSource_, this.mimeType_, this.loaderType_, this.sourceBufferEmitter_);\n      this.resetEverything();\n      return this.monitorBuffer_();\n    }\n    /**\n     * set a playlist on the segment loader\n     *\n     * @param {PlaylistLoader} media the playlist to set on the segment loader\n     */\n\n  }, {\n    key: 'playlist',\n    value: function playlist(newPlaylist) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!newPlaylist) {\n        return;\n      }\n\n      var oldPlaylist = this.playlist_;\n      var segmentInfo = this.pendingSegment_;\n      this.playlist_ = newPlaylist;\n      this.xhrOptions_ = options; // when we haven't started playing yet, the start of a live playlist\n      // is always our zero-time so force a sync update each time the playlist\n      // is refreshed from the server\n\n      if (!this.hasPlayed_()) {\n        newPlaylist.syncInfo = {\n          mediaSequence: newPlaylist.mediaSequence,\n          time: 0\n        };\n      }\n\n      var oldId = null;\n\n      if (oldPlaylist) {\n        if (oldPlaylist.id) {\n          oldId = oldPlaylist.id;\n        } else if (oldPlaylist.uri) {\n          oldId = oldPlaylist.uri;\n        }\n      }\n\n      this.logger_('playlist update [' + oldId + ' => ' + (newPlaylist.id || newPlaylist.uri) + ']'); // in VOD, this is always a rendition switch (or we updated our syncInfo above)\n      // in LIVE, we always want to update with new playlists (including refreshes)\n\n      this.trigger('syncinfoupdate'); // if we were unpaused but waiting for a playlist, start\n      // buffering now\n\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        return this.init_();\n      }\n\n      if (!oldPlaylist || oldPlaylist.uri !== newPlaylist.uri) {\n        if (this.mediaIndex !== null) {\n          // we must \"resync\" the segment loader when we switch renditions and\n          // the segment loader is already synced to the previous rendition\n          this.resyncLoader();\n        } // the rest of this function depends on `oldPlaylist` being defined\n\n\n        return;\n      } // we reloaded the same playlist so we are in a live scenario\n      // and we will likely need to adjust the mediaIndex\n\n\n      var mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;\n      this.logger_('live window shift [' + mediaSequenceDiff + ']'); // update the mediaIndex on the SegmentLoader\n      // this is important because we can abort a request and this value must be\n      // equal to the last appended mediaIndex\n\n      if (this.mediaIndex !== null) {\n        this.mediaIndex -= mediaSequenceDiff;\n      } // update the mediaIndex on the SegmentInfo object\n      // this is important because we will update this.mediaIndex with this value\n      // in `handleUpdateEnd_` after the segment has been successfully appended\n\n\n      if (segmentInfo) {\n        segmentInfo.mediaIndex -= mediaSequenceDiff; // we need to update the referenced segment so that timing information is\n        // saved for the new playlist's segment, however, if the segment fell off the\n        // playlist, we can leave the old reference and just lose the timing info\n\n        if (segmentInfo.mediaIndex >= 0) {\n          segmentInfo.segment = newPlaylist.segments[segmentInfo.mediaIndex];\n        }\n      }\n\n      this.syncController_.saveExpiredSegmentInfo(oldPlaylist, newPlaylist);\n    }\n    /**\n     * Prevent the loader from fetching additional segments. If there\n     * is a segment request outstanding, it will finish processing\n     * before the loader halts. A segment loader can be unpaused by\n     * calling load().\n     */\n\n  }, {\n    key: 'pause',\n    value: function pause() {\n      if (this.checkBufferTimeout_) {\n        window$1.clearTimeout(this.checkBufferTimeout_);\n        this.checkBufferTimeout_ = null;\n      }\n    }\n    /**\n     * Returns whether the segment loader is fetching additional\n     * segments when given the opportunity. This property can be\n     * modified through calls to pause() and load().\n     */\n\n  }, {\n    key: 'paused',\n    value: function paused() {\n      return this.checkBufferTimeout_ === null;\n    }\n    /**\n     * create/set the following mimetype on the SourceBuffer through a\n     * SourceUpdater\n     *\n     * @param {String} mimeType the mime type string to use\n     * @param {Object} sourceBufferEmitter an event emitter that fires when a source buffer\n     * is added to the media source\n     */\n\n  }, {\n    key: 'mimeType',\n    value: function mimeType(_mimeType, sourceBufferEmitter) {\n      if (this.mimeType_) {\n        return;\n      }\n\n      this.mimeType_ = _mimeType;\n      this.sourceBufferEmitter_ = sourceBufferEmitter; // if we were unpaused but waiting for a sourceUpdater, start\n      // buffering now\n\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        this.init_();\n      }\n    }\n    /**\n     * Delete all the buffered data and reset the SegmentLoader\n     * @param {Function} [done] an optional callback to be executed when the remove\n     * operation is complete\n     */\n\n  }, {\n    key: 'resetEverything',\n    value: function resetEverything(done) {\n      this.ended_ = false;\n      this.resetLoader();\n      this.remove(0, this.duration_(), done); // clears fmp4 captions\n\n      this.captionParser_.clearAllCaptions();\n      this.trigger('reseteverything');\n    }\n    /**\n     * Force the SegmentLoader to resync and start loading around the currentTime instead\n     * of starting at the end of the buffer\n     *\n     * Useful for fast quality changes\n     */\n\n  }, {\n    key: 'resetLoader',\n    value: function resetLoader() {\n      this.fetchAtBuffer_ = false;\n      this.resyncLoader();\n    }\n    /**\n     * Force the SegmentLoader to restart synchronization and make a conservative guess\n     * before returning to the simple walk-forward method\n     */\n\n  }, {\n    key: 'resyncLoader',\n    value: function resyncLoader() {\n      this.mediaIndex = null;\n      this.syncPoint_ = null;\n      this.abort();\n    }\n    /**\n     * Remove any data in the source buffer between start and end times\n     * @param {Number} start - the start time of the region to remove from the buffer\n     * @param {Number} end - the end time of the region to remove from the buffer\n     * @param {Function} [done] - an optional callback to be executed when the remove\n     * operation is complete\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(start, end, done) {\n      if (this.sourceUpdater_) {\n        this.sourceUpdater_.remove(start, end, done);\n      }\n\n      removeCuesFromTrack(start, end, this.segmentMetadataTrack_);\n\n      if (this.inbandTextTracks_) {\n        for (var id in this.inbandTextTracks_) {\n          removeCuesFromTrack(start, end, this.inbandTextTracks_[id]);\n        }\n      }\n    }\n    /**\n     * (re-)schedule monitorBufferTick_ to run as soon as possible\n     *\n     * @private\n     */\n\n  }, {\n    key: 'monitorBuffer_',\n    value: function monitorBuffer_() {\n      if (this.checkBufferTimeout_) {\n        window$1.clearTimeout(this.checkBufferTimeout_);\n      }\n\n      this.checkBufferTimeout_ = window$1.setTimeout(this.monitorBufferTick_.bind(this), 1);\n    }\n    /**\n     * As long as the SegmentLoader is in the READY state, periodically\n     * invoke fillBuffer_().\n     *\n     * @private\n     */\n\n  }, {\n    key: 'monitorBufferTick_',\n    value: function monitorBufferTick_() {\n      if (this.state === 'READY') {\n        this.fillBuffer_();\n      }\n\n      if (this.checkBufferTimeout_) {\n        window$1.clearTimeout(this.checkBufferTimeout_);\n      }\n\n      this.checkBufferTimeout_ = window$1.setTimeout(this.monitorBufferTick_.bind(this), CHECK_BUFFER_DELAY);\n    }\n    /**\n     * fill the buffer with segements unless the sourceBuffers are\n     * currently updating\n     *\n     * Note: this function should only ever be called by monitorBuffer_\n     * and never directly\n     *\n     * @private\n     */\n\n  }, {\n    key: 'fillBuffer_',\n    value: function fillBuffer_() {\n      if (this.sourceUpdater_.updating()) {\n        return;\n      }\n\n      if (!this.syncPoint_) {\n        this.syncPoint_ = this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());\n      } // see if we need to begin loading immediately\n\n\n      var segmentInfo = this.checkBuffer_(this.buffered_(), this.playlist_, this.mediaIndex, this.hasPlayed_(), this.currentTime_(), this.syncPoint_);\n\n      if (!segmentInfo) {\n        return;\n      }\n\n      if (this.isEndOfStream_(segmentInfo.mediaIndex)) {\n        this.endOfStream();\n        return;\n      }\n\n      if (segmentInfo.mediaIndex === this.playlist_.segments.length - 1 && this.mediaSource_.readyState === 'ended' && !this.seeking_()) {\n        return;\n      } // We will need to change timestampOffset of the sourceBuffer if either of\n      // the following conditions are true:\n      // - The segment.timeline !== this.currentTimeline\n      //   (we are crossing a discontinuity somehow)\n      // - The \"timestampOffset\" for the start of this segment is less than\n      //   the currently set timestampOffset\n      // Also, clear captions if we are crossing a discontinuity boundary\n\n\n      if (segmentInfo.timeline !== this.currentTimeline_ || segmentInfo.startOfSegment !== null && segmentInfo.startOfSegment < this.sourceUpdater_.timestampOffset()) {\n        this.syncController_.reset();\n        segmentInfo.timestampOffset = segmentInfo.startOfSegment;\n        this.captionParser_.clearAllCaptions();\n      }\n\n      this.loadSegment_(segmentInfo);\n    }\n    /**\n     * Determines if this segment loader is at the end of it's stream.\n     *\n     * @param {Number} mediaIndex the index of segment we last appended\n     * @param {Object} [playlist=this.playlist_] a media playlist object\n     * @returns {Boolean} true if at end of stream, false otherwise.\n     */\n\n  }, {\n    key: 'isEndOfStream_',\n    value: function isEndOfStream_(mediaIndex) {\n      var playlist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.playlist_;\n      return detectEndOfStream(playlist, this.mediaSource_, mediaIndex) && !this.sourceUpdater_.updating();\n    }\n    /**\n     * Determines what segment request should be made, given current playback\n     * state.\n     *\n     * @param {TimeRanges} buffered - the state of the buffer\n     * @param {Object} playlist - the playlist object to fetch segments from\n     * @param {Number} mediaIndex - the previous mediaIndex fetched or null\n     * @param {Boolean} hasPlayed - a flag indicating whether we have played or not\n     * @param {Number} currentTime - the playback position in seconds\n     * @param {Object} syncPoint - a segment info object that describes the\n     * @returns {Object} a segment request object that describes the segment to load\n     */\n\n  }, {\n    key: 'checkBuffer_',\n    value: function checkBuffer_(buffered, playlist, mediaIndex, hasPlayed, currentTime, syncPoint) {\n      var lastBufferedEnd = 0;\n      var startOfSegment = void 0;\n\n      if (buffered.length) {\n        lastBufferedEnd = buffered.end(buffered.length - 1);\n      }\n\n      var bufferedTime = Math.max(0, lastBufferedEnd - currentTime);\n\n      if (!playlist.segments.length) {\n        return null;\n      } // if there is plenty of content buffered, and the video has\n      // been played before relax for awhile\n\n\n      if (bufferedTime >= this.goalBufferLength_()) {\n        return null;\n      } // if the video has not yet played once, and we already have\n      // one segment downloaded do nothing\n\n\n      if (!hasPlayed && bufferedTime >= 1) {\n        return null;\n      } // When the syncPoint is null, there is no way of determining a good\n      // conservative segment index to fetch from\n      // The best thing to do here is to get the kind of sync-point data by\n      // making a request\n\n\n      if (syncPoint === null) {\n        mediaIndex = this.getSyncSegmentCandidate_(playlist);\n        return this.generateSegmentInfo_(playlist, mediaIndex, null, true);\n      } // Under normal playback conditions fetching is a simple walk forward\n\n\n      if (mediaIndex !== null) {\n        var segment = playlist.segments[mediaIndex];\n\n        if (segment && segment.end) {\n          startOfSegment = segment.end;\n        } else {\n          startOfSegment = lastBufferedEnd;\n        }\n\n        return this.generateSegmentInfo_(playlist, mediaIndex + 1, startOfSegment, false);\n      } // There is a sync-point but the lack of a mediaIndex indicates that\n      // we need to make a good conservative guess about which segment to\n      // fetch\n\n\n      if (this.fetchAtBuffer_) {\n        // Find the segment containing the end of the buffer\n        var mediaSourceInfo = Playlist.getMediaInfoForTime(playlist, lastBufferedEnd, syncPoint.segmentIndex, syncPoint.time);\n        mediaIndex = mediaSourceInfo.mediaIndex;\n        startOfSegment = mediaSourceInfo.startTime;\n      } else {\n        // Find the segment containing currentTime\n        var _mediaSourceInfo = Playlist.getMediaInfoForTime(playlist, currentTime, syncPoint.segmentIndex, syncPoint.time);\n\n        mediaIndex = _mediaSourceInfo.mediaIndex;\n        startOfSegment = _mediaSourceInfo.startTime;\n      }\n\n      return this.generateSegmentInfo_(playlist, mediaIndex, startOfSegment, false);\n    }\n    /**\n     * The segment loader has no recourse except to fetch a segment in the\n     * current playlist and use the internal timestamps in that segment to\n     * generate a syncPoint. This function returns a good candidate index\n     * for that process.\n     *\n     * @param {Object} playlist - the playlist object to look for a\n     * @returns {Number} An index of a segment from the playlist to load\n     */\n\n  }, {\n    key: 'getSyncSegmentCandidate_',\n    value: function getSyncSegmentCandidate_(playlist) {\n      var _this2 = this;\n\n      if (this.currentTimeline_ === -1) {\n        return 0;\n      }\n\n      var segmentIndexArray = playlist.segments.map(function (s, i) {\n        return {\n          timeline: s.timeline,\n          segmentIndex: i\n        };\n      }).filter(function (s) {\n        return s.timeline === _this2.currentTimeline_;\n      });\n\n      if (segmentIndexArray.length) {\n        return segmentIndexArray[Math.min(segmentIndexArray.length - 1, 1)].segmentIndex;\n      }\n\n      return Math.max(playlist.segments.length - 1, 0);\n    }\n  }, {\n    key: 'generateSegmentInfo_',\n    value: function generateSegmentInfo_(playlist, mediaIndex, startOfSegment, isSyncRequest) {\n      if (mediaIndex < 0 || mediaIndex >= playlist.segments.length) {\n        return null;\n      }\n\n      var segment = playlist.segments[mediaIndex];\n      return {\n        requestId: 'segment-loader-' + Math.random(),\n        // resolve the segment URL relative to the playlist\n        uri: segment.resolvedUri,\n        // the segment's mediaIndex at the time it was requested\n        mediaIndex: mediaIndex,\n        // whether or not to update the SegmentLoader's state with this\n        // segment's mediaIndex\n        isSyncRequest: isSyncRequest,\n        startOfSegment: startOfSegment,\n        // the segment's playlist\n        playlist: playlist,\n        // unencrypted bytes of the segment\n        bytes: null,\n        // when a key is defined for this segment, the encrypted bytes\n        encryptedBytes: null,\n        // The target timestampOffset for this segment when we append it\n        // to the source buffer\n        timestampOffset: null,\n        // The timeline that the segment is in\n        timeline: segment.timeline,\n        // The expected duration of the segment in seconds\n        duration: segment.duration,\n        // retain the segment in case the playlist updates while doing an async process\n        segment: segment\n      };\n    }\n    /**\n     * Determines if the network has enough bandwidth to complete the current segment\n     * request in a timely manner. If not, the request will be aborted early and bandwidth\n     * updated to trigger a playlist switch.\n     *\n     * @param {Object} stats\n     *        Object containing stats about the request timing and size\n     * @return {Boolean} True if the request was aborted, false otherwise\n     * @private\n     */\n\n  }, {\n    key: 'abortRequestEarly_',\n    value: function abortRequestEarly_(stats) {\n      if (this.hls_.tech_.paused() || // Don't abort if the current playlist is on the lowestEnabledRendition\n      // TODO: Replace using timeout with a boolean indicating whether this playlist is\n      //       the lowestEnabledRendition.\n      !this.xhrOptions_.timeout || // Don't abort if we have no bandwidth information to estimate segment sizes\n      !this.playlist_.attributes.BANDWIDTH) {\n        return false;\n      } // Wait at least 1 second since the first byte of data has been received before\n      // using the calculated bandwidth from the progress event to allow the bitrate\n      // to stabilize\n\n\n      if (Date.now() - (stats.firstBytesReceivedAt || Date.now()) < 1000) {\n        return false;\n      }\n\n      var currentTime = this.currentTime_();\n      var measuredBandwidth = stats.bandwidth;\n      var segmentDuration = this.pendingSegment_.duration;\n      var requestTimeRemaining = Playlist.estimateSegmentRequestTime(segmentDuration, measuredBandwidth, this.playlist_, stats.bytesReceived); // Subtract 1 from the timeUntilRebuffer so we still consider an early abort\n      // if we are only left with less than 1 second when the request completes.\n      // A negative timeUntilRebuffering indicates we are already rebuffering\n\n      var timeUntilRebuffer$$1 = timeUntilRebuffer(this.buffered_(), currentTime, this.hls_.tech_.playbackRate()) - 1; // Only consider aborting early if the estimated time to finish the download\n      // is larger than the estimated time until the player runs out of forward buffer\n\n      if (requestTimeRemaining <= timeUntilRebuffer$$1) {\n        return false;\n      }\n\n      var switchCandidate = minRebufferMaxBandwidthSelector({\n        master: this.hls_.playlists.master,\n        currentTime: currentTime,\n        bandwidth: measuredBandwidth,\n        duration: this.duration_(),\n        segmentDuration: segmentDuration,\n        timeUntilRebuffer: timeUntilRebuffer$$1,\n        currentTimeline: this.currentTimeline_,\n        syncController: this.syncController_\n      });\n\n      if (!switchCandidate) {\n        return;\n      }\n\n      var rebufferingImpact = requestTimeRemaining - timeUntilRebuffer$$1;\n      var timeSavedBySwitching = rebufferingImpact - switchCandidate.rebufferingImpact;\n      var minimumTimeSaving = 0.5; // If we are already rebuffering, increase the amount of variance we add to the\n      // potential round trip time of the new request so that we are not too aggressive\n      // with switching to a playlist that might save us a fraction of a second.\n\n      if (timeUntilRebuffer$$1 <= TIME_FUDGE_FACTOR) {\n        minimumTimeSaving = 1;\n      }\n\n      if (!switchCandidate.playlist || switchCandidate.playlist.uri === this.playlist_.uri || timeSavedBySwitching < minimumTimeSaving) {\n        return false;\n      } // set the bandwidth to that of the desired playlist being sure to scale by\n      // BANDWIDTH_VARIANCE and add one so the playlist selector does not exclude it\n      // don't trigger a bandwidthupdate as the bandwidth is artifial\n\n\n      this.bandwidth = switchCandidate.playlist.attributes.BANDWIDTH * Config.BANDWIDTH_VARIANCE + 1;\n      this.abort();\n      this.trigger('earlyabort');\n      return true;\n    }\n    /**\n     * XHR `progress` event handler\n     *\n     * @param {Event}\n     *        The XHR `progress` event\n     * @param {Object} simpleSegment\n     *        A simplified segment object copy\n     * @private\n     */\n\n  }, {\n    key: 'handleProgress_',\n    value: function handleProgress_(event, simpleSegment) {\n      if (!this.pendingSegment_ || simpleSegment.requestId !== this.pendingSegment_.requestId || this.abortRequestEarly_(simpleSegment.stats)) {\n        return;\n      }\n\n      this.trigger('progress');\n    }\n    /**\n     * load a specific segment from a request into the buffer\n     *\n     * @private\n     */\n\n  }, {\n    key: 'loadSegment_',\n    value: function loadSegment_(segmentInfo) {\n      this.state = 'WAITING';\n      this.pendingSegment_ = segmentInfo;\n      this.trimBackBuffer_(segmentInfo);\n      segmentInfo.abortRequests = mediaSegmentRequest(this.hls_.xhr, this.xhrOptions_, this.decrypter_, this.captionParser_, this.createSimplifiedSegmentObj_(segmentInfo), // progress callback\n      this.handleProgress_.bind(this), this.segmentRequestFinished_.bind(this));\n    }\n    /**\n     * trim the back buffer so that we don't have too much data\n     * in the source buffer\n     *\n     * @private\n     *\n     * @param {Object} segmentInfo - the current segment\n     */\n\n  }, {\n    key: 'trimBackBuffer_',\n    value: function trimBackBuffer_(segmentInfo) {\n      var removeToTime = safeBackBufferTrimTime(this.seekable_(), this.currentTime_(), this.playlist_.targetDuration || 10); // Chrome has a hard limit of 150MB of\n      // buffer and a very conservative \"garbage collector\"\n      // We manually clear out the old buffer to ensure\n      // we don't trigger the QuotaExceeded error\n      // on the source buffer during subsequent appends\n\n      if (removeToTime > 0) {\n        this.remove(0, removeToTime);\n      }\n    }\n    /**\n     * created a simplified copy of the segment object with just the\n     * information necessary to perform the XHR and decryption\n     *\n     * @private\n     *\n     * @param {Object} segmentInfo - the current segment\n     * @returns {Object} a simplified segment object copy\n     */\n\n  }, {\n    key: 'createSimplifiedSegmentObj_',\n    value: function createSimplifiedSegmentObj_(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var simpleSegment = {\n        resolvedUri: segment.resolvedUri,\n        byterange: segment.byterange,\n        requestId: segmentInfo.requestId\n      };\n\n      if (segment.key) {\n        // if the media sequence is greater than 2^32, the IV will be incorrect\n        // assuming 10s segments, that would be about 1300 years\n        var iv = segment.key.iv || new Uint32Array([0, 0, 0, segmentInfo.mediaIndex + segmentInfo.playlist.mediaSequence]);\n        simpleSegment.key = {\n          resolvedUri: segment.key.resolvedUri,\n          iv: iv\n        };\n      }\n\n      if (segment.map) {\n        simpleSegment.map = this.initSegment(segment.map);\n      }\n\n      return simpleSegment;\n    }\n    /**\n     * Handle the callback from the segmentRequest function and set the\n     * associated SegmentLoader state and errors if necessary\n     *\n     * @private\n     */\n\n  }, {\n    key: 'segmentRequestFinished_',\n    value: function segmentRequestFinished_(error, simpleSegment) {\n      // every request counts as a media request even if it has been aborted\n      // or canceled due to a timeout\n      this.mediaRequests += 1;\n\n      if (simpleSegment.stats) {\n        this.mediaBytesTransferred += simpleSegment.stats.bytesReceived;\n        this.mediaTransferDuration += simpleSegment.stats.roundTripTime;\n      } // The request was aborted and the SegmentLoader has already been reset\n\n\n      if (!this.pendingSegment_) {\n        this.mediaRequestsAborted += 1;\n        return;\n      } // the request was aborted and the SegmentLoader has already started\n      // another request. this can happen when the timeout for an aborted\n      // request triggers due to a limitation in the XHR library\n      // do not count this as any sort of request or we risk double-counting\n\n\n      if (simpleSegment.requestId !== this.pendingSegment_.requestId) {\n        return;\n      } // an error occurred from the active pendingSegment_ so reset everything\n\n\n      if (error) {\n        this.pendingSegment_ = null;\n        this.state = 'READY'; // the requests were aborted just record the aborted stat and exit\n        // this is not a true error condition and nothing corrective needs\n        // to be done\n\n        if (error.code === REQUEST_ERRORS.ABORTED) {\n          this.mediaRequestsAborted += 1;\n          return;\n        }\n\n        this.pause(); // the error is really just that at least one of the requests timed-out\n        // set the bandwidth to a very low value and trigger an ABR switch to\n        // take emergency action\n\n        if (error.code === REQUEST_ERRORS.TIMEOUT) {\n          this.mediaRequestsTimedout += 1;\n          this.bandwidth = 1;\n          this.roundTrip = NaN;\n          this.trigger('bandwidthupdate');\n          return;\n        } // if control-flow has arrived here, then the error is real\n        // emit an error event to blacklist the current playlist\n\n\n        this.mediaRequestsErrored += 1;\n        this.error(error);\n        this.trigger('error');\n        return;\n      } // the response was a success so set any bandwidth stats the request\n      // generated for ABR purposes\n\n\n      this.bandwidth = simpleSegment.stats.bandwidth;\n      this.roundTrip = simpleSegment.stats.roundTripTime; // if this request included an initialization segment, save that data\n      // to the initSegment cache\n\n      if (simpleSegment.map) {\n        simpleSegment.map = this.initSegment(simpleSegment.map, true);\n      }\n\n      this.processSegmentResponse_(simpleSegment);\n    }\n    /**\n     * Move any important data from the simplified segment object\n     * back to the real segment object for future phases\n     *\n     * @private\n     */\n\n  }, {\n    key: 'processSegmentResponse_',\n    value: function processSegmentResponse_(simpleSegment) {\n      var segmentInfo = this.pendingSegment_;\n      segmentInfo.bytes = simpleSegment.bytes;\n\n      if (simpleSegment.map) {\n        segmentInfo.segment.map.bytes = simpleSegment.map.bytes;\n      }\n\n      segmentInfo.endOfAllRequests = simpleSegment.endOfAllRequests; // This has fmp4 captions, add them to text tracks\n\n      if (simpleSegment.fmp4Captions) {\n        createCaptionsTrackIfNotExists(this.inbandTextTracks_, this.hls_.tech_, simpleSegment.captionStreams);\n        addCaptionData({\n          inbandTextTracks: this.inbandTextTracks_,\n          captionArray: simpleSegment.fmp4Captions,\n          // fmp4s will not have a timestamp offset\n          timestampOffset: 0\n        }); // Reset stored captions since we added parsed\n        // captions to a text track at this point\n\n        this.captionParser_.clearParsedCaptions();\n      }\n\n      this.handleSegment_();\n    }\n    /**\n     * append a decrypted segement to the SourceBuffer through a SourceUpdater\n     *\n     * @private\n     */\n\n  }, {\n    key: 'handleSegment_',\n    value: function handleSegment_() {\n      var _this3 = this;\n\n      if (!this.pendingSegment_) {\n        this.state = 'READY';\n        return;\n      }\n\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment;\n      var timingInfo = this.syncController_.probeSegmentInfo(segmentInfo); // When we have our first timing info, determine what media types this loader is\n      // dealing with. Although we're maintaining extra state, it helps to preserve the\n      // separation of segment loader from the actual source buffers.\n\n      if (typeof this.startingMedia_ === 'undefined' && timingInfo && ( // Guard against cases where we're not getting timing info at all until we are\n      // certain that all streams will provide it.\n      timingInfo.containsAudio || timingInfo.containsVideo)) {\n        this.startingMedia_ = {\n          containsAudio: timingInfo.containsAudio,\n          containsVideo: timingInfo.containsVideo\n        };\n      }\n\n      var illegalMediaSwitchError = illegalMediaSwitch(this.loaderType_, this.startingMedia_, timingInfo);\n\n      if (illegalMediaSwitchError) {\n        this.error({\n          message: illegalMediaSwitchError,\n          blacklistDuration: Infinity\n        });\n        this.trigger('error');\n        return;\n      }\n\n      if (segmentInfo.isSyncRequest) {\n        this.trigger('syncinfoupdate');\n        this.pendingSegment_ = null;\n        this.state = 'READY';\n        return;\n      }\n\n      if (segmentInfo.timestampOffset !== null && segmentInfo.timestampOffset !== this.sourceUpdater_.timestampOffset()) {\n        this.sourceUpdater_.timestampOffset(segmentInfo.timestampOffset); // fired when a timestamp offset is set in HLS (can also identify discontinuities)\n\n        this.trigger('timestampoffset');\n      }\n\n      var timelineMapping = this.syncController_.mappingForTimeline(segmentInfo.timeline);\n\n      if (timelineMapping !== null) {\n        this.trigger({\n          type: 'segmenttimemapping',\n          mapping: timelineMapping\n        });\n      }\n\n      this.state = 'APPENDING'; // if the media initialization segment is changing, append it\n      // before the content segment\n\n      if (segment.map) {\n        var initId = initSegmentId(segment.map);\n\n        if (!this.activeInitSegmentId_ || this.activeInitSegmentId_ !== initId) {\n          var initSegment = this.initSegment(segment.map);\n          this.sourceUpdater_.appendBuffer({\n            bytes: initSegment.bytes\n          }, function () {\n            _this3.activeInitSegmentId_ = initId;\n          });\n        }\n      }\n\n      segmentInfo.byteLength = segmentInfo.bytes.byteLength;\n\n      if (typeof segment.start === 'number' && typeof segment.end === 'number') {\n        this.mediaSecondsLoaded += segment.end - segment.start;\n      } else {\n        this.mediaSecondsLoaded += segment.duration;\n      }\n\n      this.logger_(segmentInfoString(segmentInfo));\n      this.sourceUpdater_.appendBuffer({\n        bytes: segmentInfo.bytes,\n        videoSegmentTimingInfoCallback: this.handleVideoSegmentTimingInfo_.bind(this, segmentInfo.requestId)\n      }, this.handleUpdateEnd_.bind(this));\n    }\n  }, {\n    key: 'handleVideoSegmentTimingInfo_',\n    value: function handleVideoSegmentTimingInfo_(requestId, event) {\n      if (!this.pendingSegment_ || requestId !== this.pendingSegment_.requestId) {\n        return;\n      }\n\n      var segment = this.pendingSegment_.segment;\n\n      if (!segment.videoTimingInfo) {\n        segment.videoTimingInfo = {};\n      }\n\n      segment.videoTimingInfo.transmuxerPrependedSeconds = event.videoSegmentTimingInfo.prependedContentDuration || 0;\n      segment.videoTimingInfo.transmuxedPresentationStart = event.videoSegmentTimingInfo.start.presentation;\n      segment.videoTimingInfo.transmuxedPresentationEnd = event.videoSegmentTimingInfo.end.presentation; // mainly used as a reference for debugging\n\n      segment.videoTimingInfo.baseMediaDecodeTime = event.videoSegmentTimingInfo.baseMediaDecodeTime;\n    }\n    /**\n     * callback to run when appendBuffer is finished. detects if we are\n     * in a good state to do things with the data we got, or if we need\n     * to wait for more\n     *\n     * @private\n     */\n\n  }, {\n    key: 'handleUpdateEnd_',\n    value: function handleUpdateEnd_() {\n      if (!this.pendingSegment_) {\n        this.state = 'READY';\n\n        if (!this.paused()) {\n          this.monitorBuffer_();\n        }\n\n        return;\n      }\n\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment;\n      var isWalkingForward = this.mediaIndex !== null;\n      this.pendingSegment_ = null;\n      this.recordThroughput_(segmentInfo);\n      this.addSegmentMetadataCue_(segmentInfo);\n      this.state = 'READY';\n      this.mediaIndex = segmentInfo.mediaIndex;\n      this.fetchAtBuffer_ = true;\n      this.currentTimeline_ = segmentInfo.timeline; // We must update the syncinfo to recalculate the seekable range before\n      // the following conditional otherwise it may consider this a bad \"guess\"\n      // and attempt to resync when the post-update seekable window and live\n      // point would mean that this was the perfect segment to fetch\n\n      this.trigger('syncinfoupdate'); // If we previously appended a segment that ends more than 3 targetDurations before\n      // the currentTime_ that means that our conservative guess was too conservative.\n      // In that case, reset the loader state so that we try to use any information gained\n      // from the previous request to create a new, more accurate, sync-point.\n\n      if (segment.end && this.currentTime_() - segment.end > segmentInfo.playlist.targetDuration * 3) {\n        this.resetEverything();\n        return;\n      } // Don't do a rendition switch unless we have enough time to get a sync segment\n      // and conservatively guess\n\n\n      if (isWalkingForward) {\n        this.trigger('bandwidthupdate');\n      }\n\n      this.trigger('progress'); // any time an update finishes and the last segment is in the\n      // buffer, end the stream. this ensures the \"ended\" event will\n      // fire if playback reaches that point.\n\n      if (this.isEndOfStream_(segmentInfo.mediaIndex + 1, segmentInfo.playlist)) {\n        this.endOfStream();\n      }\n\n      if (!this.paused()) {\n        this.monitorBuffer_();\n      }\n    }\n    /**\n     * Records the current throughput of the decrypt, transmux, and append\n     * portion of the semgment pipeline. `throughput.rate` is a the cumulative\n     * moving average of the throughput. `throughput.count` is the number of\n     * data points in the average.\n     *\n     * @private\n     * @param {Object} segmentInfo the object returned by loadSegment\n     */\n\n  }, {\n    key: 'recordThroughput_',\n    value: function recordThroughput_(segmentInfo) {\n      var rate = this.throughput.rate; // Add one to the time to ensure that we don't accidentally attempt to divide\n      // by zero in the case where the throughput is ridiculously high\n\n      var segmentProcessingTime = Date.now() - segmentInfo.endOfAllRequests + 1; // Multiply by 8000 to convert from bytes/millisecond to bits/second\n\n      var segmentProcessingThroughput = Math.floor(segmentInfo.byteLength / segmentProcessingTime * 8 * 1000); // This is just a cumulative moving average calculation:\n      //   newAvg = oldAvg + (sample - oldAvg) / (sampleCount + 1)\n\n      this.throughput.rate += (segmentProcessingThroughput - rate) / ++this.throughput.count;\n    }\n    /**\n     * Adds a cue to the segment-metadata track with some metadata information about the\n     * segment\n     *\n     * @private\n     * @param {Object} segmentInfo\n     *        the object returned by loadSegment\n     * @method addSegmentMetadataCue_\n     */\n\n  }, {\n    key: 'addSegmentMetadataCue_',\n    value: function addSegmentMetadataCue_(segmentInfo) {\n      if (!this.segmentMetadataTrack_) {\n        return;\n      }\n\n      var segment = segmentInfo.segment;\n      var start = segment.start;\n      var end = segment.end; // Do not try adding the cue if the start and end times are invalid.\n\n      if (!finite(start) || !finite(end)) {\n        return;\n      }\n\n      removeCuesFromTrack(start, end, this.segmentMetadataTrack_);\n      var Cue = window$1.WebKitDataCue || window$1.VTTCue;\n      var value = {\n        custom: segment.custom,\n        dateTimeObject: segment.dateTimeObject,\n        dateTimeString: segment.dateTimeString,\n        bandwidth: segmentInfo.playlist.attributes.BANDWIDTH,\n        resolution: segmentInfo.playlist.attributes.RESOLUTION,\n        codecs: segmentInfo.playlist.attributes.CODECS,\n        byteLength: segmentInfo.byteLength,\n        uri: segmentInfo.uri,\n        timeline: segmentInfo.timeline,\n        playlist: segmentInfo.playlist.uri,\n        start: start,\n        end: end\n      };\n      var data = JSON.stringify(value);\n      var cue = new Cue(start, end, data); // Attach the metadata to the value property of the cue to keep consistency between\n      // the differences of WebKitDataCue in safari and VTTCue in other browsers\n\n      cue.value = value;\n      this.segmentMetadataTrack_.addCue(cue);\n    }\n  }]);\n  return SegmentLoader;\n}(videojs$1.EventTarget);\n\nvar uint8ToUtf8 = function uint8ToUtf8(uintArray) {\n  return decodeURIComponent(escape(String.fromCharCode.apply(null, uintArray)));\n};\n/**\n * @file vtt-segment-loader.js\n */\n\n\nvar VTT_LINE_TERMINATORS = new Uint8Array('\\n\\n'.split('').map(function (char) {\n  return char.charCodeAt(0);\n}));\n/**\n * An object that manages segment loading and appending.\n *\n * @class VTTSegmentLoader\n * @param {Object} options required and optional options\n * @extends videojs.EventTarget\n */\n\nvar VTTSegmentLoader = function (_SegmentLoader) {\n  inherits(VTTSegmentLoader, _SegmentLoader);\n\n  function VTTSegmentLoader(settings) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, VTTSegmentLoader); // SegmentLoader requires a MediaSource be specified or it will throw an error;\n    // however, VTTSegmentLoader has no need of a media source, so delete the reference\n\n    var _this = possibleConstructorReturn(this, (VTTSegmentLoader.__proto__ || Object.getPrototypeOf(VTTSegmentLoader)).call(this, settings, options));\n\n    _this.mediaSource_ = null;\n    _this.subtitlesTrack_ = null;\n    return _this;\n  }\n  /**\n   * Indicates which time ranges are buffered\n   *\n   * @return {TimeRange}\n   *         TimeRange object representing the current buffered ranges\n   */\n\n\n  createClass(VTTSegmentLoader, [{\n    key: 'buffered_',\n    value: function buffered_() {\n      if (!this.subtitlesTrack_ || !this.subtitlesTrack_.cues.length) {\n        return videojs$1.createTimeRanges();\n      }\n\n      var cues = this.subtitlesTrack_.cues;\n      var start = cues[0].startTime;\n      var end = cues[cues.length - 1].startTime;\n      return videojs$1.createTimeRanges([[start, end]]);\n    }\n    /**\n     * Gets and sets init segment for the provided map\n     *\n     * @param {Object} map\n     *        The map object representing the init segment to get or set\n     * @param {Boolean=} set\n     *        If true, the init segment for the provided map should be saved\n     * @return {Object}\n     *         map object for desired init segment\n     */\n\n  }, {\n    key: 'initSegment',\n    value: function initSegment(map) {\n      var set$$1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!map) {\n        return null;\n      }\n\n      var id = initSegmentId(map);\n      var storedMap = this.initSegments_[id];\n\n      if (set$$1 && !storedMap && map.bytes) {\n        // append WebVTT line terminators to the media initialization segment if it exists\n        // to follow the WebVTT spec (https://w3c.github.io/webvtt/#file-structure) that\n        // requires two or more WebVTT line terminators between the WebVTT header and the\n        // rest of the file\n        var combinedByteLength = VTT_LINE_TERMINATORS.byteLength + map.bytes.byteLength;\n        var combinedSegment = new Uint8Array(combinedByteLength);\n        combinedSegment.set(map.bytes);\n        combinedSegment.set(VTT_LINE_TERMINATORS, map.bytes.byteLength);\n        this.initSegments_[id] = storedMap = {\n          resolvedUri: map.resolvedUri,\n          byterange: map.byterange,\n          bytes: combinedSegment\n        };\n      }\n\n      return storedMap || map;\n    }\n    /**\n     * Returns true if all configuration required for loading is present, otherwise false.\n     *\n     * @return {Boolean} True if the all configuration is ready for loading\n     * @private\n     */\n\n  }, {\n    key: 'couldBeginLoading_',\n    value: function couldBeginLoading_() {\n      return this.playlist_ && this.subtitlesTrack_ && !this.paused();\n    }\n    /**\n     * Once all the starting parameters have been specified, begin\n     * operation. This method should only be invoked from the INIT\n     * state.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'init_',\n    value: function init_() {\n      this.state = 'READY';\n      this.resetEverything();\n      return this.monitorBuffer_();\n    }\n    /**\n     * Set a subtitle track on the segment loader to add subtitles to\n     *\n     * @param {TextTrack=} track\n     *        The text track to add loaded subtitles to\n     * @return {TextTrack}\n     *        Returns the subtitles track\n     */\n\n  }, {\n    key: 'track',\n    value: function track(_track) {\n      if (typeof _track === 'undefined') {\n        return this.subtitlesTrack_;\n      }\n\n      this.subtitlesTrack_ = _track; // if we were unpaused but waiting for a sourceUpdater, start\n      // buffering now\n\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        this.init_();\n      }\n\n      return this.subtitlesTrack_;\n    }\n    /**\n     * Remove any data in the source buffer between start and end times\n     * @param {Number} start - the start time of the region to remove from the buffer\n     * @param {Number} end - the end time of the region to remove from the buffer\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      removeCuesFromTrack(start, end, this.subtitlesTrack_);\n    }\n    /**\n     * fill the buffer with segements unless the sourceBuffers are\n     * currently updating\n     *\n     * Note: this function should only ever be called by monitorBuffer_\n     * and never directly\n     *\n     * @private\n     */\n\n  }, {\n    key: 'fillBuffer_',\n    value: function fillBuffer_() {\n      var _this2 = this;\n\n      if (!this.syncPoint_) {\n        this.syncPoint_ = this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());\n      } // see if we need to begin loading immediately\n\n\n      var segmentInfo = this.checkBuffer_(this.buffered_(), this.playlist_, this.mediaIndex, this.hasPlayed_(), this.currentTime_(), this.syncPoint_);\n      segmentInfo = this.skipEmptySegments_(segmentInfo);\n\n      if (!segmentInfo) {\n        return;\n      }\n\n      if (this.syncController_.timestampOffsetForTimeline(segmentInfo.timeline) === null) {\n        // We don't have the timestamp offset that we need to sync subtitles.\n        // Rerun on a timestamp offset or user interaction.\n        var checkTimestampOffset = function checkTimestampOffset() {\n          _this2.state = 'READY';\n\n          if (!_this2.paused()) {\n            // if not paused, queue a buffer check as soon as possible\n            _this2.monitorBuffer_();\n          }\n        };\n\n        this.syncController_.one('timestampoffset', checkTimestampOffset);\n        this.state = 'WAITING_ON_TIMELINE';\n        return;\n      }\n\n      this.loadSegment_(segmentInfo);\n    }\n    /**\n     * Prevents the segment loader from requesting segments we know contain no subtitles\n     * by walking forward until we find the next segment that we don't know whether it is\n     * empty or not.\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @return {Object}\n     *         a segment info object that describes the current segment\n     */\n\n  }, {\n    key: 'skipEmptySegments_',\n    value: function skipEmptySegments_(segmentInfo) {\n      while (segmentInfo && segmentInfo.segment.empty) {\n        segmentInfo = this.generateSegmentInfo_(segmentInfo.playlist, segmentInfo.mediaIndex + 1, segmentInfo.startOfSegment + segmentInfo.duration, segmentInfo.isSyncRequest);\n      }\n\n      return segmentInfo;\n    }\n    /**\n     * append a decrypted segement to the SourceBuffer through a SourceUpdater\n     *\n     * @private\n     */\n\n  }, {\n    key: 'handleSegment_',\n    value: function handleSegment_() {\n      var _this3 = this;\n\n      if (!this.pendingSegment_ || !this.subtitlesTrack_) {\n        this.state = 'READY';\n        return;\n      }\n\n      this.state = 'APPENDING';\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment; // Make sure that vttjs has loaded, otherwise, wait till it finished loading\n\n      if (typeof window$1.WebVTT !== 'function' && this.subtitlesTrack_ && this.subtitlesTrack_.tech_) {\n        var loadHandler = function loadHandler() {\n          _this3.handleSegment_();\n        };\n\n        this.state = 'WAITING_ON_VTTJS';\n        this.subtitlesTrack_.tech_.one('vttjsloaded', loadHandler);\n        this.subtitlesTrack_.tech_.one('vttjserror', function () {\n          _this3.subtitlesTrack_.tech_.off('vttjsloaded', loadHandler);\n\n          _this3.error({\n            message: 'Error loading vtt.js'\n          });\n\n          _this3.state = 'READY';\n\n          _this3.pause();\n\n          _this3.trigger('error');\n        });\n        return;\n      }\n\n      segment.requested = true;\n\n      try {\n        this.parseVTTCues_(segmentInfo);\n      } catch (e) {\n        this.error({\n          message: e.message\n        });\n        this.state = 'READY';\n        this.pause();\n        return this.trigger('error');\n      }\n\n      this.updateTimeMapping_(segmentInfo, this.syncController_.timelines[segmentInfo.timeline], this.playlist_);\n\n      if (segmentInfo.isSyncRequest) {\n        this.trigger('syncinfoupdate');\n        this.pendingSegment_ = null;\n        this.state = 'READY';\n        return;\n      }\n\n      segmentInfo.byteLength = segmentInfo.bytes.byteLength;\n      this.mediaSecondsLoaded += segment.duration;\n\n      if (segmentInfo.cues.length) {\n        // remove any overlapping cues to prevent doubling\n        this.remove(segmentInfo.cues[0].endTime, segmentInfo.cues[segmentInfo.cues.length - 1].endTime);\n      }\n\n      segmentInfo.cues.forEach(function (cue) {\n        _this3.subtitlesTrack_.addCue(cue);\n      });\n      this.handleUpdateEnd_();\n    }\n    /**\n     * Uses the WebVTT parser to parse the segment response\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @private\n     */\n\n  }, {\n    key: 'parseVTTCues_',\n    value: function parseVTTCues_(segmentInfo) {\n      var decoder = void 0;\n      var decodeBytesToString = false;\n\n      if (typeof window$1.TextDecoder === 'function') {\n        decoder = new window$1.TextDecoder('utf8');\n      } else {\n        decoder = window$1.WebVTT.StringDecoder();\n        decodeBytesToString = true;\n      }\n\n      var parser = new window$1.WebVTT.Parser(window$1, window$1.vttjs, decoder);\n      segmentInfo.cues = [];\n      segmentInfo.timestampmap = {\n        MPEGTS: 0,\n        LOCAL: 0\n      };\n      parser.oncue = segmentInfo.cues.push.bind(segmentInfo.cues);\n\n      parser.ontimestampmap = function (map) {\n        return segmentInfo.timestampmap = map;\n      };\n\n      parser.onparsingerror = function (error) {\n        videojs$1.log.warn('Error encountered when parsing cues: ' + error.message);\n      };\n\n      if (segmentInfo.segment.map) {\n        var mapData = segmentInfo.segment.map.bytes;\n\n        if (decodeBytesToString) {\n          mapData = uint8ToUtf8(mapData);\n        }\n\n        parser.parse(mapData);\n      }\n\n      var segmentData = segmentInfo.bytes;\n\n      if (decodeBytesToString) {\n        segmentData = uint8ToUtf8(segmentData);\n      }\n\n      parser.parse(segmentData);\n      parser.flush();\n    }\n    /**\n     * Updates the start and end times of any cues parsed by the WebVTT parser using\n     * the information parsed from the X-TIMESTAMP-MAP header and a TS to media time mapping\n     * from the SyncController\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @param {Object} mappingObj\n     *        object containing a mapping from TS to media time\n     * @param {Object} playlist\n     *        the playlist object containing the segment\n     * @private\n     */\n\n  }, {\n    key: 'updateTimeMapping_',\n    value: function updateTimeMapping_(segmentInfo, mappingObj, playlist) {\n      var segment = segmentInfo.segment;\n\n      if (!mappingObj) {\n        // If the sync controller does not have a mapping of TS to Media Time for the\n        // timeline, then we don't have enough information to update the cue\n        // start/end times\n        return;\n      }\n\n      if (!segmentInfo.cues.length) {\n        // If there are no cues, we also do not have enough information to figure out\n        // segment timing. Mark that the segment contains no cues so we don't re-request\n        // an empty segment.\n        segment.empty = true;\n        return;\n      }\n\n      var timestampmap = segmentInfo.timestampmap;\n      var diff = timestampmap.MPEGTS / 90000 - timestampmap.LOCAL + mappingObj.mapping;\n      segmentInfo.cues.forEach(function (cue) {\n        // First convert cue time to TS time using the timestamp-map provided within the vtt\n        cue.startTime += diff;\n        cue.endTime += diff;\n      });\n\n      if (!playlist.syncInfo) {\n        var firstStart = segmentInfo.cues[0].startTime;\n        var lastStart = segmentInfo.cues[segmentInfo.cues.length - 1].startTime;\n        playlist.syncInfo = {\n          mediaSequence: playlist.mediaSequence + segmentInfo.mediaIndex,\n          time: Math.min(firstStart, lastStart - segment.duration)\n        };\n      }\n    }\n  }]);\n  return VTTSegmentLoader;\n}(SegmentLoader);\n/**\n * @file ad-cue-tags.js\n */\n\n/**\n * Searches for an ad cue that overlaps with the given mediaTime\n */\n\n\nvar findAdCue = function findAdCue(track, mediaTime) {\n  var cues = track.cues;\n\n  for (var i = 0; i < cues.length; i++) {\n    var cue = cues[i];\n\n    if (mediaTime >= cue.adStartTime && mediaTime <= cue.adEndTime) {\n      return cue;\n    }\n  }\n\n  return null;\n};\n\nvar updateAdCues = function updateAdCues(media, track) {\n  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (!media.segments) {\n    return;\n  }\n\n  var mediaTime = offset;\n  var cue = void 0;\n\n  for (var i = 0; i < media.segments.length; i++) {\n    var segment = media.segments[i];\n\n    if (!cue) {\n      // Since the cues will span for at least the segment duration, adding a fudge\n      // factor of half segment duration will prevent duplicate cues from being\n      // created when timing info is not exact (e.g. cue start time initialized\n      // at 10.006677, but next call mediaTime is 10.003332 )\n      cue = findAdCue(track, mediaTime + segment.duration / 2);\n    }\n\n    if (cue) {\n      if ('cueIn' in segment) {\n        // Found a CUE-IN so end the cue\n        cue.endTime = mediaTime;\n        cue.adEndTime = mediaTime;\n        mediaTime += segment.duration;\n        cue = null;\n        continue;\n      }\n\n      if (mediaTime < cue.endTime) {\n        // Already processed this mediaTime for this cue\n        mediaTime += segment.duration;\n        continue;\n      } // otherwise extend cue until a CUE-IN is found\n\n\n      cue.endTime += segment.duration;\n    } else {\n      if ('cueOut' in segment) {\n        cue = new window$1.VTTCue(mediaTime, mediaTime + segment.duration, segment.cueOut);\n        cue.adStartTime = mediaTime; // Assumes tag format to be\n        // #EXT-X-CUE-OUT:30\n\n        cue.adEndTime = mediaTime + parseFloat(segment.cueOut);\n        track.addCue(cue);\n      }\n\n      if ('cueOutCont' in segment) {\n        // Entered into the middle of an ad cue\n        var adOffset = void 0;\n        var adTotal = void 0; // Assumes tag formate to be\n        // #EXT-X-CUE-OUT-CONT:10/30\n\n        var _segment$cueOutCont$s = segment.cueOutCont.split('/').map(parseFloat);\n\n        var _segment$cueOutCont$s2 = slicedToArray(_segment$cueOutCont$s, 2);\n\n        adOffset = _segment$cueOutCont$s2[0];\n        adTotal = _segment$cueOutCont$s2[1];\n        cue = new window$1.VTTCue(mediaTime, mediaTime + segment.duration, '');\n        cue.adStartTime = mediaTime - adOffset;\n        cue.adEndTime = cue.adStartTime + adTotal;\n        track.addCue(cue);\n      }\n    }\n\n    mediaTime += segment.duration;\n  }\n};\n/**\n * @file sync-controller.js\n */\n\n\nvar tsprobe = tsInspector.inspect;\nvar syncPointStrategies = [// Stategy \"VOD\": Handle the VOD-case where the sync-point is *always*\n//                the equivalence display-time 0 === segment-index 0\n{\n  name: 'VOD',\n  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {\n    if (duration$$1 !== Infinity) {\n      var syncPoint = {\n        time: 0,\n        segmentIndex: 0\n      };\n      return syncPoint;\n    }\n\n    return null;\n  }\n}, // Stategy \"ProgramDateTime\": We have a program-date-time tag in this playlist\n{\n  name: 'ProgramDateTime',\n  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {\n    if (!syncController.datetimeToDisplayTime) {\n      return null;\n    }\n\n    var segments = playlist.segments || [];\n    var syncPoint = null;\n    var lastDistance = null;\n    currentTime = currentTime || 0;\n\n    for (var i = 0; i < segments.length; i++) {\n      var segment = segments[i];\n\n      if (segment.dateTimeObject) {\n        var segmentTime = segment.dateTimeObject.getTime() / 1000;\n        var segmentStart = segmentTime + syncController.datetimeToDisplayTime;\n        var distance = Math.abs(currentTime - segmentStart); // Once the distance begins to increase, we have passed\n        // currentTime and can stop looking for better candidates\n\n        if (lastDistance !== null && lastDistance < distance) {\n          break;\n        }\n\n        lastDistance = distance;\n        syncPoint = {\n          time: segmentStart,\n          segmentIndex: i\n        };\n      }\n    }\n\n    return syncPoint;\n  }\n}, // Stategy \"Segment\": We have a known time mapping for a timeline and a\n//                    segment in the current timeline with timing data\n{\n  name: 'Segment',\n  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {\n    var segments = playlist.segments || [];\n    var syncPoint = null;\n    var lastDistance = null;\n    currentTime = currentTime || 0;\n\n    for (var i = 0; i < segments.length; i++) {\n      var segment = segments[i];\n\n      if (segment.timeline === currentTimeline && typeof segment.start !== 'undefined') {\n        var distance = Math.abs(currentTime - segment.start); // Once the distance begins to increase, we have passed\n        // currentTime and can stop looking for better candidates\n\n        if (lastDistance !== null && lastDistance < distance) {\n          break;\n        }\n\n        if (!syncPoint || lastDistance === null || lastDistance >= distance) {\n          lastDistance = distance;\n          syncPoint = {\n            time: segment.start,\n            segmentIndex: i\n          };\n        }\n      }\n    }\n\n    return syncPoint;\n  }\n}, // Stategy \"Discontinuity\": We have a discontinuity with a known\n//                          display-time\n{\n  name: 'Discontinuity',\n  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {\n    var syncPoint = null;\n    currentTime = currentTime || 0;\n\n    if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {\n      var lastDistance = null;\n\n      for (var i = 0; i < playlist.discontinuityStarts.length; i++) {\n        var segmentIndex = playlist.discontinuityStarts[i];\n        var discontinuity = playlist.discontinuitySequence + i + 1;\n        var discontinuitySync = syncController.discontinuities[discontinuity];\n\n        if (discontinuitySync) {\n          var distance = Math.abs(currentTime - discontinuitySync.time); // Once the distance begins to increase, we have passed\n          // currentTime and can stop looking for better candidates\n\n          if (lastDistance !== null && lastDistance < distance) {\n            break;\n          }\n\n          if (!syncPoint || lastDistance === null || lastDistance >= distance) {\n            lastDistance = distance;\n            syncPoint = {\n              time: discontinuitySync.time,\n              segmentIndex: segmentIndex\n            };\n          }\n        }\n      }\n    }\n\n    return syncPoint;\n  }\n}, // Stategy \"Playlist\": We have a playlist with a known mapping of\n//                     segment index to display time\n{\n  name: 'Playlist',\n  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {\n    if (playlist.syncInfo) {\n      var syncPoint = {\n        time: playlist.syncInfo.time,\n        segmentIndex: playlist.syncInfo.mediaSequence - playlist.mediaSequence\n      };\n      return syncPoint;\n    }\n\n    return null;\n  }\n}];\n\nvar SyncController = function (_videojs$EventTarget) {\n  inherits(SyncController, _videojs$EventTarget);\n\n  function SyncController() {\n    classCallCheck(this, SyncController); // Segment Loader state variables...\n    // ...for synching across variants\n\n    var _this = possibleConstructorReturn(this, (SyncController.__proto__ || Object.getPrototypeOf(SyncController)).call(this));\n\n    _this.inspectCache_ = undefined; // ...for synching across variants\n\n    _this.timelines = [];\n    _this.discontinuities = [];\n    _this.datetimeToDisplayTime = null;\n    _this.logger_ = logger('SyncController');\n    return _this;\n  }\n  /**\n   * Find a sync-point for the playlist specified\n   *\n   * A sync-point is defined as a known mapping from display-time to\n   * a segment-index in the current playlist.\n   *\n   * @param {Playlist} playlist\n   *        The playlist that needs a sync-point\n   * @param {Number} duration\n   *        Duration of the MediaSource (Infinite if playing a live source)\n   * @param {Number} currentTimeline\n   *        The last timeline from which a segment was loaded\n   * @returns {Object}\n   *          A sync-point object\n   */\n\n\n  createClass(SyncController, [{\n    key: 'getSyncPoint',\n    value: function getSyncPoint(playlist, duration$$1, currentTimeline, currentTime) {\n      var syncPoints = this.runStrategies_(playlist, duration$$1, currentTimeline, currentTime);\n\n      if (!syncPoints.length) {\n        // Signal that we need to attempt to get a sync-point manually\n        // by fetching a segment in the playlist and constructing\n        // a sync-point from that information\n        return null;\n      } // Now find the sync-point that is closest to the currentTime because\n      // that should result in the most accurate guess about which segment\n      // to fetch\n\n\n      return this.selectSyncPoint_(syncPoints, {\n        key: 'time',\n        value: currentTime\n      });\n    }\n    /**\n     * Calculate the amount of time that has expired off the playlist during playback\n     *\n     * @param {Playlist} playlist\n     *        Playlist object to calculate expired from\n     * @param {Number} duration\n     *        Duration of the MediaSource (Infinity if playling a live source)\n     * @returns {Number|null}\n     *          The amount of time that has expired off the playlist during playback. Null\n     *          if no sync-points for the playlist can be found.\n     */\n\n  }, {\n    key: 'getExpiredTime',\n    value: function getExpiredTime(playlist, duration$$1) {\n      if (!playlist || !playlist.segments) {\n        return null;\n      }\n\n      var syncPoints = this.runStrategies_(playlist, duration$$1, playlist.discontinuitySequence, 0); // Without sync-points, there is not enough information to determine the expired time\n\n      if (!syncPoints.length) {\n        return null;\n      }\n\n      var syncPoint = this.selectSyncPoint_(syncPoints, {\n        key: 'segmentIndex',\n        value: 0\n      }); // If the sync-point is beyond the start of the playlist, we want to subtract the\n      // duration from index 0 to syncPoint.segmentIndex instead of adding.\n\n      if (syncPoint.segmentIndex > 0) {\n        syncPoint.time *= -1;\n      }\n\n      return Math.abs(syncPoint.time + sumDurations(playlist, syncPoint.segmentIndex, 0));\n    }\n    /**\n     * Runs each sync-point strategy and returns a list of sync-points returned by the\n     * strategies\n     *\n     * @private\n     * @param {Playlist} playlist\n     *        The playlist that needs a sync-point\n     * @param {Number} duration\n     *        Duration of the MediaSource (Infinity if playing a live source)\n     * @param {Number} currentTimeline\n     *        The last timeline from which a segment was loaded\n     * @returns {Array}\n     *          A list of sync-point objects\n     */\n\n  }, {\n    key: 'runStrategies_',\n    value: function runStrategies_(playlist, duration$$1, currentTimeline, currentTime) {\n      var syncPoints = []; // Try to find a sync-point in by utilizing various strategies...\n\n      for (var i = 0; i < syncPointStrategies.length; i++) {\n        var strategy = syncPointStrategies[i];\n        var syncPoint = strategy.run(this, playlist, duration$$1, currentTimeline, currentTime);\n\n        if (syncPoint) {\n          syncPoint.strategy = strategy.name;\n          syncPoints.push({\n            strategy: strategy.name,\n            syncPoint: syncPoint\n          });\n        }\n      }\n\n      return syncPoints;\n    }\n    /**\n     * Selects the sync-point nearest the specified target\n     *\n     * @private\n     * @param {Array} syncPoints\n     *        List of sync-points to select from\n     * @param {Object} target\n     *        Object specifying the property and value we are targeting\n     * @param {String} target.key\n     *        Specifies the property to target. Must be either 'time' or 'segmentIndex'\n     * @param {Number} target.value\n     *        The value to target for the specified key.\n     * @returns {Object}\n     *          The sync-point nearest the target\n     */\n\n  }, {\n    key: 'selectSyncPoint_',\n    value: function selectSyncPoint_(syncPoints, target) {\n      var bestSyncPoint = syncPoints[0].syncPoint;\n      var bestDistance = Math.abs(syncPoints[0].syncPoint[target.key] - target.value);\n      var bestStrategy = syncPoints[0].strategy;\n\n      for (var i = 1; i < syncPoints.length; i++) {\n        var newDistance = Math.abs(syncPoints[i].syncPoint[target.key] - target.value);\n\n        if (newDistance < bestDistance) {\n          bestDistance = newDistance;\n          bestSyncPoint = syncPoints[i].syncPoint;\n          bestStrategy = syncPoints[i].strategy;\n        }\n      }\n\n      this.logger_('syncPoint for [' + target.key + ': ' + target.value + '] chosen with strategy' + (' [' + bestStrategy + ']: [time:' + bestSyncPoint.time + ',') + (' segmentIndex:' + bestSyncPoint.segmentIndex + ']'));\n      return bestSyncPoint;\n    }\n    /**\n     * Save any meta-data present on the segments when segments leave\n     * the live window to the playlist to allow for synchronization at the\n     * playlist level later.\n     *\n     * @param {Playlist} oldPlaylist - The previous active playlist\n     * @param {Playlist} newPlaylist - The updated and most current playlist\n     */\n\n  }, {\n    key: 'saveExpiredSegmentInfo',\n    value: function saveExpiredSegmentInfo(oldPlaylist, newPlaylist) {\n      var mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence; // When a segment expires from the playlist and it has a start time\n      // save that information as a possible sync-point reference in future\n\n      for (var i = mediaSequenceDiff - 1; i >= 0; i--) {\n        var lastRemovedSegment = oldPlaylist.segments[i];\n\n        if (lastRemovedSegment && typeof lastRemovedSegment.start !== 'undefined') {\n          newPlaylist.syncInfo = {\n            mediaSequence: oldPlaylist.mediaSequence + i,\n            time: lastRemovedSegment.start\n          };\n          this.logger_('playlist refresh sync: [time:' + newPlaylist.syncInfo.time + ',' + (' mediaSequence: ' + newPlaylist.syncInfo.mediaSequence + ']'));\n          this.trigger('syncinfoupdate');\n          break;\n        }\n      }\n    }\n    /**\n     * Save the mapping from playlist's ProgramDateTime to display. This should\n     * only ever happen once at the start of playback.\n     *\n     * @param {Playlist} playlist - The currently active playlist\n     */\n\n  }, {\n    key: 'setDateTimeMapping',\n    value: function setDateTimeMapping(playlist) {\n      if (!this.datetimeToDisplayTime && playlist.segments && playlist.segments.length && playlist.segments[0].dateTimeObject) {\n        var playlistTimestamp = playlist.segments[0].dateTimeObject.getTime() / 1000;\n        this.datetimeToDisplayTime = -playlistTimestamp;\n      }\n    }\n    /**\n     * Reset the state of the inspection cache when we do a rendition\n     * switch\n     */\n\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this.inspectCache_ = undefined;\n    }\n    /**\n     * Probe or inspect a fmp4 or an mpeg2-ts segment to determine the start\n     * and end of the segment in it's internal \"media time\". Used to generate\n     * mappings from that internal \"media time\" to the display time that is\n     * shown on the player.\n     *\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     */\n\n  }, {\n    key: 'probeSegmentInfo',\n    value: function probeSegmentInfo(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var playlist = segmentInfo.playlist;\n      var timingInfo = void 0;\n\n      if (segment.map) {\n        timingInfo = this.probeMp4Segment_(segmentInfo);\n      } else {\n        timingInfo = this.probeTsSegment_(segmentInfo);\n      }\n\n      if (timingInfo) {\n        if (this.calculateSegmentTimeMapping_(segmentInfo, timingInfo)) {\n          this.saveDiscontinuitySyncInfo_(segmentInfo); // If the playlist does not have sync information yet, record that information\n          // now with segment timing information\n\n          if (!playlist.syncInfo) {\n            playlist.syncInfo = {\n              mediaSequence: playlist.mediaSequence + segmentInfo.mediaIndex,\n              time: segment.start\n            };\n          }\n        }\n      }\n\n      return timingInfo;\n    }\n    /**\n     * Probe an fmp4 or an mpeg2-ts segment to determine the start of the segment\n     * in it's internal \"media time\".\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     * @return {object} The start and end time of the current segment in \"media time\"\n     */\n\n  }, {\n    key: 'probeMp4Segment_',\n    value: function probeMp4Segment_(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var timescales = mp4probe.timescale(segment.map.bytes);\n      var startTime = mp4probe.startTime(timescales, segmentInfo.bytes);\n\n      if (segmentInfo.timestampOffset !== null) {\n        segmentInfo.timestampOffset -= startTime;\n      }\n\n      return {\n        start: startTime,\n        end: startTime + segment.duration\n      };\n    }\n    /**\n     * Probe an mpeg2-ts segment to determine the start and end of the segment\n     * in it's internal \"media time\".\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     * @return {object} The start and end time of the current segment in \"media time\"\n     */\n\n  }, {\n    key: 'probeTsSegment_',\n    value: function probeTsSegment_(segmentInfo) {\n      var timeInfo = tsprobe(segmentInfo.bytes, this.inspectCache_);\n      var segmentStartTime = void 0;\n      var segmentEndTime = void 0;\n\n      if (!timeInfo) {\n        return null;\n      }\n\n      if (timeInfo.video && timeInfo.video.length === 2) {\n        this.inspectCache_ = timeInfo.video[1].dts;\n        segmentStartTime = timeInfo.video[0].dtsTime;\n        segmentEndTime = timeInfo.video[1].dtsTime;\n      } else if (timeInfo.audio && timeInfo.audio.length === 2) {\n        this.inspectCache_ = timeInfo.audio[1].dts;\n        segmentStartTime = timeInfo.audio[0].dtsTime;\n        segmentEndTime = timeInfo.audio[1].dtsTime;\n      }\n\n      var probedInfo = {\n        start: segmentStartTime,\n        end: segmentEndTime,\n        containsVideo: timeInfo.video && timeInfo.video.length === 2,\n        containsAudio: timeInfo.audio && timeInfo.audio.length === 2\n      };\n      return probedInfo;\n    }\n  }, {\n    key: 'timestampOffsetForTimeline',\n    value: function timestampOffsetForTimeline(timeline) {\n      if (typeof this.timelines[timeline] === 'undefined') {\n        return null;\n      }\n\n      return this.timelines[timeline].time;\n    }\n  }, {\n    key: 'mappingForTimeline',\n    value: function mappingForTimeline(timeline) {\n      if (typeof this.timelines[timeline] === 'undefined') {\n        return null;\n      }\n\n      return this.timelines[timeline].mapping;\n    }\n    /**\n     * Use the \"media time\" for a segment to generate a mapping to \"display time\" and\n     * save that display time to the segment.\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo\n     *        The current active request information\n     * @param {object} timingInfo\n     *        The start and end time of the current segment in \"media time\"\n     * @returns {Boolean}\n     *          Returns false if segment time mapping could not be calculated\n     */\n\n  }, {\n    key: 'calculateSegmentTimeMapping_',\n    value: function calculateSegmentTimeMapping_(segmentInfo, timingInfo) {\n      var segment = segmentInfo.segment;\n      var mappingObj = this.timelines[segmentInfo.timeline];\n\n      if (segmentInfo.timestampOffset !== null) {\n        mappingObj = {\n          time: segmentInfo.startOfSegment,\n          mapping: segmentInfo.startOfSegment - timingInfo.start\n        };\n        this.timelines[segmentInfo.timeline] = mappingObj;\n        this.trigger('timestampoffset');\n        this.logger_('time mapping for timeline ' + segmentInfo.timeline + ': ' + ('[time: ' + mappingObj.time + '] [mapping: ' + mappingObj.mapping + ']'));\n        segment.start = segmentInfo.startOfSegment;\n        segment.end = timingInfo.end + mappingObj.mapping;\n      } else if (mappingObj) {\n        segment.start = timingInfo.start + mappingObj.mapping;\n        segment.end = timingInfo.end + mappingObj.mapping;\n      } else {\n        return false;\n      }\n\n      return true;\n    }\n    /**\n     * Each time we have discontinuity in the playlist, attempt to calculate the location\n     * in display of the start of the discontinuity and save that. We also save an accuracy\n     * value so that we save values with the most accuracy (closest to 0.)\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     */\n\n  }, {\n    key: 'saveDiscontinuitySyncInfo_',\n    value: function saveDiscontinuitySyncInfo_(segmentInfo) {\n      var playlist = segmentInfo.playlist;\n      var segment = segmentInfo.segment; // If the current segment is a discontinuity then we know exactly where\n      // the start of the range and it's accuracy is 0 (greater accuracy values\n      // mean more approximation)\n\n      if (segment.discontinuity) {\n        this.discontinuities[segment.timeline] = {\n          time: segment.start,\n          accuracy: 0\n        };\n      } else if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {\n        // Search for future discontinuities that we can provide better timing\n        // information for and save that information for sync purposes\n        for (var i = 0; i < playlist.discontinuityStarts.length; i++) {\n          var segmentIndex = playlist.discontinuityStarts[i];\n          var discontinuity = playlist.discontinuitySequence + i + 1;\n          var mediaIndexDiff = segmentIndex - segmentInfo.mediaIndex;\n          var accuracy = Math.abs(mediaIndexDiff);\n\n          if (!this.discontinuities[discontinuity] || this.discontinuities[discontinuity].accuracy > accuracy) {\n            var time = void 0;\n\n            if (mediaIndexDiff < 0) {\n              time = segment.start - sumDurations(playlist, segmentInfo.mediaIndex, segmentIndex);\n            } else {\n              time = segment.end + sumDurations(playlist, segmentInfo.mediaIndex + 1, segmentIndex);\n            }\n\n            this.discontinuities[discontinuity] = {\n              time: time,\n              accuracy: accuracy\n            };\n          }\n        }\n      }\n    }\n  }]);\n  return SyncController;\n}(videojs$1.EventTarget);\n\nvar Decrypter$1 = new shimWorker(\"./decrypter-worker.worker.js\", function (window, document$$1) {\n  var self = this;\n\n  var decrypterWorker = function () {\n    /*\n     * pkcs7.pad\n     * https://github.com/brightcove/pkcs7\n     *\n     * Copyright (c) 2014 Brightcove\n     * Licensed under the apache2 license.\n     */\n\n    /**\n     * Returns the subarray of a Uint8Array without PKCS#7 padding.\n     * @param padded {Uint8Array} unencrypted bytes that have been padded\n     * @return {Uint8Array} the unpadded bytes\n     * @see http://tools.ietf.org/html/rfc5652\n     */\n    function unpad(padded) {\n      return padded.subarray(0, padded.byteLength - padded[padded.byteLength - 1]);\n    }\n\n    var classCallCheck = function classCallCheck(instance, Constructor) {\n      if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n      }\n    };\n\n    var createClass = function () {\n      function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) defineProperties(Constructor, staticProps);\n        return Constructor;\n      };\n    }();\n\n    var inherits = function inherits(subClass, superClass) {\n      if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n      }\n\n      subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n          value: subClass,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    };\n\n    var possibleConstructorReturn = function possibleConstructorReturn(self, call) {\n      if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n      }\n\n      return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n    };\n    /**\n     * @file aes.js\n     *\n     * This file contains an adaptation of the AES decryption algorithm\n     * from the Standford Javascript Cryptography Library. That work is\n     * covered by the following copyright and permissions notice:\n     *\n     * Copyright 2009-2010 Emily Stark, Mike Hamburg, Dan Boneh.\n     * All rights reserved.\n     *\n     * Redistribution and use in source and binary forms, with or without\n     * modification, are permitted provided that the following conditions are\n     * met:\n     *\n     * 1. Redistributions of source code must retain the above copyright\n     *    notice, this list of conditions and the following disclaimer.\n     *\n     * 2. Redistributions in binary form must reproduce the above\n     *    copyright notice, this list of conditions and the following\n     *    disclaimer in the documentation and/or other materials provided\n     *    with the distribution.\n     *\n     * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR\n     * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n     * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n     * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE\n     * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n     * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\n     * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n     * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n     * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\n     * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n     *\n     * The views and conclusions contained in the software and documentation\n     * are those of the authors and should not be interpreted as representing\n     * official policies, either expressed or implied, of the authors.\n     */\n\n    /**\n     * Expand the S-box tables.\n     *\n     * @private\n     */\n\n\n    var precompute = function precompute() {\n      var tables = [[[], [], [], [], []], [[], [], [], [], []]];\n      var encTable = tables[0];\n      var decTable = tables[1];\n      var sbox = encTable[4];\n      var sboxInv = decTable[4];\n      var i = void 0;\n      var x = void 0;\n      var xInv = void 0;\n      var d = [];\n      var th = [];\n      var x2 = void 0;\n      var x4 = void 0;\n      var x8 = void 0;\n      var s = void 0;\n      var tEnc = void 0;\n      var tDec = void 0; // Compute double and third tables\n\n      for (i = 0; i < 256; i++) {\n        th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;\n      }\n\n      for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {\n        // Compute sbox\n        s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;\n        s = s >> 8 ^ s & 255 ^ 99;\n        sbox[x] = s;\n        sboxInv[s] = x; // Compute MixColumns\n\n        x8 = d[x4 = d[x2 = d[x]]];\n        tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n        tEnc = d[s] * 0x101 ^ s * 0x1010100;\n\n        for (i = 0; i < 4; i++) {\n          encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n          decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;\n        }\n      } // Compactify. Considerable speedup on Firefox.\n\n\n      for (i = 0; i < 5; i++) {\n        encTable[i] = encTable[i].slice(0);\n        decTable[i] = decTable[i].slice(0);\n      }\n\n      return tables;\n    };\n\n    var aesTables = null;\n    /**\n     * Schedule out an AES key for both encryption and decryption. This\n     * is a low-level class. Use a cipher mode to do bulk encryption.\n     *\n     * @class AES\n     * @param key {Array} The key as an array of 4, 6 or 8 words.\n     */\n\n    var AES = function () {\n      function AES(key) {\n        classCallCheck(this, AES);\n        /**\n         * The expanded S-box and inverse S-box tables. These will be computed\n         * on the client so that we don't have to send them down the wire.\n         *\n         * There are two tables, _tables[0] is for encryption and\n         * _tables[1] is for decryption.\n         *\n         * The first 4 sub-tables are the expanded S-box with MixColumns. The\n         * last (_tables[01][4]) is the S-box itself.\n         *\n         * @private\n         */\n        // if we have yet to precompute the S-box tables\n        // do so now\n\n        if (!aesTables) {\n          aesTables = precompute();\n        } // then make a copy of that object for use\n\n\n        this._tables = [[aesTables[0][0].slice(), aesTables[0][1].slice(), aesTables[0][2].slice(), aesTables[0][3].slice(), aesTables[0][4].slice()], [aesTables[1][0].slice(), aesTables[1][1].slice(), aesTables[1][2].slice(), aesTables[1][3].slice(), aesTables[1][4].slice()]];\n        var i = void 0;\n        var j = void 0;\n        var tmp = void 0;\n        var encKey = void 0;\n        var decKey = void 0;\n        var sbox = this._tables[0][4];\n        var decTable = this._tables[1];\n        var keyLen = key.length;\n        var rcon = 1;\n\n        if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\n          throw new Error('Invalid aes key size');\n        }\n\n        encKey = key.slice(0);\n        decKey = [];\n        this._key = [encKey, decKey]; // schedule encryption keys\n\n        for (i = keyLen; i < 4 * keyLen + 28; i++) {\n          tmp = encKey[i - 1]; // apply sbox\n\n          if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {\n            tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255]; // shift rows and add rcon\n\n            if (i % keyLen === 0) {\n              tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;\n              rcon = rcon << 1 ^ (rcon >> 7) * 283;\n            }\n          }\n\n          encKey[i] = encKey[i - keyLen] ^ tmp;\n        } // schedule decryption keys\n\n\n        for (j = 0; i; j++, i--) {\n          tmp = encKey[j & 3 ? i : i - 4];\n\n          if (i <= 4 || j < 4) {\n            decKey[j] = tmp;\n          } else {\n            decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];\n          }\n        }\n      }\n      /**\n       * Decrypt 16 bytes, specified as four 32-bit words.\n       *\n       * @param {Number} encrypted0 the first word to decrypt\n       * @param {Number} encrypted1 the second word to decrypt\n       * @param {Number} encrypted2 the third word to decrypt\n       * @param {Number} encrypted3 the fourth word to decrypt\n       * @param {Int32Array} out the array to write the decrypted words\n       * into\n       * @param {Number} offset the offset into the output array to start\n       * writing results\n       * @return {Array} The plaintext.\n       */\n\n\n      AES.prototype.decrypt = function decrypt$$1(encrypted0, encrypted1, encrypted2, encrypted3, out, offset) {\n        var key = this._key[1]; // state variables a,b,c,d are loaded with pre-whitened data\n\n        var a = encrypted0 ^ key[0];\n        var b = encrypted3 ^ key[1];\n        var c = encrypted2 ^ key[2];\n        var d = encrypted1 ^ key[3];\n        var a2 = void 0;\n        var b2 = void 0;\n        var c2 = void 0; // key.length === 2 ?\n\n        var nInnerRounds = key.length / 4 - 2;\n        var i = void 0;\n        var kIndex = 4;\n        var table = this._tables[1]; // load up the tables\n\n        var table0 = table[0];\n        var table1 = table[1];\n        var table2 = table[2];\n        var table3 = table[3];\n        var sbox = table[4]; // Inner rounds. Cribbed from OpenSSL.\n\n        for (i = 0; i < nInnerRounds; i++) {\n          a2 = table0[a >>> 24] ^ table1[b >> 16 & 255] ^ table2[c >> 8 & 255] ^ table3[d & 255] ^ key[kIndex];\n          b2 = table0[b >>> 24] ^ table1[c >> 16 & 255] ^ table2[d >> 8 & 255] ^ table3[a & 255] ^ key[kIndex + 1];\n          c2 = table0[c >>> 24] ^ table1[d >> 16 & 255] ^ table2[a >> 8 & 255] ^ table3[b & 255] ^ key[kIndex + 2];\n          d = table0[d >>> 24] ^ table1[a >> 16 & 255] ^ table2[b >> 8 & 255] ^ table3[c & 255] ^ key[kIndex + 3];\n          kIndex += 4;\n          a = a2;\n          b = b2;\n          c = c2;\n        } // Last round.\n\n\n        for (i = 0; i < 4; i++) {\n          out[(3 & -i) + offset] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];\n          a2 = a;\n          a = b;\n          b = c;\n          c = d;\n          d = a2;\n        }\n      };\n\n      return AES;\n    }();\n    /**\n     * @file stream.js\n     */\n\n    /**\n     * A lightweight readable stream implemention that handles event dispatching.\n     *\n     * @class Stream\n     */\n\n\n    var Stream = function () {\n      function Stream() {\n        classCallCheck(this, Stream);\n        this.listeners = {};\n      }\n      /**\n       * Add a listener for a specified event type.\n       *\n       * @param {String} type the event name\n       * @param {Function} listener the callback to be invoked when an event of\n       * the specified type occurs\n       */\n\n\n      Stream.prototype.on = function on(type, listener) {\n        if (!this.listeners[type]) {\n          this.listeners[type] = [];\n        }\n\n        this.listeners[type].push(listener);\n      };\n      /**\n       * Remove a listener for a specified event type.\n       *\n       * @param {String} type the event name\n       * @param {Function} listener  a function previously registered for this\n       * type of event through `on`\n       * @return {Boolean} if we could turn it off or not\n       */\n\n\n      Stream.prototype.off = function off(type, listener) {\n        if (!this.listeners[type]) {\n          return false;\n        }\n\n        var index = this.listeners[type].indexOf(listener);\n        this.listeners[type].splice(index, 1);\n        return index > -1;\n      };\n      /**\n       * Trigger an event of the specified type on this stream. Any additional\n       * arguments to this function are passed as parameters to event listeners.\n       *\n       * @param {String} type the event name\n       */\n\n\n      Stream.prototype.trigger = function trigger(type) {\n        var callbacks = this.listeners[type];\n\n        if (!callbacks) {\n          return;\n        } // Slicing the arguments on every invocation of this method\n        // can add a significant amount of overhead. Avoid the\n        // intermediate object creation for the common case of a\n        // single callback argument\n\n\n        if (arguments.length === 2) {\n          var length = callbacks.length;\n\n          for (var i = 0; i < length; ++i) {\n            callbacks[i].call(this, arguments[1]);\n          }\n        } else {\n          var args = Array.prototype.slice.call(arguments, 1);\n          var _length = callbacks.length;\n\n          for (var _i = 0; _i < _length; ++_i) {\n            callbacks[_i].apply(this, args);\n          }\n        }\n      };\n      /**\n       * Destroys the stream and cleans up.\n       */\n\n\n      Stream.prototype.dispose = function dispose() {\n        this.listeners = {};\n      };\n      /**\n       * Forwards all `data` events on this stream to the destination stream. The\n       * destination stream should provide a method `push` to receive the data\n       * events as they arrive.\n       *\n       * @param {Stream} destination the stream that will receive all `data` events\n       * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n       */\n\n\n      Stream.prototype.pipe = function pipe(destination) {\n        this.on('data', function (data) {\n          destination.push(data);\n        });\n      };\n\n      return Stream;\n    }();\n    /**\n     * @file async-stream.js\n     */\n\n    /**\n     * A wrapper around the Stream class to use setTiemout\n     * and run stream \"jobs\" Asynchronously\n     *\n     * @class AsyncStream\n     * @extends Stream\n     */\n\n\n    var AsyncStream$$1 = function (_Stream) {\n      inherits(AsyncStream$$1, _Stream);\n\n      function AsyncStream$$1() {\n        classCallCheck(this, AsyncStream$$1);\n\n        var _this = possibleConstructorReturn(this, _Stream.call(this, Stream));\n\n        _this.jobs = [];\n        _this.delay = 1;\n        _this.timeout_ = null;\n        return _this;\n      }\n      /**\n       * process an async job\n       *\n       * @private\n       */\n\n\n      AsyncStream$$1.prototype.processJob_ = function processJob_() {\n        this.jobs.shift()();\n\n        if (this.jobs.length) {\n          this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n        } else {\n          this.timeout_ = null;\n        }\n      };\n      /**\n       * push a job into the stream\n       *\n       * @param {Function} job the job to push into the stream\n       */\n\n\n      AsyncStream$$1.prototype.push = function push(job) {\n        this.jobs.push(job);\n\n        if (!this.timeout_) {\n          this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n        }\n      };\n\n      return AsyncStream$$1;\n    }(Stream);\n    /**\n     * @file decrypter.js\n     *\n     * An asynchronous implementation of AES-128 CBC decryption with\n     * PKCS#7 padding.\n     */\n\n    /**\n     * Convert network-order (big-endian) bytes into their little-endian\n     * representation.\n     */\n\n\n    var ntoh = function ntoh(word) {\n      return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;\n    };\n    /**\n     * Decrypt bytes using AES-128 with CBC and PKCS#7 padding.\n     *\n     * @param {Uint8Array} encrypted the encrypted bytes\n     * @param {Uint32Array} key the bytes of the decryption key\n     * @param {Uint32Array} initVector the initialization vector (IV) to\n     * use for the first round of CBC.\n     * @return {Uint8Array} the decrypted bytes\n     *\n     * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\n     * @see http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29\n     * @see https://tools.ietf.org/html/rfc2315\n     */\n\n\n    var decrypt$$1 = function decrypt$$1(encrypted, key, initVector) {\n      // word-level access to the encrypted bytes\n      var encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2);\n      var decipher = new AES(Array.prototype.slice.call(key)); // byte and word-level access for the decrypted output\n\n      var decrypted = new Uint8Array(encrypted.byteLength);\n      var decrypted32 = new Int32Array(decrypted.buffer); // temporary variables for working with the IV, encrypted, and\n      // decrypted data\n\n      var init0 = void 0;\n      var init1 = void 0;\n      var init2 = void 0;\n      var init3 = void 0;\n      var encrypted0 = void 0;\n      var encrypted1 = void 0;\n      var encrypted2 = void 0;\n      var encrypted3 = void 0; // iteration variable\n\n      var wordIx = void 0; // pull out the words of the IV to ensure we don't modify the\n      // passed-in reference and easier access\n\n      init0 = initVector[0];\n      init1 = initVector[1];\n      init2 = initVector[2];\n      init3 = initVector[3]; // decrypt four word sequences, applying cipher-block chaining (CBC)\n      // to each decrypted block\n\n      for (wordIx = 0; wordIx < encrypted32.length; wordIx += 4) {\n        // convert big-endian (network order) words into little-endian\n        // (javascript order)\n        encrypted0 = ntoh(encrypted32[wordIx]);\n        encrypted1 = ntoh(encrypted32[wordIx + 1]);\n        encrypted2 = ntoh(encrypted32[wordIx + 2]);\n        encrypted3 = ntoh(encrypted32[wordIx + 3]); // decrypt the block\n\n        decipher.decrypt(encrypted0, encrypted1, encrypted2, encrypted3, decrypted32, wordIx); // XOR with the IV, and restore network byte-order to obtain the\n        // plaintext\n\n        decrypted32[wordIx] = ntoh(decrypted32[wordIx] ^ init0);\n        decrypted32[wordIx + 1] = ntoh(decrypted32[wordIx + 1] ^ init1);\n        decrypted32[wordIx + 2] = ntoh(decrypted32[wordIx + 2] ^ init2);\n        decrypted32[wordIx + 3] = ntoh(decrypted32[wordIx + 3] ^ init3); // setup the IV for the next round\n\n        init0 = encrypted0;\n        init1 = encrypted1;\n        init2 = encrypted2;\n        init3 = encrypted3;\n      }\n\n      return decrypted;\n    };\n    /**\n     * The `Decrypter` class that manages decryption of AES\n     * data through `AsyncStream` objects and the `decrypt`\n     * function\n     *\n     * @param {Uint8Array} encrypted the encrypted bytes\n     * @param {Uint32Array} key the bytes of the decryption key\n     * @param {Uint32Array} initVector the initialization vector (IV) to\n     * @param {Function} done the function to run when done\n     * @class Decrypter\n     */\n\n\n    var Decrypter$$1 = function () {\n      function Decrypter$$1(encrypted, key, initVector, done) {\n        classCallCheck(this, Decrypter$$1);\n        var step = Decrypter$$1.STEP;\n        var encrypted32 = new Int32Array(encrypted.buffer);\n        var decrypted = new Uint8Array(encrypted.byteLength);\n        var i = 0;\n        this.asyncStream_ = new AsyncStream$$1(); // split up the encryption job and do the individual chunks asynchronously\n\n        this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n\n        for (i = step; i < encrypted32.length; i += step) {\n          initVector = new Uint32Array([ntoh(encrypted32[i - 4]), ntoh(encrypted32[i - 3]), ntoh(encrypted32[i - 2]), ntoh(encrypted32[i - 1])]);\n          this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n        } // invoke the done() callback when everything is finished\n\n\n        this.asyncStream_.push(function () {\n          // remove pkcs#7 padding from the decrypted bytes\n          done(null, unpad(decrypted));\n        });\n      }\n      /**\n       * a getter for step the maximum number of bytes to process at one time\n       *\n       * @return {Number} the value of step 32000\n       */\n\n      /**\n       * @private\n       */\n\n\n      Decrypter$$1.prototype.decryptChunk_ = function decryptChunk_(encrypted, key, initVector, decrypted) {\n        return function () {\n          var bytes = decrypt$$1(encrypted, key, initVector);\n          decrypted.set(bytes, encrypted.byteOffset);\n        };\n      };\n\n      createClass(Decrypter$$1, null, [{\n        key: 'STEP',\n        get: function get$$1() {\n          // 4 * 8000;\n          return 32000;\n        }\n      }]);\n      return Decrypter$$1;\n    }();\n    /**\n     * @file bin-utils.js\n     */\n\n    /**\n     * Creates an object for sending to a web worker modifying properties that are TypedArrays\n     * into a new object with seperated properties for the buffer, byteOffset, and byteLength.\n     *\n     * @param {Object} message\n     *        Object of properties and values to send to the web worker\n     * @return {Object}\n     *         Modified message with TypedArray values expanded\n     * @function createTransferableMessage\n     */\n\n\n    var createTransferableMessage = function createTransferableMessage(message) {\n      var transferable = {};\n      Object.keys(message).forEach(function (key) {\n        var value = message[key];\n\n        if (ArrayBuffer.isView(value)) {\n          transferable[key] = {\n            bytes: value.buffer,\n            byteOffset: value.byteOffset,\n            byteLength: value.byteLength\n          };\n        } else {\n          transferable[key] = value;\n        }\n      });\n      return transferable;\n    };\n    /**\n     * Our web worker interface so that things can talk to aes-decrypter\n     * that will be running in a web worker. the scope is passed to this by\n     * webworkify.\n     *\n     * @param {Object} self\n     *        the scope for the web worker\n     */\n\n\n    var DecrypterWorker = function DecrypterWorker(self) {\n      self.onmessage = function (event) {\n        var data = event.data;\n        var encrypted = new Uint8Array(data.encrypted.bytes, data.encrypted.byteOffset, data.encrypted.byteLength);\n        var key = new Uint32Array(data.key.bytes, data.key.byteOffset, data.key.byteLength / 4);\n        var iv = new Uint32Array(data.iv.bytes, data.iv.byteOffset, data.iv.byteLength / 4);\n        /* eslint-disable no-new, handle-callback-err */\n\n        new Decrypter$$1(encrypted, key, iv, function (err, bytes) {\n          self.postMessage(createTransferableMessage({\n            source: data.source,\n            decrypted: bytes\n          }), [bytes.buffer]);\n        });\n        /* eslint-enable */\n      };\n    };\n\n    var decrypterWorker = new DecrypterWorker(self);\n    return decrypterWorker;\n  }();\n});\n/**\n * Convert the properties of an HLS track into an audioTrackKind.\n *\n * @private\n */\n\nvar audioTrackKind_ = function audioTrackKind_(properties) {\n  var kind = properties.default ? 'main' : 'alternative';\n\n  if (properties.characteristics && properties.characteristics.indexOf('public.accessibility.describes-video') >= 0) {\n    kind = 'main-desc';\n  }\n\n  return kind;\n};\n/**\n * Pause provided segment loader and playlist loader if active\n *\n * @param {SegmentLoader} segmentLoader\n *        SegmentLoader to pause\n * @param {Object} mediaType\n *        Active media type\n * @function stopLoaders\n */\n\n\nvar stopLoaders = function stopLoaders(segmentLoader, mediaType) {\n  segmentLoader.abort();\n  segmentLoader.pause();\n\n  if (mediaType && mediaType.activePlaylistLoader) {\n    mediaType.activePlaylistLoader.pause();\n    mediaType.activePlaylistLoader = null;\n  }\n};\n/**\n * Start loading provided segment loader and playlist loader\n *\n * @param {PlaylistLoader} playlistLoader\n *        PlaylistLoader to start loading\n * @param {Object} mediaType\n *        Active media type\n * @function startLoaders\n */\n\n\nvar startLoaders = function startLoaders(playlistLoader, mediaType) {\n  // Segment loader will be started after `loadedmetadata` or `loadedplaylist` from the\n  // playlist loader\n  mediaType.activePlaylistLoader = playlistLoader;\n  playlistLoader.load();\n};\n/**\n * Returns a function to be called when the media group changes. It performs a\n * non-destructive (preserve the buffer) resync of the SegmentLoader. This is because a\n * change of group is merely a rendition switch of the same content at another encoding,\n * rather than a change of content, such as switching audio from English to Spanish.\n *\n * @param {String} type\n *        MediaGroup type\n * @param {Object} settings\n *        Object containing required information for media groups\n * @return {Function}\n *         Handler for a non-destructive resync of SegmentLoader when the active media\n *         group changes.\n * @function onGroupChanged\n */\n\n\nvar onGroupChanged = function onGroupChanged(type, settings) {\n  return function () {\n    var _settings$segmentLoad = settings.segmentLoaders,\n        segmentLoader = _settings$segmentLoad[type],\n        mainSegmentLoader = _settings$segmentLoad.main,\n        mediaType = settings.mediaTypes[type];\n    var activeTrack = mediaType.activeTrack();\n    var activeGroup = mediaType.activeGroup(activeTrack);\n    var previousActiveLoader = mediaType.activePlaylistLoader;\n    stopLoaders(segmentLoader, mediaType);\n\n    if (!activeGroup) {\n      // there is no group active\n      return;\n    }\n\n    if (!activeGroup.playlistLoader) {\n      if (previousActiveLoader) {\n        // The previous group had a playlist loader but the new active group does not\n        // this means we are switching from demuxed to muxed audio. In this case we want to\n        // do a destructive reset of the main segment loader and not restart the audio\n        // loaders.\n        mainSegmentLoader.resetEverything();\n      }\n\n      return;\n    } // Non-destructive resync\n\n\n    segmentLoader.resyncLoader();\n    startLoaders(activeGroup.playlistLoader, mediaType);\n  };\n};\n/**\n * Returns a function to be called when the media track changes. It performs a\n * destructive reset of the SegmentLoader to ensure we start loading as close to\n * currentTime as possible.\n *\n * @param {String} type\n *        MediaGroup type\n * @param {Object} settings\n *        Object containing required information for media groups\n * @return {Function}\n *         Handler for a destructive reset of SegmentLoader when the active media\n *         track changes.\n * @function onTrackChanged\n */\n\n\nvar onTrackChanged = function onTrackChanged(type, settings) {\n  return function () {\n    var _settings$segmentLoad2 = settings.segmentLoaders,\n        segmentLoader = _settings$segmentLoad2[type],\n        mainSegmentLoader = _settings$segmentLoad2.main,\n        mediaType = settings.mediaTypes[type];\n    var activeTrack = mediaType.activeTrack();\n    var activeGroup = mediaType.activeGroup(activeTrack);\n    var previousActiveLoader = mediaType.activePlaylistLoader;\n    stopLoaders(segmentLoader, mediaType);\n\n    if (!activeGroup) {\n      // there is no group active so we do not want to restart loaders\n      return;\n    }\n\n    if (!activeGroup.playlistLoader) {\n      // when switching from demuxed audio/video to muxed audio/video (noted by no playlist\n      // loader for the audio group), we want to do a destructive reset of the main segment\n      // loader and not restart the audio loaders\n      mainSegmentLoader.resetEverything();\n      return;\n    }\n\n    if (previousActiveLoader === activeGroup.playlistLoader) {\n      // Nothing has actually changed. This can happen because track change events can fire\n      // multiple times for a \"single\" change. One for enabling the new active track, and\n      // one for disabling the track that was active\n      startLoaders(activeGroup.playlistLoader, mediaType);\n      return;\n    }\n\n    if (segmentLoader.track) {\n      // For WebVTT, set the new text track in the segmentloader\n      segmentLoader.track(activeTrack);\n    } // destructive reset\n\n\n    segmentLoader.resetEverything();\n    startLoaders(activeGroup.playlistLoader, mediaType);\n  };\n};\n\nvar onError = {\n  /**\n   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters\n   * an error.\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Error handler. Logs warning (or error if the playlist is blacklisted) to\n   *         console and switches back to default audio track.\n   * @function onError.AUDIO\n   */\n  AUDIO: function AUDIO(type, settings) {\n    return function () {\n      var segmentLoader = settings.segmentLoaders[type],\n          mediaType = settings.mediaTypes[type],\n          blacklistCurrentPlaylist = settings.blacklistCurrentPlaylist;\n      stopLoaders(segmentLoader, mediaType); // switch back to default audio track\n\n      var activeTrack = mediaType.activeTrack();\n      var activeGroup = mediaType.activeGroup();\n      var id = (activeGroup.filter(function (group) {\n        return group.default;\n      })[0] || activeGroup[0]).id;\n      var defaultTrack = mediaType.tracks[id];\n\n      if (activeTrack === defaultTrack) {\n        // Default track encountered an error. All we can do now is blacklist the current\n        // rendition and hope another will switch audio groups\n        blacklistCurrentPlaylist({\n          message: 'Problem encountered loading the default audio track.'\n        });\n        return;\n      }\n\n      videojs$1.log.warn('Problem encountered loading the alternate audio track.' + 'Switching back to default.');\n\n      for (var trackId in mediaType.tracks) {\n        mediaType.tracks[trackId].enabled = mediaType.tracks[trackId] === defaultTrack;\n      }\n\n      mediaType.onTrackChanged();\n    };\n  },\n\n  /**\n   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters\n   * an error.\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Error handler. Logs warning to console and disables the active subtitle track\n   * @function onError.SUBTITLES\n   */\n  SUBTITLES: function SUBTITLES(type, settings) {\n    return function () {\n      var segmentLoader = settings.segmentLoaders[type],\n          mediaType = settings.mediaTypes[type];\n      videojs$1.log.warn('Problem encountered loading the subtitle track.' + 'Disabling subtitle track.');\n      stopLoaders(segmentLoader, mediaType);\n      var track = mediaType.activeTrack();\n\n      if (track) {\n        track.mode = 'disabled';\n      }\n\n      mediaType.onTrackChanged();\n    };\n  }\n};\nvar setupListeners = {\n  /**\n   * Setup event listeners for audio playlist loader\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {PlaylistLoader|null} playlistLoader\n   *        PlaylistLoader to register listeners on\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function setupListeners.AUDIO\n   */\n  AUDIO: function AUDIO(type, playlistLoader, settings) {\n    if (!playlistLoader) {\n      // no playlist loader means audio will be muxed with the video\n      return;\n    }\n\n    var tech = settings.tech,\n        requestOptions = settings.requestOptions,\n        segmentLoader = settings.segmentLoaders[type];\n    playlistLoader.on('loadedmetadata', function () {\n      var media = playlistLoader.media();\n      segmentLoader.playlist(media, requestOptions); // if the video is already playing, or if this isn't a live video and preload\n      // permits, start downloading segments\n\n      if (!tech.paused() || media.endList && tech.preload() !== 'none') {\n        segmentLoader.load();\n      }\n    });\n    playlistLoader.on('loadedplaylist', function () {\n      segmentLoader.playlist(playlistLoader.media(), requestOptions); // If the player isn't paused, ensure that the segment loader is running\n\n      if (!tech.paused()) {\n        segmentLoader.load();\n      }\n    });\n    playlistLoader.on('error', onError[type](type, settings));\n  },\n\n  /**\n   * Setup event listeners for subtitle playlist loader\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {PlaylistLoader|null} playlistLoader\n   *        PlaylistLoader to register listeners on\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function setupListeners.SUBTITLES\n   */\n  SUBTITLES: function SUBTITLES(type, playlistLoader, settings) {\n    var tech = settings.tech,\n        requestOptions = settings.requestOptions,\n        segmentLoader = settings.segmentLoaders[type],\n        mediaType = settings.mediaTypes[type];\n    playlistLoader.on('loadedmetadata', function () {\n      var media = playlistLoader.media();\n      segmentLoader.playlist(media, requestOptions);\n      segmentLoader.track(mediaType.activeTrack()); // if the video is already playing, or if this isn't a live video and preload\n      // permits, start downloading segments\n\n      if (!tech.paused() || media.endList && tech.preload() !== 'none') {\n        segmentLoader.load();\n      }\n    });\n    playlistLoader.on('loadedplaylist', function () {\n      segmentLoader.playlist(playlistLoader.media(), requestOptions); // If the player isn't paused, ensure that the segment loader is running\n\n      if (!tech.paused()) {\n        segmentLoader.load();\n      }\n    });\n    playlistLoader.on('error', onError[type](type, settings));\n  }\n};\n\nvar byGroupId = function byGroupId(type, groupId) {\n  return function (playlist) {\n    return playlist.attributes[type] === groupId;\n  };\n};\n\nvar byResolvedUri = function byResolvedUri(resolvedUri) {\n  return function (playlist) {\n    return playlist.resolvedUri === resolvedUri;\n  };\n};\n\nvar initialize = {\n  /**\n   * Setup PlaylistLoaders and AudioTracks for the audio groups\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function initialize.AUDIO\n   */\n  'AUDIO': function AUDIO(type, settings) {\n    var hls = settings.hls,\n        sourceType = settings.sourceType,\n        segmentLoader = settings.segmentLoaders[type],\n        requestOptions = settings.requestOptions,\n        _settings$master = settings.master,\n        mediaGroups = _settings$master.mediaGroups,\n        playlists = _settings$master.playlists,\n        _settings$mediaTypes$ = settings.mediaTypes[type],\n        groups = _settings$mediaTypes$.groups,\n        tracks = _settings$mediaTypes$.tracks,\n        masterPlaylistLoader = settings.masterPlaylistLoader; // force a default if we have none\n\n    if (!mediaGroups[type] || Object.keys(mediaGroups[type]).length === 0) {\n      mediaGroups[type] = {\n        main: {\n          default: {\n            default: true\n          }\n        }\n      };\n    }\n\n    for (var groupId in mediaGroups[type]) {\n      if (!groups[groupId]) {\n        groups[groupId] = [];\n      } // List of playlists that have an AUDIO attribute value matching the current\n      // group ID\n\n\n      var groupPlaylists = playlists.filter(byGroupId(type, groupId));\n\n      for (var variantLabel in mediaGroups[type][groupId]) {\n        var properties = mediaGroups[type][groupId][variantLabel]; // List of playlists for the current group ID that have a matching uri with\n        // this alternate audio variant\n\n        var matchingPlaylists = groupPlaylists.filter(byResolvedUri(properties.resolvedUri));\n\n        if (matchingPlaylists.length) {\n          // If there is a playlist that has the same uri as this audio variant, assume\n          // that the playlist is audio only. We delete the resolvedUri property here\n          // to prevent a playlist loader from being created so that we don't have\n          // both the main and audio segment loaders loading the same audio segments\n          // from the same playlist.\n          delete properties.resolvedUri;\n        }\n\n        var playlistLoader = void 0;\n\n        if (properties.resolvedUri) {\n          playlistLoader = new PlaylistLoader(properties.resolvedUri, hls, requestOptions);\n        } else if (properties.playlists && sourceType === 'dash') {\n          playlistLoader = new DashPlaylistLoader(properties.playlists[0], hls, requestOptions, masterPlaylistLoader);\n        } else {\n          // no resolvedUri means the audio is muxed with the video when using this\n          // audio track\n          playlistLoader = null;\n        }\n\n        properties = videojs$1.mergeOptions({\n          id: variantLabel,\n          playlistLoader: playlistLoader\n        }, properties);\n        setupListeners[type](type, properties.playlistLoader, settings);\n        groups[groupId].push(properties);\n\n        if (typeof tracks[variantLabel] === 'undefined') {\n          var track = new videojs$1.AudioTrack({\n            id: variantLabel,\n            kind: audioTrackKind_(properties),\n            enabled: false,\n            language: properties.language,\n            default: properties.default,\n            label: variantLabel\n          });\n          tracks[variantLabel] = track;\n        }\n      }\n    } // setup single error event handler for the segment loader\n\n\n    segmentLoader.on('error', onError[type](type, settings));\n  },\n\n  /**\n   * Setup PlaylistLoaders and TextTracks for the subtitle groups\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function initialize.SUBTITLES\n   */\n  'SUBTITLES': function SUBTITLES(type, settings) {\n    var tech = settings.tech,\n        hls = settings.hls,\n        sourceType = settings.sourceType,\n        segmentLoader = settings.segmentLoaders[type],\n        requestOptions = settings.requestOptions,\n        mediaGroups = settings.master.mediaGroups,\n        _settings$mediaTypes$2 = settings.mediaTypes[type],\n        groups = _settings$mediaTypes$2.groups,\n        tracks = _settings$mediaTypes$2.tracks,\n        masterPlaylistLoader = settings.masterPlaylistLoader;\n\n    for (var groupId in mediaGroups[type]) {\n      if (!groups[groupId]) {\n        groups[groupId] = [];\n      }\n\n      for (var variantLabel in mediaGroups[type][groupId]) {\n        if (mediaGroups[type][groupId][variantLabel].forced) {\n          // Subtitle playlists with the forced attribute are not selectable in Safari.\n          // According to Apple's HLS Authoring Specification:\n          //   If content has forced subtitles and regular subtitles in a given language,\n          //   the regular subtitles track in that language MUST contain both the forced\n          //   subtitles and the regular subtitles for that language.\n          // Because of this requirement and that Safari does not add forced subtitles,\n          // forced subtitles are skipped here to maintain consistent experience across\n          // all platforms\n          continue;\n        }\n\n        var properties = mediaGroups[type][groupId][variantLabel];\n        var playlistLoader = void 0;\n\n        if (sourceType === 'hls') {\n          playlistLoader = new PlaylistLoader(properties.resolvedUri, hls, requestOptions);\n        } else if (sourceType === 'dash') {\n          playlistLoader = new DashPlaylistLoader(properties.playlists[0], hls, requestOptions, masterPlaylistLoader);\n        }\n\n        properties = videojs$1.mergeOptions({\n          id: variantLabel,\n          playlistLoader: playlistLoader\n        }, properties);\n        setupListeners[type](type, properties.playlistLoader, settings);\n        groups[groupId].push(properties);\n\n        if (typeof tracks[variantLabel] === 'undefined') {\n          var track = tech.addRemoteTextTrack({\n            id: variantLabel,\n            kind: 'subtitles',\n            default: properties.default && properties.autoselect,\n            language: properties.language,\n            label: variantLabel\n          }, false).track;\n          tracks[variantLabel] = track;\n        }\n      }\n    } // setup single error event handler for the segment loader\n\n\n    segmentLoader.on('error', onError[type](type, settings));\n  },\n\n  /**\n   * Setup TextTracks for the closed-caption groups\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function initialize['CLOSED-CAPTIONS']\n   */\n  'CLOSED-CAPTIONS': function CLOSEDCAPTIONS(type, settings) {\n    var tech = settings.tech,\n        mediaGroups = settings.master.mediaGroups,\n        _settings$mediaTypes$3 = settings.mediaTypes[type],\n        groups = _settings$mediaTypes$3.groups,\n        tracks = _settings$mediaTypes$3.tracks;\n\n    for (var groupId in mediaGroups[type]) {\n      if (!groups[groupId]) {\n        groups[groupId] = [];\n      }\n\n      for (var variantLabel in mediaGroups[type][groupId]) {\n        var properties = mediaGroups[type][groupId][variantLabel]; // We only support CEA608 captions for now, so ignore anything that\n        // doesn't use a CCx INSTREAM-ID\n\n        if (!properties.instreamId.match(/CC\\d/)) {\n          continue;\n        } // No PlaylistLoader is required for Closed-Captions because the captions are\n        // embedded within the video stream\n\n\n        groups[groupId].push(videojs$1.mergeOptions({\n          id: variantLabel\n        }, properties));\n\n        if (typeof tracks[variantLabel] === 'undefined') {\n          var track = tech.addRemoteTextTrack({\n            id: properties.instreamId,\n            kind: 'captions',\n            default: properties.default && properties.autoselect,\n            language: properties.language,\n            label: variantLabel\n          }, false).track;\n          tracks[variantLabel] = track;\n        }\n      }\n    }\n  }\n};\n/**\n * Returns a function used to get the active group of the provided type\n *\n * @param {String} type\n *        MediaGroup type\n * @param {Object} settings\n *        Object containing required information for media groups\n * @return {Function}\n *         Function that returns the active media group for the provided type. Takes an\n *         optional parameter {TextTrack} track. If no track is provided, a list of all\n *         variants in the group, otherwise the variant corresponding to the provided\n *         track is returned.\n * @function activeGroup\n */\n\nvar activeGroup = function activeGroup(type, settings) {\n  return function (track) {\n    var masterPlaylistLoader = settings.masterPlaylistLoader,\n        groups = settings.mediaTypes[type].groups;\n    var media = masterPlaylistLoader.media();\n\n    if (!media) {\n      return null;\n    }\n\n    var variants = null;\n\n    if (media.attributes[type]) {\n      variants = groups[media.attributes[type]];\n    }\n\n    variants = variants || groups.main;\n\n    if (typeof track === 'undefined') {\n      return variants;\n    }\n\n    if (track === null) {\n      // An active track was specified so a corresponding group is expected. track === null\n      // means no track is currently active so there is no corresponding group\n      return null;\n    }\n\n    return variants.filter(function (props) {\n      return props.id === track.id;\n    })[0] || null;\n  };\n};\n\nvar activeTrack = {\n  /**\n   * Returns a function used to get the active track of type provided\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Function that returns the active media track for the provided type. Returns\n   *         null if no track is active\n   * @function activeTrack.AUDIO\n   */\n  AUDIO: function AUDIO(type, settings) {\n    return function () {\n      var tracks = settings.mediaTypes[type].tracks;\n\n      for (var id in tracks) {\n        if (tracks[id].enabled) {\n          return tracks[id];\n        }\n      }\n\n      return null;\n    };\n  },\n\n  /**\n   * Returns a function used to get the active track of type provided\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Function that returns the active media track for the provided type. Returns\n   *         null if no track is active\n   * @function activeTrack.SUBTITLES\n   */\n  SUBTITLES: function SUBTITLES(type, settings) {\n    return function () {\n      var tracks = settings.mediaTypes[type].tracks;\n\n      for (var id in tracks) {\n        if (tracks[id].mode === 'showing') {\n          return tracks[id];\n        }\n      }\n\n      return null;\n    };\n  }\n};\n/**\n * Setup PlaylistLoaders and Tracks for media groups (Audio, Subtitles,\n * Closed-Captions) specified in the master manifest.\n *\n * @param {Object} settings\n *        Object containing required information for setting up the media groups\n * @param {SegmentLoader} settings.segmentLoaders.AUDIO\n *        Audio segment loader\n * @param {SegmentLoader} settings.segmentLoaders.SUBTITLES\n *        Subtitle segment loader\n * @param {SegmentLoader} settings.segmentLoaders.main\n *        Main segment loader\n * @param {Tech} settings.tech\n *        The tech of the player\n * @param {Object} settings.requestOptions\n *        XHR request options used by the segment loaders\n * @param {PlaylistLoader} settings.masterPlaylistLoader\n *        PlaylistLoader for the master source\n * @param {HlsHandler} settings.hls\n *        HLS SourceHandler\n * @param {Object} settings.master\n *        The parsed master manifest\n * @param {Object} settings.mediaTypes\n *        Object to store the loaders, tracks, and utility methods for each media type\n * @param {Function} settings.blacklistCurrentPlaylist\n *        Blacklists the current rendition and forces a rendition switch.\n * @function setupMediaGroups\n */\n\nvar setupMediaGroups = function setupMediaGroups(settings) {\n  ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(function (type) {\n    initialize[type](type, settings);\n  });\n  var mediaTypes = settings.mediaTypes,\n      masterPlaylistLoader = settings.masterPlaylistLoader,\n      tech = settings.tech,\n      hls = settings.hls; // setup active group and track getters and change event handlers\n\n  ['AUDIO', 'SUBTITLES'].forEach(function (type) {\n    mediaTypes[type].activeGroup = activeGroup(type, settings);\n    mediaTypes[type].activeTrack = activeTrack[type](type, settings);\n    mediaTypes[type].onGroupChanged = onGroupChanged(type, settings);\n    mediaTypes[type].onTrackChanged = onTrackChanged(type, settings);\n  }); // DO NOT enable the default subtitle or caption track.\n  // DO enable the default audio track\n\n  var audioGroup = mediaTypes.AUDIO.activeGroup();\n  var groupId = (audioGroup.filter(function (group) {\n    return group.default;\n  })[0] || audioGroup[0]).id;\n  mediaTypes.AUDIO.tracks[groupId].enabled = true;\n  mediaTypes.AUDIO.onTrackChanged();\n  masterPlaylistLoader.on('mediachange', function () {\n    ['AUDIO', 'SUBTITLES'].forEach(function (type) {\n      return mediaTypes[type].onGroupChanged();\n    });\n  }); // custom audio track change event handler for usage event\n\n  var onAudioTrackChanged = function onAudioTrackChanged() {\n    mediaTypes.AUDIO.onTrackChanged();\n    tech.trigger({\n      type: 'usage',\n      name: 'hls-audio-change'\n    });\n  };\n\n  tech.audioTracks().addEventListener('change', onAudioTrackChanged);\n  tech.remoteTextTracks().addEventListener('change', mediaTypes.SUBTITLES.onTrackChanged);\n  hls.on('dispose', function () {\n    tech.audioTracks().removeEventListener('change', onAudioTrackChanged);\n    tech.remoteTextTracks().removeEventListener('change', mediaTypes.SUBTITLES.onTrackChanged);\n  }); // clear existing audio tracks and add the ones we just created\n\n  tech.clearTracks('audio');\n\n  for (var id in mediaTypes.AUDIO.tracks) {\n    tech.audioTracks().addTrack(mediaTypes.AUDIO.tracks[id]);\n  }\n};\n/**\n * Creates skeleton object used to store the loaders, tracks, and utility methods for each\n * media type\n *\n * @return {Object}\n *         Object to store the loaders, tracks, and utility methods for each media type\n * @function createMediaTypes\n */\n\n\nvar createMediaTypes = function createMediaTypes() {\n  var mediaTypes = {};\n  ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(function (type) {\n    mediaTypes[type] = {\n      groups: {},\n      tracks: {},\n      activePlaylistLoader: null,\n      activeGroup: noop,\n      activeTrack: noop,\n      onGroupChanged: noop,\n      onTrackChanged: noop\n    };\n  });\n  return mediaTypes;\n};\n/**\n * @file master-playlist-controller.js\n */\n\n\nvar ABORT_EARLY_BLACKLIST_SECONDS = 60 * 2;\nvar Hls = void 0; // SegmentLoader stats that need to have each loader's\n// values summed to calculate the final value\n\nvar loaderStats = ['mediaRequests', 'mediaRequestsAborted', 'mediaRequestsTimedout', 'mediaRequestsErrored', 'mediaTransferDuration', 'mediaBytesTransferred'];\n\nvar sumLoaderStat = function sumLoaderStat(stat) {\n  return this.audioSegmentLoader_[stat] + this.mainSegmentLoader_[stat];\n};\n/**\n * the master playlist controller controller all interactons\n * between playlists and segmentloaders. At this time this mainly\n * involves a master playlist and a series of audio playlists\n * if they are available\n *\n * @class MasterPlaylistController\n * @extends videojs.EventTarget\n */\n\n\nvar MasterPlaylistController = function (_videojs$EventTarget) {\n  inherits(MasterPlaylistController, _videojs$EventTarget);\n\n  function MasterPlaylistController(options) {\n    classCallCheck(this, MasterPlaylistController);\n\n    var _this = possibleConstructorReturn(this, (MasterPlaylistController.__proto__ || Object.getPrototypeOf(MasterPlaylistController)).call(this));\n\n    var url = options.url,\n        handleManifestRedirects = options.handleManifestRedirects,\n        withCredentials = options.withCredentials,\n        tech = options.tech,\n        bandwidth = options.bandwidth,\n        externHls = options.externHls,\n        useCueTags = options.useCueTags,\n        blacklistDuration = options.blacklistDuration,\n        enableLowInitialPlaylist = options.enableLowInitialPlaylist,\n        sourceType = options.sourceType,\n        seekTo = options.seekTo;\n\n    if (!url) {\n      throw new Error('A non-empty playlist URL is required');\n    }\n\n    Hls = externHls;\n    _this.withCredentials = withCredentials;\n    _this.tech_ = tech;\n    _this.hls_ = tech.hls;\n    _this.seekTo_ = seekTo;\n    _this.sourceType_ = sourceType;\n    _this.useCueTags_ = useCueTags;\n    _this.blacklistDuration = blacklistDuration;\n    _this.enableLowInitialPlaylist = enableLowInitialPlaylist;\n\n    if (_this.useCueTags_) {\n      _this.cueTagsTrack_ = _this.tech_.addTextTrack('metadata', 'ad-cues');\n      _this.cueTagsTrack_.inBandMetadataTrackDispatchType = '';\n    }\n\n    _this.requestOptions_ = {\n      withCredentials: withCredentials,\n      handleManifestRedirects: handleManifestRedirects,\n      timeout: null\n    };\n    _this.mediaTypes_ = createMediaTypes();\n    _this.mediaSource = new videojs$1.MediaSource(); // load the media source into the player\n\n    _this.mediaSource.addEventListener('sourceopen', _this.handleSourceOpen_.bind(_this));\n\n    _this.seekable_ = videojs$1.createTimeRanges();\n\n    _this.hasPlayed_ = function () {\n      return false;\n    };\n\n    _this.syncController_ = new SyncController(options);\n    _this.segmentMetadataTrack_ = tech.addRemoteTextTrack({\n      kind: 'metadata',\n      label: 'segment-metadata'\n    }, false).track;\n    _this.decrypter_ = new Decrypter$1();\n    _this.inbandTextTracks_ = {};\n    var segmentLoaderSettings = {\n      hls: _this.hls_,\n      mediaSource: _this.mediaSource,\n      currentTime: _this.tech_.currentTime.bind(_this.tech_),\n      seekable: function seekable$$1() {\n        return _this.seekable();\n      },\n      seeking: function seeking() {\n        return _this.tech_.seeking();\n      },\n      duration: function duration$$1() {\n        return _this.mediaSource.duration;\n      },\n      hasPlayed: function hasPlayed() {\n        return _this.hasPlayed_();\n      },\n      goalBufferLength: function goalBufferLength() {\n        return _this.goalBufferLength();\n      },\n      bandwidth: bandwidth,\n      syncController: _this.syncController_,\n      decrypter: _this.decrypter_,\n      sourceType: _this.sourceType_,\n      inbandTextTracks: _this.inbandTextTracks_\n    };\n    _this.masterPlaylistLoader_ = _this.sourceType_ === 'dash' ? new DashPlaylistLoader(url, _this.hls_, _this.requestOptions_) : new PlaylistLoader(url, _this.hls_, _this.requestOptions_);\n\n    _this.setupMasterPlaylistLoaderListeners_(); // setup segment loaders\n    // combined audio/video or just video when alternate audio track is selected\n\n\n    _this.mainSegmentLoader_ = new SegmentLoader(videojs$1.mergeOptions(segmentLoaderSettings, {\n      segmentMetadataTrack: _this.segmentMetadataTrack_,\n      loaderType: 'main'\n    }), options); // alternate audio track\n\n    _this.audioSegmentLoader_ = new SegmentLoader(videojs$1.mergeOptions(segmentLoaderSettings, {\n      loaderType: 'audio'\n    }), options);\n    _this.subtitleSegmentLoader_ = new VTTSegmentLoader(videojs$1.mergeOptions(segmentLoaderSettings, {\n      loaderType: 'vtt'\n    }), options);\n\n    _this.setupSegmentLoaderListeners_(); // Create SegmentLoader stat-getters\n\n\n    loaderStats.forEach(function (stat) {\n      _this[stat + '_'] = sumLoaderStat.bind(_this, stat);\n    });\n    _this.logger_ = logger('MPC');\n\n    _this.masterPlaylistLoader_.load();\n\n    return _this;\n  }\n  /**\n   * Register event handlers on the master playlist loader. A helper\n   * function for construction time.\n   *\n   * @private\n   */\n\n\n  createClass(MasterPlaylistController, [{\n    key: 'setupMasterPlaylistLoaderListeners_',\n    value: function setupMasterPlaylistLoaderListeners_() {\n      var _this2 = this;\n\n      this.masterPlaylistLoader_.on('loadedmetadata', function () {\n        var media = _this2.masterPlaylistLoader_.media();\n\n        var requestTimeout = media.targetDuration * 1.5 * 1000; // If we don't have any more available playlists, we don't want to\n        // timeout the request.\n\n        if (isLowestEnabledRendition(_this2.masterPlaylistLoader_.master, _this2.masterPlaylistLoader_.media())) {\n          _this2.requestOptions_.timeout = 0;\n        } else {\n          _this2.requestOptions_.timeout = requestTimeout;\n        } // if this isn't a live video and preload permits, start\n        // downloading segments\n\n\n        if (media.endList && _this2.tech_.preload() !== 'none') {\n          _this2.mainSegmentLoader_.playlist(media, _this2.requestOptions_);\n\n          _this2.mainSegmentLoader_.load();\n        }\n\n        setupMediaGroups({\n          sourceType: _this2.sourceType_,\n          segmentLoaders: {\n            AUDIO: _this2.audioSegmentLoader_,\n            SUBTITLES: _this2.subtitleSegmentLoader_,\n            main: _this2.mainSegmentLoader_\n          },\n          tech: _this2.tech_,\n          requestOptions: _this2.requestOptions_,\n          masterPlaylistLoader: _this2.masterPlaylistLoader_,\n          hls: _this2.hls_,\n          master: _this2.master(),\n          mediaTypes: _this2.mediaTypes_,\n          blacklistCurrentPlaylist: _this2.blacklistCurrentPlaylist.bind(_this2)\n        });\n\n        _this2.triggerPresenceUsage_(_this2.master(), media);\n\n        try {\n          _this2.setupSourceBuffers_();\n        } catch (e) {\n          videojs$1.log.warn('Failed to create SourceBuffers', e);\n          return _this2.mediaSource.endOfStream('decode');\n        }\n\n        _this2.setupFirstPlay();\n\n        if (!_this2.mediaTypes_.AUDIO.activePlaylistLoader || _this2.mediaTypes_.AUDIO.activePlaylistLoader.media()) {\n          _this2.trigger('selectedinitialmedia');\n        } else {\n          // We must wait for the active audio playlist loader to\n          // finish setting up before triggering this event so the\n          // representations API and EME setup is correct\n          _this2.mediaTypes_.AUDIO.activePlaylistLoader.one('loadedmetadata', function () {\n            _this2.trigger('selectedinitialmedia');\n          });\n        }\n      });\n      this.masterPlaylistLoader_.on('loadedplaylist', function () {\n        var updatedPlaylist = _this2.masterPlaylistLoader_.media();\n\n        if (!updatedPlaylist) {\n          // blacklist any variants that are not supported by the browser before selecting\n          // an initial media as the playlist selectors do not consider browser support\n          _this2.excludeUnsupportedVariants_();\n\n          var selectedMedia = void 0;\n\n          if (_this2.enableLowInitialPlaylist) {\n            selectedMedia = _this2.selectInitialPlaylist();\n          }\n\n          if (!selectedMedia) {\n            selectedMedia = _this2.selectPlaylist();\n          }\n\n          _this2.initialMedia_ = selectedMedia;\n\n          _this2.masterPlaylistLoader_.media(_this2.initialMedia_);\n\n          return;\n        }\n\n        if (_this2.useCueTags_) {\n          _this2.updateAdCues_(updatedPlaylist);\n        } // TODO: Create a new event on the PlaylistLoader that signals\n        // that the segments have changed in some way and use that to\n        // update the SegmentLoader instead of doing it twice here and\n        // on `mediachange`\n\n\n        _this2.mainSegmentLoader_.playlist(updatedPlaylist, _this2.requestOptions_);\n\n        _this2.updateDuration(); // If the player isn't paused, ensure that the segment loader is running,\n        // as it is possible that it was temporarily stopped while waiting for\n        // a playlist (e.g., in case the playlist errored and we re-requested it).\n\n\n        if (!_this2.tech_.paused()) {\n          _this2.mainSegmentLoader_.load();\n\n          if (_this2.audioSegmentLoader_) {\n            _this2.audioSegmentLoader_.load();\n          }\n        }\n\n        if (!updatedPlaylist.endList) {\n          var addSeekableRange = function addSeekableRange() {\n            var seekable$$1 = _this2.seekable();\n\n            if (seekable$$1.length !== 0) {\n              _this2.mediaSource.addSeekableRange_(seekable$$1.start(0), seekable$$1.end(0));\n            }\n          };\n\n          if (_this2.duration() !== Infinity) {\n            var onDurationchange = function onDurationchange() {\n              if (_this2.duration() === Infinity) {\n                addSeekableRange();\n              } else {\n                _this2.tech_.one('durationchange', onDurationchange);\n              }\n            };\n\n            _this2.tech_.one('durationchange', onDurationchange);\n          } else {\n            addSeekableRange();\n          }\n        }\n      });\n      this.masterPlaylistLoader_.on('error', function () {\n        _this2.blacklistCurrentPlaylist(_this2.masterPlaylistLoader_.error);\n      });\n      this.masterPlaylistLoader_.on('mediachanging', function () {\n        _this2.mainSegmentLoader_.abort();\n\n        _this2.mainSegmentLoader_.pause();\n      });\n      this.masterPlaylistLoader_.on('mediachange', function () {\n        var media = _this2.masterPlaylistLoader_.media();\n\n        var requestTimeout = media.targetDuration * 1.5 * 1000; // If we don't have any more available playlists, we don't want to\n        // timeout the request.\n\n        if (isLowestEnabledRendition(_this2.masterPlaylistLoader_.master, _this2.masterPlaylistLoader_.media())) {\n          _this2.requestOptions_.timeout = 0;\n        } else {\n          _this2.requestOptions_.timeout = requestTimeout;\n        } // TODO: Create a new event on the PlaylistLoader that signals\n        // that the segments have changed in some way and use that to\n        // update the SegmentLoader instead of doing it twice here and\n        // on `loadedplaylist`\n\n\n        _this2.mainSegmentLoader_.playlist(media, _this2.requestOptions_);\n\n        _this2.mainSegmentLoader_.load();\n\n        _this2.tech_.trigger({\n          type: 'mediachange',\n          bubbles: true\n        });\n      });\n      this.masterPlaylistLoader_.on('playlistunchanged', function () {\n        var updatedPlaylist = _this2.masterPlaylistLoader_.media();\n\n        var playlistOutdated = _this2.stuckAtPlaylistEnd_(updatedPlaylist);\n\n        if (playlistOutdated) {\n          // Playlist has stopped updating and we're stuck at its end. Try to\n          // blacklist it and switch to another playlist in the hope that that\n          // one is updating (and give the player a chance to re-adjust to the\n          // safe live point).\n          _this2.blacklistCurrentPlaylist({\n            message: 'Playlist no longer updating.'\n          }); // useful for monitoring QoS\n\n\n          _this2.tech_.trigger('playliststuck');\n        }\n      });\n      this.masterPlaylistLoader_.on('renditiondisabled', function () {\n        _this2.tech_.trigger({\n          type: 'usage',\n          name: 'hls-rendition-disabled'\n        });\n      });\n      this.masterPlaylistLoader_.on('renditionenabled', function () {\n        _this2.tech_.trigger({\n          type: 'usage',\n          name: 'hls-rendition-enabled'\n        });\n      });\n    }\n    /**\n     * A helper function for triggerring presence usage events once per source\n     *\n     * @private\n     */\n\n  }, {\n    key: 'triggerPresenceUsage_',\n    value: function triggerPresenceUsage_(master, media) {\n      var mediaGroups = master.mediaGroups || {};\n      var defaultDemuxed = true;\n      var audioGroupKeys = Object.keys(mediaGroups.AUDIO);\n\n      for (var mediaGroup in mediaGroups.AUDIO) {\n        for (var label in mediaGroups.AUDIO[mediaGroup]) {\n          var properties = mediaGroups.AUDIO[mediaGroup][label];\n\n          if (!properties.uri) {\n            defaultDemuxed = false;\n          }\n        }\n      }\n\n      if (defaultDemuxed) {\n        this.tech_.trigger({\n          type: 'usage',\n          name: 'hls-demuxed'\n        });\n      }\n\n      if (Object.keys(mediaGroups.SUBTITLES).length) {\n        this.tech_.trigger({\n          type: 'usage',\n          name: 'hls-webvtt'\n        });\n      }\n\n      if (Hls.Playlist.isAes(media)) {\n        this.tech_.trigger({\n          type: 'usage',\n          name: 'hls-aes'\n        });\n      }\n\n      if (Hls.Playlist.isFmp4(media)) {\n        this.tech_.trigger({\n          type: 'usage',\n          name: 'hls-fmp4'\n        });\n      }\n\n      if (audioGroupKeys.length && Object.keys(mediaGroups.AUDIO[audioGroupKeys[0]]).length > 1) {\n        this.tech_.trigger({\n          type: 'usage',\n          name: 'hls-alternate-audio'\n        });\n      }\n\n      if (this.useCueTags_) {\n        this.tech_.trigger({\n          type: 'usage',\n          name: 'hls-playlist-cue-tags'\n        });\n      }\n    }\n    /**\n     * Register event handlers on the segment loaders. A helper function\n     * for construction time.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'setupSegmentLoaderListeners_',\n    value: function setupSegmentLoaderListeners_() {\n      var _this3 = this;\n\n      this.mainSegmentLoader_.on('bandwidthupdate', function () {\n        var nextPlaylist = _this3.selectPlaylist();\n\n        var currentPlaylist = _this3.masterPlaylistLoader_.media();\n\n        var buffered = _this3.tech_.buffered();\n\n        var forwardBuffer = buffered.length ? buffered.end(buffered.length - 1) - _this3.tech_.currentTime() : 0;\n\n        var bufferLowWaterLine = _this3.bufferLowWaterLine(); // If the playlist is live, then we want to not take low water line into account.\n        // This is because in LIVE, the player plays 3 segments from the end of the\n        // playlist, and if `BUFFER_LOW_WATER_LINE` is greater than the duration availble\n        // in those segments, a viewer will never experience a rendition upswitch.\n\n\n        if (!currentPlaylist.endList || // For the same reason as LIVE, we ignore the low water line when the VOD\n        // duration is below the max potential low water line\n        _this3.duration() < Config.MAX_BUFFER_LOW_WATER_LINE || // we want to switch down to lower resolutions quickly to continue playback, but\n        nextPlaylist.attributes.BANDWIDTH < currentPlaylist.attributes.BANDWIDTH || // ensure we have some buffer before we switch up to prevent us running out of\n        // buffer while loading a higher rendition.\n        forwardBuffer >= bufferLowWaterLine) {\n          _this3.masterPlaylistLoader_.media(nextPlaylist);\n        }\n\n        _this3.tech_.trigger('bandwidthupdate');\n      });\n      this.mainSegmentLoader_.on('progress', function () {\n        _this3.trigger('progress');\n      });\n      this.mainSegmentLoader_.on('error', function () {\n        _this3.blacklistCurrentPlaylist(_this3.mainSegmentLoader_.error());\n      });\n      this.mainSegmentLoader_.on('syncinfoupdate', function () {\n        _this3.onSyncInfoUpdate_();\n      });\n      this.mainSegmentLoader_.on('timestampoffset', function () {\n        _this3.tech_.trigger({\n          type: 'usage',\n          name: 'hls-timestamp-offset'\n        });\n      });\n      this.audioSegmentLoader_.on('syncinfoupdate', function () {\n        _this3.onSyncInfoUpdate_();\n      });\n      this.mainSegmentLoader_.on('ended', function () {\n        _this3.onEndOfStream();\n      });\n      this.mainSegmentLoader_.on('earlyabort', function () {\n        _this3.blacklistCurrentPlaylist({\n          message: 'Aborted early because there isn\\'t enough bandwidth to complete the ' + 'request without rebuffering.'\n        }, ABORT_EARLY_BLACKLIST_SECONDS);\n      });\n      this.mainSegmentLoader_.on('reseteverything', function () {\n        // If playing an MTS stream, a videojs.MediaSource is listening for\n        // hls-reset to reset caption parsing state in the transmuxer\n        _this3.tech_.trigger('hls-reset');\n      });\n      this.mainSegmentLoader_.on('segmenttimemapping', function (event) {\n        // If playing an MTS stream in html, a videojs.MediaSource is listening for\n        // hls-segment-time-mapping update its internal mapping of stream to display time\n        _this3.tech_.trigger({\n          type: 'hls-segment-time-mapping',\n          mapping: event.mapping\n        });\n      });\n      this.audioSegmentLoader_.on('ended', function () {\n        _this3.onEndOfStream();\n      });\n    }\n  }, {\n    key: 'mediaSecondsLoaded_',\n    value: function mediaSecondsLoaded_() {\n      return Math.max(this.audioSegmentLoader_.mediaSecondsLoaded + this.mainSegmentLoader_.mediaSecondsLoaded);\n    }\n    /**\n     * Call load on our SegmentLoaders\n     */\n\n  }, {\n    key: 'load',\n    value: function load() {\n      this.mainSegmentLoader_.load();\n\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        this.audioSegmentLoader_.load();\n      }\n\n      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\n        this.subtitleSegmentLoader_.load();\n      }\n    }\n    /**\n     * Re-tune playback quality level for the current player\n     * conditions without performing destructive actions, like\n     * removing already buffered content\n     *\n     * @private\n     */\n\n  }, {\n    key: 'smoothQualityChange_',\n    value: function smoothQualityChange_() {\n      var media = this.selectPlaylist();\n\n      if (media !== this.masterPlaylistLoader_.media()) {\n        this.masterPlaylistLoader_.media(media);\n        this.mainSegmentLoader_.resetLoader(); // don't need to reset audio as it is reset when media changes\n      }\n    }\n    /**\n     * Re-tune playback quality level for the current player\n     * conditions. This method will perform destructive actions like removing\n     * already buffered content in order to readjust the currently active\n     * playlist quickly. This is good for manual quality changes\n     *\n     * @private\n     */\n\n  }, {\n    key: 'fastQualityChange_',\n    value: function fastQualityChange_() {\n      var _this4 = this;\n\n      var media = this.selectPlaylist();\n\n      if (media === this.masterPlaylistLoader_.media()) {\n        return;\n      }\n\n      this.masterPlaylistLoader_.media(media); // Delete all buffered data to allow an immediate quality switch, then seek to give\n      // the browser a kick to remove any cached frames from the previous rendtion (.04 seconds\n      // ahead is roughly the minimum that will accomplish this across a variety of content\n      // in IE and Edge, but seeking in place is sufficient on all other browsers)\n      // Edge/IE bug: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/14600375/\n      // Chrome bug: https://bugs.chromium.org/p/chromium/issues/detail?id=651904\n\n      this.mainSegmentLoader_.resetEverything(function () {\n        // Since this is not a typical seek, we avoid the seekTo method which can cause segments\n        // from the previously enabled rendition to load before the new playlist has finished loading\n        if (videojs$1.browser.IE_VERSION || videojs$1.browser.IS_EDGE) {\n          _this4.tech_.setCurrentTime(_this4.tech_.currentTime() + 0.04);\n        } else {\n          _this4.tech_.setCurrentTime(_this4.tech_.currentTime());\n        }\n      }); // don't need to reset audio as it is reset when media changes\n    }\n    /**\n     * Begin playback.\n     */\n\n  }, {\n    key: 'play',\n    value: function play() {\n      if (this.setupFirstPlay()) {\n        return;\n      }\n\n      if (this.tech_.ended()) {\n        this.seekTo_(0);\n      }\n\n      if (this.hasPlayed_()) {\n        this.load();\n      }\n\n      var seekable$$1 = this.tech_.seekable(); // if the viewer has paused and we fell out of the live window,\n      // seek forward to the live point\n\n      if (this.tech_.duration() === Infinity) {\n        if (this.tech_.currentTime() < seekable$$1.start(0)) {\n          return this.seekTo_(seekable$$1.end(seekable$$1.length - 1));\n        }\n      }\n    }\n    /**\n     * Seek to the latest media position if this is a live video and the\n     * player and video are loaded and initialized.\n     */\n\n  }, {\n    key: 'setupFirstPlay',\n    value: function setupFirstPlay() {\n      var _this5 = this;\n\n      var media = this.masterPlaylistLoader_.media(); // Check that everything is ready to begin buffering for the first call to play\n      //  If 1) there is no active media\n      //     2) the player is paused\n      //     3) the first play has already been setup\n      // then exit early\n\n      if (!media || this.tech_.paused() || this.hasPlayed_()) {\n        return false;\n      } // when the video is a live stream\n\n\n      if (!media.endList) {\n        var seekable$$1 = this.seekable();\n\n        if (!seekable$$1.length) {\n          // without a seekable range, the player cannot seek to begin buffering at the live\n          // point\n          return false;\n        }\n\n        if (videojs$1.browser.IE_VERSION && this.tech_.readyState() === 0) {\n          // IE11 throws an InvalidStateError if you try to set currentTime while the\n          // readyState is 0, so it must be delayed until the tech fires loadedmetadata.\n          this.tech_.one('loadedmetadata', function () {\n            _this5.trigger('firstplay');\n\n            _this5.seekTo_(seekable$$1.end(0));\n\n            _this5.hasPlayed_ = function () {\n              return true;\n            };\n          });\n          return false;\n        } // trigger firstplay to inform the source handler to ignore the next seek event\n\n\n        this.trigger('firstplay'); // seek to the live point\n\n        this.seekTo_(seekable$$1.end(0));\n      }\n\n      this.hasPlayed_ = function () {\n        return true;\n      }; // we can begin loading now that everything is ready\n\n\n      this.load();\n      return true;\n    }\n    /**\n     * handle the sourceopen event on the MediaSource\n     *\n     * @private\n     */\n\n  }, {\n    key: 'handleSourceOpen_',\n    value: function handleSourceOpen_() {\n      // Only attempt to create the source buffer if none already exist.\n      // handleSourceOpen is also called when we are \"re-opening\" a source buffer\n      // after `endOfStream` has been called (in response to a seek for instance)\n      try {\n        this.setupSourceBuffers_();\n      } catch (e) {\n        videojs$1.log.warn('Failed to create Source Buffers', e);\n        return this.mediaSource.endOfStream('decode');\n      } // if autoplay is enabled, begin playback. This is duplicative of\n      // code in video.js but is required because play() must be invoked\n      // *after* the media source has opened.\n\n\n      if (this.tech_.autoplay()) {\n        var playPromise = this.tech_.play(); // Catch/silence error when a pause interrupts a play request\n        // on browsers which return a promise\n\n        if (typeof playPromise !== 'undefined' && typeof playPromise.then === 'function') {\n          playPromise.then(null, function (e) {});\n        }\n      }\n\n      this.trigger('sourceopen');\n    }\n    /**\n     * Calls endOfStream on the media source when all active stream types have called\n     * endOfStream\n     *\n     * @param {string} streamType\n     *        Stream type of the segment loader that called endOfStream\n     * @private\n     */\n\n  }, {\n    key: 'onEndOfStream',\n    value: function onEndOfStream() {\n      var isEndOfStream = this.mainSegmentLoader_.ended_;\n\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        // if the audio playlist loader exists, then alternate audio is active\n        if (!this.mainSegmentLoader_.startingMedia_ || this.mainSegmentLoader_.startingMedia_.containsVideo) {\n          // if we do not know if the main segment loader contains video yet or if we\n          // definitively know the main segment loader contains video, then we need to wait\n          // for both main and audio segment loaders to call endOfStream\n          isEndOfStream = isEndOfStream && this.audioSegmentLoader_.ended_;\n        } else {\n          // otherwise just rely on the audio loader\n          isEndOfStream = this.audioSegmentLoader_.ended_;\n        }\n      }\n\n      if (!isEndOfStream) {\n        return;\n      }\n\n      this.logger_('calling mediaSource.endOfStream()'); // on chrome calling endOfStream can sometimes cause an exception,\n      // even when the media source is in a valid state.\n\n      try {\n        this.mediaSource.endOfStream();\n      } catch (e) {\n        videojs$1.log.warn('Failed to call media source endOfStream', e);\n      }\n    }\n    /**\n     * Check if a playlist has stopped being updated\n     * @param {Object} playlist the media playlist object\n     * @return {boolean} whether the playlist has stopped being updated or not\n     */\n\n  }, {\n    key: 'stuckAtPlaylistEnd_',\n    value: function stuckAtPlaylistEnd_(playlist) {\n      var seekable$$1 = this.seekable();\n\n      if (!seekable$$1.length) {\n        // playlist doesn't have enough information to determine whether we are stuck\n        return false;\n      }\n\n      var expired = this.syncController_.getExpiredTime(playlist, this.mediaSource.duration);\n\n      if (expired === null) {\n        return false;\n      } // does not use the safe live end to calculate playlist end, since we\n      // don't want to say we are stuck while there is still content\n\n\n      var absolutePlaylistEnd = Hls.Playlist.playlistEnd(playlist, expired);\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n\n      if (!buffered.length) {\n        // return true if the playhead reached the absolute end of the playlist\n        return absolutePlaylistEnd - currentTime <= SAFE_TIME_DELTA;\n      }\n\n      var bufferedEnd = buffered.end(buffered.length - 1); // return true if there is too little buffer left and buffer has reached absolute\n      // end of playlist\n\n      return bufferedEnd - currentTime <= SAFE_TIME_DELTA && absolutePlaylistEnd - bufferedEnd <= SAFE_TIME_DELTA;\n    }\n    /**\n     * Blacklists a playlist when an error occurs for a set amount of time\n     * making it unavailable for selection by the rendition selection algorithm\n     * and then forces a new playlist (rendition) selection.\n     *\n     * @param {Object=} error an optional error that may include the playlist\n     * to blacklist\n     * @param {Number=} blacklistDuration an optional number of seconds to blacklist the\n     * playlist\n     */\n\n  }, {\n    key: 'blacklistCurrentPlaylist',\n    value: function blacklistCurrentPlaylist() {\n      var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var blacklistDuration = arguments[1];\n      var currentPlaylist = void 0;\n      var nextPlaylist = void 0; // If the `error` was generated by the playlist loader, it will contain\n      // the playlist we were trying to load (but failed) and that should be\n      // blacklisted instead of the currently selected playlist which is likely\n      // out-of-date in this scenario\n\n      currentPlaylist = error.playlist || this.masterPlaylistLoader_.media();\n      blacklistDuration = blacklistDuration || error.blacklistDuration || this.blacklistDuration; // If there is no current playlist, then an error occurred while we were\n      // trying to load the master OR while we were disposing of the tech\n\n      if (!currentPlaylist) {\n        this.error = error;\n\n        try {\n          return this.mediaSource.endOfStream('network');\n        } catch (e) {\n          return this.trigger('error');\n        }\n      }\n\n      var isFinalRendition = this.masterPlaylistLoader_.master.playlists.filter(isEnabled).length === 1;\n\n      if (isFinalRendition) {\n        // Never blacklisting this playlist because it's final rendition\n        videojs$1.log.warn('Problem encountered with the current ' + 'HLS playlist. Trying again since it is the final playlist.');\n        this.tech_.trigger('retryplaylist');\n        return this.masterPlaylistLoader_.load(isFinalRendition);\n      } // Blacklist this playlist\n\n\n      currentPlaylist.excludeUntil = Date.now() + blacklistDuration * 1000;\n      this.tech_.trigger('blacklistplaylist');\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'hls-rendition-blacklisted'\n      }); // Select a new playlist\n\n      nextPlaylist = this.selectPlaylist();\n      videojs$1.log.warn('Problem encountered with the current HLS playlist.' + (error.message ? ' ' + error.message : '') + ' Switching to another playlist.');\n      return this.masterPlaylistLoader_.media(nextPlaylist);\n    }\n    /**\n     * Pause all segment loaders\n     */\n\n  }, {\n    key: 'pauseLoading',\n    value: function pauseLoading() {\n      this.mainSegmentLoader_.pause();\n\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        this.audioSegmentLoader_.pause();\n      }\n\n      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\n        this.subtitleSegmentLoader_.pause();\n      }\n    }\n    /**\n     * set the current time on all segment loaders\n     *\n     * @param {TimeRange} currentTime the current time to set\n     * @return {TimeRange} the current time\n     */\n\n  }, {\n    key: 'setCurrentTime',\n    value: function setCurrentTime(currentTime) {\n      var buffered = findRange(this.tech_.buffered(), currentTime);\n\n      if (!(this.masterPlaylistLoader_ && this.masterPlaylistLoader_.media())) {\n        // return immediately if the metadata is not ready yet\n        return 0;\n      } // it's clearly an edge-case but don't thrown an error if asked to\n      // seek within an empty playlist\n\n\n      if (!this.masterPlaylistLoader_.media().segments) {\n        return 0;\n      } // In flash playback, the segment loaders should be reset on every seek, even\n      // in buffer seeks. If the seek location is already buffered, continue buffering as\n      // usual\n      // TODO: redo this comment\n\n\n      if (buffered && buffered.length) {\n        return currentTime;\n      } // cancel outstanding requests so we begin buffering at the new\n      // location\n\n\n      this.mainSegmentLoader_.resetEverything();\n      this.mainSegmentLoader_.abort();\n\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        this.audioSegmentLoader_.resetEverything();\n        this.audioSegmentLoader_.abort();\n      }\n\n      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\n        this.subtitleSegmentLoader_.resetEverything();\n        this.subtitleSegmentLoader_.abort();\n      } // start segment loader loading in case they are paused\n\n\n      this.load();\n    }\n    /**\n     * get the current duration\n     *\n     * @return {TimeRange} the duration\n     */\n\n  }, {\n    key: 'duration',\n    value: function duration$$1() {\n      if (!this.masterPlaylistLoader_) {\n        return 0;\n      }\n\n      if (this.mediaSource) {\n        return this.mediaSource.duration;\n      }\n\n      return Hls.Playlist.duration(this.masterPlaylistLoader_.media());\n    }\n    /**\n     * check the seekable range\n     *\n     * @return {TimeRange} the seekable range\n     */\n\n  }, {\n    key: 'seekable',\n    value: function seekable$$1() {\n      return this.seekable_;\n    }\n  }, {\n    key: 'onSyncInfoUpdate_',\n    value: function onSyncInfoUpdate_() {\n      var mainSeekable = void 0;\n      var audioSeekable = void 0;\n\n      if (!this.masterPlaylistLoader_) {\n        return;\n      }\n\n      var media = this.masterPlaylistLoader_.media();\n\n      if (!media) {\n        return;\n      }\n\n      var expired = this.syncController_.getExpiredTime(media, this.mediaSource.duration);\n\n      if (expired === null) {\n        // not enough information to update seekable\n        return;\n      }\n\n      mainSeekable = Hls.Playlist.seekable(media, expired);\n\n      if (mainSeekable.length === 0) {\n        return;\n      }\n\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        media = this.mediaTypes_.AUDIO.activePlaylistLoader.media();\n        expired = this.syncController_.getExpiredTime(media, this.mediaSource.duration);\n\n        if (expired === null) {\n          return;\n        }\n\n        audioSeekable = Hls.Playlist.seekable(media, expired);\n\n        if (audioSeekable.length === 0) {\n          return;\n        }\n      }\n\n      var oldEnd = void 0;\n      var oldStart = void 0;\n\n      if (this.seekable_ && this.seekable_.length) {\n        oldEnd = this.seekable_.end(0);\n        oldStart = this.seekable_.start(0);\n      }\n\n      if (!audioSeekable) {\n        // seekable has been calculated based on buffering video data so it\n        // can be returned directly\n        this.seekable_ = mainSeekable;\n      } else if (audioSeekable.start(0) > mainSeekable.end(0) || mainSeekable.start(0) > audioSeekable.end(0)) {\n        // seekables are pretty far off, rely on main\n        this.seekable_ = mainSeekable;\n      } else {\n        this.seekable_ = videojs$1.createTimeRanges([[audioSeekable.start(0) > mainSeekable.start(0) ? audioSeekable.start(0) : mainSeekable.start(0), audioSeekable.end(0) < mainSeekable.end(0) ? audioSeekable.end(0) : mainSeekable.end(0)]]);\n      } // seekable is the same as last time\n\n\n      if (this.seekable_ && this.seekable_.length) {\n        if (this.seekable_.end(0) === oldEnd && this.seekable_.start(0) === oldStart) {\n          return;\n        }\n      }\n\n      this.logger_('seekable updated [' + printableRange(this.seekable_) + ']');\n      this.tech_.trigger('seekablechanged');\n    }\n    /**\n     * Update the player duration\n     */\n\n  }, {\n    key: 'updateDuration',\n    value: function updateDuration() {\n      var _this6 = this;\n\n      var oldDuration = this.mediaSource.duration;\n      var newDuration = Hls.Playlist.duration(this.masterPlaylistLoader_.media());\n      var buffered = this.tech_.buffered();\n\n      var setDuration = function setDuration() {\n        // on firefox setting the duration may sometimes cause an exception\n        // even if the media source is open and source buffers are not\n        // updating, something about the media source being in an invalid state.\n        _this6.logger_('Setting duration from ' + _this6.mediaSource.duration + ' => ' + newDuration);\n\n        try {\n          _this6.mediaSource.duration = newDuration;\n        } catch (e) {\n          videojs$1.log.warn('Failed to set media source duration', e);\n        }\n\n        _this6.tech_.trigger('durationchange');\n\n        _this6.mediaSource.removeEventListener('sourceopen', setDuration);\n      };\n\n      if (buffered.length > 0) {\n        newDuration = Math.max(newDuration, buffered.end(buffered.length - 1));\n      } // if the duration has changed, invalidate the cached value\n\n\n      if (oldDuration !== newDuration) {\n        // update the duration\n        if (this.mediaSource.readyState !== 'open') {\n          this.mediaSource.addEventListener('sourceopen', setDuration);\n        } else {\n          setDuration();\n        }\n      }\n    }\n    /**\n     * dispose of the MasterPlaylistController and everything\n     * that it controls\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      var _this7 = this;\n\n      this.decrypter_.terminate();\n      this.masterPlaylistLoader_.dispose();\n      this.mainSegmentLoader_.dispose();\n      ['AUDIO', 'SUBTITLES'].forEach(function (type) {\n        var groups = _this7.mediaTypes_[type].groups;\n\n        for (var id in groups) {\n          groups[id].forEach(function (group) {\n            if (group.playlistLoader) {\n              group.playlistLoader.dispose();\n            }\n          });\n        }\n      });\n      this.audioSegmentLoader_.dispose();\n      this.subtitleSegmentLoader_.dispose();\n    }\n    /**\n     * return the master playlist object if we have one\n     *\n     * @return {Object} the master playlist object that we parsed\n     */\n\n  }, {\n    key: 'master',\n    value: function master() {\n      return this.masterPlaylistLoader_.master;\n    }\n    /**\n     * return the currently selected playlist\n     *\n     * @return {Object} the currently selected playlist object that we parsed\n     */\n\n  }, {\n    key: 'media',\n    value: function media() {\n      // playlist loader will not return media if it has not been fully loaded\n      return this.masterPlaylistLoader_.media() || this.initialMedia_;\n    }\n    /**\n     * setup our internal source buffers on our segment Loaders\n     *\n     * @private\n     */\n\n  }, {\n    key: 'setupSourceBuffers_',\n    value: function setupSourceBuffers_() {\n      var media = this.masterPlaylistLoader_.media();\n      var mimeTypes = void 0; // wait until a media playlist is available and the Media Source is\n      // attached\n\n      if (!media || this.mediaSource.readyState !== 'open') {\n        return;\n      }\n\n      mimeTypes = mimeTypesForPlaylist(this.masterPlaylistLoader_.master, media);\n\n      if (mimeTypes.length < 1) {\n        this.error = 'No compatible SourceBuffer configuration for the variant stream:' + media.resolvedUri;\n        return this.mediaSource.endOfStream('decode');\n      }\n\n      this.configureLoaderMimeTypes_(mimeTypes); // exclude any incompatible variant streams from future playlist\n      // selection\n\n      this.excludeIncompatibleVariants_(media);\n    }\n  }, {\n    key: 'configureLoaderMimeTypes_',\n    value: function configureLoaderMimeTypes_(mimeTypes) {\n      // If the content is demuxed, we can't start appending segments to a source buffer\n      // until both source buffers are set up, or else the browser may not let us add the\n      // second source buffer (it will assume we are playing either audio only or video\n      // only).\n      var sourceBufferEmitter = // If there is more than one mime type\n      mimeTypes.length > 1 && // and the first mime type does not have muxed video and audio\n      mimeTypes[0].indexOf(',') === -1 && // and the two mime types are different (they can be the same in the case of audio\n      // only with alternate audio)\n      mimeTypes[0] !== mimeTypes[1] ? // then we want to wait on the second source buffer\n      new videojs$1.EventTarget() : // otherwise there is no need to wait as the content is either audio only,\n      // video only, or muxed content.\n      null;\n      this.mainSegmentLoader_.mimeType(mimeTypes[0], sourceBufferEmitter);\n\n      if (mimeTypes[1]) {\n        this.audioSegmentLoader_.mimeType(mimeTypes[1], sourceBufferEmitter);\n      }\n    }\n    /**\n     * Blacklists playlists with codecs that are unsupported by the browser.\n     */\n\n  }, {\n    key: 'excludeUnsupportedVariants_',\n    value: function excludeUnsupportedVariants_() {\n      this.master().playlists.forEach(function (variant) {\n        if (variant.attributes.CODECS && window$1.MediaSource && window$1.MediaSource.isTypeSupported && !window$1.MediaSource.isTypeSupported('video/mp4; codecs=\"' + mapLegacyAvcCodecs(variant.attributes.CODECS) + '\"')) {\n          variant.excludeUntil = Infinity;\n        }\n      });\n    }\n    /**\n     * Blacklist playlists that are known to be codec or\n     * stream-incompatible with the SourceBuffer configuration. For\n     * instance, Media Source Extensions would cause the video element to\n     * stall waiting for video data if you switched from a variant with\n     * video and audio to an audio-only one.\n     *\n     * @param {Object} media a media playlist compatible with the current\n     * set of SourceBuffers. Variants in the current master playlist that\n     * do not appear to have compatible codec or stream configurations\n     * will be excluded from the default playlist selection algorithm\n     * indefinitely.\n     * @private\n     */\n\n  }, {\n    key: 'excludeIncompatibleVariants_',\n    value: function excludeIncompatibleVariants_(media) {\n      var codecCount = 2;\n      var videoCodec = null;\n      var codecs = void 0;\n\n      if (media.attributes.CODECS) {\n        codecs = parseCodecs(media.attributes.CODECS);\n        videoCodec = codecs.videoCodec;\n        codecCount = codecs.codecCount;\n      }\n\n      this.master().playlists.forEach(function (variant) {\n        var variantCodecs = {\n          codecCount: 2,\n          videoCodec: null\n        };\n\n        if (variant.attributes.CODECS) {\n          variantCodecs = parseCodecs(variant.attributes.CODECS);\n        } // if the streams differ in the presence or absence of audio or\n        // video, they are incompatible\n\n\n        if (variantCodecs.codecCount !== codecCount) {\n          variant.excludeUntil = Infinity;\n        } // if h.264 is specified on the current playlist, some flavor of\n        // it must be specified on all compatible variants\n\n\n        if (variantCodecs.videoCodec !== videoCodec) {\n          variant.excludeUntil = Infinity;\n        }\n      });\n    }\n  }, {\n    key: 'updateAdCues_',\n    value: function updateAdCues_(media) {\n      var offset = 0;\n      var seekable$$1 = this.seekable();\n\n      if (seekable$$1.length) {\n        offset = seekable$$1.start(0);\n      }\n\n      updateAdCues(media, this.cueTagsTrack_, offset);\n    }\n    /**\n     * Calculates the desired forward buffer length based on current time\n     *\n     * @return {Number} Desired forward buffer length in seconds\n     */\n\n  }, {\n    key: 'goalBufferLength',\n    value: function goalBufferLength() {\n      var currentTime = this.tech_.currentTime();\n      var initial = Config.GOAL_BUFFER_LENGTH;\n      var rate = Config.GOAL_BUFFER_LENGTH_RATE;\n      var max = Math.max(initial, Config.MAX_GOAL_BUFFER_LENGTH);\n      return Math.min(initial + currentTime * rate, max);\n    }\n    /**\n     * Calculates the desired buffer low water line based on current time\n     *\n     * @return {Number} Desired buffer low water line in seconds\n     */\n\n  }, {\n    key: 'bufferLowWaterLine',\n    value: function bufferLowWaterLine() {\n      var currentTime = this.tech_.currentTime();\n      var initial = Config.BUFFER_LOW_WATER_LINE;\n      var rate = Config.BUFFER_LOW_WATER_LINE_RATE;\n      var max = Math.max(initial, Config.MAX_BUFFER_LOW_WATER_LINE);\n      return Math.min(initial + currentTime * rate, max);\n    }\n  }]);\n  return MasterPlaylistController;\n}(videojs$1.EventTarget);\n/**\n * Returns a function that acts as the Enable/disable playlist function.\n *\n * @param {PlaylistLoader} loader - The master playlist loader\n * @param {String} playlistUri - uri of the playlist\n * @param {Function} changePlaylistFn - A function to be called after a\n * playlist's enabled-state has been changed. Will NOT be called if a\n * playlist's enabled-state is unchanged\n * @param {Boolean=} enable - Value to set the playlist enabled-state to\n * or if undefined returns the current enabled-state for the playlist\n * @return {Function} Function for setting/getting enabled\n */\n\n\nvar enableFunction = function enableFunction(loader, playlistUri, changePlaylistFn) {\n  return function (enable) {\n    var playlist = loader.master.playlists[playlistUri];\n    var incompatible = isIncompatible(playlist);\n    var currentlyEnabled = isEnabled(playlist);\n\n    if (typeof enable === 'undefined') {\n      return currentlyEnabled;\n    }\n\n    if (enable) {\n      delete playlist.disabled;\n    } else {\n      playlist.disabled = true;\n    }\n\n    if (enable !== currentlyEnabled && !incompatible) {\n      // Ensure the outside world knows about our changes\n      changePlaylistFn();\n\n      if (enable) {\n        loader.trigger('renditionenabled');\n      } else {\n        loader.trigger('renditiondisabled');\n      }\n    }\n\n    return enable;\n  };\n};\n/**\n * The representation object encapsulates the publicly visible information\n * in a media playlist along with a setter/getter-type function (enabled)\n * for changing the enabled-state of a particular playlist entry\n *\n * @class Representation\n */\n\n\nvar Representation = function Representation(hlsHandler, playlist, id) {\n  classCallCheck(this, Representation);\n  var mpc = hlsHandler.masterPlaylistController_,\n      smoothQualityChange = hlsHandler.options_.smoothQualityChange; // Get a reference to a bound version of the quality change function\n\n  var changeType = smoothQualityChange ? 'smooth' : 'fast';\n  var qualityChangeFunction = mpc[changeType + 'QualityChange_'].bind(mpc); // some playlist attributes are optional\n\n  if (playlist.attributes.RESOLUTION) {\n    var resolution = playlist.attributes.RESOLUTION;\n    this.width = resolution.width;\n    this.height = resolution.height;\n  }\n\n  this.bandwidth = playlist.attributes.BANDWIDTH; // The id is simply the ordinality of the media playlist\n  // within the master playlist\n\n  this.id = id; // Partially-apply the enableFunction to create a playlist-\n  // specific variant\n\n  this.enabled = enableFunction(hlsHandler.playlists, playlist.uri, qualityChangeFunction);\n};\n/**\n * A mixin function that adds the `representations` api to an instance\n * of the HlsHandler class\n * @param {HlsHandler} hlsHandler - An instance of HlsHandler to add the\n * representation API into\n */\n\n\nvar renditionSelectionMixin = function renditionSelectionMixin(hlsHandler) {\n  var playlists = hlsHandler.playlists; // Add a single API-specific function to the HlsHandler instance\n\n  hlsHandler.representations = function () {\n    return playlists.master.playlists.filter(function (media) {\n      return !isIncompatible(media);\n    }).map(function (e, i) {\n      return new Representation(hlsHandler, e, e.uri);\n    });\n  };\n};\n/**\n * @file playback-watcher.js\n *\n * Playback starts, and now my watch begins. It shall not end until my death. I shall\n * take no wait, hold no uncleared timeouts, father no bad seeks. I shall wear no crowns\n * and win no glory. I shall live and die at my post. I am the corrector of the underflow.\n * I am the watcher of gaps. I am the shield that guards the realms of seekable. I pledge\n * my life and honor to the Playback Watch, for this Player and all the Players to come.\n */\n// Set of events that reset the playback-watcher time check logic and clear the timeout\n\n\nvar timerCancelEvents = ['seeking', 'seeked', 'pause', 'playing', 'error'];\n/**\n * @class PlaybackWatcher\n */\n\nvar PlaybackWatcher = function () {\n  /**\n   * Represents an PlaybackWatcher object.\n   * @constructor\n   * @param {object} options an object that includes the tech and settings\n   */\n  function PlaybackWatcher(options) {\n    var _this = this;\n\n    classCallCheck(this, PlaybackWatcher);\n    this.tech_ = options.tech;\n    this.seekable = options.seekable;\n    this.seekTo = options.seekTo;\n    this.allowSeeksWithinUnsafeLiveWindow = options.allowSeeksWithinUnsafeLiveWindow;\n    this.media = options.media;\n    this.consecutiveUpdates = 0;\n    this.lastRecordedTime = null;\n    this.timer_ = null;\n    this.checkCurrentTimeTimeout_ = null;\n    this.logger_ = logger('PlaybackWatcher');\n    this.logger_('initialize');\n\n    var canPlayHandler = function canPlayHandler() {\n      return _this.monitorCurrentTime_();\n    };\n\n    var waitingHandler = function waitingHandler() {\n      return _this.techWaiting_();\n    };\n\n    var cancelTimerHandler = function cancelTimerHandler() {\n      return _this.cancelTimer_();\n    };\n\n    var fixesBadSeeksHandler = function fixesBadSeeksHandler() {\n      return _this.fixesBadSeeks_();\n    };\n\n    this.tech_.on('seekablechanged', fixesBadSeeksHandler);\n    this.tech_.on('waiting', waitingHandler);\n    this.tech_.on(timerCancelEvents, cancelTimerHandler);\n    this.tech_.on('canplay', canPlayHandler); // Define the dispose function to clean up our events\n\n    this.dispose = function () {\n      _this.logger_('dispose');\n\n      _this.tech_.off('seekablechanged', fixesBadSeeksHandler);\n\n      _this.tech_.off('waiting', waitingHandler);\n\n      _this.tech_.off(timerCancelEvents, cancelTimerHandler);\n\n      _this.tech_.off('canplay', canPlayHandler);\n\n      if (_this.checkCurrentTimeTimeout_) {\n        window$1.clearTimeout(_this.checkCurrentTimeTimeout_);\n      }\n\n      _this.cancelTimer_();\n    };\n  }\n  /**\n   * Periodically check current time to see if playback stopped\n   *\n   * @private\n   */\n\n\n  createClass(PlaybackWatcher, [{\n    key: 'monitorCurrentTime_',\n    value: function monitorCurrentTime_() {\n      this.checkCurrentTime_();\n\n      if (this.checkCurrentTimeTimeout_) {\n        window$1.clearTimeout(this.checkCurrentTimeTimeout_);\n      } // 42 = 24 fps // 250 is what Webkit uses // FF uses 15\n\n\n      this.checkCurrentTimeTimeout_ = window$1.setTimeout(this.monitorCurrentTime_.bind(this), 250);\n    }\n    /**\n     * The purpose of this function is to emulate the \"waiting\" event on\n     * browsers that do not emit it when they are waiting for more\n     * data to continue playback\n     *\n     * @private\n     */\n\n  }, {\n    key: 'checkCurrentTime_',\n    value: function checkCurrentTime_() {\n      if (this.tech_.seeking() && this.fixesBadSeeks_()) {\n        this.consecutiveUpdates = 0;\n        this.lastRecordedTime = this.tech_.currentTime();\n        return;\n      }\n\n      if (this.tech_.paused() || this.tech_.seeking()) {\n        return;\n      }\n\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n\n      if (this.lastRecordedTime === currentTime && (!buffered.length || currentTime + SAFE_TIME_DELTA >= buffered.end(buffered.length - 1))) {\n        // If current time is at the end of the final buffered region, then any playback\n        // stall is most likely caused by buffering in a low bandwidth environment. The tech\n        // should fire a `waiting` event in this scenario, but due to browser and tech\n        // inconsistencies. Calling `techWaiting_` here allows us to simulate\n        // responding to a native `waiting` event when the tech fails to emit one.\n        return this.techWaiting_();\n      }\n\n      if (this.consecutiveUpdates >= 5 && currentTime === this.lastRecordedTime) {\n        this.consecutiveUpdates++;\n        this.waiting_();\n      } else if (currentTime === this.lastRecordedTime) {\n        this.consecutiveUpdates++;\n      } else {\n        this.consecutiveUpdates = 0;\n        this.lastRecordedTime = currentTime;\n      }\n    }\n    /**\n     * Cancels any pending timers and resets the 'timeupdate' mechanism\n     * designed to detect that we are stalled\n     *\n     * @private\n     */\n\n  }, {\n    key: 'cancelTimer_',\n    value: function cancelTimer_() {\n      this.consecutiveUpdates = 0;\n\n      if (this.timer_) {\n        this.logger_('cancelTimer_');\n        clearTimeout(this.timer_);\n      }\n\n      this.timer_ = null;\n    }\n    /**\n     * Fixes situations where there's a bad seek\n     *\n     * @return {Boolean} whether an action was taken to fix the seek\n     * @private\n     */\n\n  }, {\n    key: 'fixesBadSeeks_',\n    value: function fixesBadSeeks_() {\n      var seeking = this.tech_.seeking();\n\n      if (!seeking) {\n        return false;\n      }\n\n      var seekable = this.seekable();\n      var currentTime = this.tech_.currentTime();\n      var isAfterSeekableRange = this.afterSeekableWindow_(seekable, currentTime, this.media(), this.allowSeeksWithinUnsafeLiveWindow);\n      var seekTo = void 0;\n\n      if (isAfterSeekableRange) {\n        var seekableEnd = seekable.end(seekable.length - 1); // sync to live point (if VOD, our seekable was updated and we're simply adjusting)\n\n        seekTo = seekableEnd;\n      }\n\n      if (this.beforeSeekableWindow_(seekable, currentTime)) {\n        var seekableStart = seekable.start(0); // sync to the beginning of the live window\n        // provide a buffer of .1 seconds to handle rounding/imprecise numbers\n\n        seekTo = seekableStart + SAFE_TIME_DELTA;\n      }\n\n      if (typeof seekTo !== 'undefined') {\n        this.logger_('Trying to seek outside of seekable at time ' + currentTime + ' with ' + ('seekable range ' + printableRange(seekable) + '. Seeking to ') + (seekTo + '.'));\n        this.seekTo(seekTo);\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Handler for situations when we determine the player is waiting.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'waiting_',\n    value: function waiting_() {\n      if (this.techWaiting_()) {\n        return;\n      } // All tech waiting checks failed. Use last resort correction\n\n\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n      var currentRange = findRange(buffered, currentTime); // Sometimes the player can stall for unknown reasons within a contiguous buffered\n      // region with no indication that anything is amiss (seen in Firefox). Seeking to\n      // currentTime is usually enough to kickstart the player. This checks that the player\n      // is currently within a buffered region before attempting a corrective seek.\n      // Chrome does not appear to continue `timeupdate` events after a `waiting` event\n      // until there is ~ 3 seconds of forward buffer available. PlaybackWatcher should also\n      // make sure there is ~3 seconds of forward buffer before taking any corrective action\n      // to avoid triggering an `unknownwaiting` event when the network is slow.\n\n      if (currentRange.length && currentTime + 3 <= currentRange.end(0)) {\n        this.cancelTimer_();\n        this.seekTo(currentTime);\n        this.logger_('Stopped at ' + currentTime + ' while inside a buffered region ' + ('[' + currentRange.start(0) + ' -> ' + currentRange.end(0) + ']. Attempting to resume ') + 'playback by seeking to the current time.'); // unknown waiting corrections may be useful for monitoring QoS\n\n        this.tech_.trigger({\n          type: 'usage',\n          name: 'hls-unknown-waiting'\n        });\n        return;\n      }\n    }\n    /**\n     * Handler for situations when the tech fires a `waiting` event\n     *\n     * @return {Boolean}\n     *         True if an action (or none) was needed to correct the waiting. False if no\n     *         checks passed\n     * @private\n     */\n\n  }, {\n    key: 'techWaiting_',\n    value: function techWaiting_() {\n      var seekable = this.seekable();\n      var currentTime = this.tech_.currentTime();\n\n      if (this.tech_.seeking() && this.fixesBadSeeks_()) {\n        // Tech is seeking or bad seek fixed, no action needed\n        return true;\n      }\n\n      if (this.tech_.seeking() || this.timer_ !== null) {\n        // Tech is seeking or already waiting on another action, no action needed\n        return true;\n      }\n\n      if (this.beforeSeekableWindow_(seekable, currentTime)) {\n        var livePoint = seekable.end(seekable.length - 1);\n        this.logger_('Fell out of live window at time ' + currentTime + '. Seeking to ' + ('live point (seekable end) ' + livePoint));\n        this.cancelTimer_();\n        this.seekTo(livePoint); // live window resyncs may be useful for monitoring QoS\n\n        this.tech_.trigger({\n          type: 'usage',\n          name: 'hls-live-resync'\n        });\n        return true;\n      }\n\n      var buffered = this.tech_.buffered();\n      var nextRange = findNextRange(buffered, currentTime);\n\n      if (this.videoUnderflow_(nextRange, buffered, currentTime)) {\n        // Even though the video underflowed and was stuck in a gap, the audio overplayed\n        // the gap, leading currentTime into a buffered range. Seeking to currentTime\n        // allows the video to catch up to the audio position without losing any audio\n        // (only suffering ~3 seconds of frozen video and a pause in audio playback).\n        this.cancelTimer_();\n        this.seekTo(currentTime); // video underflow may be useful for monitoring QoS\n\n        this.tech_.trigger({\n          type: 'usage',\n          name: 'hls-video-underflow'\n        });\n        return true;\n      } // check for gap\n\n\n      if (nextRange.length > 0) {\n        var difference = nextRange.start(0) - currentTime;\n        this.logger_('Stopped at ' + currentTime + ', setting timer for ' + difference + ', seeking ' + ('to ' + nextRange.start(0)));\n        this.timer_ = setTimeout(this.skipTheGap_.bind(this), difference * 1000, currentTime);\n        return true;\n      } // All checks failed. Returning false to indicate failure to correct waiting\n\n\n      return false;\n    }\n  }, {\n    key: 'afterSeekableWindow_',\n    value: function afterSeekableWindow_(seekable, currentTime, playlist) {\n      var allowSeeksWithinUnsafeLiveWindow = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      if (!seekable.length) {\n        // we can't make a solid case if there's no seekable, default to false\n        return false;\n      }\n\n      var allowedEnd = seekable.end(seekable.length - 1) + SAFE_TIME_DELTA;\n      var isLive = !playlist.endList;\n\n      if (isLive && allowSeeksWithinUnsafeLiveWindow) {\n        allowedEnd = seekable.end(seekable.length - 1) + playlist.targetDuration * 3;\n      }\n\n      if (currentTime > allowedEnd) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'beforeSeekableWindow_',\n    value: function beforeSeekableWindow_(seekable, currentTime) {\n      if (seekable.length && // can't fall before 0 and 0 seekable start identifies VOD stream\n      seekable.start(0) > 0 && currentTime < seekable.start(0) - SAFE_TIME_DELTA) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'videoUnderflow_',\n    value: function videoUnderflow_(nextRange, buffered, currentTime) {\n      if (nextRange.length === 0) {\n        // Even if there is no available next range, there is still a possibility we are\n        // stuck in a gap due to video underflow.\n        var gap = this.gapFromVideoUnderflow_(buffered, currentTime);\n\n        if (gap) {\n          this.logger_('Encountered a gap in video from ' + gap.start + ' to ' + gap.end + '. ' + ('Seeking to current time ' + currentTime));\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Timer callback. If playback still has not proceeded, then we seek\n     * to the start of the next buffered region.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'skipTheGap_',\n    value: function skipTheGap_(scheduledCurrentTime) {\n      var buffered = this.tech_.buffered();\n      var currentTime = this.tech_.currentTime();\n      var nextRange = findNextRange(buffered, currentTime);\n      this.cancelTimer_();\n\n      if (nextRange.length === 0 || currentTime !== scheduledCurrentTime) {\n        return;\n      }\n\n      this.logger_('skipTheGap_:', 'currentTime:', currentTime, 'scheduled currentTime:', scheduledCurrentTime, 'nextRange start:', nextRange.start(0)); // only seek if we still have not played\n\n      this.seekTo(nextRange.start(0) + TIME_FUDGE_FACTOR);\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'hls-gap-skip'\n      });\n    }\n  }, {\n    key: 'gapFromVideoUnderflow_',\n    value: function gapFromVideoUnderflow_(buffered, currentTime) {\n      // At least in Chrome, if there is a gap in the video buffer, the audio will continue\n      // playing for ~3 seconds after the video gap starts. This is done to account for\n      // video buffer underflow/underrun (note that this is not done when there is audio\n      // buffer underflow/underrun -- in that case the video will stop as soon as it\n      // encounters the gap, as audio stalls are more noticeable/jarring to a user than\n      // video stalls). The player's time will reflect the playthrough of audio, so the\n      // time will appear as if we are in a buffered region, even if we are stuck in a\n      // \"gap.\"\n      //\n      // Example:\n      // video buffer:   0 => 10.1, 10.2 => 20\n      // audio buffer:   0 => 20\n      // overall buffer: 0 => 10.1, 10.2 => 20\n      // current time: 13\n      //\n      // Chrome's video froze at 10 seconds, where the video buffer encountered the gap,\n      // however, the audio continued playing until it reached ~3 seconds past the gap\n      // (13 seconds), at which point it stops as well. Since current time is past the\n      // gap, findNextRange will return no ranges.\n      //\n      // To check for this issue, we see if there is a gap that starts somewhere within\n      // a 3 second range (3 seconds +/- 1 second) back from our current time.\n      var gaps = findGaps(buffered);\n\n      for (var i = 0; i < gaps.length; i++) {\n        var start = gaps.start(i);\n        var end = gaps.end(i); // gap is starts no more than 4 seconds back\n\n        if (currentTime - start < 4 && currentTime - start > 2) {\n          return {\n            start: start,\n            end: end\n          };\n        }\n      }\n\n      return null;\n    }\n  }]);\n  return PlaybackWatcher;\n}();\n\nvar defaultOptions = {\n  errorInterval: 30,\n  getSource: function getSource(next) {\n    var tech = this.tech({\n      IWillNotUseThisInPlugins: true\n    });\n    var sourceObj = tech.currentSource_;\n    return next(sourceObj);\n  }\n};\n/**\n * Main entry point for the plugin\n *\n * @param {Player} player a reference to a videojs Player instance\n * @param {Object} [options] an object with plugin options\n * @private\n */\n\nvar initPlugin = function initPlugin(player, options) {\n  var lastCalled = 0;\n  var seekTo = 0;\n  var localOptions = videojs$1.mergeOptions(defaultOptions, options);\n  player.ready(function () {\n    player.trigger({\n      type: 'usage',\n      name: 'hls-error-reload-initialized'\n    });\n  });\n  /**\n   * Player modifications to perform that must wait until `loadedmetadata`\n   * has been triggered\n   *\n   * @private\n   */\n\n  var loadedMetadataHandler = function loadedMetadataHandler() {\n    if (seekTo) {\n      player.currentTime(seekTo);\n    }\n  };\n  /**\n   * Set the source on the player element, play, and seek if necessary\n   *\n   * @param {Object} sourceObj An object specifying the source url and mime-type to play\n   * @private\n   */\n\n\n  var setSource = function setSource(sourceObj) {\n    if (sourceObj === null || sourceObj === undefined) {\n      return;\n    }\n\n    seekTo = player.duration() !== Infinity && player.currentTime() || 0;\n    player.one('loadedmetadata', loadedMetadataHandler);\n    player.src(sourceObj);\n    player.trigger({\n      type: 'usage',\n      name: 'hls-error-reload'\n    });\n    player.play();\n  };\n  /**\n   * Attempt to get a source from either the built-in getSource function\n   * or a custom function provided via the options\n   *\n   * @private\n   */\n\n\n  var errorHandler = function errorHandler() {\n    // Do not attempt to reload the source if a source-reload occurred before\n    // 'errorInterval' time has elapsed since the last source-reload\n    if (Date.now() - lastCalled < localOptions.errorInterval * 1000) {\n      player.trigger({\n        type: 'usage',\n        name: 'hls-error-reload-canceled'\n      });\n      return;\n    }\n\n    if (!localOptions.getSource || typeof localOptions.getSource !== 'function') {\n      videojs$1.log.error('ERROR: reloadSourceOnError - The option getSource must be a function!');\n      return;\n    }\n\n    lastCalled = Date.now();\n    return localOptions.getSource.call(player, setSource);\n  };\n  /**\n   * Unbind any event handlers that were bound by the plugin\n   *\n   * @private\n   */\n\n\n  var cleanupEvents = function cleanupEvents() {\n    player.off('loadedmetadata', loadedMetadataHandler);\n    player.off('error', errorHandler);\n    player.off('dispose', cleanupEvents);\n  };\n  /**\n   * Cleanup before re-initializing the plugin\n   *\n   * @param {Object} [newOptions] an object with plugin options\n   * @private\n   */\n\n\n  var reinitPlugin = function reinitPlugin(newOptions) {\n    cleanupEvents();\n    initPlugin(player, newOptions);\n  };\n\n  player.on('error', errorHandler);\n  player.on('dispose', cleanupEvents); // Overwrite the plugin function so that we can correctly cleanup before\n  // initializing the plugin\n\n  player.reloadSourceOnError = reinitPlugin;\n};\n/**\n * Reload the source when an error is detected as long as there\n * wasn't an error previously within the last 30 seconds\n *\n * @param {Object} [options] an object with plugin options\n */\n\n\nvar reloadSourceOnError = function reloadSourceOnError(options) {\n  initPlugin(this, options);\n};\n\nvar version$1 = \"1.9.3\"; // since VHS handles HLS and DASH (and in the future, more types), use * to capture all\n\nvideojs$1.use('*', function (player) {\n  return {\n    setSource: function setSource(srcObj, next) {\n      // pass null as the first argument to indicate that the source is not rejected\n      next(null, srcObj);\n    },\n    // VHS needs to know when seeks happen. For external seeks (generated at the player\n    // level), this middleware will capture the action. For internal seeks (generated at\n    // the tech level), we use a wrapped function so that we can handle it on our own\n    // (specified elsewhere).\n    setCurrentTime: function setCurrentTime(time) {\n      if (player.vhs && player.currentSource().src === player.vhs.source_.src) {\n        player.vhs.setCurrentTime(time);\n      }\n\n      return time;\n    },\n    // Sync VHS after play requests.\n    // This specifically handles replay where the order of actions is\n    // play, video element will seek to 0 (skipping the setCurrentTime middleware)\n    // then triggers a play event.\n    play: function play() {\n      if (player.vhs && player.currentSource().src === player.vhs.source_.src) {\n        player.vhs.setCurrentTime(player.tech_.currentTime());\n      }\n    }\n  };\n});\n/**\n * @file videojs-http-streaming.js\n *\n * The main file for the HLS project.\n * License: https://github.com/videojs/videojs-http-streaming/blob/master/LICENSE\n */\n\nvar Hls$1 = {\n  PlaylistLoader: PlaylistLoader,\n  Playlist: Playlist,\n  Decrypter: Decrypter,\n  AsyncStream: AsyncStream,\n  decrypt: decrypt,\n  utils: utils,\n  STANDARD_PLAYLIST_SELECTOR: lastBandwidthSelector,\n  INITIAL_PLAYLIST_SELECTOR: lowestBitrateCompatibleVariantSelector,\n  comparePlaylistBandwidth: comparePlaylistBandwidth,\n  comparePlaylistResolution: comparePlaylistResolution,\n  xhr: xhrFactory()\n}; // Define getter/setters for config properites\n\n['GOAL_BUFFER_LENGTH', 'MAX_GOAL_BUFFER_LENGTH', 'GOAL_BUFFER_LENGTH_RATE', 'BUFFER_LOW_WATER_LINE', 'MAX_BUFFER_LOW_WATER_LINE', 'BUFFER_LOW_WATER_LINE_RATE', 'BANDWIDTH_VARIANCE'].forEach(function (prop) {\n  Object.defineProperty(Hls$1, prop, {\n    get: function get$$1() {\n      videojs$1.log.warn('using Hls.' + prop + ' is UNSAFE be sure you know what you are doing');\n      return Config[prop];\n    },\n    set: function set$$1(value) {\n      videojs$1.log.warn('using Hls.' + prop + ' is UNSAFE be sure you know what you are doing');\n\n      if (typeof value !== 'number' || value < 0) {\n        videojs$1.log.warn('value of Hls.' + prop + ' must be greater than or equal to 0');\n        return;\n      }\n\n      Config[prop] = value;\n    }\n  });\n});\nvar LOCAL_STORAGE_KEY$1 = 'videojs-vhs';\n\nvar simpleTypeFromSourceType = function simpleTypeFromSourceType(type) {\n  var mpegurlRE = /^(audio|video|application)\\/(x-|vnd\\.apple\\.)?mpegurl/i;\n\n  if (mpegurlRE.test(type)) {\n    return 'hls';\n  }\n\n  var dashRE = /^application\\/dash\\+xml/i;\n\n  if (dashRE.test(type)) {\n    return 'dash';\n  }\n\n  return null;\n};\n/**\n * Updates the selectedIndex of the QualityLevelList when a mediachange happens in hls.\n *\n * @param {QualityLevelList} qualityLevels The QualityLevelList to update.\n * @param {PlaylistLoader} playlistLoader PlaylistLoader containing the new media info.\n * @function handleHlsMediaChange\n */\n\n\nvar handleHlsMediaChange = function handleHlsMediaChange(qualityLevels, playlistLoader) {\n  var newPlaylist = playlistLoader.media();\n  var selectedIndex = -1;\n\n  for (var i = 0; i < qualityLevels.length; i++) {\n    if (qualityLevels[i].id === newPlaylist.uri) {\n      selectedIndex = i;\n      break;\n    }\n  }\n\n  qualityLevels.selectedIndex_ = selectedIndex;\n  qualityLevels.trigger({\n    selectedIndex: selectedIndex,\n    type: 'change'\n  });\n};\n/**\n * Adds quality levels to list once playlist metadata is available\n *\n * @param {QualityLevelList} qualityLevels The QualityLevelList to attach events to.\n * @param {Object} hls Hls object to listen to for media events.\n * @function handleHlsLoadedMetadata\n */\n\n\nvar handleHlsLoadedMetadata = function handleHlsLoadedMetadata(qualityLevels, hls) {\n  hls.representations().forEach(function (rep) {\n    qualityLevels.addQualityLevel(rep);\n  });\n  handleHlsMediaChange(qualityLevels, hls.playlists);\n}; // HLS is a source handler, not a tech. Make sure attempts to use it\n// as one do not cause exceptions.\n\n\nHls$1.canPlaySource = function () {\n  return videojs$1.log.warn('HLS is no longer a tech. Please remove it from ' + 'your player\\'s techOrder.');\n};\n\nvar emeKeySystems = function emeKeySystems(keySystemOptions, videoPlaylist, audioPlaylist) {\n  if (!keySystemOptions) {\n    return keySystemOptions;\n  } // upsert the content types based on the selected playlist\n\n\n  var keySystemContentTypes = {};\n\n  for (var keySystem in keySystemOptions) {\n    keySystemContentTypes[keySystem] = {\n      audioContentType: 'audio/mp4; codecs=\"' + audioPlaylist.attributes.CODECS + '\"',\n      videoContentType: 'video/mp4; codecs=\"' + videoPlaylist.attributes.CODECS + '\"'\n    };\n\n    if (videoPlaylist.contentProtection && videoPlaylist.contentProtection[keySystem] && videoPlaylist.contentProtection[keySystem].pssh) {\n      keySystemContentTypes[keySystem].pssh = videoPlaylist.contentProtection[keySystem].pssh;\n    } // videojs-contrib-eme accepts the option of specifying: 'com.some.cdm': 'url'\n    // so we need to prevent overwriting the URL entirely\n\n\n    if (typeof keySystemOptions[keySystem] === 'string') {\n      keySystemContentTypes[keySystem].url = keySystemOptions[keySystem];\n    }\n  }\n\n  return videojs$1.mergeOptions(keySystemOptions, keySystemContentTypes);\n};\n\nvar setupEmeOptions = function setupEmeOptions(hlsHandler) {\n  if (hlsHandler.options_.sourceType !== 'dash') {\n    return;\n  }\n\n  var player = videojs$1.players[hlsHandler.tech_.options_.playerId];\n\n  if (player.eme) {\n    var sourceOptions = emeKeySystems(hlsHandler.source_.keySystems, hlsHandler.playlists.media(), hlsHandler.masterPlaylistController_.mediaTypes_.AUDIO.activePlaylistLoader.media());\n\n    if (sourceOptions) {\n      player.currentSource().keySystems = sourceOptions; // works around https://bugs.chromium.org/p/chromium/issues/detail?id=895449\n\n      if (player.eme.initializeMediaKeys) {\n        player.eme.initializeMediaKeys();\n      }\n    }\n  }\n};\n\nvar getVhsLocalStorage = function getVhsLocalStorage() {\n  if (!window.localStorage) {\n    return null;\n  }\n\n  var storedObject = window.localStorage.getItem(LOCAL_STORAGE_KEY$1);\n\n  if (!storedObject) {\n    return null;\n  }\n\n  try {\n    return JSON.parse(storedObject);\n  } catch (e) {\n    // someone may have tampered with the value\n    return null;\n  }\n};\n\nvar updateVhsLocalStorage = function updateVhsLocalStorage(options) {\n  if (!window.localStorage) {\n    return false;\n  }\n\n  var objectToStore = getVhsLocalStorage();\n  objectToStore = objectToStore ? videojs$1.mergeOptions(objectToStore, options) : options;\n\n  try {\n    window.localStorage.setItem(LOCAL_STORAGE_KEY$1, JSON.stringify(objectToStore));\n  } catch (e) {\n    // Throws if storage is full (e.g., always on iOS 5+ Safari private mode, where\n    // storage is set to 0).\n    // https://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem#Exceptions\n    // No need to perform any operation.\n    return false;\n  }\n\n  return objectToStore;\n};\n/**\n * Whether the browser has built-in HLS support.\n */\n\n\nHls$1.supportsNativeHls = function () {\n  var video = document.createElement('video'); // native HLS is definitely not supported if HTML5 video isn't\n\n  if (!videojs$1.getTech('Html5').isSupported()) {\n    return false;\n  } // HLS manifests can go by many mime-types\n\n\n  var canPlay = [// Apple santioned\n  'application/vnd.apple.mpegurl', // Apple sanctioned for backwards compatibility\n  'audio/mpegurl', // Very common\n  'audio/x-mpegurl', // Very common\n  'application/x-mpegurl', // Included for completeness\n  'video/x-mpegurl', 'video/mpegurl', 'application/mpegurl'];\n  return canPlay.some(function (canItPlay) {\n    return /maybe|probably/i.test(video.canPlayType(canItPlay));\n  });\n}();\n\nHls$1.supportsNativeDash = function () {\n  if (!videojs$1.getTech('Html5').isSupported()) {\n    return false;\n  }\n\n  return /maybe|probably/i.test(document.createElement('video').canPlayType('application/dash+xml'));\n}();\n\nHls$1.supportsTypeNatively = function (type) {\n  if (type === 'hls') {\n    return Hls$1.supportsNativeHls;\n  }\n\n  if (type === 'dash') {\n    return Hls$1.supportsNativeDash;\n  }\n\n  return false;\n};\n/**\n * HLS is a source handler, not a tech. Make sure attempts to use it\n * as one do not cause exceptions.\n */\n\n\nHls$1.isSupported = function () {\n  return videojs$1.log.warn('HLS is no longer a tech. Please remove it from ' + 'your player\\'s techOrder.');\n};\n\nvar Component$1 = videojs$1.getComponent('Component');\n/**\n * The Hls Handler object, where we orchestrate all of the parts\n * of HLS to interact with video.js\n *\n * @class HlsHandler\n * @extends videojs.Component\n * @param {Object} source the soruce object\n * @param {Tech} tech the parent tech object\n * @param {Object} options optional and required options\n */\n\nvar HlsHandler = function (_Component) {\n  inherits(HlsHandler, _Component);\n\n  function HlsHandler(source, tech, options) {\n    classCallCheck(this, HlsHandler); // tech.player() is deprecated but setup a reference to HLS for\n    // backwards-compatibility\n\n    var _this = possibleConstructorReturn(this, (HlsHandler.__proto__ || Object.getPrototypeOf(HlsHandler)).call(this, tech, options.hls));\n\n    if (tech.options_ && tech.options_.playerId) {\n      var _player = videojs$1(tech.options_.playerId);\n\n      if (!_player.hasOwnProperty('hls')) {\n        Object.defineProperty(_player, 'hls', {\n          get: function get$$1() {\n            videojs$1.log.warn('player.hls is deprecated. Use player.tech().hls instead.');\n            tech.trigger({\n              type: 'usage',\n              name: 'hls-player-access'\n            });\n            return _this;\n          },\n          configurable: true\n        });\n      } // Set up a reference to the HlsHandler from player.vhs. This allows users to start\n      // migrating from player.tech_.hls... to player.vhs... for API access. Although this\n      // isn't the most appropriate form of reference for video.js (since all APIs should\n      // be provided through core video.js), it is a common pattern for plugins, and vhs\n      // will act accordingly.\n\n\n      _player.vhs = _this; // deprecated, for backwards compatibility\n\n      _player.dash = _this;\n      _this.player_ = _player;\n    }\n\n    _this.tech_ = tech;\n    _this.source_ = source;\n    _this.stats = {};\n\n    _this.setOptions_();\n\n    if (_this.options_.overrideNative && tech.overrideNativeAudioTracks && tech.overrideNativeVideoTracks) {\n      tech.overrideNativeAudioTracks(true);\n      tech.overrideNativeVideoTracks(true);\n    } else if (_this.options_.overrideNative && (tech.featuresNativeVideoTracks || tech.featuresNativeAudioTracks)) {\n      // overriding native HLS only works if audio tracks have been emulated\n      // error early if we're misconfigured\n      throw new Error('Overriding native HLS requires emulated tracks. ' + 'See https://git.io/vMpjB');\n    } // listen for fullscreenchange events for this player so that we\n    // can adjust our quality selection quickly\n\n\n    _this.on(document, ['fullscreenchange', 'webkitfullscreenchange', 'mozfullscreenchange', 'MSFullscreenChange'], function (event) {\n      var fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement;\n\n      if (fullscreenElement && fullscreenElement.contains(_this.tech_.el())) {\n        _this.masterPlaylistController_.smoothQualityChange_();\n      }\n    }); // Handle seeking when looping - middleware doesn't handle this seek event from the tech\n\n\n    _this.on(_this.tech_, 'seeking', function () {\n      if (this.tech_.currentTime() === 0 && this.tech_.player_.loop()) {\n        this.setCurrentTime(0);\n      }\n    });\n\n    _this.on(_this.tech_, 'error', function () {\n      if (this.masterPlaylistController_) {\n        this.masterPlaylistController_.pauseLoading();\n      }\n    });\n\n    _this.on(_this.tech_, 'play', _this.play);\n\n    return _this;\n  }\n\n  createClass(HlsHandler, [{\n    key: 'setOptions_',\n    value: function setOptions_() {\n      var _this2 = this; // defaults\n\n\n      this.options_.withCredentials = this.options_.withCredentials || false;\n      this.options_.handleManifestRedirects = this.options_.handleManifestRedirects || false;\n      this.options_.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions === false ? false : true;\n      this.options_.smoothQualityChange = this.options_.smoothQualityChange || false;\n      this.options_.useBandwidthFromLocalStorage = typeof this.source_.useBandwidthFromLocalStorage !== 'undefined' ? this.source_.useBandwidthFromLocalStorage : this.options_.useBandwidthFromLocalStorage || false;\n      this.options_.customTagParsers = this.options_.customTagParsers || [];\n      this.options_.customTagMappers = this.options_.customTagMappers || [];\n\n      if (typeof this.options_.blacklistDuration !== 'number') {\n        this.options_.blacklistDuration = 5 * 60;\n      }\n\n      if (typeof this.options_.bandwidth !== 'number') {\n        if (this.options_.useBandwidthFromLocalStorage) {\n          var storedObject = getVhsLocalStorage();\n\n          if (storedObject && storedObject.bandwidth) {\n            this.options_.bandwidth = storedObject.bandwidth;\n            this.tech_.trigger({\n              type: 'usage',\n              name: 'hls-bandwidth-from-local-storage'\n            });\n          }\n\n          if (storedObject && storedObject.throughput) {\n            this.options_.throughput = storedObject.throughput;\n            this.tech_.trigger({\n              type: 'usage',\n              name: 'hls-throughput-from-local-storage'\n            });\n          }\n        }\n      } // if bandwidth was not set by options or pulled from local storage, start playlist\n      // selection at a reasonable bandwidth\n\n\n      if (typeof this.options_.bandwidth !== 'number') {\n        this.options_.bandwidth = Config.INITIAL_BANDWIDTH;\n      } // If the bandwidth number is unchanged from the initial setting\n      // then this takes precedence over the enableLowInitialPlaylist option\n\n\n      this.options_.enableLowInitialPlaylist = this.options_.enableLowInitialPlaylist && this.options_.bandwidth === Config.INITIAL_BANDWIDTH; // grab options passed to player.src\n\n      ['withCredentials', 'limitRenditionByPlayerDimensions', 'bandwidth', 'smoothQualityChange', 'customTagParsers', 'customTagMappers', 'handleManifestRedirects'].forEach(function (option) {\n        if (typeof _this2.source_[option] !== 'undefined') {\n          _this2.options_[option] = _this2.source_[option];\n        }\n      });\n      this.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions;\n    }\n    /**\n     * called when player.src gets called, handle a new source\n     *\n     * @param {Object} src the source object to handle\n     */\n\n  }, {\n    key: 'src',\n    value: function src(_src, type) {\n      var _this3 = this; // do nothing if the src is falsey\n\n\n      if (!_src) {\n        return;\n      }\n\n      this.setOptions_(); // add master playlist controller options\n\n      this.options_.url = this.source_.src;\n      this.options_.tech = this.tech_;\n      this.options_.externHls = Hls$1;\n      this.options_.sourceType = simpleTypeFromSourceType(type); // Whenever we seek internally, we should update both the tech and call our own\n      // setCurrentTime function. This is needed because \"seeking\" events aren't always\n      // reliable. External seeks (via the player object) are handled via middleware.\n\n      this.options_.seekTo = function (time) {\n        _this3.tech_.setCurrentTime(time);\n\n        _this3.setCurrentTime(time);\n      };\n\n      this.masterPlaylistController_ = new MasterPlaylistController(this.options_);\n      this.playbackWatcher_ = new PlaybackWatcher(videojs$1.mergeOptions(this.options_, {\n        seekable: function seekable$$1() {\n          return _this3.seekable();\n        },\n        media: function media() {\n          return _this3.masterPlaylistController_.media();\n        }\n      }));\n      this.masterPlaylistController_.on('error', function () {\n        var player = videojs$1.players[_this3.tech_.options_.playerId];\n        player.error(_this3.masterPlaylistController_.error);\n      }); // `this` in selectPlaylist should be the HlsHandler for backwards\n      // compatibility with < v2\n\n      this.masterPlaylistController_.selectPlaylist = this.selectPlaylist ? this.selectPlaylist.bind(this) : Hls$1.STANDARD_PLAYLIST_SELECTOR.bind(this);\n      this.masterPlaylistController_.selectInitialPlaylist = Hls$1.INITIAL_PLAYLIST_SELECTOR.bind(this); // re-expose some internal objects for backwards compatibility with < v2\n\n      this.playlists = this.masterPlaylistController_.masterPlaylistLoader_;\n      this.mediaSource = this.masterPlaylistController_.mediaSource; // Proxy assignment of some properties to the master playlist\n      // controller. Using a custom property for backwards compatibility\n      // with < v2\n\n      Object.defineProperties(this, {\n        selectPlaylist: {\n          get: function get$$1() {\n            return this.masterPlaylistController_.selectPlaylist;\n          },\n          set: function set$$1(selectPlaylist) {\n            this.masterPlaylistController_.selectPlaylist = selectPlaylist.bind(this);\n          }\n        },\n        throughput: {\n          get: function get$$1() {\n            return this.masterPlaylistController_.mainSegmentLoader_.throughput.rate;\n          },\n          set: function set$$1(throughput) {\n            this.masterPlaylistController_.mainSegmentLoader_.throughput.rate = throughput; // By setting `count` to 1 the throughput value becomes the starting value\n            // for the cumulative average\n\n            this.masterPlaylistController_.mainSegmentLoader_.throughput.count = 1;\n          }\n        },\n        bandwidth: {\n          get: function get$$1() {\n            return this.masterPlaylistController_.mainSegmentLoader_.bandwidth;\n          },\n          set: function set$$1(bandwidth) {\n            this.masterPlaylistController_.mainSegmentLoader_.bandwidth = bandwidth; // setting the bandwidth manually resets the throughput counter\n            // `count` is set to zero that current value of `rate` isn't included\n            // in the cumulative average\n\n            this.masterPlaylistController_.mainSegmentLoader_.throughput = {\n              rate: 0,\n              count: 0\n            };\n          }\n        },\n\n        /**\n         * `systemBandwidth` is a combination of two serial processes bit-rates. The first\n         * is the network bitrate provided by `bandwidth` and the second is the bitrate of\n         * the entire process after that - decryption, transmuxing, and appending - provided\n         * by `throughput`.\n         *\n         * Since the two process are serial, the overall system bandwidth is given by:\n         *   sysBandwidth = 1 / (1 / bandwidth + 1 / throughput)\n         */\n        systemBandwidth: {\n          get: function get$$1() {\n            var invBandwidth = 1 / (this.bandwidth || 1);\n            var invThroughput = void 0;\n\n            if (this.throughput > 0) {\n              invThroughput = 1 / this.throughput;\n            } else {\n              invThroughput = 0;\n            }\n\n            var systemBitrate = Math.floor(1 / (invBandwidth + invThroughput));\n            return systemBitrate;\n          },\n          set: function set$$1() {\n            videojs$1.log.error('The \"systemBandwidth\" property is read-only');\n          }\n        }\n      });\n\n      if (this.options_.bandwidth) {\n        this.bandwidth = this.options_.bandwidth;\n      }\n\n      if (this.options_.throughput) {\n        this.throughput = this.options_.throughput;\n      }\n\n      Object.defineProperties(this.stats, {\n        bandwidth: {\n          get: function get$$1() {\n            return _this3.bandwidth || 0;\n          },\n          enumerable: true\n        },\n        mediaRequests: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaRequests_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsAborted: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaRequestsAborted_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsTimedout: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaRequestsTimedout_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsErrored: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaRequestsErrored_() || 0;\n          },\n          enumerable: true\n        },\n        mediaTransferDuration: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaTransferDuration_() || 0;\n          },\n          enumerable: true\n        },\n        mediaBytesTransferred: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaBytesTransferred_() || 0;\n          },\n          enumerable: true\n        },\n        mediaSecondsLoaded: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaSecondsLoaded_() || 0;\n          },\n          enumerable: true\n        },\n        buffered: {\n          get: function get$$1() {\n            return timeRangesToArray(_this3.tech_.buffered());\n          },\n          enumerable: true\n        },\n        currentTime: {\n          get: function get$$1() {\n            return _this3.tech_.currentTime();\n          },\n          enumerable: true\n        },\n        currentSource: {\n          get: function get$$1() {\n            return _this3.tech_.currentSource_;\n          },\n          enumerable: true\n        },\n        currentTech: {\n          get: function get$$1() {\n            return _this3.tech_.name_;\n          },\n          enumerable: true\n        },\n        duration: {\n          get: function get$$1() {\n            return _this3.tech_.duration();\n          },\n          enumerable: true\n        },\n        master: {\n          get: function get$$1() {\n            return _this3.playlists.master;\n          },\n          enumerable: true\n        },\n        playerDimensions: {\n          get: function get$$1() {\n            return _this3.tech_.currentDimensions();\n          },\n          enumerable: true\n        },\n        seekable: {\n          get: function get$$1() {\n            return timeRangesToArray(_this3.tech_.seekable());\n          },\n          enumerable: true\n        },\n        timestamp: {\n          get: function get$$1() {\n            return Date.now();\n          },\n          enumerable: true\n        },\n        videoPlaybackQuality: {\n          get: function get$$1() {\n            return _this3.tech_.getVideoPlaybackQuality();\n          },\n          enumerable: true\n        }\n      });\n      this.tech_.one('canplay', this.masterPlaylistController_.setupFirstPlay.bind(this.masterPlaylistController_));\n      this.tech_.on('bandwidthupdate', function () {\n        if (_this3.options_.useBandwidthFromLocalStorage) {\n          updateVhsLocalStorage({\n            bandwidth: _this3.bandwidth,\n            throughput: Math.round(_this3.throughput)\n          });\n        }\n      });\n      this.masterPlaylistController_.on('selectedinitialmedia', function () {\n        // Add the manual rendition mix-in to HlsHandler\n        renditionSelectionMixin(_this3);\n        setupEmeOptions(_this3);\n      }); // the bandwidth of the primary segment loader is our best\n      // estimate of overall bandwidth\n\n      this.on(this.masterPlaylistController_, 'progress', function () {\n        this.tech_.trigger('progress');\n      });\n      this.tech_.ready(function () {\n        return _this3.setupQualityLevels_();\n      }); // do nothing if the tech has been disposed already\n      // this can occur if someone sets the src in player.ready(), for instance\n\n      if (!this.tech_.el()) {\n        return;\n      }\n\n      this.tech_.src(videojs$1.URL.createObjectURL(this.masterPlaylistController_.mediaSource));\n    }\n    /**\n     * Initializes the quality levels and sets listeners to update them.\n     *\n     * @method setupQualityLevels_\n     * @private\n     */\n\n  }, {\n    key: 'setupQualityLevels_',\n    value: function setupQualityLevels_() {\n      var _this4 = this;\n\n      var player = videojs$1.players[this.tech_.options_.playerId];\n\n      if (player && player.qualityLevels) {\n        this.qualityLevels_ = player.qualityLevels();\n        this.masterPlaylistController_.on('selectedinitialmedia', function () {\n          handleHlsLoadedMetadata(_this4.qualityLevels_, _this4);\n        });\n        this.playlists.on('mediachange', function () {\n          handleHlsMediaChange(_this4.qualityLevels_, _this4.playlists);\n        });\n      }\n    }\n    /**\n     * Begin playing the video.\n     */\n\n  }, {\n    key: 'play',\n    value: function play() {\n      this.masterPlaylistController_.play();\n    }\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n\n  }, {\n    key: 'setCurrentTime',\n    value: function setCurrentTime(currentTime) {\n      this.masterPlaylistController_.setCurrentTime(currentTime);\n    }\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n\n  }, {\n    key: 'duration',\n    value: function duration$$1() {\n      return this.masterPlaylistController_.duration();\n    }\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n\n  }, {\n    key: 'seekable',\n    value: function seekable$$1() {\n      return this.masterPlaylistController_.seekable();\n    }\n    /**\n     * Abort all outstanding work and cleanup.\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      if (this.playbackWatcher_) {\n        this.playbackWatcher_.dispose();\n      }\n\n      if (this.masterPlaylistController_) {\n        this.masterPlaylistController_.dispose();\n      }\n\n      if (this.qualityLevels_) {\n        this.qualityLevels_.dispose();\n      }\n\n      if (this.player_) {\n        delete this.player_.vhs;\n        delete this.player_.dash;\n        delete this.player_.hls;\n      }\n\n      if (this.tech_ && this.tech_.hls) {\n        delete this.tech_.hls;\n      }\n\n      get$1(HlsHandler.prototype.__proto__ || Object.getPrototypeOf(HlsHandler.prototype), 'dispose', this).call(this);\n    }\n  }, {\n    key: 'convertToProgramTime',\n    value: function convertToProgramTime(time, callback) {\n      return getProgramTime({\n        playlist: this.masterPlaylistController_.media(),\n        time: time,\n        callback: callback\n      });\n    } // the player must be playing before calling this\n\n  }, {\n    key: 'seekToProgramTime',\n    value: function seekToProgramTime$$1(programTime, callback) {\n      var pauseAfterSeek = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var retryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;\n      return seekToProgramTime({\n        programTime: programTime,\n        playlist: this.masterPlaylistController_.media(),\n        retryCount: retryCount,\n        pauseAfterSeek: pauseAfterSeek,\n        seekTo: this.options_.seekTo,\n        tech: this.options_.tech,\n        callback: callback\n      });\n    }\n  }]);\n  return HlsHandler;\n}(Component$1);\n/**\n * The Source Handler object, which informs video.js what additional\n * MIME types are supported and sets up playback. It is registered\n * automatically to the appropriate tech based on the capabilities of\n * the browser it is running in. It is not necessary to use or modify\n * this object in normal usage.\n */\n\n\nvar HlsSourceHandler = {\n  name: 'videojs-http-streaming',\n  VERSION: version$1,\n  canHandleSource: function canHandleSource(srcObj) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var localOptions = videojs$1.mergeOptions(videojs$1.options, options);\n    return HlsSourceHandler.canPlayType(srcObj.type, localOptions);\n  },\n  handleSource: function handleSource(source, tech) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var localOptions = videojs$1.mergeOptions(videojs$1.options, options);\n    tech.hls = new HlsHandler(source, tech, localOptions);\n    tech.hls.xhr = xhrFactory();\n    tech.hls.src(source.src, source.type);\n    return tech.hls;\n  },\n  canPlayType: function canPlayType(type) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _videojs$mergeOptions = videojs$1.mergeOptions(videojs$1.options, options),\n        overrideNative = _videojs$mergeOptions.hls.overrideNative;\n\n    var supportedType = simpleTypeFromSourceType(type);\n    var canUseMsePlayback = supportedType && (!Hls$1.supportsTypeNatively(supportedType) || overrideNative);\n    return canUseMsePlayback ? 'maybe' : '';\n  }\n};\n\nif (typeof videojs$1.MediaSource === 'undefined' || typeof videojs$1.URL === 'undefined') {\n  videojs$1.MediaSource = MediaSource;\n  videojs$1.URL = URL$1;\n} // register source handlers with the appropriate techs\n\n\nif (MediaSource.supportsNativeMediaSources()) {\n  videojs$1.getTech('Html5').registerSourceHandler(HlsSourceHandler, 0);\n}\n\nvideojs$1.HlsHandler = HlsHandler;\nvideojs$1.HlsSourceHandler = HlsSourceHandler;\nvideojs$1.Hls = Hls$1;\n\nif (!videojs$1.use) {\n  videojs$1.registerComponent('Hls', Hls$1);\n}\n\nvideojs$1.options.hls = videojs$1.options.hls || {};\n\nif (videojs$1.registerPlugin) {\n  videojs$1.registerPlugin('reloadSourceOnError', reloadSourceOnError);\n} else {\n  videojs$1.plugin('reloadSourceOnError', reloadSourceOnError);\n}\n\nexport default videojs$1;\n"],"sourceRoot":""}